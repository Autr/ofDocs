{"data":[{"page":{"entry":{"name":"ofVec2f.h","filename":"ofVec2f.h","absolute":"/Users/gilbertsinnott/Code/openFrameworks/libs/openFrameworks/math/ofVec2f.h","path":"/openframeworks/math/ofVec2f_h","route":"/openframeworks/math/ofVec2f.h","dir":"../libs/openFrameworks/math","ext":"h","type":"source","id":295,"parent":284,"breadcrumbs":[284,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofVec3f</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofVec4f</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofMathConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"glm/vec2.hpp\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"glm/fwd.hpp\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f is a class for storing a two dimensional vector. </span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Moving through space requires knowledge of where things are and where they are going.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Vector Maths is the class of mathematics that gives us control over these</span>\n<span class=\"token comment\" spellcheck=\"true\">/// things in space, allowing for elegant and intuitive descriptions of complex</span>\n<span class=\"token comment\" spellcheck=\"true\">/// structures and movement. Vectors are at the heart of animations, particle</span>\n<span class=\"token comment\" spellcheck=\"true\">/// systems, and 2D and 3D graphics.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// Vectors in mathematics in general are entities with magnitude (also called</span>\n<span class=\"token comment\" spellcheck=\"true\">/// length) and direction. A vector whose magnitude is 1 (ie a vector that is</span>\n<span class=\"token comment\" spellcheck=\"true\">/// *normalized*) is called a *unit vector*. Unit vectors are very handy for</span>\n<span class=\"token comment\" spellcheck=\"true\">/// storing directions as they can be easily scaled up (or down) to represent</span>\n<span class=\"token comment\" spellcheck=\"true\">/// motion in a particular direction with a particular length.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// *You will also see the term vector used to describe an array of objects in C++</span>\n<span class=\"token comment\" spellcheck=\"true\">/// (such as text strings). Don't let this confuse you, they are quite different:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// one of them is a mathematical term for a fixed-length list of numbers that</span>\n<span class=\"token comment\" spellcheck=\"true\">/// you can do mathematical operations on, the other is a C++-specific term that</span>\n<span class=\"token comment\" spellcheck=\"true\">/// means 'dynamically sizeable array'.*</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f has two member variables, x and y, which allow to conveniently store</span>\n<span class=\"token comment\" spellcheck=\"true\">/// 2D properties of an object such as its position, velocity, or acceleration.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1; // v1.x is 0, v1.y is 0</span>\n<span class=\"token comment\" spellcheck=\"true\">/// v1.set( 10, 50 ); // now v1.x is 10, v1.y is 50</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// Using ofVec2f greatly simplifies arithmetic operations in two dimensions. For</span>\n<span class=\"token comment\" spellcheck=\"true\">/// example if you have two vectors v1 and v2, both of which represent a 2D change</span>\n<span class=\"token comment\" spellcheck=\"true\">/// in position, you can find the total change of position of both of them just by</span>\n<span class=\"token comment\" spellcheck=\"true\">/// doing an addition v1 + v2:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1(5, 2); // v1 represents walking 5 steps forward then 2 steps sideways</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2;</span>\n<span class=\"token comment\" spellcheck=\"true\">/// v2.set(1, 1); // v2 represents walking 1 step forward then 1 step sideways</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // what happens if you do v1 followed by v2? just add v1 and v2 together:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f result = v1 + v2; // result is 6 steps forward then 3 steps sideways</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// You can scale an ofVec2f by multiplying it with a float:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1(5, 2); // walk 5 steps forward and 2 steps right</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // what happens if we do v1 three times?</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f result = v1 * 3; // result is 15 steps forward and 6 steps right</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// This also works for subtraction and division.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// As you can see this really makes dealing with vectors as easy as dealing with</span>\n<span class=\"token comment\" spellcheck=\"true\">/// single floats or ints, and can reduce the number of lines of code you have to</span>\n<span class=\"token comment\" spellcheck=\"true\">/// write by half, at the same time making your code much easier to read and</span>\n<span class=\"token comment\" spellcheck=\"true\">/// understand!</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofVec3f for 3D vectors</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofVec4f for 4D vectors</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofVec2f</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> DIM <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//// \\endcond</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Stores the `x` component of the vector.</span>\n\t<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Stores the `y` component of the vector.</span>\n\t<span class=\"token keyword\">float</span> y<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Construct a 2D vector</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Construct a 2D vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1; // default: v1.x is 0, v1.y is 0</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2 = ofVec2f(40, 20); // v2.x is 40, v2.y is 20</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v3(0.1, 0.3); // v3.x is 0.1, v3.y is 0.3</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Construct a 2D vector with `x` and `y` set to `scalar`</span>\n\t<span class=\"token keyword\">explicit</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> scalar <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Construct a 2D vector with specific `x` and `y components</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1; // default: v1.x is 0, v1.y is 0</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2 = ofVec2f(40, 20); // v2.x is 40, v2.y is 20</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v3(0.1, 0.3); // v3.x is 0.1, v3.y is 0.3</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param x The x component</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param y The y component</span>\n\t<span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create a 2D vector (ofVec2f) from a 3D vector (ofVec3f) by</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\throwing away the z component of the 3D vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f mom3d(40, 20, 50); // 3d vector </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v(mom3d); // v.x is 40, v.y is 20</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n    <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create a 2D vector (ofVec2f) from a 4D vector (ofVec4f) by throwing away the z</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and w components of the 4D vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec4f mom4d(40, 20, 50, 80); // 4d vector </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v(mom4d); // v.x is 40, v.y is 20</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n    <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec4 <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">operator</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Access components</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns a pointer to the memory position of the first element of the vector (x);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the second element (y) immediately follows it in memory.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1 = ofVec2f(40, 20);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float * v1Ptr = v1.getPtr();</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float x = *(v1Ptr); // x is 40</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float y = *(v1Ptr+1); // y is 20</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This is very useful when using arrays of ofVec2fs to store geometry</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// information, as it allows the vector to be treated as a simple C array of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// floats that can be passed verbatim to OpenGL.     </span>\n\t<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> <span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span>     \n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> <span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Allows to access the x and y components of an ofVec2f as though it is an array</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1 = ofVec2f(40, 20);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float x = v1[0]; // x is 40</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float y = v1[1]; // y is 20</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This function can be handy if you want to do the same operation to both x and</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// y components, as it means you can just make a for loop that repeats twice.</span>\n\t<span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">float</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set x and y components of this vector with just one function call.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1;//#include \"ofConstants.h\"</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//#include \"glm/fwd.hpp\"</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.set(40, 20);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the x and y components of this vector by copying the corresponding values from vec.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1(40, 20);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v2.set(v1); // v2.x is 40, v2.y is 20</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> scalar <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Comparison </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Check for equality between two ofVec2f</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1(40, 20); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2(50, 30); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v3(40, 20); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // ( v1 == v2 ) is false</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // ( v1 == v3 ) is true</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if each component is the same as the corresponding</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// component in vec, ie if x == vec.x and y == vec.y; otherwise returns</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// false.</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Check for inequality between two ofVec2f</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1(40, 20); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2(50, 30); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v3(40, 20); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // ( v1 != v2 ) is true</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // ( v1 != v3 ) is false</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if any component is different to its corresponding</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// component in vec, ie if 'x != vec.x' or 'y != vec.y', otherwise returns</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// false.</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns true if each component is *close enough* to its corresponding</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// component in vec, where what is *close enough* is determined by the value of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// tolerance:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1 = ofVec2f(40, 20);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2 = ofVec2f(40.01, 19.999);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // v1.match(v2, 0.1) returns true</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // v1.match(v2, 0.001) returns false</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This is handy if, for example, you want to find out when a point becomes</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// *close enough* to another point to trigger an event.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">match</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance <span class=\"token operator\">=</span> <span class=\"token number\">0.0001f</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Determine if two vectors are aligned</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// </span>\n    <span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1 = ofVec2f(40, 20);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2 = ofVec2f(4, 2);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.isAligned(v2) // returns true</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param vec The vector to compare alignment with</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param tolerance an angle tolerance/threshold (specified in degrees) for deciding if the vectors are sufficiently aligned.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns true if both vectors are aligned (pointing in the same direction). </span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isAligned</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance <span class=\"token operator\">=</span> <span class=\"token number\">0.0001f</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Determine if two vectors are aligned with tolerance in radians</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param vec The vector to compare alignment with</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param tolerance an angle tolerance/threshold (specified in radians) for deciding if the vectors are sufficiently aligned.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\sa isAligned()</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isAlignedRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance <span class=\"token operator\">=</span> <span class=\"token number\">0.0001f</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Determine if two vectors are aligned</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// </span>\n    <span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1 = ofVec2f(40, 20);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2 = ofVec2f(4, 2);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.align(v2) // returns true</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param vec The vector to compare alignment with</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param tolerance an angle tolerance/threshold (specified in degrees) for deciding if the vectors are sufficiently aligned.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns true if both vectors are aligned (pointing in the same direction). </span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">align</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance <span class=\"token operator\">=</span> <span class=\"token number\">0.0001f</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Determine if two vectors are aligned with tolerance in radians</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param vec The vector to compare alignment with</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param tolerance an angle tolerance/threshold (specified in radians) for deciding if the vectors are sufficiently aligned.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\sa align()</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">alignRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance <span class=\"token operator\">=</span> <span class=\"token number\">0.0001f</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Operators</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Super easy vector addition. Returns a new vector (x+vec.x,y+vec.y).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1 = ofVec2f(40, 20); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2 = ofVec2f(25, 50);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v3 = v1 + v2; // v3 is (65, 70)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    ofVec2f  <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns a new vector with a float value f added to both x and y members.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1(2, 5);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2 = v1 + 10; // (12, 15)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    ofVec2f  <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Super easy addition assignment. Adds vec.x to x, and adds vec.y to y.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1 = ofVec2f(40, 20); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2 = ofVec2f(25, 50);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1 += v2; // v1 is (65, 70)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    ofVec2f<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Adds a float value f to both x and y members.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1(2, 5);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1 += 10; // (12, 15)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    ofVec2f<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Super easy vector subtraction. Returns a new vector (x-vec.x,y-vec.y).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1 = ofVec2f(40, 20); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2 = ofVec2f(25, 50);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v3 = v1 - v2; // v3 is (15, -30)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    ofVec2f  <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns a new vector with a float value f subtracted from both x and y members.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1(2, 5);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2 = v1 - 10; // (-8, -5)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    ofVec2f  <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns a new ofVec2f that is the inverted version (mirrored in X and Y) of this vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1(2, 5);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2 = -v1; // (-2, -5)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~    </span>\n    ofVec2f  <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Super easy subtraction assignment. Subtracts vec.x from x, and subtracts vec.y from y.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1 = ofVec2f(40, 20); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2 = ofVec2f(25, 50);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1 -= v2; // v1 is (15, -30)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    ofVec2f<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Subtract a float value f from both x and y members.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1(2, 5);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1 -= 10; // (-8, -5)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\tofVec2f<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns a new vector (x*vec.x , y*vec.y).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1 = ofVec2f(40, 20); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2 = ofVec2f(2, 4);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v3 = v1 * v2; // (80, 80)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Useful for scaling a 2D point by a non-uniform scale.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n    ofVec2f  <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Return a new ofVec2f that is this vector scaled by multiplying both x</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and y members by the float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1(2, 5);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2 = v1 * 4; // (8, 20)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    ofVec2f  <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Multiplies x by vec.x, and multiplies y by vec.y.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1 = ofVec2f(40, 20); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2 = ofVec2f(2, 4);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1 *= v2; // v1 is now (80, 80)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Useful for scaling a 2D point by a non-uniform scale.</span>\n    ofVec2f<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Scale this vector by multiplying both x and y members by f.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1(2, 5);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1 *= 4; // (8, 20)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    ofVec2f<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns a new vector (x/vec.x,y/vec.y).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1 = ofVec2f(40, 20); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2 = ofVec2f(2, 4);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v3 = v1 / v2; // (20, 5)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Useful for scaling a 2D point by a non-uniform scale.</span>\n    ofVec2f  <span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Return a new ofVec2f that is this vector scaled by dividing</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// both x and y members by f.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1(2, 5);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2 = v1 / 4; // (0.5, 1.25)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    ofVec2f  <span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Divides x by vec.x, and divides y by vec.y.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1 = ofVec2f(40, 20); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2 = ofVec2f(2, 4);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1 *= v2; // v1 is now (20, 5)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Useful for scaling a 2D point by a non-uniform scale.</span>\n    ofVec2f<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Scale this vector by dividing both x and y members by f.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1(2, 5);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1 /= 4; // (0.5, 1.25)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    ofVec2f<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n\t<span class=\"token keyword\">friend</span> std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">friend</span> std<span class=\"token operator\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Simple manipulations</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Return a new ofVec2f that is the result of scaling this vector up or down so</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// that it has the requested length.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1( 3, 4 ); // length is 5</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2 = v1.getScaled( 15 ); // ( 9, 12 ), length is now 15</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~ofVec2f  </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa scale()</span>\n    ofVec2f  <span class=\"token function\">getScaled</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Scales this vector up or down so that it has the requested length.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1( 3, 4 ); // length is 5</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.scale( 15 ); // v1 is now (9, 12), with length 15</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa getScaled()</span>\n    ofVec2f<span class=\"token operator\">&amp;</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns a new vector that is the result of rotating this vector </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// by 'angle' degrees about the origin.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1(1, 0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2 = v1.getRotated(45); // v2 is (0.707, 0.707)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa getRotatedRad()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa rotate()</span>\n    ofVec2f  <span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns a new vector that is the result of rotating this vector</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// by 'angle' degrees about the point 'pivot'.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n    ofVec2f  <span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pivot <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns a new vector that is the result of rotating this vector </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// by 'angle' radians about the origin.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1(1, 0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2 = v1.getRotatedRad(PI / 4); // v2 is (0.707, 0.707)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     </span>\n    ofVec2f  <span class=\"token function\">getRotatedRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns a new vector that is the result of rotating this vector</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// by 'angle' radians about the origin. </span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n    ofVec2f  <span class=\"token function\">getRotatedRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pivot <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Rotates this vector by 'angle' degrees about the origin.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1(1, 0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.rotate(45); // v1 is now (0.707, 0.707)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa getRotated()</span>\n    ofVec2f<span class=\"token operator\">&amp;</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Rotates this vector by 'angle' degrees about the point 'pivot'.</span>\n    ofVec2f<span class=\"token operator\">&amp;</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pivot <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Rotates this vector by 'angle' radians about the origin.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1(1, 0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.rotateRad(PI / 4); // v1 is now (0.707, 0.707)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa getRotatedRad()</span>\n    ofVec2f<span class=\"token operator\">&amp;</span> <span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Rotates this vector by 'angle' radians about the point 'pivot'.</span>\n\tofVec2f<span class=\"token operator\">&amp;</span> <span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pivot <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get vector mapped to new coordinate system</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// In most cases you want `vx` and `vy` to be perpendicular and of unit length; if</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// they are not perpendicular you will have shearing as part of the mapping, and</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// if they are not of unit length you will have scaling as part of the mapping.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns A new ofVec2f calculated by copying this vector and then mapping from</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// its default coordinate system -- origin (0,0), X direction (1,0), Y direction</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// (0,1) -- to a new coordinate system defined with origin at origin, X direction</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// vx, and Y direction vy.</span>\n    ofVec2f <span class=\"token function\">getMapped</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> origin<span class=\"token punctuation\">,</span>\n\t\t\t\t\t  <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vx<span class=\"token punctuation\">,</span>\n\t\t\t\t\t  <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vy <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Maps this vector from its default coordinate system -- origin (0,0), X</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// direction (1,0), Y direction (0,1) -- to a new coordinate system defined with</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// origin at origin, X direction vx, and Y direction vy.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// In most case you want vx and vy to be perpendicular and of unit length; if</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// they are not perpendicular you will have shearing as part of the mapping, and</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// if they are not of unit length you will have scaling as part of the mapping.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa perpendicular()</span>\n    ofVec2f<span class=\"token operator\">&amp;</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> origin<span class=\"token punctuation\">,</span>\n\t\t\t\t <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vy <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Distance</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Distance between two points.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Treats both this vector and pnt as points in 2D space, and calculates and</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// returns the distance between them.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f p1( 3, 4 );</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f p2( 6, 8 );</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float distance = p1.distance( p2 ); // distance is 5</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Distance involves a square root calculation, which is one of the slowest</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// things you can do in programming. If you don't need an exact number but rather</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// just a rough idea of distance (for example when finding the shortest distance</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// of a bunch of points to a reference point, where it doesn't matter exactly</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// what the distances are, you just want the shortest), you can use</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// squareDistance() instead.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pnt The point to calculate the distance to</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The distance as float</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa squareDistance()</span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pnt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Distance between two points squared.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Treats both this vector and pnt as points in 2D space, and calculates and</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// returns the squared distance between them.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f p1( 3, 4 );</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f p2( 6, 8 );</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float distance = p1.distance( p2 ); // distance is 5</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Use as a much faster alternative to [distance](#distance) if you don't need to</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// know an exact number but rather just a rough idea of distance (for example</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// when finding the shortest distance of a bunch of points to a reference point,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// where it doesn't matter exactly what the distances are, you just want the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// shortest). It avoids the square root calculation that is ordinarily required</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// to calculate a length.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The distance squared as float</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa distance()</span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">squareDistance</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Interpolation</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Linear interpolation</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Perform a linear interpolation of this vector's position towards pnt</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and return the interpolated position without altering the original</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// vector. </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// `p` is normally between 0 and 1 and where 0 means stay the original position and 1</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// means move all the way to pnt, but you can also have p greater than 1</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// overshoot pnt, or less than 0 to move backwards away from pnt.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1( 0, 5 );</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2( 10, 10 );</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v3 = v1.getInterpolated( v2, 0.5 ); // v3 is (5, 7.5)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v4 = v1.getInterpolated( v2, 0.8 ); // v4 is (8, 9)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pnt The point to move towards</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param p The amount to move towards pnt</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa interpolate()</span>\n    ofVec2f   <span class=\"token function\">getInterpolated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> p <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Linear interpolation</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Perform a linear interpolation of this vector's position towards pnt. p</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// controls the amount to move towards pnt. p is normally between 0 and 1 and</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// where 0 means stay the original position and 1 means move all the way to pnt,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// but you can also have p greater than 1 overshoot pnt, or less than 0 to move</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// backwards away from pnt.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1( 0, 5 );</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2( 10, 10 );</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // go go gadget zeno</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.interpolate( v2, 0.5 ); // v1 is now (5, 7.5)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.interpolate( v2, 0.5 ); // v1 is now (7.5, 8.75)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.interpolate( v2, 0.5 ); // v1 is now (8.75, 9.375)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.interpolate( v2, 0.5 ); // v1 is now (9.375, 9.6875)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa getInterpolated()</span>\n    ofVec2f<span class=\"token operator\">&amp;</span>  <span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> p <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculate and return the midpoint between this vector and pnt.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1(5, 0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2(10, 10);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f mid = v1.getMiddle(v2); // mid gets (7.5, 5)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pnt The vector to find the middle to</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The middle between this vector and `pnt`</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa middle()</span>\n    ofVec2f   <span class=\"token function\">getMiddle</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set this vector to the midpoint between itself and pnt.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1( 0, 5 );</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2( 10, 10 );</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.middle( v2 ); // v1 is now (5, 7.5)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.middle( v2 ); // v1 is now (7.5, 8.75)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.middle( v2 ); // v1 is now (8.75, 9.375)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.middle( v2 ); // v1 is now (9.375, 9.6875)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~    </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa getMiddle()</span>\n    ofVec2f<span class=\"token operator\">&amp;</span>  <span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Average vector over an array of points </span>\n\t<span class=\"token comment\" spellcheck=\"true\">///  </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Sets this vector to be the average (*centre of gravity* or *centroid*) </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// of a given array of ofVec2f. </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// int numPoints = 10;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f points[numPoints];</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// for ( int i=0; i&lt;numPoints; i++ ) {</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \tpoints[i].set( ofRandom(0,100), ofRandom(0,100) );</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f centroid;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// centroid.average( points, numPoints ); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // centroid now is the centre of gravity/average of all the random points</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param points The array of ofVec2f to avarage over</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param num specifies the number of ofVec2f in the array.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns Vector that is the avarage of the points in the array</span>\n    ofVec2f<span class=\"token operator\">&amp;</span>  <span class=\"token function\">average</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">*</span> points<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t num <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Limit</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns a normalized copy of this vector. </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \t</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// *Normalization* means to scale the vector so that its length</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// (magnitude) is exactly 1, at which stage all that is left is the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// direction. A normalized vector is usually called a *unit vector*, and</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// can be used to represent a pure direction (heading).\t</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1(5, 0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1Normalized = v1.getNormalized(); // (1, 0)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2(5, 5);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2Normalized = v2.getNormalized(); // (√2, √2)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    ofVec2f  <span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Normalize the vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// *Normalizing* means to scale the vector so that its length (magnitude) is</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// exactly 1, at which stage all that is left is the direction. A normalized</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// vector is usually called a *unit vector*, and can be used to represent a pure</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// direction (heading).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1(5, 0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.normalize(); // v2 is now (1, 0)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2(5, 5);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v2.normalize(); // v2 is now (√2, √2)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa getNormalized()</span>\n    ofVec2f<span class=\"token operator\">&amp;</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\n    \n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Get vector limited by length</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1(5, 1); // length is about 5.1</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2(2, 1); // length is about 2.2</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1Limited = v1.getLimited(3); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // v1Limited is (2.9417, 0.58835) which has length of 3 in the same direction as v1</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2Limited = v2.getLimited(3);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // v2Limited is (2, 1) (same as v2)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa limit()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param max The maximum length of the vector to return</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns A copy of this vector with its length (magnitude) restricted to a</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// maximum of max units by scaling down if necessary.</span>\n\tofVec2f  <span class=\"token function\">getLimited</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> max<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\n   \t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Restrict the length (magnitude) of this vector to a maximum of max units by scaling down if necessary.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1(5, 1); // length is about 5.1</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2(2, 1); // length is about 2.2</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.limit(3); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // v1 is now (2.9417, 0.58835) which has length of 3 in the same direction as at initialization</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v2.limit(3);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // v2 is unchanged</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa limit()</span>\n    ofVec2f<span class=\"token operator\">&amp;</span> <span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Measurement</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Return the length (magnitude) of this vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v(3, 4);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float len = v.length(); // len is 5 (3,4,5 triangle)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// length() involves a square root calculation, which is one of the slowest things</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// you can do in programming. If you don't need an exact number but rather just a</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// rough idea of a length (for example when finding the shortest distance of a</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// bunch of points to a reference point, where it doesn't matter exactly what the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// lengths are, you just want the shortest), you can use</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// lengthSquared() instead.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa lengthSquared()</span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Return the squared length (squared magnitude) of this vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v(3, 4);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float len = v.length(); // len is 5 (3,4,5 triangle)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Use as a much faster alternative to length() if you don't</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// need to know an accurate length but rather just a rough idea of a</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// length (for example when finding the shortest distance of a bunch of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// points to a reference point, where it doesn't matter exactly what the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// lengths are, you just want the shortest). It avoids the square root</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// calculation that is ordinarily required to calculate a length.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa length()</span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">lengthSquared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculate the angle to another vector in degrees</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1(1,0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2(0,1);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float angle = v1.angle(v2); // angle is 90</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param vec The vector to calculate the angle to</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The angle in degrees (-180...180)</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">angle</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculate the angle to another vector in radians</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v1(1,0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v2(0,1);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float angle = v1.angleRad(v2); // angle is HALF_PI</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param vec The vector to calculate the angle to</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The angle in radians (-PI...PI)</span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">angleRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Perpendicular</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Return the *normalized* ofVec2f that is perpendicular to this vector</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// (ie rotated 90 degrees and normalized).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ![PERPENDICULAR](math/perpendicular.png)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Image courtesy of Wikipedia</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v(2, 5);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f u = v.getPerpendicular(); // u is (0.928, -0.371)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa perpendicular()</span>\n    ofVec2f  <span class=\"token function\">getPerpendicular</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set this vector to its own **normalized** perpendicular (by</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// rotating 90 degrees and normalizing).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ![PERPENDICULAR](math/perpendicular.png)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Image courtesy of Wikipedia</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f v(2, 5);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v.perpendicular(); // v is (0.928, -0.371)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa getPerpendicular()</span>\n\tofVec2f<span class=\"token operator\">&amp;</span> <span class=\"token function\">perpendicular</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns the dot product of this vector with 'vec'.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The *dot product* of two vectors, also known as the *scalar product*, is</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the product of the magnitude of the two vectors and the cosine of the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// angle between them.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// One interpretation of the dot product is as a measure of how closely two</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// vectors align with each other. If they point in exactly the same</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// direction, their dot product will simply be the product of their</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// magnitudes, if they are perpendicular, their dot product will be 0, and</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// if they point in opposite directions, their dot product will be</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// negative.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The dot product is in contrast to the *cross product*, which returns a</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// vector rather than a scalar.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f a1(2, 0); // magnitude 2, parallel to x-axis</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f b1(3, 4); // magnitude 5, 53.13 degree angle to a1</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float dot = a1.dot(b1); // dot is 2 * 5 * cos(53.13) = 6.0</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f a2(1, 0); // magnitude 1, parallel to x-axis</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f b2(0, 1); // magnitude 1, 90 degree angle to a2</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// dot = a2.dot(b2); // dot is 1 * 1 * cos(90) = 0.0</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f a3(0, 1); // magnitude 1, parallel to y-axis</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec2f b3(0, -1); // magnitude 1, 180 degree angle to a3</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// dot = a3.dot(b3); // dot is 1 * 1 * cos(180) = -1.0</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">dot</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\n\n    <span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------</span>\n    <span class=\"token comment\" spellcheck=\"true\">// this methods are deprecated in 006 please dont use:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// getScaled</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method getScaled() instead.\"</span><span class=\"token punctuation\">,</span> ofVec2f <span class=\"token function\">rescaled</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">// scale</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method scale() instead.\"</span><span class=\"token punctuation\">,</span> ofVec2f<span class=\"token operator\">&amp;</span> <span class=\"token function\">rescale</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">// getRotated</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method getRotated() instead.\"</span><span class=\"token punctuation\">,</span> ofVec2f <span class=\"token function\">rotated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">// getNormalized</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method getNormalized() instead.\"</span><span class=\"token punctuation\">,</span> ofVec2f <span class=\"token function\">normalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">// getLimited</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method getLimited() instead.\"</span><span class=\"token punctuation\">,</span> ofVec2f <span class=\"token function\">limited</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> max<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">// getPerpendicular</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method getPerpendicular() instead.\"</span><span class=\"token punctuation\">,</span> ofVec2f <span class=\"token function\">perpendiculared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">// getInterpolated</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method getInterpolated() instead.\"</span><span class=\"token punctuation\">,</span> ofVec2f <span class=\"token function\">interpolated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> p <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">// getMiddled</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method getMiddled() instead.\"</span><span class=\"token punctuation\">,</span> ofVec2f <span class=\"token function\">middled</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">// getMapped </span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method getMapped() instead.\"</span><span class=\"token punctuation\">,</span> ofVec2f <span class=\"token function\">mapped</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> origin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vy <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">// squareDistance</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method squareDistance() instead.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token function\">distanceSquared</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">// use getRotated</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method getRotated() instead.\"</span><span class=\"token punctuation\">,</span> ofVec2f <span class=\"token function\">rotated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pivot <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n    \n    <span class=\"token comment\" spellcheck=\"true\">// return all zero vector</span>\n    <span class=\"token keyword\">static</span> ofVec2f <span class=\"token function\">zero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// return all one vector</span>\n    <span class=\"token keyword\">static</span> ofVec2f <span class=\"token function\">one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Non-Member operators</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\nofVec2f <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">/////////////////</span>\n<span class=\"token comment\" spellcheck=\"true\">// Implementation</span>\n<span class=\"token comment\" spellcheck=\"true\">/////////////////</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n\n\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> _scalar <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>_scalar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>_scalar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> _x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _y <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>_x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>_y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Getters and Setters.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> _scalar <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">=</span> _scalar<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> _scalar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> _x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _y <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">=</span> _x<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> _y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec2</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Check similarity/equality.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">!=</span> vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> tolerance<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> tolerance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">// Checks if vectors look in the same direction.</span>\n<span class=\"token comment\" spellcheck=\"true\">// Tolerance is specified in degree.</span>\n \n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">isAligned</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> \n\t<span class=\"token keyword\">return</span>  <span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">angle</span><span class=\"token punctuation\">(</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> tolerance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">align</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">isAligned</span><span class=\"token punctuation\">(</span> vec<span class=\"token punctuation\">,</span> tolerance <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">isAlignedRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span>  <span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">angleRad</span><span class=\"token punctuation\">(</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> tolerance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">alignRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">isAlignedRad</span><span class=\"token punctuation\">(</span> vec<span class=\"token punctuation\">,</span> tolerance <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Overloading for any type to any type</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">+</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> y<span class=\"token operator\">+</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">&amp;</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">+</span><span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">+</span><span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> y<span class=\"token operator\">-</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">&amp;</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">-</span><span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">-</span><span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> y<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">&amp;</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx<span class=\"token operator\">*</span><span class=\"token operator\">=</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\ty<span class=\"token operator\">*</span><span class=\"token operator\">=</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span> vec<span class=\"token punctuation\">.</span>x<span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">?</span> x<span class=\"token operator\">/</span>vec<span class=\"token punctuation\">.</span>x <span class=\"token operator\">:</span> x <span class=\"token punctuation\">,</span> vec<span class=\"token punctuation\">.</span>y<span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">?</span> y<span class=\"token operator\">/</span>vec<span class=\"token punctuation\">.</span>y <span class=\"token operator\">:</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">&amp;</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tvec<span class=\"token punctuation\">.</span>x<span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">?</span> x<span class=\"token operator\">/</span><span class=\"token operator\">=</span>vec<span class=\"token punctuation\">.</span>x <span class=\"token operator\">:</span> x<span class=\"token punctuation\">;</span>\n\tvec<span class=\"token punctuation\">.</span>y<span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">?</span> y<span class=\"token operator\">/</span><span class=\"token operator\">=</span>vec<span class=\"token punctuation\">.</span>y <span class=\"token operator\">:</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tos <span class=\"token operator\">&lt;&lt;</span> vec<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> os<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> std<span class=\"token operator\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> ofVec2f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tis <span class=\"token operator\">>></span> vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\tis<span class=\"token punctuation\">.</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tis <span class=\"token operator\">>></span> vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> is<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//operator overloading for float</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//inline void ofVec2f::operator=( const float f){</span>\n<span class=\"token comment\" spellcheck=\"true\">//\tx = f;</span>\n<span class=\"token comment\" spellcheck=\"true\">//\ty = f;</span>\n<span class=\"token comment\" spellcheck=\"true\">//}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">+</span>f<span class=\"token punctuation\">,</span> y<span class=\"token operator\">+</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">&amp;</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">+</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">+</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">-</span>f<span class=\"token punctuation\">,</span> y<span class=\"token operator\">-</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">&amp;</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">-</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">-</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>f<span class=\"token punctuation\">,</span> y<span class=\"token operator\">*</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">&amp;</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx<span class=\"token operator\">*</span><span class=\"token operator\">=</span>f<span class=\"token punctuation\">;</span>\n\ty<span class=\"token operator\">*</span><span class=\"token operator\">=</span>f<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">/</span>f<span class=\"token punctuation\">,</span> y<span class=\"token operator\">/</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">&amp;</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\n\tx<span class=\"token operator\">/</span><span class=\"token operator\">=</span>f<span class=\"token punctuation\">;</span>\n\ty<span class=\"token operator\">/</span><span class=\"token operator\">=</span>f<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">rescaled</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getScaled</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">getScaled</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> l <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> l <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">/</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>length<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">/</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>length <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">&amp;</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">rescale</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">&amp;</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> l <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">/</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>length<span class=\"token punctuation\">;</span>\n\t\ty <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">/</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>length<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Rotation</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">rotated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>angle<span class=\"token operator\">*</span>DEG_TO_RAD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> y<span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t   x<span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">getRotatedRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> angle<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> y<span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t   x<span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">&amp;</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>angle <span class=\"token operator\">*</span> DEG_TO_RAD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> xrot <span class=\"token operator\">=</span> x<span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> y<span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> x<span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tx <span class=\"token operator\">=</span> xrot<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">&amp;</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> angle<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> xrot <span class=\"token operator\">=</span> x<span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> y<span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> x<span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tx <span class=\"token operator\">=</span> xrot<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Rotate point by angle (deg) around pivot point.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// This method is deprecated in 006 please use getRotated instead</span>\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">rotated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pivot <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">,</span> pivot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pivot <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>angle <span class=\"token operator\">*</span> DEG_TO_RAD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span>pivot<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">-</span>pivot<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pivot<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>\n\t\t\t\t   <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span>pivot<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">-</span>pivot<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pivot<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">&amp;</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pivot <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>angle <span class=\"token operator\">*</span> DEG_TO_RAD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> xrot <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span>pivot<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">-</span>pivot<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pivot<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span>pivot<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">-</span>pivot<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pivot<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\tx <span class=\"token operator\">=</span> xrot<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">getRotatedRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pivot <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> angle<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span>pivot<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">-</span>pivot<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pivot<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>\n\t\t\t\t   <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span>pivot<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">-</span>pivot<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pivot<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">&amp;</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pivot <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> angle<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> xrot <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span>pivot<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">-</span>pivot<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pivot<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span>pivot<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">-</span>pivot<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pivot<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\tx <span class=\"token operator\">=</span> xrot<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Map point to coordinate system defined by origin, vx, and vy.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// This method is deprecated in 006 please use getMapped instead</span>\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">mapped</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> origin<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t   <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vx<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t   <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vy <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getMapped</span><span class=\"token punctuation\">(</span>origin<span class=\"token punctuation\">,</span> vx<span class=\"token punctuation\">,</span> vy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">getMapped</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> origin<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t  <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vx<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t  <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vy <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span> origin<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> x<span class=\"token operator\">*</span>vx<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>vy<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>\n\t\t\t\t   origin<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> x<span class=\"token operator\">*</span>vx<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>vy<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">&amp;</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> origin<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vy <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> xmap <span class=\"token operator\">=</span> origin<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> x<span class=\"token operator\">*</span>vx<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>vy<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> origin<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> x<span class=\"token operator\">*</span>vx<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>vy<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\tx <span class=\"token operator\">=</span> xmap<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Distance between two points.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">float</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pnt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> vx <span class=\"token operator\">=</span> x<span class=\"token operator\">-</span>pnt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> vy <span class=\"token operator\">=</span> y<span class=\"token operator\">-</span>pnt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>vx<span class=\"token operator\">*</span>vx <span class=\"token operator\">+</span> vy<span class=\"token operator\">*</span>vy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//this method is deprecated in 006 please use squareDistance</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">float</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">distanceSquared</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">squareDistance</span><span class=\"token punctuation\">(</span>pnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">float</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">squareDistance</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> vx <span class=\"token operator\">=</span> x<span class=\"token operator\">-</span>pnt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> vy <span class=\"token operator\">=</span> y<span class=\"token operator\">-</span>pnt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> vx<span class=\"token operator\">*</span>vx <span class=\"token operator\">+</span> vy<span class=\"token operator\">*</span>vy<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Linear interpolation.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">// p==0.0 results in this point, p==0.5 results in the</span>\n<span class=\"token comment\" spellcheck=\"true\">// midpoint, and p==1.0 results in pnt being returned.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// this method is deprecated in 006 please use getInterpolated</span>\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">interpolated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> p <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getInterpolated</span><span class=\"token punctuation\">(</span>pnt<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">getInterpolated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> p <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pnt<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pnt<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>p <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">&amp;</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> p <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">=</span> x<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pnt<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pnt<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// this method is deprecated in 006 please use getMiddle</span>\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">middled</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getMiddle</span><span class=\"token punctuation\">(</span>pnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">getMiddle</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>pnt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2.0f</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span>pnt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2.0f</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">&amp;</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>pnt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2.0f</span><span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span>pnt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2.0f</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n\n\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">&amp;</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">average</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">*</span> points<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t num <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> std<span class=\"token operator\">::</span>size_t i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tx <span class=\"token operator\">+</span><span class=\"token operator\">=</span> points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\t\ty <span class=\"token operator\">+</span><span class=\"token operator\">=</span> points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tx <span class=\"token operator\">/</span><span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">/</span><span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Normalization</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">normalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> length <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">/</span>length<span class=\"token punctuation\">,</span> y<span class=\"token operator\">/</span>length <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">&amp;</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> length <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tx <span class=\"token operator\">/</span><span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n\t\ty <span class=\"token operator\">/</span><span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Limit length.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">limited</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> max<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getLimited</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">getLimited</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> max<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    ofVec2f limited<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> lengthSquared <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> lengthSquared <span class=\"token operator\">></span> max<span class=\"token operator\">*</span>max <span class=\"token operator\">&amp;&amp;</span> lengthSquared <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">float</span> ratio <span class=\"token operator\">=</span> max<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>lengthSquared<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        limited<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">*</span>ratio<span class=\"token punctuation\">,</span> y<span class=\"token operator\">*</span>ratio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        limited<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> limited<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">&amp;</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">float</span> lengthSquared <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> lengthSquared <span class=\"token operator\">></span> max<span class=\"token operator\">*</span>max <span class=\"token operator\">&amp;&amp;</span> lengthSquared <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">float</span> ratio <span class=\"token operator\">=</span> max<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>lengthSquared<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        x <span class=\"token operator\">*</span><span class=\"token operator\">=</span> ratio<span class=\"token punctuation\">;</span>\n        y <span class=\"token operator\">*</span><span class=\"token operator\">=</span> ratio<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Perpendicular normalized vector.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">perpendiculared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getPerpendicular</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">getPerpendicular</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> length <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">/</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x<span class=\"token operator\">/</span>length <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f<span class=\"token operator\">&amp;</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">perpendicular</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> length <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">float</span> _x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t\tx <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">/</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ty <span class=\"token operator\">=</span> _x<span class=\"token operator\">/</span>length<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Length</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">float</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">float</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">lengthSquared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">float</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">angle</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">atan2</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token operator\">-</span>y<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> x<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>RAD_TO_DEG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">float</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">angleRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">atan2</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token operator\">-</span>y<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> x<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">float</span> ofVec2f<span class=\"token operator\">::</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> x<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Non-Member operators</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> ofVec2f <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span> f<span class=\"token operator\">+</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> f<span class=\"token operator\">+</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span> f<span class=\"token operator\">-</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> f<span class=\"token operator\">-</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span> f<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> f<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec2f <span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span> f<span class=\"token operator\">/</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> f<span class=\"token operator\">/</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n","type":"source"}}],"fetch":[]}