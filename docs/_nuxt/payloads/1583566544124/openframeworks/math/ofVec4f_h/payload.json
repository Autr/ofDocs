{"data":[{"page":{"entry":{"name":"ofVec4f.h","filename":"ofVec4f.h","absolute":"/Users/gilbertsinnott/Code/openFrameworks/libs/openFrameworks/math/ofVec4f.h","path":"/openframeworks/math/ofVec4f_h","route":"/openframeworks/math/ofVec4f.h","dir":"../libs/openFrameworks/math","ext":"h","type":"source","id":298,"parent":284,"breadcrumbs":[284,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofVec2f</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofVec3f</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"glm/vec4.hpp\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"glm/fwd.hpp\"</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofVec4f</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> DIM <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n\t\n\t<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> z<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> w<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Construct a 4D vector</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n    \n\t<span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">explicit</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> _scalar <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> _x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _w <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec4<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">operator</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Access components</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t\n\t<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> <span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> <span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">float</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> _scalar <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> _x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _w <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Comparison </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\n    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">match</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance <span class=\"token operator\">=</span> <span class=\"token number\">0.0001f</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Operators</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n    ofVec4f  <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    ofVec4f  <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    ofVec4f<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofVec4f<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofVec4f  <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    ofVec4f  <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    ofVec4f  <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    ofVec4f<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofVec4f<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\n    ofVec4f  <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    ofVec4f  <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    ofVec4f<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofVec4f<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofVec4f  <span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    ofVec4f  <span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    ofVec4f<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofVec4f<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    \n\t<span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n\t<span class=\"token keyword\">friend</span> std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">friend</span> std<span class=\"token operator\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Simple manipulations</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns a new ofVec4f that is the result of scaling this vector up or down so that it has the requested length.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param length The desired length of the new ofVec4f object.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns The result of scaling the this vector up or down.</span>\n    ofVec4f  <span class=\"token function\">getScaled</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Scales this vector up or down so that it has the requested length.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param length The desired length of the vector.</span>\n    ofVec4f<span class=\"token operator\">&amp;</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Distance</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Treats this vector and 'pnt' as points in 4D space and calculates the distance between them.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param pnt The vector used in the distance calculation with the current vector.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns The distance between the two vectors in 4D space.</span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> pnt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">squareDistance</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Interpolation</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Performs a linear interpolation of this vector towards 'pnt'.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param pnt The vector the interpolation will be performed on. </span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param p The amount to move towards 'pnt'; 'p' is normally between 0 and 1 and where 0 means stay the original position and 1 means move all the way to 'pnt', but you can also have 'p' greater than 1 overshoot 'pnt', or less than 0 to move backwards away from 'pnt'.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns The interpolation as an ofVec4f. </span>\n    ofVec4f   <span class=\"token function\">getInterpolated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> pnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> p <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Performs a linear interpolation of this vector towards 'pnt'. This modifies the current vector to the interpolated value.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param pnt The vector the interpolation will be performed on. </span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param p The amount to move towards 'pnt'; 'p' is normally between 0 and 1 and where 0 means stay the original position and 1 means move all the way to 'pnt', but you can also have 'p' greater than 1 overshoot 'pnt', or less than 0 to move backwards away from 'pnt'.</span>\n    ofVec4f<span class=\"token operator\">&amp;</span>  <span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> pnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> p <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculates and returns the midpoint (as a vector) between this vector and 'pnt'.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param pnt The vector used in the midpoint calculation with this vector.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns The midpoint between this vector and 'pnt' as an ofVec4f.</span>\n    ofVec4f   <span class=\"token function\">getMiddle</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculates and returns the midpoint (as a vector) between this vector and 'pnt'. This modifies the current vector to the midpoint value.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param pnt The vector used in the midpoint calculation with this vector.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns The midpoint between this vector and 'pnt' as an ofVec4f.</span>\n    ofVec4f<span class=\"token operator\">&amp;</span>  <span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Sets this vector to be the average (center of gravity or centroid) of a given array of 'ofVec4f's.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// </span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param points The array of 'ofVec4f's used in the average calculation.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param num The number of ofVec4f objects in the array.</span>\n    ofVec4f<span class=\"token operator\">&amp;</span>  <span class=\"token function\">average</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">*</span> points<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Limit</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns a normalized copy of this vector.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Normalization means to scale the vector so that its length (magnitude) is exactly 1, </span>\n    <span class=\"token comment\" spellcheck=\"true\">/// at which stage all that is left is the direction. A normalized vector is usually called </span>\n    <span class=\"token comment\" spellcheck=\"true\">/// a unit vector, and can be used to represent a pure direction (heading).</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns The normalized copy of the current vector.</span>\n    ofVec4f  <span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Normalizes the vector. This changes the current vector to its normalized value. </span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Normalization means to scale the vector so that its length (magnitude) is exactly 1, </span>\n    <span class=\"token comment\" spellcheck=\"true\">/// at which stage all that is left is the direction. A normalized vector is usually called </span>\n    <span class=\"token comment\" spellcheck=\"true\">/// a unit vector, and can be used to represent a pure direction (heading).</span>\n    ofVec4f<span class=\"token operator\">&amp;</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns a copy of this vector with its length (magnitude) restricted to a maximum of 'max' units by scaling down if necessary.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param max The maximum length of the new vector. </span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns A copy of the current vector that is at most 'max' units long. </span>\n    ofVec4f  <span class=\"token function\">getLimited</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> max<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Restrict the length (magnitude) of this vector to a maximum of 'max' units by scaling down if necessary.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param max The maximum length of the current vector.</span>\n    ofVec4f<span class=\"token operator\">&amp;</span> <span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Measurement</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns the length (magnitude) of this vector.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns The magnitude of the current vector. </span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">lengthSquared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\n  \t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Calculations</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculates and returns the dot product of this vector with 'vec'.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Dot product (less commonly known as Euclidean inner product) expresses the angular </span>\n    <span class=\"token comment\" spellcheck=\"true\">/// relationship between two vectors. In other words it is a measure of how parallel two vectors </span>\n    <span class=\"token comment\" spellcheck=\"true\">/// are. If they are completely perpendicular the dot product is 0; if they are completely parallel </span>\n    <span class=\"token comment\" spellcheck=\"true\">/// their dot product is either 1 if they are pointing in the same direction, or -1 if they are pointing </span>\n    <span class=\"token comment\" spellcheck=\"true\">/// in opposite directions.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// </span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param vec The vector used in the dot product calculation with this vector.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns The dot product of this vector with 'vec'. </span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">dot</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t\n\t\n\t\n    <span class=\"token comment\" spellcheck=\"true\">//---------------------------------------</span>\n    <span class=\"token comment\" spellcheck=\"true\">// this methods are deprecated in 006 please use:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">// getScaled</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method getScaled() instead.\"</span><span class=\"token punctuation\">,</span> ofVec4f <span class=\"token function\">rescaled</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">// scale</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method scale() instead.\"</span><span class=\"token punctuation\">,</span> ofVec4f<span class=\"token operator\">&amp;</span> <span class=\"token function\">rescale</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">// getNormalized</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method getNormalized() instead.\"</span><span class=\"token punctuation\">,</span> ofVec4f <span class=\"token function\">normalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">// getLimited</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method getLimited() instead.\"</span><span class=\"token punctuation\">,</span> ofVec4f <span class=\"token function\">limited</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> max<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">// use squareDistance</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method squareDistance() instead.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span>  <span class=\"token function\">distanceSquared</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">// use getInterpolated</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method getInterpolated() instead.\"</span><span class=\"token punctuation\">,</span> ofVec4f <span class=\"token function\">interpolated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> pnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> p <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">// use getMiddle</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method getMiddle() instead.\"</span><span class=\"token punctuation\">,</span> ofVec4f <span class=\"token function\">middled</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">// return all zero vector</span>\n    <span class=\"token keyword\">static</span> ofVec4f <span class=\"token function\">zero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">// return all one vector</span>\n    <span class=\"token keyword\">static</span> ofVec4f <span class=\"token function\">one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Non-Member operators</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\nofVec4f <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec4f <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec4f <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec4f <span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\n\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">/////////////////</span>\n<span class=\"token comment\" spellcheck=\"true\">// Implementation</span>\n<span class=\"token comment\" spellcheck=\"true\">/////////////////</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">z</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">w</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> _s<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>_s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>_s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">z</span><span class=\"token punctuation\">(</span>_s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">w</span><span class=\"token punctuation\">(</span>_s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> _x<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t<span class=\"token keyword\">float</span> _y<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t<span class=\"token keyword\">float</span> _z<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t<span class=\"token keyword\">float</span> _w <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>_x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">z</span><span class=\"token punctuation\">(</span>_z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">w</span><span class=\"token punctuation\">(</span>_w<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">inline</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">// Getters and Setters.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> _scalar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">=</span> _scalar<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> _scalar<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">=</span> _scalar<span class=\"token punctuation\">;</span>\n\tw <span class=\"token operator\">=</span> _scalar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> _x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _w <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">=</span> _x<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> _y<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">=</span> _z<span class=\"token punctuation\">;</span>\n\tw <span class=\"token operator\">=</span> _w<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\tw <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Check similarity/equality.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>z <span class=\"token operator\">==</span> vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">==</span> vec<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">!=</span> vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>z <span class=\"token operator\">!=</span> vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">!=</span> vec<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> tolerance<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> tolerance<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>z <span class=\"token operator\">-</span> vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> tolerance<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>w <span class=\"token operator\">-</span> vec<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> tolerance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Additions and Subtractions.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> ofVec4f ofVec4f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">+</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> y<span class=\"token operator\">+</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> z<span class=\"token operator\">+</span>vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">,</span> w<span class=\"token operator\">+</span>vec<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f<span class=\"token operator\">&amp;</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">+</span><span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">+</span><span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">+</span><span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\tw <span class=\"token operator\">+</span><span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f ofVec4f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">-</span>f<span class=\"token punctuation\">,</span> y<span class=\"token operator\">-</span>f<span class=\"token punctuation\">,</span> z<span class=\"token operator\">-</span>f<span class=\"token punctuation\">,</span> w<span class=\"token operator\">-</span>f <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f<span class=\"token operator\">&amp;</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">-</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">-</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">-</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\tw <span class=\"token operator\">-</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f ofVec4f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">-</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> y<span class=\"token operator\">-</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> z<span class=\"token operator\">-</span>vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">,</span> w<span class=\"token operator\">-</span>vec<span class=\"token punctuation\">.</span>w <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f<span class=\"token operator\">&amp;</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">-</span><span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">-</span><span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">-</span><span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\tw <span class=\"token operator\">-</span><span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f ofVec4f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">+</span>f<span class=\"token punctuation\">,</span> y<span class=\"token operator\">+</span>f<span class=\"token punctuation\">,</span> z<span class=\"token operator\">+</span>f<span class=\"token punctuation\">,</span> w<span class=\"token operator\">+</span>f <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f<span class=\"token operator\">&amp;</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">+</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">+</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">+</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\tw <span class=\"token operator\">+</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f ofVec4f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">-</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>y<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>z<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>w <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Scalings</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> ofVec4f ofVec4f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> y<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> z<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">,</span> w<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>w <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f<span class=\"token operator\">&amp;</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">*</span><span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">*</span><span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">*</span><span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\tw <span class=\"token operator\">*</span><span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f ofVec4f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">*</span>f<span class=\"token punctuation\">,</span> y<span class=\"token operator\">*</span>f<span class=\"token punctuation\">,</span> z<span class=\"token operator\">*</span>f<span class=\"token punctuation\">,</span> w<span class=\"token operator\">*</span>f <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f<span class=\"token operator\">&amp;</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">*</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">*</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">*</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\tw <span class=\"token operator\">*</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f ofVec4f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> vec<span class=\"token punctuation\">.</span>x<span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">?</span> x<span class=\"token operator\">/</span>vec<span class=\"token punctuation\">.</span>x <span class=\"token operator\">:</span> x <span class=\"token punctuation\">,</span> vec<span class=\"token punctuation\">.</span>y<span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">?</span> y<span class=\"token operator\">/</span>vec<span class=\"token punctuation\">.</span>y <span class=\"token operator\">:</span> y<span class=\"token punctuation\">,</span> vec<span class=\"token punctuation\">.</span>z<span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">?</span> z<span class=\"token operator\">/</span>vec<span class=\"token punctuation\">.</span>z <span class=\"token operator\">:</span> z<span class=\"token punctuation\">,</span> vec<span class=\"token punctuation\">.</span>w<span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">?</span> w<span class=\"token operator\">/</span>vec<span class=\"token punctuation\">.</span>w <span class=\"token operator\">:</span> w  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f<span class=\"token operator\">&amp;</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tvec<span class=\"token punctuation\">.</span>x<span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">?</span> x<span class=\"token operator\">/</span><span class=\"token operator\">=</span>vec<span class=\"token punctuation\">.</span>x <span class=\"token operator\">:</span> x<span class=\"token punctuation\">;</span>\n\tvec<span class=\"token punctuation\">.</span>y<span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">?</span> y<span class=\"token operator\">/</span><span class=\"token operator\">=</span>vec<span class=\"token punctuation\">.</span>y <span class=\"token operator\">:</span> y<span class=\"token punctuation\">;</span>\n\tvec<span class=\"token punctuation\">.</span>z<span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">?</span> z<span class=\"token operator\">/</span><span class=\"token operator\">=</span>vec<span class=\"token punctuation\">.</span>z <span class=\"token operator\">:</span> z<span class=\"token punctuation\">;</span>\n\tvec<span class=\"token punctuation\">.</span>w<span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">?</span> w<span class=\"token operator\">/</span><span class=\"token operator\">=</span>vec<span class=\"token punctuation\">.</span>w <span class=\"token operator\">:</span> w<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f ofVec4f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">/</span>f<span class=\"token punctuation\">,</span> y<span class=\"token operator\">/</span>f<span class=\"token punctuation\">,</span> z<span class=\"token operator\">/</span>f<span class=\"token punctuation\">,</span> w<span class=\"token operator\">/</span>f <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f<span class=\"token operator\">&amp;</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\n\tx <span class=\"token operator\">/</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">/</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">/</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\tw <span class=\"token operator\">/</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">inline</span> std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tos <span class=\"token operator\">&lt;&lt;</span> vec<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> vec<span class=\"token punctuation\">.</span>y <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> vec<span class=\"token punctuation\">.</span>z <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> vec<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> os<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> std<span class=\"token operator\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> ofVec4f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tis <span class=\"token operator\">>></span> vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\tis<span class=\"token punctuation\">.</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tis <span class=\"token operator\">>></span> vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\tis<span class=\"token punctuation\">.</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tis <span class=\"token operator\">>></span> vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\tis<span class=\"token punctuation\">.</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tis <span class=\"token operator\">>></span> vec<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> is<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">inline</span> ofVec4f ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">rescaled</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getScaled</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">getScaled</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> l <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span>z <span class=\"token operator\">+</span> w<span class=\"token operator\">*</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> l <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">/</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>length<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">/</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>length<span class=\"token punctuation\">,</span>\n\t\t\t\t\t   <span class=\"token punctuation\">(</span>z<span class=\"token operator\">/</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>length<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>w<span class=\"token operator\">/</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>length <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f<span class=\"token operator\">&amp;</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">rescale</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f<span class=\"token operator\">&amp;</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> l <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span>z <span class=\"token operator\">+</span> w<span class=\"token operator\">*</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">/</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>length<span class=\"token punctuation\">;</span>\n\t\ty <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">/</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>length<span class=\"token punctuation\">;</span>\n\t\tz <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>z<span class=\"token operator\">/</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>length<span class=\"token punctuation\">;</span>\n\t\tw <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>w<span class=\"token operator\">/</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>length<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Distance between two points.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">float</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> pnt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> vx <span class=\"token operator\">=</span> x<span class=\"token operator\">-</span>pnt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> vy <span class=\"token operator\">=</span> y<span class=\"token operator\">-</span>pnt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> vz <span class=\"token operator\">=</span> z<span class=\"token operator\">-</span>pnt<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> vw <span class=\"token operator\">=</span> w<span class=\"token operator\">-</span>pnt<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span> vx<span class=\"token operator\">*</span>vx <span class=\"token operator\">+</span> vy<span class=\"token operator\">*</span>vy <span class=\"token operator\">+</span> vz<span class=\"token operator\">*</span>vz <span class=\"token operator\">+</span> vw<span class=\"token operator\">*</span>vw <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">float</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">distanceSquared</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">squareDistance</span><span class=\"token punctuation\">(</span>pnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">float</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">squareDistance</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> vx <span class=\"token operator\">=</span> x<span class=\"token operator\">-</span>pnt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> vy <span class=\"token operator\">=</span> y<span class=\"token operator\">-</span>pnt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> vz <span class=\"token operator\">=</span> z<span class=\"token operator\">-</span>pnt<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> vw <span class=\"token operator\">=</span> w<span class=\"token operator\">-</span>pnt<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> vx<span class=\"token operator\">*</span>vx <span class=\"token operator\">+</span> vy<span class=\"token operator\">*</span>vy <span class=\"token operator\">+</span> vz<span class=\"token operator\">*</span>vz <span class=\"token operator\">+</span> vw<span class=\"token operator\">*</span>vw<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Linear interpolation.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">/**\n * p==0.0 results in this point, p==0.5 results in the\n * midpoint, and p==1.0 results in pnt being returned.\n */</span>\n<span class=\"token keyword\">inline</span> ofVec4f ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">interpolated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> pnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> p <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getInterpolated</span><span class=\"token punctuation\">(</span>pnt<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">getInterpolated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> pnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> p <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pnt<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span>\n\t\t\t\t   y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pnt<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span>\n\t\t\t\t   z<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pnt<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span>\n\t\t\t\t   w<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pnt<span class=\"token punctuation\">.</span>w<span class=\"token operator\">*</span>p <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f<span class=\"token operator\">&amp;</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> pnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> p <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">=</span> x<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pnt<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pnt<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">=</span> z<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pnt<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\tw <span class=\"token operator\">=</span> w<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pnt<span class=\"token punctuation\">.</span>w<span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">middled</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getMiddle</span><span class=\"token punctuation\">(</span>pnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">getMiddle</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>pnt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2.0f</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span>pnt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2.0f</span><span class=\"token punctuation\">,</span>\n\t\t\t\t   <span class=\"token punctuation\">(</span>z<span class=\"token operator\">+</span>pnt<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2.0f</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>w<span class=\"token operator\">+</span>pnt<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2.0f</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f<span class=\"token operator\">&amp;</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>pnt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2.0f</span><span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span>pnt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2.0f</span><span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>z<span class=\"token operator\">+</span>pnt<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2.0f</span><span class=\"token punctuation\">;</span>\n\tw <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>w<span class=\"token operator\">+</span>pnt<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2.0f</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Average (centroid) among points.</span>\n<span class=\"token comment\" spellcheck=\"true\">// (Addition is sometimes useful for calculating averages too)</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> ofVec4f<span class=\"token operator\">&amp;</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">average</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">*</span> points<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n\tw <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tx <span class=\"token operator\">+</span><span class=\"token operator\">=</span> points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\t\ty <span class=\"token operator\">+</span><span class=\"token operator\">=</span> points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t\tz <span class=\"token operator\">+</span><span class=\"token operator\">=</span> points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\t\tw <span class=\"token operator\">+</span><span class=\"token operator\">=</span> points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tx <span class=\"token operator\">/</span><span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">/</span><span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">/</span><span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n\tw <span class=\"token operator\">/</span><span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Normalization</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> ofVec4f ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">normalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> length <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span>z <span class=\"token operator\">+</span> w<span class=\"token operator\">*</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">/</span>length<span class=\"token punctuation\">,</span> y<span class=\"token operator\">/</span>length<span class=\"token punctuation\">,</span> z<span class=\"token operator\">/</span>length<span class=\"token punctuation\">,</span> w<span class=\"token operator\">/</span>length <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f<span class=\"token operator\">&amp;</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> lenght <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span>z <span class=\"token operator\">+</span> w<span class=\"token operator\">*</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> lenght <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tx <span class=\"token operator\">/</span><span class=\"token operator\">=</span> lenght<span class=\"token punctuation\">;</span>\n\t\ty <span class=\"token operator\">/</span><span class=\"token operator\">=</span> lenght<span class=\"token punctuation\">;</span>\n\t\tz <span class=\"token operator\">/</span><span class=\"token operator\">=</span> lenght<span class=\"token punctuation\">;</span>\n\t\tw <span class=\"token operator\">/</span><span class=\"token operator\">=</span> lenght<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Limit length.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> ofVec4f ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">limited</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> max<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getLimited</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">getLimited</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> max<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    ofVec4f limited<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> lengthSquared <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span>z <span class=\"token operator\">+</span> w<span class=\"token operator\">*</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> lengthSquared <span class=\"token operator\">></span> max<span class=\"token operator\">*</span>max <span class=\"token operator\">&amp;&amp;</span> lengthSquared <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">float</span> ratio <span class=\"token operator\">=</span> max<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>lengthSquared<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        limited<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">*</span>ratio<span class=\"token punctuation\">,</span> y<span class=\"token operator\">*</span>ratio<span class=\"token punctuation\">,</span> z<span class=\"token operator\">*</span>ratio<span class=\"token punctuation\">,</span> w<span class=\"token operator\">*</span>ratio <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        limited<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> limited<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f<span class=\"token operator\">&amp;</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">float</span> lengthSquared <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span>z <span class=\"token operator\">+</span> w<span class=\"token operator\">*</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> lengthSquared <span class=\"token operator\">></span> max<span class=\"token operator\">*</span>max <span class=\"token operator\">&amp;&amp;</span> lengthSquared <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">float</span> ratio <span class=\"token operator\">=</span> max<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>lengthSquared<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        x <span class=\"token operator\">*</span><span class=\"token operator\">=</span> ratio<span class=\"token punctuation\">;</span>\n        y <span class=\"token operator\">*</span><span class=\"token operator\">=</span> ratio<span class=\"token punctuation\">;</span>\n        z <span class=\"token operator\">*</span><span class=\"token operator\">=</span> ratio<span class=\"token punctuation\">;</span>\n        w <span class=\"token operator\">*</span><span class=\"token operator\">=</span> ratio<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Length</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">float</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span>z <span class=\"token operator\">+</span> w<span class=\"token operator\">*</span>w <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">float</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">lengthSquared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span>z <span class=\"token operator\">+</span> w<span class=\"token operator\">*</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * Dot Product.\n */</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">float</span> ofVec4f<span class=\"token operator\">::</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> x<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> w<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Non-Member operators</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> ofVec4f <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> f<span class=\"token operator\">+</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> f<span class=\"token operator\">+</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> f<span class=\"token operator\">+</span>vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">,</span> f<span class=\"token operator\">+</span>vec<span class=\"token punctuation\">.</span>w <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> f<span class=\"token operator\">-</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> f<span class=\"token operator\">-</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> f<span class=\"token operator\">-</span>vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">,</span> f<span class=\"token operator\">-</span>vec<span class=\"token punctuation\">.</span>w <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> f<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> f<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> f<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">,</span> f<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>w <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec4f <span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> f<span class=\"token operator\">/</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> f<span class=\"token operator\">/</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> f<span class=\"token operator\">/</span>vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">,</span> f<span class=\"token operator\">/</span>vec<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n\n","type":"source"}}],"fetch":[]}