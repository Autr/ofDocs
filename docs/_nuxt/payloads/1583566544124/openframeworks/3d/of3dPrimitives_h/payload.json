{"data":[{"page":{"entry":{"name":"of3dPrimitives.h","filename":"of3dPrimitives.h","absolute":"/Users/gilbertsinnott/Code/openFrameworks/libs/openFrameworks/3d/of3dPrimitives.h","path":"/openframeworks/3d/of3dPrimitives_h","route":"/openframeworks/3d/of3dPrimitives.h","dir":"../libs/openFrameworks/3d","ext":"h","type":"source","id":197,"parent":194,"breadcrumbs":[194,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofMesh.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofNode.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofTexture</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofVboMesh</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofRectangle</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief A class representing a 3d primitive.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">of3dPrimitive</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofNode <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">of3dPrimitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">of3dPrimitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">of3dPrimitive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofMesh <span class=\"token operator\">&amp;</span> mesh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">of3dPrimitive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> of3dPrimitive <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    of3dPrimitive <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> of3dPrimitive <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">mapTexCoords</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> u1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> u2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//void setTexCoords( int meshindex, float u1, float v1, float u2, float v2 );</span>\n    <span class=\"token comment\" spellcheck=\"true\">// does not store texture. Creates tex coords from texture, if texture is</span>\n    <span class=\"token comment\" spellcheck=\"true\">// non-arb, then it will create normalized tex coords //</span>\n    <span class=\"token comment\" spellcheck=\"true\">// defaults to index 0</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">mapTexCoordsFromTexture</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofTexture<span class=\"token operator\">&amp;</span> inTexture <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    ofMesh<span class=\"token operator\">*</span> <span class=\"token function\">getMeshPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofMesh<span class=\"token operator\">&amp;</span> <span class=\"token function\">getMesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> ofMesh<span class=\"token operator\">*</span> <span class=\"token function\">getMeshPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> ofMesh<span class=\"token operator\">&amp;</span> <span class=\"token function\">getMesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\tglm<span class=\"token operator\">::</span>vec4<span class=\"token operator\">*</span> <span class=\"token function\">getTexCoordsPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tglm<span class=\"token operator\">::</span>vec4<span class=\"token operator\">&amp;</span> <span class=\"token function\">getTexCoords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec4<span class=\"token operator\">*</span> <span class=\"token function\">getTexCoordsPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec4<span class=\"token operator\">&amp;</span> <span class=\"token function\">getTexCoords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">hasScaling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">hasNormalsEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">enableNormals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">enableTextures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">enableColors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">disableNormals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">disableTextures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">disableColors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">using</span> ofNode<span class=\"token operator\">::</span>draw<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">drawVertices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">drawWireframe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">drawFaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>ofPolyRenderMode renderType<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">drawNormals</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> length<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bFaceNormals<span class=\"token operator\">=</span><span class=\"token boolean\">false</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">drawAxes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> a_size<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setUseVbo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> useVbo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isUsingVbo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// useful when creating a new model, since it uses normalized tex coords //</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">normalizeAndApplySavedTexCoords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tglm<span class=\"token operator\">::</span>vec4 texCoords<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> usingVbo<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofMesh<span class=\"token operator\">></span>  mesh<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">mutable</span> ofMesh normalsMesh<span class=\"token punctuation\">;</span>\n\n    std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofIndexType<span class=\"token operator\">></span> <span class=\"token function\">getIndices</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> startIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> endIndex <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief The ofPlanePrimitive allows you to create an UV plane.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Can be used for example as simple canvas for projecting simple texture .</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// Like all primitives it allows you to set the size, in this case height </span>\n<span class=\"token comment\" spellcheck=\"true\">/// and width, draw it, set positions, etc, as a simple example:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofPlanePrimitive plane;</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// void setup()</span>\n<span class=\"token comment\" spellcheck=\"true\">/// {</span>\n<span class=\"token comment\" spellcheck=\"true\">/// /// let's say we have a window set to be at </span>\n<span class=\"token comment\" spellcheck=\"true\">/// // resolution 640x480...</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">///     plane.set(640, 480);   ///dimensions for width and height in pixels</span>\n<span class=\"token comment\" spellcheck=\"true\">/// plane.setPosition(320, 240, 0); /// position in x y z</span>\n<span class=\"token comment\" spellcheck=\"true\">/// plane.setResolution(2, 2); /// this resolution (as columns and rows) is enough</span>\n<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// void draw()</span>\n<span class=\"token comment\" spellcheck=\"true\">/// {</span>\n<span class=\"token comment\" spellcheck=\"true\">/// plane.drawWireframe();</span>\n<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">/// As you can see, plane is constructed from two triangles.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// To draw a texture over any primitive, simply bind the ofTexture instance </span>\n<span class=\"token comment\" spellcheck=\"true\">/// and then draw your primitive:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// texture.getTextureReference().bind();</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // now draw filled...</span>\n<span class=\"token comment\" spellcheck=\"true\">/// plane.draw();</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// The plane primitive also allows you to simply pass an ofTexture to the </span>\n<span class=\"token comment\" spellcheck=\"true\">/// plane and generate the texture coordinates from that texture so that the </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofTexture fills the plane when it's drawn. This saves you the hassle of </span>\n<span class=\"token comment\" spellcheck=\"true\">/// creating all the texture coordinates for each vertex, which is nice.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofPlanePrimitive</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> of3dPrimitive <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">ofPlanePrimitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofPlanePrimitive</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> columns<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rows<span class=\"token punctuation\">,</span> \n        ofPrimitiveMode mode<span class=\"token operator\">=</span>OF_PRIMITIVE_TRIANGLE_STRIP <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">ofPlanePrimitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> columns<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rows<span class=\"token punctuation\">,</span> \n        ofPrimitiveMode mode<span class=\"token operator\">=</span>OF_PRIMITIVE_TRIANGLE_STRIP <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">resizeToTexture</span><span class=\"token punctuation\">(</span> ofTexture<span class=\"token operator\">&amp;</span> inTexture<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> scale<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>f <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> width <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> height <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setColumns</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> columns <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setRows</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> rows <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setResolution</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> columns<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rows <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setMode</span><span class=\"token punctuation\">(</span> ofPrimitiveMode mode <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getNumColumns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getNumRows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// x = columns, y = rows //</span>\n\tglm<span class=\"token operator\">::</span>vec2 <span class=\"token function\">getResolution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">float</span> <span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">;</span>\n\tglm<span class=\"token operator\">::</span>vec2 resolution<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief The ofSpherePrimitive allows you to create a UV sphere.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// A UV spherewhich is a sphere based on UV slices rather than faces like </span>\n<span class=\"token comment\" spellcheck=\"true\">/// the ofIcoSpherePrimitive. Note this:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// [IMG](3d/spheretypes.png)</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// On the left is a UV sphere and on the right is an ICO sphere.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// Like all primitives it allows you to set the size (radius), draw it, </span>\n<span class=\"token comment\" spellcheck=\"true\">/// set positions, etc, as a simple example:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// void setup()</span>\n<span class=\"token comment\" spellcheck=\"true\">/// {</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">///     sphere.setRadius( width );</span>\n<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// void draw()</span>\n<span class=\"token comment\" spellcheck=\"true\">/// {</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">///     sphere.setPosition(ofGetWidth()*.2, ofGetHeight()*.75, 0);</span>\n<span class=\"token comment\" spellcheck=\"true\">///     sphere.rotate(spinX, 1.0, 0.0, 0.0);</span>\n<span class=\"token comment\" spellcheck=\"true\">///     sphere.rotate(spinY, 0, 1.0, 0.0);</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">///     // get all the faces from the icoSphere, handy when you want to copy</span>\n<span class=\"token comment\" spellcheck=\"true\">///     // individual vertices or tweak them a little ;)</span>\n<span class=\"token comment\" spellcheck=\"true\">///     vector&lt;ofMeshFace> triangles = sphere.getMesh().getUniqueFaces();</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">///     // now draw</span>\n<span class=\"token comment\" spellcheck=\"true\">///     sphere.draw();</span>\n<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// To draw a texture over any primitive, simply bind the ofTexture instance </span>\n<span class=\"token comment\" spellcheck=\"true\">/// and then draw your primitive:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// texture.getTextureReference().bind();</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // now draw</span>\n<span class=\"token comment\" spellcheck=\"true\">/// sphere.draw();</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// The sphere can look a little weird if you don't do ofEnableDepthTest() </span>\n<span class=\"token comment\" spellcheck=\"true\">/// and ofDisableAlphaBlending().</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofSpherePrimitive</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> of3dPrimitive <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">ofSpherePrimitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofSpherePrimitive</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> res<span class=\"token punctuation\">,</span> \n        ofPrimitiveMode mode<span class=\"token operator\">=</span>OF_PRIMITIVE_TRIANGLE_STRIP <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">ofSpherePrimitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> resolution<span class=\"token punctuation\">,</span> \n        ofPrimitiveMode mode<span class=\"token operator\">=</span>OF_PRIMITIVE_TRIANGLE_STRIP <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setResolution</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> res <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setRadius</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setMode</span><span class=\"token punctuation\">(</span> ofPrimitiveMode mode <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">float</span> <span class=\"token function\">getRadius</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getResolution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> resolution<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief The ofIcoSpherePrimitive allows you to create an icosphere. </span>\n<span class=\"token comment\" spellcheck=\"true\">/// An icosphere is a sphere not based on UV slices like the ofSpherePrimitive,</span>\n<span class=\"token comment\" spellcheck=\"true\">/// but rather faces. Like this:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// Like all primitives it allows you to set the radius, </span>\n<span class=\"token comment\" spellcheck=\"true\">/// draw it, set positions, etc.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// void setup()</span>\n<span class=\"token comment\" spellcheck=\"true\">/// {</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">///     icoSphere.setRadius( width );</span>\n<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// void draw()</span>\n<span class=\"token comment\" spellcheck=\"true\">/// {</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">///     icoSphere.setPosition(ofGetWidth()*.2, ofGetHeight()*.75, 0);</span>\n<span class=\"token comment\" spellcheck=\"true\">///     icoSphere.rotate(spinX, 1.0, 0.0, 0.0);</span>\n<span class=\"token comment\" spellcheck=\"true\">///     icoSphere.rotate(spinY, 0, 1.0, 0.0);</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">///     // get all the faces from the icoSphere, handy when you want to copy</span>\n<span class=\"token comment\" spellcheck=\"true\">///     // individual vertices or tweak them a little ;)</span>\n<span class=\"token comment\" spellcheck=\"true\">///     vector&lt;ofMeshFace> triangles = icoSphere.getMesh().getUniqueFaces();</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">///     // now draw</span>\n<span class=\"token comment\" spellcheck=\"true\">///     icoSphere.draw();</span>\n<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofIcoSpherePrimitive</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> of3dPrimitive <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">ofIcoSpherePrimitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofIcoSpherePrimitive</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> iterations <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">ofIcoSpherePrimitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> res <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setResolution</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> iterations <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setRadius</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> radius <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setMode</span><span class=\"token punctuation\">(</span> ofPrimitiveMode mode <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">float</span> <span class=\"token function\">getRadius</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getResolution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> resolution<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief The ofCylinderPrimitive allows you to create an cylinder mesh.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// Like all primitives it allows you to set the size, for the cylinder </span>\n<span class=\"token comment\" spellcheck=\"true\">/// a radius and height, draw it, set positions, etc, as a simple example:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// void setup()</span>\n<span class=\"token comment\" spellcheck=\"true\">/// {</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">///     cylinder.set( cylinderRadius, cylinderHeight );</span>\n<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// void draw()</span>\n<span class=\"token comment\" spellcheck=\"true\">/// {</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">///     cylinder.setPosition(ofGetWidth()*.2, ofGetHeight()*.75, 0);</span>\n<span class=\"token comment\" spellcheck=\"true\">///     cylinder.rotate(spinX, 1.0, 0.0, 0.0);</span>\n<span class=\"token comment\" spellcheck=\"true\">///     cylinder.rotate(spinY, 0, 1.0, 0.0);</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">///     // get all the faces from the icoSphere, handy when you want to copy</span>\n<span class=\"token comment\" spellcheck=\"true\">///     // individual vertices or tweak them a little ;)</span>\n<span class=\"token comment\" spellcheck=\"true\">///     vector&lt;ofMeshFace> triangles = cylinder.getMesh().getUniqueFaces();</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">///     // now draw</span>\n<span class=\"token comment\" spellcheck=\"true\">///     cylinder.draw();</span>\n<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// To draw a texture over any primitive, simply bind the ofTexture instance </span>\n<span class=\"token comment\" spellcheck=\"true\">/// and then draw your primitive:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// texture.getTextureReference().bind();</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // now draw</span>\n<span class=\"token comment\" spellcheck=\"true\">/// cylinder.draw();</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofCylinderPrimitive</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> of3dPrimitive <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">ofCylinderPrimitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofCylinderPrimitive</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> radiusSegments<span class=\"token punctuation\">,</span> \n        <span class=\"token keyword\">int</span> heightSegments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> capSegments<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bCapped <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ofPrimitiveMode mode<span class=\"token operator\">=</span>OF_PRIMITIVE_TRIANGLE_STRIP <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">ofCylinderPrimitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> radiusSegments<span class=\"token punctuation\">,</span> \n        <span class=\"token keyword\">int</span> heightSegments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> capSegments<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bCapped<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ofPrimitiveMode mode<span class=\"token operator\">=</span>OF_PRIMITIVE_TRIANGLE_STRIP <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bCapped<span class=\"token operator\">=</span><span class=\"token boolean\">true</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setRadius</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> radius <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> height <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setCapped</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">bool</span> bCapped <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setResolutionRadius</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> radiusRes <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setResolutionHeight</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> heightRes <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setResolutionCap</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> capRes <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setResolution</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> radiusSegments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightSegments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> capSegments<span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setMode</span><span class=\"token punctuation\">(</span> ofPrimitiveMode mode <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setTopCapColor</span><span class=\"token punctuation\">(</span> ofColor color <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setCylinderColor</span><span class=\"token punctuation\">(</span> ofColor color <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setBottomCapColor</span><span class=\"token punctuation\">(</span> ofColor color <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofIndexType<span class=\"token operator\">></span> <span class=\"token function\">getTopCapIndices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    ofMesh <span class=\"token function\">getTopCapMesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofIndexType<span class=\"token operator\">></span> <span class=\"token function\">getCylinderIndices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    ofMesh <span class=\"token function\">getCylinderMesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofIndexType<span class=\"token operator\">></span> <span class=\"token function\">getBottomCapIndices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    ofMesh <span class=\"token function\">getBottomCapMesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getResolutionRadius</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getResolutionHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getResolutionCap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tglm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">getResolution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">float</span> <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">getRadius</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">getCapped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> bCapped<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> strides<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> vertices<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tglm<span class=\"token operator\">::</span>vec3 resolution<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief The ofConePrimitive allows you to create a 3D cone. </span>\n<span class=\"token comment\" spellcheck=\"true\">/// Like all primitives it allows you to set the size, draw it, </span>\n<span class=\"token comment\" spellcheck=\"true\">/// set positions, etc, as a simple example:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// void setup()</span>\n<span class=\"token comment\" spellcheck=\"true\">/// {</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">///     cone.set( coneRadius, coneHeight, coneRadiusSegments, coneHeightSegments );</span>\n<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// void draw()</span>\n<span class=\"token comment\" spellcheck=\"true\">/// {</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">///     cone.setPosition(ofGetWidth()*.2, ofGetHeight()*.75, 0);</span>\n<span class=\"token comment\" spellcheck=\"true\">///     cone.rotate(spinX, 1.0, 0.0, 0.0);</span>\n<span class=\"token comment\" spellcheck=\"true\">///     cone.rotate(spinY, 0, 1.0, 0.0);</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">///     // get all the faces from the cpme, handy when you want to copy</span>\n<span class=\"token comment\" spellcheck=\"true\">///     // individual vertices or tweak them a little ;)</span>\n<span class=\"token comment\" spellcheck=\"true\">///     vector&lt;ofMeshFace> triangles = cone.getMesh().getUniqueFaces();</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">///     // now draw</span>\n<span class=\"token comment\" spellcheck=\"true\">///     cone.draw();</span>\n<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// To draw a texture over any primitive, simply bind the ofTexture instance </span>\n<span class=\"token comment\" spellcheck=\"true\">/// and then draw your primitive:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// texture.getTextureReference().bind();</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // now draw</span>\n<span class=\"token comment\" spellcheck=\"true\">/// cone.draw();</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// Beware of the cone texture coordinates, they're a little strange.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofConePrimitive</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> of3dPrimitive <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n    <span class=\"token function\">ofConePrimitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofConePrimitive</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> radiusSegments<span class=\"token punctuation\">,</span> \n        <span class=\"token keyword\">int</span> heightSegments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> capSegments<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> \n        ofPrimitiveMode mode<span class=\"token operator\">=</span>OF_PRIMITIVE_TRIANGLE_STRIP <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">ofConePrimitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> radiusSegments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightSegments<span class=\"token punctuation\">,</span> \n        <span class=\"token keyword\">int</span> capSegments<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> ofPrimitiveMode mode<span class=\"token operator\">=</span>OF_PRIMITIVE_TRIANGLE_STRIP <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setResolutionRadius</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> radiusRes <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setResolutionHeight</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> heightRes <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setResolutionCap</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> capRes <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setResolution</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> radiusRes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightRes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> capRes <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setMode</span><span class=\"token punctuation\">(</span> ofPrimitiveMode mode <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setRadius</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> radius <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> height <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setTopColor</span><span class=\"token punctuation\">(</span> ofColor color <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setCapColor</span><span class=\"token punctuation\">(</span> ofColor color <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\return a vector of the indices of vertices that make up the cone (as opposed to the cap indices).</span>\n    std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofIndexType<span class=\"token operator\">></span> <span class=\"token function\">getConeIndices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\return This returns an ofMesh made up of the cone (as opposed to the cap).</span>\n    ofMesh <span class=\"token function\">getConeMesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\return a vector of the indices of vertices that make up the cap (as opposed to the cone indices).</span>\n    std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofIndexType<span class=\"token operator\">></span> <span class=\"token function\">getCapIndices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\return an ofMesh made up of the cap (as opposed to the cone).</span>\n    ofMesh <span class=\"token function\">getCapMesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getResolutionRadius</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getResolutionHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\return the resolution of the cap (rather than the cone).</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getResolutionCap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\return the resolution of the cone (rather than the cap).</span>\n\tglm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">getResolution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\return the radius of the cap.</span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">getRadius</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\return the height of the cone.</span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">;</span>\n\n\tglm<span class=\"token operator\">::</span>vec3 resolution<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> strides<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> vertices<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief The ofBoxPrimitive allows you to create cubes and cuboids.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// Like other primitives, it allows you to set its dimensions and position, draw it, etc. As a simple example:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// void setup()</span>\n<span class=\"token comment\" spellcheck=\"true\">/// {</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">///     box.set( boxSize );</span>\n<span class=\"token comment\" spellcheck=\"true\">///     // or</span>\n<span class=\"token comment\" spellcheck=\"true\">///     // box.set( boxHeight, boxWidth, boxDepth );</span>\n<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// void draw()</span>\n<span class=\"token comment\" spellcheck=\"true\">/// {</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">///     box.setPosition(ofGetWidth()*.2, ofGetHeight()*.75, 0);</span>\n<span class=\"token comment\" spellcheck=\"true\">///     box.rotate(spinX, 1.0, 0.0, 0.0);</span>\n<span class=\"token comment\" spellcheck=\"true\">///     box.rotate(spinY, 0, 1.0, 0.0);</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">///     // get all the faces from the icoSphere, handy when you want to copy</span>\n<span class=\"token comment\" spellcheck=\"true\">///     // individual vertices or tweak them a little ;)</span>\n<span class=\"token comment\" spellcheck=\"true\">///     vector&lt;ofMeshFace> triangles = box.getMesh().getUniqueFaces();</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">///     // now draw</span>\n<span class=\"token comment\" spellcheck=\"true\">///     box.draw();</span>\n<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// To draw a texture over any primitive, simply bind the ofTexture instance and then draw your primitive:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// texture.getTextureReference().bind();</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // now draw</span>\n<span class=\"token comment\" spellcheck=\"true\">/// box.draw();</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofBoxPrimitive</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> of3dPrimitive <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n    <span class=\"token keyword\">enum</span> BoxSides <span class=\"token punctuation\">{</span>\n        SIDE_FRONT<span class=\"token punctuation\">,</span>\n        SIDE_RIGHT<span class=\"token punctuation\">,</span>\n        SIDE_LEFT<span class=\"token punctuation\">,</span>\n        SIDE_BACK<span class=\"token punctuation\">,</span>\n        SIDE_TOP<span class=\"token punctuation\">,</span>\n        SIDE_BOTTOM<span class=\"token punctuation\">,</span>\n        SIDES_TOTAL\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofBoxPrimitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofBoxPrimitive</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> depth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> resWidth<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> \n        <span class=\"token keyword\">int</span> resHeight<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> resDepth<span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">ofBoxPrimitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> depth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> resWidth<span class=\"token punctuation\">,</span> \n        <span class=\"token keyword\">int</span> resHeight<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> resDepth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> depth <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> size <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// all sides the same dimensions //</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> a_width <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> a_height <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setDepth</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> a_depth <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">resizeToTexture</span><span class=\"token punctuation\">(</span> ofTexture<span class=\"token operator\">&amp;</span> inTexture <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofIndexType<span class=\"token operator\">></span> <span class=\"token function\">getSideIndices</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> sideIndex <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    ofMesh <span class=\"token function\">getSideMesh</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> sideIndex <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setResolution</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> res <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// same resolution for all sides //</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setResolutionWidth</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> widthRes <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setResolutionHeight</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> heightRes <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setResolutionDepth</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> depthRes <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setResolution</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> resWidth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> resHeight<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> resDepth <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setMode</span><span class=\"token punctuation\">(</span> ofPrimitiveMode mode <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setSideColor</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> sideIndex<span class=\"token punctuation\">,</span> ofColor color <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getResolutionWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getResolutionHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getResolutionDepth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tglm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">getResolution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">float</span> <span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">getDepth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tglm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\tglm<span class=\"token operator\">::</span>vec3 size<span class=\"token punctuation\">;</span>\n\tglm<span class=\"token operator\">::</span>vec3 resolution<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// indices strides for faces //</span>\n    <span class=\"token keyword\">int</span> strides<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> vertices<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n","type":"source"}}],"fetch":[]}