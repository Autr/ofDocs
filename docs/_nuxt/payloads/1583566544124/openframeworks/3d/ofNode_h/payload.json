{"data":[{"page":{"entry":{"name":"ofNode.h","filename":"ofNode.h","absolute":"/Users/gilbertsinnott/Code/openFrameworks/libs/openFrameworks/3d/ofNode.h","path":"/openframeworks/3d/ofNode_h","route":"/openframeworks/3d/ofNode.h","dir":"../libs/openFrameworks/3d","ext":"h","type":"source","id":206,"parent":194,"breadcrumbs":[194,195],"siblings":[],"translations":{}},"document":"\n<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofParameter.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"glm/mat4x4.hpp\"</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofBaseRenderer</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief A generic 3d object in space with transformation (position, rotation, scale).</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofNode</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n\t\n\t<span class=\"token function\">ofNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ofNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofNode <span class=\"token operator\">&amp;</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofNode</span><span class=\"token punctuation\">(</span>ofNode <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofNode <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofNode <span class=\"token operator\">&amp;</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofNode <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ofNode <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Parent Node</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set parent for the node. The node will inherit transformations from parent.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param parent Reference to the ofNode which becomes the parent node.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bMaintainGlobalTransform Boolean if maintain child's global</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        transformations (default = false). </span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span>ofNode<span class=\"token operator\">&amp;</span> parent<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bMaintainGlobalTransform <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Remove parent node linking.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bMaintainGlobalTransform Boolean if maintain child's global</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        transformations (default = false).</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">clearParent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> bMaintainGlobalTransform <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the parent node of this node.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns Pointer to parent ofNode.</span>\n\tofNode<span class=\"token operator\">*</span> <span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Getters</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get node's local position as a 3D vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns A 3D vector with the local coordinates.</span>\n\tglm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get node's local x position. </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns Local x coordinate as a float.</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get node's local y position.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns Local y coordinate as a float.</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get node's local z position.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns Local z coordinate as a float.</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getZ</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the node's local x axis as 3d vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns A normalized 3D vector of the node's local x axis direction.</span>\n\tglm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">getXAxis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the node's local y axis as 3d vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns A normalized 3D vector of the node's local y axis direction.</span>\n\tglm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">getYAxis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the node's local z axis as 3d vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns A normalized 3D vector of the node's local z axis direction.</span>\n\tglm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">getZAxis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get direction of node's side aka local x axis, as 3d vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns A normalized 3D vector of the node's local x axis direction.</span>\n\tglm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">getSideDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get direction the node looks at aka local -z axis, as 3d vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns A normalized 3D vector of the node's local -z axis direction.</span>\n\tglm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">getLookAtDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get direction of node's top aka local y axis, as 3d vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns A normalized 3D vector of the node's local y axis direction.</span>\n\tglm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">getUpDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use Deg/Rad versions.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getPitch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use Deg/Rad versions.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getHeading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use Deg/Rad versions.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getRoll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get pitch of node, aka the rotation along local x axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The rotation around the local x axis in degrees, as a float.</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getPitchDeg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get heading of node, aka the rotation along local y axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The rotation around the local y axis in degrees, as a float.</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getHeadingDeg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get roll of node, aka the rotation along local z axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The rotation around the local z axis in degrees, as a float.</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getRollDeg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get pitch of node, aka the rotation along local x axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The rotation around the local x axis in degrees, as a float.</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getPitchRad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get heading of node, aka the rotation along local y axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The rotation around the local y axis in degrees, as a float.</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getHeadingRad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get roll of node, aka the rotation along local z axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The rotation around the local z axis in degrees, as a float.</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getRollRad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the local orientation of the node as a quaternion.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns A quaternion of local orientation (useful for complex rotations)</span>\n\tglm<span class=\"token operator\">::</span>quat <span class=\"token function\">getOrientationQuat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use the Deg/Rad version.\"</span><span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">getOrientationEuler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get local orientation of node in degrees around x, y, and z axes.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The local x, y and z axes orientation in degrees, as a 3D vector.</span>\n\tglm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">getOrientationEulerDeg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get local orientation of node in degrees around x, y, and z axes.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The local x, y and z axes orientation in degrees, as a 3D vector.</span>\n\tglm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">getOrientationEulerRad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get local scale of node in xyz axes where 1 is default.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The local scale in the xyz axes where 1 = 100% of size.</span>\n\tglm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">getScale</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get node's local transformations (position, orientation, scale).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns A refrence to mat4 containing node's local transformations.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa https://open.gl/transformations</span>\n\t<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat4<span class=\"token operator\">&amp;</span> <span class=\"token function\">getLocalTransformMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">// TODO: optimize and cache these</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// (parent would need to know about its children so it can inform them </span>\n\t<span class=\"token comment\" spellcheck=\"true\">// to update their global matrices if it itself transforms)</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get node's global transformations (position, orientation, scale).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns A refrence to mat4 containing node's global transformations.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa https://open.gl/transformations</span>\n\tglm<span class=\"token operator\">::</span>mat4 <span class=\"token function\">getGlobalTransformMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get node's global position as a 3D vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns A 3D vector with the global coordinates.</span>\n\tglm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">getGlobalPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the global orientation of the node as a quaternion.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns An quaternion of the global orientations(useful for complex rotations)</span>\n\tglm<span class=\"token operator\">::</span>quat <span class=\"token function\">getGlobalOrientation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get global scale of node in xyz axes where 1 is default.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The global scale in the xyz axes where 1 = 100% of size.</span>\n\tglm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">getGlobalScale</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Setters</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the local position of the node using xyz coordinates.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param px Desired local x coordinate as a float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param py Desired local y coordinate as a float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pz Desired local z coordinate as a float.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> px<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> py<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> pz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the local position of the node using a 3D vector of coordinates.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param p Desired local xyz coordinates as ref to 3D vector.\t</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the global position of the node using xyz coordinates.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param px Desired global x coordinate as a float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param py Desired global y coordinate as a float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pz Desired global z coordinate as a float.\t</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setGlobalPosition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> px<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> py<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> pz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the global position of the node using a 3D vector of coordinates.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param p Desired global xyz coordinates as ref to 3D vector.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setGlobalPosition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set local orientation with a quaternion.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param q Desired local orientation as ref to an glm::quat.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setOrientation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat<span class=\"token operator\">&amp;</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set local orientation with xyz euler angles.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param eulerAngles Desired local xyz angles in degrees, as ref to 3D vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note Using euler angles can cause gimbal lock.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa https://en.wikipedia.org/wiki/Gimbal_lock</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setOrientation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> eulerAngles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set global orientation with a quaternion.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param q Desired global orientation as ref to an glm::quat.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setGlobalOrientation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat<span class=\"token operator\">&amp;</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set local uniform scale (x, y, and z are equally scaled).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param s Desired scale for all axes as a float where 1 = 100%.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setScale</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set local scale for xyz axes individually.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sx Desired local scale for x axis as a float where 1 = 100%.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sy Desired local scale for y axis as a float where 1 = 100%.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sz Desired local scale for z axis as a float where 1 = 100%.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setScale</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> sx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set local scale for xyz axes individually with a 3D vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param s Desired local scale for all axes as ref to 3D vector where 1 = 100%.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setScale</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Modifiers</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Move node by relative amount with xyz coordinates.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param x Desired relative position change along x axis as a float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param y Desired relative position change along y axis as a float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param z Desired relative position change along z axis as a float.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Move node by relative amount with xyz as ref to 3D vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param offset Desired relative position change along all axes as ref to 3D vector.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Move node left+right relative to current position (in local x axis).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param amount Desired relative position change along local x axis as float.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">truck</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Move node up+down relative to current position (in local y axis).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param amount Desired relative position change along local y axis as float.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">boom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Move node backward+forward relative to current position (in local z axis).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param amount Desired relative position change along local z axis as float.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">dolly</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use the Deg/Rad version.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token function\">tilt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Tilt up+down relative to current orientation (around local x axis).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param degrees Desired relative rotation change along local x axis in degrees as float.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">tiltDeg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Tilt up+down relative to current orientation (around local x axis).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param radians Desired relative rotation change along local x axis in radians as float.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">tiltRad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> radians<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use the Deg/Rad version.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Rotate left+right relative to current orientation (around local y axis).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param degrees Desired relative rotation change along local y axis in degrees as float.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">panDeg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Rotate left+right relative to current orientation (around local y axis).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param radians Desired relative rotation change along local y axis in radians as float.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">panRad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> radians<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use the Deg/Rad version.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token function\">roll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Roll left+right relative to current orientation (around local z axis).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param degrees Desired relative rotation change along local z axis in degrees as float.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rollDeg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Roll left+right relative to current orientation (around local z axis).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param radians Desired relative rotation change along local z axis in radians as float.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rollRad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> radians<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Rotate relative to current orientation by quaternion.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param q Desired relative rotation change as a ref to quaternion.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat<span class=\"token operator\">&amp;</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use the Deg/Rad version.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Rotate relative to current orientation around arbitrary axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param degrees Desired relative angle change in degrees as float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param v Desired axis to rotate around as a ref to cartesian 3D Vector.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rotateDeg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Rotate relative to current orientation around arbitrary axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param radians Desired relative angle change in radians as float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param v Desired axis to rotate around as a ref to cartesian 3D Vector.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> radians<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use the Deg/Rad version.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Rotate relative to current orientation around arbitrary axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param degrees Desired relative angle change in degrees as float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param vx X angle of the axis to rotate around in degrees as float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param vy Y angle of the axis to rotate around in degrees as float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param vz Z angle of the axis to rotate around in degrees as float.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rotateDeg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Rotate relative to current orientation around arbitrary axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param radians Desired relative angle change in radians as float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param vx X angle of the axis to rotate around in radians as float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param vy Y angle of the axis to rotate around in radians as float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param vz Z angle of the axis to rotate around in radians as float.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> radians<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Rotate relative to current orientation by quaternion around point.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param q Desired relative rotation change as a ref to quaternion.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param point Point to rotate around in local xyz coordinates as ref to 3D vector.\t</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rotateAround</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat<span class=\"token operator\">&amp;</span> q<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use the Deg/Rad version.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rotateAround</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> axis<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Rotate relative to current orientation around arbitrary axis around point.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param degrees Desired relative angle change in degrees as float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param axis The arbitrary axis to rotate around as ref to cartesian 3D vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param point Point to rotate around in local xyz coordinates as ref to 3D vector.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rotateAroundDeg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> axis<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Rotate relative to current orientation around arbitrary axis around point.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param radians Desired relative angle change in degrees as float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param axis The arbitrary axis to rotate around as ref to cartesian 3D vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param point Point to rotate around in local xyz coordinates as ref to 3D vector.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rotateAroundRad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> radians<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> axis<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Orient node to look at point (-z axis pointing to global position).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param lookAtPosition XYZ coordinates of point to look at as ref to 3D vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note This version calculates the up vector automatically to try to keep</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///       it relatively consistant with the original angle.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">lookAt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> lookAtPosition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Orient node to look at point (-z axis pointing to global position).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param lookAtPosition XYZ coordinates of point to look at as ref to 3D vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param upVector The desired up axis as a cartesian 3D vector.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">lookAt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> lookAtPosition<span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span>vec3 upVector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Orient node to look at another node (-z axis pointing at other node).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// \\param lookAtNode A reference to the node to look at.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note This version calculates the up vector automatically to try to keep</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///       it relatively consistant with the original angle.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">lookAt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofNode<span class=\"token operator\">&amp;</span> lookAtNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Orient node to look at another node (-z axis pointing at other node).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param lookAtNode A reference to the node to look at.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param upVector The desired up axis as a ref to cartesian 3D vector.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">lookAt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofNode<span class=\"token operator\">&amp;</span> lookAtNode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> upVector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use the Deg/Rad version.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token function\">orbit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> longitude<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> latitude<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> centerPoint <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use the Deg/Rad version.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token function\">orbit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> longitude<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> latitude<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> ofNode<span class=\"token operator\">&amp;</span> centerNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Orbit node around a global position at a specific radius.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param longitude The longitudinal position of the node in degrees as float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param latitude The latitudinal position of the node in degrees as float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param radius The desired radius from the position in degrees as float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param centerPoint The global position to orbit around as ref to 3D vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        Default = (0, 0, 0).\t</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">orbitDeg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> longitude<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> latitude<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> centerPoint <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Orbit node around another node at a specific radius.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param longitude The longitudinal position of the node in degrees as float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param latitude The latitudinal position of the node in degrees as float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param radius The desired radius from the position in degrees as float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param centerNode The global position to orbit around as ref to 3D vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        Default = (0, 0, 0).\t</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">orbitDeg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> longitude<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> latitude<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> ofNode<span class=\"token operator\">&amp;</span> centerNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Orbit node around a global position at a specific radius.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param longitude The longitudinal position of the node in radians as float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param latitude The latitudinal position of the node in radians as float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param radius The desired radius from the position in degrees as float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param centerPoint The global node to orbit around as ref to 3D vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        Default = (0, 0, 0).\t</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">orbitRad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> longitude<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> latitude<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> centerPoint <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Orbit node around another node at a specific radius.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param longitude The longitudinal position of the node in radians as float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param latitude The latitudinal position of the node in radians as float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param radius The desired radius from the position in degrees as float.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param centerNode The global node to orbit around as ref to 3D vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        Default = (0, 0, 0).\t</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">orbitRad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> longitude<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> latitude<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> ofNode<span class=\"token operator\">&amp;</span> centerNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name OpenGL Transformation</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set opengl renderer's modelview matrix to this nodes transform.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param renderer A pointer to the renderer you want to set to this node's transform;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note If you want to draw something at the position+orientation+scale of this node,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// call ofNode::transform(); write your draw code, and ofNode::restoreTransform();</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// OR A simpler way is to extend ofNode and override ofNode::customDraw();</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">transformGL</span><span class=\"token punctuation\">(</span>ofBaseRenderer <span class=\"token operator\">*</span> renderer <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Restore opengl renderer's previous modelview transform matrix.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param renderer A pointer to the renderer you want to restore transformation to.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">restoreTransformGL</span><span class=\"token punctuation\">(</span>ofBaseRenderer <span class=\"token operator\">*</span> renderer <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Reset this node's transformations, position, rotation and scale.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">resetTransform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Drawing</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief If you extend ofNode and wish to change the way it draws, extend this.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param renderer A pointer to the renderer you want to draw to.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note Try to not use global functions for rendering and instead use the passed</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// renderer.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">customDraw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofBaseRenderer <span class=\"token operator\">*</span> renderer<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief If you extend ofNode and wish to change the way it draws, extend this.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note Try to not use global functions for rendering and instead use the passed</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// renderer.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">customDraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draw the node as a white cube with xyz axes. </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note do NOT override this. </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// It transforms the node to its position+orientation+scale</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and calls the virtual 'customDraw' method above which you CAN override.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">createMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">updateAxis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Classes extending ofNode can override this method to get</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        notified when the position changed.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onPositionChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Classes extending ofNode can override this methods to get notified</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        when the orientation changed.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onOrientationChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Classes extending ofNode can override this methods to get notified </span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        when the scale changed.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onScaleChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\tofNode <span class=\"token operator\">*</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">onParentPositionChanged</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> position<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token function\">onPositionChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">onParentOrientationChanged</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span> orientation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token function\">onOrientationChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">onParentScaleChanged</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> scale<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token function\">onScaleChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\n\tofParameter<span class=\"token operator\">&lt;</span>glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">></span> position<span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span>glm<span class=\"token operator\">::</span>quat<span class=\"token operator\">></span> orientation<span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span>glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">></span> scale<span class=\"token punctuation\">;</span>\n\n\tstd<span class=\"token operator\">::</span>array<span class=\"token operator\">&lt;</span>glm<span class=\"token operator\">::</span>vec3<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token operator\">></span> axis<span class=\"token punctuation\">;</span>\n\n\tglm<span class=\"token operator\">::</span>mat4 localTransformMatrix<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> legacyCustomDrawOverrided<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>set<span class=\"token operator\">&lt;</span>ofNode<span class=\"token operator\">*</span><span class=\"token operator\">></span> children<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span>ofNode <span class=\"token operator\">&amp;</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">removeListener</span><span class=\"token punctuation\">(</span>ofNode <span class=\"token operator\">&amp;</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//\tglm::mat4 globalTransformMatrix;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n","type":"source"}}],"fetch":[]}