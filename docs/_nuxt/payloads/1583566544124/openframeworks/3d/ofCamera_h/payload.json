{"data":[{"page":{"entry":{"name":"ofCamera.h","filename":"ofCamera.h","absolute":"/Users/gilbertsinnott/Code/openFrameworks/libs/openFrameworks/3d/ofCamera.h","path":"/openframeworks/3d/ofCamera_h","route":"/openframeworks/3d/ofCamera.h","dir":"../libs/openFrameworks/3d","ext":"h","type":"source","id":201,"parent":194,"breadcrumbs":[194,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofNode.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofRectangle.h\"</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofRectangle</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// \\todo Use the public API of ofNode for all transformations</span>\n<span class=\"token comment\" spellcheck=\"true\">// \\todo add set projection matrix</span>\n<span class=\"token comment\" spellcheck=\"true\">// \\todo support for left handed or right handed?</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief A basic camera object for interacting with objects in 3D space.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\author Memo Akten, MSA Visuals Ltd. 2011</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofCamera</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofNode <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Constructor and Destructor</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Construct a default camera.</span>\n\t<span class=\"token function\">ofCamera</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Destroy the camera.</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ofCamera</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\name Camera Settings</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the field of view for a perspective camera.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This sets the vertical field of view for the camera, in degrees.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This only operates with perspective cameras, and will have no effect </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// with cameras in orthographic mode. </span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param f The desired field of view for the camera, in degrees.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setFov</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setNearClip</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setFarClip</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the \"lens offset\" applied to this camera.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Ordinarily, the camera is pointed straight down the center of its view</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// frustum. However, it is possible to orient the camera towards a location</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// offset from the center of its frustum. This is called an \"assymetric</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// frustum\" and is used (for example) in stereo views.  It is acheived by</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// applying an offset to the center of projection.  This function sets this</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// offset from an ofVec2f argument.  For more information see</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;http://www.orthostereo.com/geometryopengl.html>.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param lensOffset The \"lens offset\" to apply to this camera, encoded in</span>\n    <span class=\"token comment\" spellcheck=\"true\">///     an ofVec2f.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setLensOffset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> lensOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the recommended aspect ratio for a perspective camera.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Sets the aspect ratio of the camera to the desired float, and forces the</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// use of aspect ratio calculations.  Currently only used with perspective</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// cameras. The default value (and the value used with orthographic</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// cameras) is the ratio of the viewport's width to the viewport's height.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param aspectRatio The desired aspect ratio, e.g. 1.3333, 1.6, etc.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setAspectRatio</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> aspectRatio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set whether or not the aspect ratio of this camera is forced to a non-default setting.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The camera's aspect ratio, by default, is the aspect ratio of your</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// viewport.  If you have set a non-default value (with</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// ofCamera::setAspectRatio()), you can toggle whether or not this value is</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// applied.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param forceAspectRatio Whether or not this camera should use an aspect ratio you have set yourself.  </span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setForceAspectRatio</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> forceAspectRatio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the camera's field of view, in degrees.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Get the camera's vertical field of view, in degrees.  This is only</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// meaningful for perspective cameras.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The camera's field of view, in degrees.</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getFov</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> fov<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token keyword\">float</span> <span class=\"token function\">getNearClip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> nearClip<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">float</span> <span class=\"token function\">getFarClip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> farClip<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the \"lens offset\" applied to this camera, encoded as an ofVec2f.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Ordinarily, the camera is pointed straight down the center of its view</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// frustum.  However, it is possible to orient the camera towards a</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// location offset from the center of its frustum.  This is called an</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \"asymetric frustum\" and is used (for example) in stereo views.  It is</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// acheived by applying an offset to the center of projection.  This</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// function returns the offset that has been applied, as an ofVec2f.  For</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// more information see http://www.orthostereo.com/geometryopengl.html.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The \"lens offset\" applied to this camera, encoded in an ofVec2f.</span>\n\tglm<span class=\"token operator\">::</span>vec2 <span class=\"token function\">getLensOffset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> lensOffset<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the boolean state which indicates whether the aspect ratio of this camera is forced to a non-default setting.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns A boolean: whether or not this camera's aspect ratio is set to a non-default value. </span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">getForceAspectRatio</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> forceAspectRatio<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the aspect ratio of this camera's viewport.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Returns the aspect ratio of this camera's viewport. Usually this will be</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// the ratio of the width to height of your display. Intended for</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// perspective cameras.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The aspect ratio of this camera's viewport.</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getAspectRatio</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> aspectRatio<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name OpenGL Setup</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setupPerspective</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> vFlip <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> fov <span class=\"token operator\">=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> nearDist <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> farDist <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> lensOffset <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setupOffAxisViewPortal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> topLeft<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> bottomLeft<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> bottomRight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setVFlip</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> vflip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isVFlipped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">enableOrtho</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">disableOrtho</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">getOrtho</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getImagePlaneDistance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span> viewport <span class=\"token operator\">=</span> <span class=\"token function\">ofRectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Rendering</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Begins rendering with the camera.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// void draw() {</span>\n    <span class=\"token comment\" spellcheck=\"true\">///     // Begin rendering from the camera's perspective.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///     camera.begin();</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">///     ofLine(0, 0, ofGetWidth(), ofGetHeight());</span>\n    <span class=\"token comment\" spellcheck=\"true\">///     // Additional rendering ...</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">///     // End rendering form the camera's perspective.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///     camera.end();</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// }</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param viewport The camera's rendering viewport.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token function\">getViewport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span> viewport<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Ends rendering with the camera.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name OpenGL Matrix</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Access the projection matrix.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns the current 4x4 projection matrix.</span>\n\tglm<span class=\"token operator\">::</span>mat4 <span class=\"token function\">getProjectionMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">getProjectionMatrix</span><span class=\"token punctuation\">(</span><span class=\"token function\">getViewport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tglm<span class=\"token operator\">::</span>mat4 <span class=\"token function\">getProjectionMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span> viewport<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Access the model view matrix.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns the current 4x4 model view matrix.</span>\n\tglm<span class=\"token operator\">::</span>mat4 <span class=\"token function\">getModelViewMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\todo getModelViewProjectionMatrix()</span>\n\tglm<span class=\"token operator\">::</span>mat4 <span class=\"token function\">getModelViewProjectionMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span> viewport<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tglm<span class=\"token operator\">::</span>mat4 <span class=\"token function\">getModelViewProjectionMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">getModelViewProjectionMatrix</span><span class=\"token punctuation\">(</span><span class=\"token function\">getViewport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\name Coordinate Conversion</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Obtain the screen coordinates of a point in the 3D world.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Takes an (X,Y,Z) point in your 3D world, encoded as an ofVec3f, </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and returns the location (also as an ofVec3f) where this point would</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// appear on your (two-dimensional) display. The screen position's \"Z</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// coordinate\" is set to be the same as your camera's.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param WorldXYZ A 3D point in the world, whose screen coordinates you wish to know. </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param viewport (Optional) A viewport. The default is ofGetCurrentViewport(). </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns An ofVec3f containing the screen coordinates of your 3D point of interest. </span>\n\tglm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">worldToScreen</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span>vec3 WorldXYZ<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span> viewport<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tglm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">worldToScreen</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span>vec3 WorldXYZ<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">worldToScreen</span><span class=\"token punctuation\">(</span>WorldXYZ<span class=\"token punctuation\">,</span> <span class=\"token function\">getViewport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Obtain the coordinates, in the 3D world, of a 2D point presumed to be on your screen.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Takes a pixel location on your screen, encoded in an ofVec3f, </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and returns (also as an ofVec3f) the 3D world coordinates of that point.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// You'll also need to specify a Z value when providing your screen point. </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This Z value is interpreted as a distance into or away from the screen. </span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param ScreenXYZ A point on your screen, whose 3D world coordinates you wish to know.</span>\n\tglm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">screenToWorld</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span>vec3 ScreenXYZ<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span> viewport<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tglm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">screenToWorld</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span>vec3 ScreenXYZ<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">screenToWorld</span><span class=\"token punctuation\">(</span>ScreenXYZ<span class=\"token punctuation\">,</span> <span class=\"token function\">getViewport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\todo worldToCamera()</span>\n\tglm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">worldToCamera</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span>vec3 WorldXYZ<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span> viewport<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tglm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">worldToCamera</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span>vec3 WorldXYZ<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">worldToCamera</span><span class=\"token punctuation\">(</span>WorldXYZ<span class=\"token punctuation\">,</span> <span class=\"token function\">getViewport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\todo cameraToWorld()</span>\n\tglm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">cameraToWorld</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span>vec3 CameraXYZ<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span> viewport<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tglm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">cameraToWorld</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span>vec3 CameraXYZ<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">cameraToWorld</span><span class=\"token punctuation\">(</span>CameraXYZ<span class=\"token punctuation\">,</span> <span class=\"token function\">getViewport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Renderer</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n    \n    <span class=\"token keyword\">void</span> <span class=\"token function\">setRenderer</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofBaseRenderer<span class=\"token operator\">></span> renderer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draw a visual representation of the camera's frustum</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note  This will only be visible when the camera drawing its </span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        frustum is viewed through another camera.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">drawFrustum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span> viewport<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">drawFrustum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">drawFrustum</span><span class=\"token punctuation\">(</span><span class=\"token function\">getViewport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\tofRectangle <span class=\"token function\">getViewport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofBaseRenderer<span class=\"token operator\">></span> <span class=\"token function\">getRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">calcClipPlanes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span> viewport<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">bool</span> isOrtho<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> fov<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> nearClip<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> farClip<span class=\"token punctuation\">;</span>\n\tglm<span class=\"token operator\">::</span>vec2 lensOffset<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> forceAspectRatio<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> aspectRatio<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// only used when forceAspect=true, = w / h</span>\n\t<span class=\"token keyword\">bool</span> vFlip<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofBaseRenderer<span class=\"token operator\">></span> renderer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n","type":"source"}}],"fetch":[]}