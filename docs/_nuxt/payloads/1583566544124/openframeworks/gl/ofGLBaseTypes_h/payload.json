{"data":[{"page":{"entry":{"name":"ofGLBaseTypes.h","filename":"ofGLBaseTypes.h","absolute":"/Users/gilbertsinnott/Code/openFrameworks/libs/openFrameworks/gl/ofGLBaseTypes.h","path":"/openframeworks/gl/ofGLBaseTypes_h","route":"/openframeworks/gl/ofGLBaseTypes.h","dir":"../libs/openFrameworks/gl","ext":"h","type":"source","id":240,"parent":235,"breadcrumbs":[235,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofGraphicsBaseTypes.h\"</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofTexture</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofShader</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief An abstract class representing an object that can have an ofTexture.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofBaseHasTexture</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Destroy the ofBaseHasTexture.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ofBaseHasTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns a reference to the ofTexture.</span>\n\t<span class=\"token keyword\">virtual</span> ofTexture <span class=\"token operator\">&amp;</span> <span class=\"token function\">getTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns a const reference to the ofTexture.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">const</span> ofTexture <span class=\"token operator\">&amp;</span> <span class=\"token function\">getTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Enable or disable internal ofTexture use.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bUseTex true if an ofTexture should be used.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUseTexture</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> bUseTex<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if an internal ofTexture is being used.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">isUsingTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief An abstract class representing an object that ofTexture planes.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofBaseHasTexturePlanes</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofBaseHasTexture<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Destroy the ofBaseHasTexturePlanes.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ofBaseHasTexturePlanes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns a reference to a std::vector containing the ofTexture planes.</span>\n\t<span class=\"token keyword\">virtual</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofTexture<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getTexturePlanes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns a const reference to a std::vector containing the ofTexture planes.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofTexture<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getTexturePlanes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief An abstract class representing an image.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// This empty class primarily exists to allow templated subclasses of different</span>\n<span class=\"token comment\" spellcheck=\"true\">/// types to be stored as raw or shared pointers in collections such as</span>\n<span class=\"token comment\" spellcheck=\"true\">/// std::vector.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Example:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\code{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// std::vector&lt;ofAbstractImage*> imageProviders;</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofImage image;</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofFloatImage floatImage;</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofShortImage shortImage;</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // ...</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// imageProviders.push_back(&amp;image);</span>\n<span class=\"token comment\" spellcheck=\"true\">/// imageProviders.push_back(&amp;floatImage);</span>\n<span class=\"token comment\" spellcheck=\"true\">/// imageProviders.push_back(&amp;shortImage);</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\endcode</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofAbstractImage</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofBaseDraws<span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> ofBaseHasTexture<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Destroy the ofAbstractImage.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ofAbstractImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief A base class represeting an image.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\tparam T The pixel data type.</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofBaseImage_</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofAbstractImage<span class=\"token punctuation\">,</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> ofBaseHasPixels_<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Destroy the ofBaseImage_.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span>ofBaseImage_<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief A typedef for an unsigned char ofBaseImage_.</span>\n<span class=\"token keyword\">typedef</span> ofBaseImage_<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> ofBaseImage<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief A typedef for an float ofBaseImage_.</span>\n<span class=\"token keyword\">typedef</span> ofBaseImage_<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> ofBaseFloatImage<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief A typedef for an unsigned short ofBaseImage_.</span>\n<span class=\"token keyword\">typedef</span> ofBaseImage_<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span><span class=\"token operator\">></span> ofBaseShortImage<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">of3dPrimitive</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofBaseGLRenderer</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofBaseRenderer<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">using</span> ofBaseRenderer<span class=\"token operator\">::</span>draw<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\section Drawing</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draw a texture with this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param image The texture to draw with this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param x The x coordinate to use when drawing the texture with this</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param y The y coordinate to use to draw the texture with this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param z The z coordinate to use to draw the texture with this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param w The width to use to draw the the texture with this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param h The height to use to draw the the texture with this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sx The subsection x axis offset within the texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sy The subsection y axis offset within the texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sw The subsection width offset within the texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sh The subsection height offset within the texture.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofTexture <span class=\"token operator\">&amp;</span> image<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sw<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sh<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draw vertices from a vertext buffer with this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\p drawMode may be any of the OpenGL primitive draw modes:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_POINTS,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_LINE_STRIP,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_LINE_LOOP,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_LINES,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_TRIANGLE_STRIP,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_TRIANGLE_FAN,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_TRIANGLES</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofGetGLPrimitiveMode() can also be used to get the GLuint draw mode</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// from an ofPrimitiveMode.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param vbo The vertext buffer object to draw vertices from with this</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param drawMode OpenGL primitive draw mode to use when drawing the vbo's</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// vertices with this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param first The index of the first vertex to draw from \\p vbo.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param total The total number of indices to draw from \\p vbo.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofGetGLPrimitiveMode()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa glDrawArrays()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDrawArrays.xml</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofVbo <span class=\"token operator\">&amp;</span> vbo<span class=\"token punctuation\">,</span> GLuint drawMode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> first<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draw vertices from a vertext buffer with this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\p drawMode may be any of the OpenGL primitive draw modes:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_POINTS,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_LINE_STRIP,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_LINE_LOOP,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_LINES,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_TRIANGLE_STRIP,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_TRIANGLE_FAN,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_TRIANGLES</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofGetGLPrimitiveMode() can also be used to get the GLuint draw mode</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// from an ofPrimitiveMode.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param vbo The vertext buffer object to draw vertices from with this</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param drawMode OpenGL primitive draw mode to use when drawing the vbo's</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        vertices with this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param amt The number of elements to be rendered.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param offsetelements The number of elements (indices) offset from the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        first element to start drawing from.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofGetGLPrimitiveMode()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa glDrawElements()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-9-vbo-indexing/</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa https://www.opengl.org/sdk/docs/man/html/glDrawElements.xhtml</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">drawElements</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofVbo <span class=\"token operator\">&amp;</span> vbo<span class=\"token punctuation\">,</span> GLuint drawMode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> amt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offsetelements<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draw vertices from a vertext buffer using instanced arrays.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\p drawMode may be any of the OpenGL primitive draw modes:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_POINTS,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_LINE_STRIP,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_LINE_LOOP,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_LINES,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_TRIANGLE_STRIP,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_TRIANGLE_FAN,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_TRIANGLES</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofGetGLPrimitiveMode() can also be used to get the GLuint draw mode</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// from an ofPrimitiveMode.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param vbo The vertext buffer object to draw vertices from with this</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param drawMode OpenGL primitive draw mode to use when drawing the vbo's</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        vertices with this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param first The index of the first vertex to draw from \\p vbo.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param total The total number of indices to draw from \\p vbo.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param primCount Specifies the number of instances of the specified</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        range of indices to be rendered.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning This method may be unsupported when using OpenGLES.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofGetGLPrimitiveMode()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa glDrawArraysInstanced()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa https://www.khronos.org/opengles/sdk/docs/man3/html/glDrawArraysInstanced.xhtml</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">drawInstanced</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofVbo <span class=\"token operator\">&amp;</span> vbo<span class=\"token punctuation\">,</span> GLuint drawMode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> first<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> primCount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draw vertices from a vertex buffer using this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\p drawMode may be any of the OpenGL primitive draw modes:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_POINTS,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_LINE_STRIP,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_LINE_LOOP,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_LINES,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_TRIANGLE_STRIP,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_TRIANGLE_FAN,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    GL_TRIANGLES</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofGetGLPrimitiveMode() can also be used to get the GLuint draw mode</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// from an ofPrimitiveMode.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param vbo The vertext buffer object to draw vertices from with this</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param drawMode OpenGL primitive draw mode to use when drawing the vbo's</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        vertices with this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param amt The number of elements to be rendered.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param primCount Specifies the number of instances of the specified</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        range of indices to be rendered.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning This method may be unsupported when using OpenGLES.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofGetGLPrimitiveMode()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa glDrawElementsInstanced()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa https://www.opengl.org/sdk/docs/man/html/glDrawElementsInstanced.xhtml</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">drawElementsInstanced</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofVbo <span class=\"token operator\">&amp;</span> vbo<span class=\"token punctuation\">,</span> GLuint drawMode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> amt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> primCount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draw a vertex buffer mesh using a specific poly render mode.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\p renderType defines how the \\p mesh will be rendered and may be:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    OF_MESH_POINTS,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    OF_MESH_WIREFRAME,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    OF_MESH_FILL</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param mesh The vertex buffer mesh to draw with this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param renderType The poly render mode to use when drawing \\p mesh with</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofPolyRenderMode</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofVboMesh <span class=\"token operator\">&amp;</span> mesh<span class=\"token punctuation\">,</span> ofPolyRenderMode renderType<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draw a vertex buffer mesh with instancing using a specific poly</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// render mode.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\p renderType defines how the \\p mesh will be rendered and may be:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    OF_MESH_POINTS,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    OF_MESH_WIREFRAME,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    OF_MESH_FILL</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param mesh The vertext buffer mesh to draw vertices from with this</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param renderType The poly render mode to use when drawing \\p mesh with</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param primCount Specifies the number of instances of the specified</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// range of indices to be rendered.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">drawInstanced</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofVboMesh <span class=\"token operator\">&amp;</span> mesh<span class=\"token punctuation\">,</span> ofPolyRenderMode renderType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> primCount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\section Textures</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Bind the texture at the texture location.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param tex The texture to bind with this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param textureLocation The location to bind this texture.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">enableTextureTarget</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofTexture <span class=\"token operator\">&amp;</span> tex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> textureLocation<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Unbind the texture target at the texture location.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\p textureTarget can be accessed from an ofTexture with</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofTexture::texData::textureTarget.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param textureTarget The texture target to unbind from this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param textureLocation The location that texture was bound with.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofTextureData()</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">disableTextureTarget</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> textureTarget<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> textureLocation<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Enable alpha masking using this texture as the mask source.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\p tex should be a grayscale image whose pixels will be used to set the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// alpha value of the previously bound texture or framebuffer. Darker</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// pixels cause transparency in the masked image. Disable a mask being</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// used in this way with disableAlphaMask().</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param tex The texture to use as the alpha mask.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa disableAlphaMask()</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAlphaMaskTex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofTexture <span class=\"token operator\">&amp;</span> tex<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Disable this renderer's current alpha mask texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa setAlphaMaskTex()</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">disableAlphaMask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\section Point Sprites</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Enable point sprites when using this renderer.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">enablePointSprites</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Disable point sprites when using this renderer.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">disablePointSprites</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\section Lighting</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Enable lighting with this renderer.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">enableLighting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Disable lighting with this renderer.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">disableLighting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Enable seperate specular lighting parameters.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">enableSeparateSpecularLight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Disable seperate specular lighting parameters.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">disableSeparateSpecularLight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns true if lighting is enabled with this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns True if lighting is enabled with this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa enableLighting()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa disableLighting()</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">getLightingEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Enable/disable smooth light shading.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param b True to enable smooth light shading.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSmoothLighting</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> b<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the global ambient light color.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param c The color to set this renderer to use as ambient lighting.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setGlobalAmbientColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofColor<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Enable a light at a specific index.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param lightIndex The index of the light to enable.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">enableLight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> lightIndex<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Disable a light at a specific index.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param lightIndex The index of the light to disable.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">disableLight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> lightIndex<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the spot light cutoff for a light at a specific index.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param lightIndex The index of the light whose spot cutoff will be set.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param spotCutOff The spot light cut off value.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa GL_SPOT_CUTOFF</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLightSpotlightCutOff</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> lightIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> spotCutOff<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the spotlight concentration (exponent) for a light at a</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        specific index.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param lightIndex The index of the light whose spot concentration</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        will be set.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param exponent The spot light exponent value.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa GL_SPOT_EXPONENT</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLightSpotConcentration</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> lightIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> exponent<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the light attenuation for a light at a specific index.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param lightIndex The index of the light whose spot concentration</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        will be set.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param constant Set the constant attenuation factor of the light at</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        \\p lightIndex.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param linear Set the linear attenuation factor of the light at</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        \\p lightIndex.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param quadratic Set the quadratic attenuation factor of the light at</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        \\p lightIndex.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa glLightf()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa GL_CONSTANT_ATTENUATION</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa GL_LINEAR_ATTENUATION</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa GL_QUADRATIC_ATTENUATION</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLightAttenuation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> lightIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> constant<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> linear<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> quadratic <span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the ambient light color for a light at a specific index.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param lightIndex The index of the light to set the ambient color of.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param c The color to set the ambient light.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLightAmbientColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> lightIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofFloatColor<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the diffues light color for a light at a specific index.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param lightIndex The index of the light to set the diffuse color of.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param c The color to set the diffuse light.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLightDiffuseColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> lightIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofFloatColor<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the specular light color for a light at a specific index.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param lightIndex The index of the light to set the specular color of.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param c The color to set the specular light.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLightSpecularColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> lightIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofFloatColor<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the position of a light at a specific index.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param lightIndex The index of the light to set the position color of.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param position A vector of four values that specify the position of the light in homogeneous object coordinates.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa GL_POSITION</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLightPosition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> lightIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec4 <span class=\"token operator\">&amp;</span> position<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the spot direction of a light at a specific index.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param lightIndex The index of the light to set the spot direction of.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param direction A vector of four values that specify the direction of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        the light in homogeneous object coordinates.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa GL_SPOT_DIRECTION</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLightSpotDirection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> lightIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec4 <span class=\"token operator\">&amp;</span> direction<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\section GL Version</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the major OpenGL version number this renderer is using.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The major OpenGL version number this renderer is using.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getGLVersionMajor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the minor OpenGL version number this renderer is using.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The minor OpenGL version number this renderer is using.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getGLVersionMinor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\section Saving Screen Pixels</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Fill an ofPixels object with a subsection of the current screen.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param x The x coordinate to use when specifying the bounds of the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        subsection of the screen to save into \\p pixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param y The y coordinate to use when specifying the bounds of the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        subsection of the screen to save into \\p pixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param w The width to use when specifying the bounds of the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        subsection of the screen to save into \\p pixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param h The height to use when specifying the bounds of the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///        subsection of the screen to save into \\p pixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pixels The pixels object to fill with the pixels from the screen.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">saveScreen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span> ofPixels <span class=\"token operator\">&amp;</span> pixels<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Fill an ofPixels object with the contents of the current screen.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pixels The pixels object to fill with the pixels from the screen.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">saveFullViewport</span><span class=\"token punctuation\">(</span>ofPixels <span class=\"token operator\">&amp;</span> pixels<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">using</span> ofBaseRenderer<span class=\"token operator\">::</span>bind<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">using</span> ofBaseRenderer<span class=\"token operator\">::</span>unbind<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\section Binding/unbinding</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Bind a material to be used with this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The material bound with this method will be used by this renderer until</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// it is unbound with unbind().</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param material The material to bind to this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa glMaterialfv()</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofBaseMaterial <span class=\"token operator\">&amp;</span> material<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Bind a shader to be used with this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The shader bound with this method will be used by this renderer until</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// it is unbound with unbind().</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param shader The shader to bind to this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa glUseProgram()</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofShader <span class=\"token operator\">&amp;</span> shader<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Bind a texture to be used with this renderer at a location.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The texture bound with this method will be used by this renderer until</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// it is unbound with unbind().</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param texture The texture to bind with this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param location The texture location to bind this texture to.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofTexture <span class=\"token operator\">&amp;</span> texture<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> location<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Bind a video's texture to this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The video bound with this method will be used by this renderer</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// until it is unbound with unbind().</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param video The video whose texture should be bound to this renderer.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofBaseVideoDraws <span class=\"token operator\">&amp;</span> video<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Unbind a material previously bound to this renderer with bind().</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param material The material that is currently bound to this renderer.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unbind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofBaseMaterial <span class=\"token operator\">&amp;</span> material<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Unbind a shader previously bound to this renderer with bind().</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param shader The shader that is currently bound to this renderer.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unbind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofShader <span class=\"token operator\">&amp;</span> shader<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Unbind a texture previously bound to this renderer with bind().</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param texture The texture that is currently bound to this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param location The location \\p texture was bound at.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unbind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofTexture <span class=\"token operator\">&amp;</span> texture<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> location<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Unbind a video previously bound to this renderer with bind().</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param video The video that is currently bound to this renderer.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unbind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofBaseVideoDraws <span class=\"token operator\">&amp;</span> video<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Bind a frame buffer to this renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The fbo bound with this method will be used as this renderer</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// until it is unbound with unbind().</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param fbo The frame buffer whose texture should be bound to this</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// renderer.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFbo <span class=\"token operator\">&amp;</span> fbo<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Unbind a frame buffer previously bound to this renderer with bind().</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param fbo The frame buffer that is currently bound to this renderer.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unbind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFbo <span class=\"token operator\">&amp;</span> fbo<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Bind source and destination frame buffers for blitting.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param fboSrc The source frame buffer to bind for blitting.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param fboDst The destination frame buffer to bind for blitting.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param attachmentPoint The attatchement point to use when binding.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning This method is unavailable when using OpenGLES.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa https://en.wikipedia.org/wiki/Bit_blit</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bindForBlitting</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFbo <span class=\"token operator\">&amp;</span> fboSrc<span class=\"token punctuation\">,</span> ofFbo <span class=\"token operator\">&amp;</span> fboDst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> attachmentPoint<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\section Setting The Render Surface</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Begin using a frame buffer as this renderer's render surface.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The fbo used with this method will be used by this renderer</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// until it is unbound with unbind().</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param fbo The frame buffer to use as this renderer's render surface.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param mode The fbo mode to use.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofFboMode</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFbo <span class=\"token operator\">&amp;</span> fbo<span class=\"token punctuation\">,</span> ofFboMode mode<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Stop using the specified frame buffer as this renderer's render</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// surface.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param fbo An fbo that is currently being used as this renderer's render</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// surface with a call to begin().</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFbo <span class=\"token operator\">&amp;</span> fbo<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n","type":"source"}}],"fetch":[]}