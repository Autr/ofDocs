{"data":[{"page":{"entry":{"name":"ofTessellator.cpp","filename":"ofTessellator.cpp","absolute":"/Users/gilbertsinnott/Code/openFrameworks/libs/openFrameworks/graphics/ofTessellator.cpp","path":"/openframeworks/graphics/ofTessellator_cpp","route":"/openframeworks/graphics/ofTessellator.cpp","dir":"../libs/openFrameworks/graphics","ext":"cpp","type":"source","id":280,"parent":259,"breadcrumbs":[259,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofTessellator.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"tesselator.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofPolyline.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofMesh.h\"</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------- polygons ----------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">// to do polygons, we need tesselation</span>\n<span class=\"token comment\" spellcheck=\"true\">// to do tesselation, we need glu and callbacks....</span>\n<span class=\"token comment\" spellcheck=\"true\">// ------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// one of the callbacks creates new vertices (on intersections, etc),</span>\n<span class=\"token comment\" spellcheck=\"true\">// and there is a potential for memory leaks</span>\n<span class=\"token comment\" spellcheck=\"true\">// if we don't clean up properly</span>\n<span class=\"token comment\" spellcheck=\"true\">// ------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// also the easiest system, using beginShape</span>\n<span class=\"token comment\" spellcheck=\"true\">// vertex(), endShape, will also use dynamically</span>\n<span class=\"token comment\" spellcheck=\"true\">// allocated memory</span>\n<span class=\"token comment\" spellcheck=\"true\">// ------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// so, therefore, we will be using a static vector here</span>\n<span class=\"token comment\" spellcheck=\"true\">// for two things:</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">// a) collecting vertices</span>\n<span class=\"token comment\" spellcheck=\"true\">// b) new vertices on combine callback</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">// important note!</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">// this assumes single threaded polygon creation</span>\n<span class=\"token comment\" spellcheck=\"true\">// you can have big problems if creating polygons in</span>\n<span class=\"token comment\" spellcheck=\"true\">// multiple threads... please be careful</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">// (but also be aware that alot of opengl code</span>\n<span class=\"token comment\" spellcheck=\"true\">// is single threaded anyway, so you will have problems</span>\n<span class=\"token comment\" spellcheck=\"true\">// with many things opengl related across threads)</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">// ------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// (note: this implementation is based on code from ftgl)</span>\n<span class=\"token comment\" spellcheck=\"true\">// ------------------------------------</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> <span class=\"token function\">memAllocator</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>userData<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> size <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> <span class=\"token function\">memReallocator</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>userData<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> size <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">memFree</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>userData<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ptr <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">free</span> <span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\nofTessellator<span class=\"token operator\">::</span><span class=\"token function\">ofTessellator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">:</span> <span class=\"token function\">cacheTess</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\nofTessellator<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">ofTessellator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">tessDeleteTess</span><span class=\"token punctuation\">(</span>cacheTess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\nofTessellator<span class=\"token operator\">::</span><span class=\"token function\">ofTessellator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofTessellator <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">:</span> <span class=\"token function\">cacheTess</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mom <span class=\"token operator\">!=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cacheTess<span class=\"token punctuation\">)</span> <span class=\"token function\">tessDeleteTess</span><span class=\"token punctuation\">(</span>cacheTess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\nofTessellator <span class=\"token operator\">&amp;</span> ofTessellator<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofTessellator <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mom <span class=\"token operator\">!=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cacheTess<span class=\"token punctuation\">)</span> <span class=\"token function\">tessDeleteTess</span><span class=\"token punctuation\">(</span>cacheTess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofTessellator<span class=\"token operator\">::</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\ttessAllocator<span class=\"token punctuation\">.</span>memalloc <span class=\"token operator\">=</span> memAllocator<span class=\"token punctuation\">;</span>\n\ttessAllocator<span class=\"token punctuation\">.</span>memrealloc <span class=\"token operator\">=</span> memReallocator<span class=\"token punctuation\">;</span>\n\ttessAllocator<span class=\"token punctuation\">.</span>memfree <span class=\"token operator\">=</span> memFree<span class=\"token punctuation\">;</span>\n\ttessAllocator<span class=\"token punctuation\">.</span>meshEdgeBucketSize<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\ttessAllocator<span class=\"token punctuation\">.</span>meshVertexBucketSize<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\ttessAllocator<span class=\"token punctuation\">.</span>meshFaceBucketSize<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\ttessAllocator<span class=\"token punctuation\">.</span>dictNodeBucketSize<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\ttessAllocator<span class=\"token punctuation\">.</span>regionBucketSize<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\ttessAllocator<span class=\"token punctuation\">.</span>extraVertices<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tcacheTess <span class=\"token operator\">=</span> <span class=\"token function\">tessNewTess</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>tessAllocator <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofTessellator<span class=\"token operator\">::</span><span class=\"token function\">tessellateToMesh</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofPolyline<span class=\"token operator\">&amp;</span> src<span class=\"token punctuation\">,</span>  ofPolyWindingMode polyWindingMode<span class=\"token punctuation\">,</span> ofMesh<span class=\"token operator\">&amp;</span> dstmesh<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bIs2D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\tofPolyline<span class=\"token operator\">&amp;</span> polyline <span class=\"token operator\">=</span> <span class=\"token keyword\">const_cast</span><span class=\"token operator\">&lt;</span>ofPolyline<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">tessAddContour</span><span class=\"token punctuation\">(</span> cacheTess<span class=\"token punctuation\">,</span> bIs2D<span class=\"token operator\">?</span><span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>polyline<span class=\"token punctuation\">.</span><span class=\"token function\">getVertices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span>vec3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> polyline<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">performTessellation</span><span class=\"token punctuation\">(</span> polyWindingMode<span class=\"token punctuation\">,</span> dstmesh<span class=\"token punctuation\">,</span> bIs2D <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\t\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofTessellator<span class=\"token operator\">::</span><span class=\"token function\">tessellateToMesh</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>ofPolyline<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> src<span class=\"token punctuation\">,</span> ofPolyWindingMode polyWindingMode<span class=\"token punctuation\">,</span> ofMesh <span class=\"token operator\">&amp;</span> dstmesh<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bIs2D <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">// pass vertex pointers to GLU tessellator</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tofPolyline<span class=\"token operator\">&amp;</span> polyline <span class=\"token operator\">=</span> <span class=\"token keyword\">const_cast</span><span class=\"token operator\">&lt;</span>ofPolyline<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token function\">tessAddContour</span><span class=\"token punctuation\">(</span>cacheTess<span class=\"token punctuation\">,</span> bIs2D <span class=\"token operator\">?</span> <span class=\"token number\">2</span> <span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>polyline<span class=\"token punctuation\">.</span><span class=\"token function\">getVertices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span>vec3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> polyline<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">performTessellation</span><span class=\"token punctuation\">(</span> polyWindingMode<span class=\"token punctuation\">,</span> dstmesh<span class=\"token punctuation\">,</span> bIs2D <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofTessellator<span class=\"token operator\">::</span><span class=\"token function\">tessellateToPolylines</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofPolyline<span class=\"token operator\">&amp;</span> src<span class=\"token punctuation\">,</span>  ofPolyWindingMode polyWindingMode<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>ofPolyline<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> dstpoly<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bIs2D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tofPolyline<span class=\"token operator\">&amp;</span> polyline <span class=\"token operator\">=</span> <span class=\"token keyword\">const_cast</span><span class=\"token operator\">&lt;</span>ofPolyline<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">tessAddContour</span><span class=\"token punctuation\">(</span>cacheTess<span class=\"token punctuation\">,</span> bIs2D <span class=\"token operator\">?</span> <span class=\"token number\">2</span> <span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>polyline<span class=\"token punctuation\">.</span><span class=\"token function\">getVertices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span>vec3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> polyline<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">performTessellation</span><span class=\"token punctuation\">(</span> polyWindingMode<span class=\"token punctuation\">,</span> dstpoly<span class=\"token punctuation\">,</span> bIs2D <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofTessellator<span class=\"token operator\">::</span><span class=\"token function\">tessellateToPolylines</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>ofPolyline<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> src<span class=\"token punctuation\">,</span> ofPolyWindingMode polyWindingMode<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>ofPolyline<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> dstpoly<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bIs2D <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// pass vertex pointers to GLU tessellator</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tofPolyline<span class=\"token operator\">&amp;</span> polyline <span class=\"token operator\">=</span> <span class=\"token keyword\">const_cast</span><span class=\"token operator\">&lt;</span>ofPolyline<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token function\">tessAddContour</span><span class=\"token punctuation\">(</span>cacheTess<span class=\"token punctuation\">,</span> bIs2D <span class=\"token operator\">?</span> <span class=\"token number\">2</span> <span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>polyline<span class=\"token punctuation\">.</span><span class=\"token function\">getVertices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span>vec3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> polyline<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">performTessellation</span><span class=\"token punctuation\">(</span> polyWindingMode<span class=\"token punctuation\">,</span> dstpoly<span class=\"token punctuation\">,</span> bIs2D <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\t\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofTessellator<span class=\"token operator\">::</span><span class=\"token function\">performTessellation</span><span class=\"token punctuation\">(</span>ofPolyWindingMode polyWindingMode<span class=\"token punctuation\">,</span> ofMesh<span class=\"token operator\">&amp;</span> dstmesh<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bIs2D <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">tessTesselate</span><span class=\"token punctuation\">(</span>cacheTess<span class=\"token punctuation\">,</span> polyWindingMode<span class=\"token punctuation\">,</span> TESS_POLYGONS<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofTessellator\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"performTessellation(): mesh polygon tessellation failed, winding mode \"</span> <span class=\"token operator\">&lt;&lt;</span> polyWindingMode<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">int</span> numVertices <span class=\"token operator\">=</span> <span class=\"token function\">tessGetVertexCount</span><span class=\"token punctuation\">(</span> cacheTess <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> numIndices <span class=\"token operator\">=</span> <span class=\"token function\">tessGetElementCount</span><span class=\"token punctuation\">(</span> cacheTess <span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n\tdstmesh<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdstmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addVertices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofDefaultVertexType<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">tessGetVertices</span><span class=\"token punctuation\">(</span>cacheTess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>numVertices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdstmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofIndexType<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">tessGetElements</span><span class=\"token punctuation\">(</span>cacheTess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>numIndices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/*ofIndexType * tessElements = (ofIndexType *)tessGetElements(cacheTess);\n\tfor(int i=0;i&lt;numIndices;i++){\n\t\tif(tessElements[i]!=TESS_UNDEF)\n\t\t\tdstmesh.addIndex(tessElements[i]);\n\t}*/</span>\n\tdstmesh<span class=\"token punctuation\">.</span><span class=\"token function\">setMode</span><span class=\"token punctuation\">(</span>OF_PRIMITIVE_TRIANGLES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofTessellator<span class=\"token operator\">::</span><span class=\"token function\">performTessellation</span><span class=\"token punctuation\">(</span>ofPolyWindingMode polyWindingMode<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>ofPolyline<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> dstpoly<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bIs2D <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">tessTesselate</span><span class=\"token punctuation\">(</span>cacheTess<span class=\"token punctuation\">,</span> polyWindingMode<span class=\"token punctuation\">,</span> TESS_BOUNDARY_CONTOURS<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofTessellator\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"performTesselation(): polyline boundary contours tessellation failed, winding mode \"</span> <span class=\"token operator\">&lt;&lt;</span> polyWindingMode<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">const</span> ofDefaultVertexType<span class=\"token operator\">*</span> verts <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ofDefaultVertexType<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">tessGetVertices</span><span class=\"token punctuation\">(</span>cacheTess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> TESSindex<span class=\"token operator\">*</span> elems <span class=\"token operator\">=</span> <span class=\"token function\">tessGetElements</span><span class=\"token punctuation\">(</span>cacheTess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> nelems <span class=\"token operator\">=</span> <span class=\"token function\">tessGetElementCount</span><span class=\"token punctuation\">(</span>cacheTess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdstpoly<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>nelems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nelems<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> elems<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> elems<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tdstpoly<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tdstpoly<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">addVertices</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>verts<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tdstpoly<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setClosed</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n","type":"source"}}],"fetch":[]}