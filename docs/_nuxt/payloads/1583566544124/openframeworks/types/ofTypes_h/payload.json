{"data":[{"page":{"entry":{"name":"ofTypes.h","filename":"ofTypes.h","absolute":"/Users/gilbertsinnott/Code/openFrameworks/libs/openFrameworks/types/ofTypes.h","path":"/openframeworks/types/ofTypes_h","route":"/openframeworks/types/ofTypes.h","dir":"../libs/openFrameworks/types","ext":"h","type":"source","id":328,"parent":316,"breadcrumbs":[316,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// ofMutex</span>\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mutex></span></span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief A typedef for a cross-platform mutex.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\deprecated Please use std::mutex instead of ofMutex. See also the note below.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// A mutex is used to lock data when it is accessible from multiple threads.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Locking data with a mutex prevents data-races, deadlocks and other problems</span>\n<span class=\"token comment\" spellcheck=\"true\">/// associated with concurrent access to data.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// The mutex can be locked with a call to ofMutex::lock(). All calls to</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofMutex::lock() must be paired with a call to ofMutex::unlock().</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">///     ofMutex myMutex; // Your member mutex.</span>\n<span class=\"token comment\" spellcheck=\"true\">///     int mySharedData; // Your member shared data.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">///     // ...</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">///     // A method to modify some shared data.</span>\n<span class=\"token comment\" spellcheck=\"true\">///     void modifyMySharedData() {</span>\n<span class=\"token comment\" spellcheck=\"true\">///         myMutex.lock(); // Lock the mutex.</span>\n<span class=\"token comment\" spellcheck=\"true\">///         mySharedData++; // Modify the shared data.</span>\n<span class=\"token comment\" spellcheck=\"true\">///         myMutex.unlock(); // Unlock the mutex;</span>\n<span class=\"token comment\" spellcheck=\"true\">///     }</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\note Currently ofMutex is a typedef for std::mutex. This is done</span>\n<span class=\"token comment\" spellcheck=\"true\">/// to preserve backwards compatibility. Please use std::mutex for new</span>\n<span class=\"token comment\" spellcheck=\"true\">/// code.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa http://www.cplusplus.com/reference/mutex/mutex/</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofScopedLock</span>\n<span class=\"token keyword\">typedef</span> std<span class=\"token operator\">::</span>mutex ofMutex<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief A typedef for a cross-platform scoped mutex.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\deprecated Please use std::unique_lock&lt;std::mutex> instead of ofScopedLock. See also the note below.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Normally ofMutex requres explicit calls to ofMutex::lock() and</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofMutex::unlock() to lock and release the mutex. Sometimes, despite best</span>\n<span class=\"token comment\" spellcheck=\"true\">/// efforts, developers forget to unlock a mutex, leaving the data inaccessible.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofScopedLock makes ofMutex easier to use by calling ofMutex::unlock when</span>\n<span class=\"token comment\" spellcheck=\"true\">/// the scoped lock's destructor is called. Since the destructor is called when</span>\n<span class=\"token comment\" spellcheck=\"true\">/// a variable goes out of scope, we call this a \"scoped lock\". A \"scoped lock\"</span>\n<span class=\"token comment\" spellcheck=\"true\">/// is sometimes known as a \"lock guard\" as well.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofScopedLock is used to lock and unlock an existing ofMutex.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">///     ofMutex myMutex; // Your member mutex.</span>\n<span class=\"token comment\" spellcheck=\"true\">///     int mySharedData; // Your member shared data.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">///     // ...</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">///     // A method to modify some shared data.</span>\n<span class=\"token comment\" spellcheck=\"true\">///     void modifyMySharedData() {</span>\n<span class=\"token comment\" spellcheck=\"true\">///         ofScopedLock lock(myMutex); // Lock the mutex.</span>\n<span class=\"token comment\" spellcheck=\"true\">///         mySharedData++; // Modify the shared data.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">///         // `lock` will unlock the mutex when it goes out of scope.</span>\n<span class=\"token comment\" spellcheck=\"true\">///     }</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\warning Currently ofScopedLock is a typedef for std::unique_lock&lt;std::mutex>.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// This is done to preserve backwards compatibility. Please use</span>\n<span class=\"token comment\" spellcheck=\"true\">/// std::unique_lock&lt;std::mutex> for new code.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa http://en.cppreference.com/w/cpp/thread/unique_lock</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofMutex</span>\n<span class=\"token keyword\">typedef</span> std<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>mutex<span class=\"token operator\">></span> ofScopedLock<span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// ofPtr</span>\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n<span class=\"token keyword\">using</span> ofPtr <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n","type":"source"}}],"fetch":[]}