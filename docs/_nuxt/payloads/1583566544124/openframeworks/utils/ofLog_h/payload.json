{"data":[{"page":{"entry":{"name":"ofLog.h","filename":"ofLog.h","absolute":"/Users/gilbertsinnott/Code/openFrameworks/libs/openFrameworks/utils/ofLog.h","path":"/openframeworks/utils/ofLog_h","route":"/openframeworks/utils/ofLog.h","dir":"../libs/openFrameworks/utils","ext":"h","type":"source","id":337,"parent":329,"breadcrumbs":[329,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofFileUtils.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sstream></span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\file</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofLog provides an interface for writing text output from your app.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// It's basically a more useful version of `std::cout` or `printf` where</span>\n<span class=\"token comment\" spellcheck=\"true\">/// the output can be filtered and written to the console a file, or even a</span>\n<span class=\"token comment\" spellcheck=\"true\">/// custom logging module.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Sometimes you want to be able to see when something has happened inside</span>\n<span class=\"token comment\" spellcheck=\"true\">/// the code, but don't need to draw something visually. Oftentimes it's</span>\n<span class=\"token comment\" spellcheck=\"true\">/// more then enough to print out the state of a few variables when debugging.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Other times you need to know if a crash happened while your app was</span>\n<span class=\"token comment\" spellcheck=\"true\">/// running somewhere, so you log messages and variables to a file you can</span>\n<span class=\"token comment\" spellcheck=\"true\">/// read after the program crashes.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ### Log Levels</span>\n<span class=\"token comment\" spellcheck=\"true\">/// You can set the logging level so only messages above a certain level</span>\n<span class=\"token comment\" spellcheck=\"true\">/// are shown. This is useful if you want see lots of messages when debugging,</span>\n<span class=\"token comment\" spellcheck=\"true\">/// but then set a higher level so only warnings and errors appear for users.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// See ofSetLogLevel(ofLogLevel level) for more details.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ### Usage</span>\n<span class=\"token comment\" spellcheck=\"true\">/// There are 2 ways you can use ofLog:</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// #### Functional: as a function taking a message</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // Send a single string message, setting the log level.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofLog(OF_LOG_NOTICE, \"the number is \" + ofToString(10));</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// // The legacy printf style.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofLog(OF_LOG_NOTICE, \"the number is %d\", 10); </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// #### Stream: as a stream using the &lt;&lt; stream operator</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // The stream style, setting the log level to OF_LOG_WARNING.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofLog(OF_LOG_WARNING) &lt;&lt; \"the number is \" &lt;&lt; 10;</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // This is the same as the last line, except it uses the default OF_LOG_NOTICE.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofLog() &lt;&lt; \"the number is \" &lt;&lt; 10;</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// // There are also log level-specific stream objects, one for each level</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // except OF_LOG_SILENT.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofLogVerbose() &lt;&lt; \"A verbose message.\"</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofLogNotice() &lt;&lt; \"A regular notice message.\";</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofLogWarning() &lt;&lt; \"Uh oh, a warning!\";</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofLogError() &lt;&lt; \"Oh no, an error occurred!\";</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofLogFatalError() &lt;&lt; \"Accckkk, a fatal error!!\";</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// **Note**: The log level specific stream objects also take a string argument </span>\n<span class=\"token comment\" spellcheck=\"true\">/// for the \"module\". A module is a string that is added to the beginning of </span>\n<span class=\"token comment\" spellcheck=\"true\">/// the log line and can be used to separate logging messages by setting an </span>\n<span class=\"token comment\" spellcheck=\"true\">/// independent log level for **that module only**. This module-specific log</span>\n<span class=\"token comment\" spellcheck=\"true\">/// level has no effect on other modules.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// See ofSetLogLevel(string module, ofLogLevel level) for more details.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// Example of logging to a specific module:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // log to a module called \"Hello\"</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofLogWarning(\"Hello\") &lt;&lt; \"A warning message.\";</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// **Warning**: It is important to understand that the log level specific</span>\n<span class=\"token comment\" spellcheck=\"true\">/// stream objects take the module name as an argument and the log messages via</span>\n<span class=\"token comment\" spellcheck=\"true\">/// the &lt;&lt; operator. Putting your message as a string argument inside the</span>\n<span class=\"token comment\" spellcheck=\"true\">/// parentheses uses that message as a *module* and so nothing will be printed:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // This prints a warning message.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofLogWarning() &lt;&lt; \"A warning message.\";</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // !!! This does not print a message because the string \"a warning print\"</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // is the module argument !!!</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofLogWarning(\"A warning print\");</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// // This prints a warning message to the \"Hello\" module.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofLogWarning(\"Hello\") &lt;&lt; \"A warning message.\";</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ####Log Message Redirection</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// It's useful to be able to record log messages to a file or send them to a </span>\n<span class=\"token comment\" spellcheck=\"true\">/// custom destination.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// For log redirection see</span>\n<span class=\"token comment\" spellcheck=\"true\">/// - ofLogToFile()</span>\n<span class=\"token comment\" spellcheck=\"true\">/// - ofLogToConsole()</span>\n<span class=\"token comment\" spellcheck=\"true\">/// - ofSetLoggerChannel()</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n<span class=\"token comment\" spellcheck=\"true\">/// printf annotations for automatic format checking in GCC.</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> __GNUC__</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_PRINTF_ATTR(x, y) __attribute__ ((format (printf, x, y)))</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_PRINTF_ATTR(x, y)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\name Global logging level</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief The supported logging levels. Default is `OF_LOG_NOTICE`.</span>\n<span class=\"token keyword\">enum</span> ofLogLevel<span class=\"token operator\">:</span> <span class=\"token keyword\">short</span><span class=\"token punctuation\">{</span>\n\tOF_LOG_VERBOSE<span class=\"token punctuation\">,</span>\n\tOF_LOG_NOTICE<span class=\"token punctuation\">,</span>\n\tOF_LOG_WARNING<span class=\"token punctuation\">,</span>\n\tOF_LOG_ERROR<span class=\"token punctuation\">,</span>\n\tOF_LOG_FATAL_ERROR<span class=\"token punctuation\">,</span>\n\tOF_LOG_SILENT\t<span class=\"token comment\" spellcheck=\"true\">// OF_LOG_SILENT can be used to disable _all_ log messages.</span>\n\t\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">// All logging can be disabled by calling</span>\n\t\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">/// ofSetLogLevel(OF_LOG_SILENT).</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">//console colors for our logger - shame this doesn't work with the xcode console</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_CONSOLE_COLOR_RESTORE (0 | (FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE) )</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_CONSOLE_COLOR_BLACK (0)</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_CONSOLE_COLOR_RED (FOREGROUND_RED)</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_CONSOLE_COLOR_GREEN (FOREGROUND_GREEN)</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_CONSOLE_COLOR_YELLOW (FOREGROUND_RED|FOREGROUND_GREEN)</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_CONSOLE_COLOR_BLUE (FOREGROUND_BLUE)</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_CONSOLE_COLOR_PURPLE (FOREGROUND_RED | FOREGROUND_BLUE )</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_CONSOLE_COLOR_CYAN (FOREGROUND_GREEN | FOREGROUND_BLUE)</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_CONSOLE_COLOR_WHITE (FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE)</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_CONSOLE_COLOR_RESTORE (0)</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_CONSOLE_COLOR_BLACK (30)</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_CONSOLE_COLOR_RED (31)</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_CONSOLE_COLOR_GREEN (32)</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_CONSOLE_COLOR_YELLOW (33)</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_CONSOLE_COLOR_BLUE (34)</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_CONSOLE_COLOR_PURPLE (35)</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_CONSOLE_COLOR_CYAN (36)</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_CONSOLE_COLOR_WHITE (37)</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Sets the logging level to selectively show log messages.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// This is useful if you want see lots of messages when debugging,</span>\n<span class=\"token comment\" spellcheck=\"true\">/// but then set a higher level so only warnings and errors appear for users.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofLogLevel values in order from lowest to highest level are:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// - `OF_LOG_VERBOSE` (lowest level)</span>\n<span class=\"token comment\" spellcheck=\"true\">/// - `OF_LOG_NOTICE`</span>\n<span class=\"token comment\" spellcheck=\"true\">/// - `OF_LOG_WARNING`</span>\n<span class=\"token comment\" spellcheck=\"true\">/// - `OF_LOG_ERROR`</span>\n<span class=\"token comment\" spellcheck=\"true\">/// - `OF_LOG_FATAL_ERROR`</span>\n<span class=\"token comment\" spellcheck=\"true\">/// - `OF_LOG_SILENT` (highest level)</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Thus, setting a log level of `OF_LOG_ERROR`, means only logging messages</span>\n<span class=\"token comment\" spellcheck=\"true\">/// marked OF_LOG_ERROR and OF_LOG_FATAL_ERROR will be printed. Conversely,</span>\n<span class=\"token comment\" spellcheck=\"true\">/// setting OF_LOG_VERBOSE means all log level messages, including</span>\n<span class=\"token comment\" spellcheck=\"true\">/// OF_LOG_VERBOSE, will be printed.  Finally, setting a log level of</span>\n<span class=\"token comment\" spellcheck=\"true\">/// OF_LOG_SILENT will prevent any messages from being printed.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// The default ofLogLevel is `OF_LOG_NOTICE`.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param level the ofLogLevel (and below) you want to show</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofSetLogLevel</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the logging level for a specific module.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// When a module name is supplied to ofSetLogLevel, the provided ofLogLevel</span>\n<span class=\"token comment\" spellcheck=\"true\">/// is selectively applied only to ofLog messages marked with the specified</span>\n<span class=\"token comment\" spellcheck=\"true\">/// module.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// This is particularly useful when the user desires to, for example, log at</span>\n<span class=\"token comment\" spellcheck=\"true\">/// an OF_LOG_VERBOSE level for one module and then log at OF_LOG_ERROR for</span>\n<span class=\"token comment\" spellcheck=\"true\">/// another module.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Example of logging to a specific module:</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // Set the default log level for all logging.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofSetLogLevel(OF_LOG_ERROR);</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // Selectively enable verbose logging for the MyClass module.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofSetLogLevel(\"MyClass\", OF_LOG_VERBOSE);</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // If we then log the following ...</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // Log a vermose message to a module called \"MyClass\".</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofLogVerbose(\"MyClass\") &lt;&lt; \"A verbose message from MyClass.\";</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // Log a verbose message to a module called \"MyOtherClass\".</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofLogVerbose(\"MyOtherClass\") &lt;&lt; \"A verbose message from MyOtherClass.\";</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // In this case, we will see the verbose message from \"MyClass\", but not</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // the message from \"MyOtherClass\".</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofSetLogLevel</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string module<span class=\"token punctuation\">,</span> ofLogLevel level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the currently set global logging level.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns The currently set global logging level.</span>\nofLogLevel <span class=\"token function\">ofGetLogLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the logging level for a specific module.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param module specific module name.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns The currently set specific module logging level.</span>\nofLogLevel <span class=\"token function\">ofGetLogLevel</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get log level name as a string.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param level The ofLogLevel you want as a string.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param pad True if you want all log level names to be the same length.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns The log level name as a string.</span>\nstd<span class=\"token operator\">::</span>string <span class=\"token function\">ofGetLogLevelName</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> pad<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\name Global logger channel</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofBaseLoggerChannel</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the logging to output to a file instead of the console.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param path The path to the log file to use.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param append True if you want to append to the existing file.</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofLogToFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> append<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the logging to ouptut to the console.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// This is the default state and can be called to reset console logging</span>\n<span class=\"token comment\" spellcheck=\"true\">/// after ofLogToFile or ofSetLoggerChannel has been called.</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofLogToConsole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Set the logging to ouptut to windows debug view or visual studio console</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// This is the default state and can be called to reset console logging</span>\n<span class=\"token comment\" spellcheck=\"true\">/// after ofLogToFile or ofSetLoggerChannel has been called.</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofLogToDebugView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the logger to use a custom logger channel.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Custom logger channels must extend ofBaseLoggerChannel. Custom log channels</span>\n<span class=\"token comment\" spellcheck=\"true\">/// can be useful for combining logging methods, logging to a server, logging</span>\n<span class=\"token comment\" spellcheck=\"true\">/// to email or even Twitter.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param loggerChannel A shared pointer to the logger channel.</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofSetLoggerChannel</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofBaseLoggerChannel<span class=\"token operator\">></span> loggerChannel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the current logger channel.</span>\nstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofBaseLoggerChannel<span class=\"token operator\">></span> <span class=\"token function\">ofGetLoggerChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\class ofLog</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief A C++ stream-style logging interface.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofLog accepts variables via the std::ostream operator &lt;&lt; and builds a string</span>\n<span class=\"token comment\" spellcheck=\"true\">/// and logs it when the stream is finished (via the destructor). A newline is</span>\n<span class=\"token comment\" spellcheck=\"true\">/// printed automatically and all the stream controls (std::endl, std::flush,</span>\n<span class=\"token comment\" spellcheck=\"true\">/// std::hex, etc) work normally. The default log level is `OF_LOG_NOTICE`.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Basic usage:</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofLog() &lt;&lt; \"My integer is \" &lt;&lt; 100 &lt;&lt; \" and my float is \" &lt;&lt; 20.234f;</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// It also accepts the legacy ofLog interface:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofLog(ofLogLevel level, string message):</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofLog(OF_LOG_ERROR, \"Another string.\");</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\author Dan Wilcox &lt;danomatika@gmail.com> danomatika.com</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Class idea from http://www.gamedev.net/community/forums/topic.asp?topic_id=525405&amp;whichpage=1&amp;#3406418</span>\n<span class=\"token comment\" spellcheck=\"true\">// How to catch std::endl (which is actually a func pointer) http://yvan.seth.id.au/Entries/Technology/Code/std__endl.html</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofLog</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Logging</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Start logging on notice level.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// ofLog provides a streaming log interface by accepting variables via</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// the `std::ostream` operator `&lt;&lt;` similar to `std::cout` and</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// `std::cerr`.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// It builds a string and logs it when the stream is finished. A</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// newline is printed automatically and all the stream controls</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// (`std::endl`, `std::flush`, `std::hex`, etc)</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// work normally.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// // Converts primitive types (int, float, etc) to strings automatically.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// ofLog() &lt;&lt; \"a string \" &lt;&lt; 100 &lt;&lt; 20.234f;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// The log level is `OF_LOG_NOTICE` by default.</span>\n\t\t<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Start logging on a specific ofLogLevel.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// Example:</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// // Set the log level.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// ofLog(OF_LOG_WARNING) &lt;&lt; \"a string \" &lt;&lt; 100 &lt;&lt; 20.234f;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// You can use the derived convenience classes as an alternative for specific log levels: </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \tofLogVerbose()</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \tofLogNotice()</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \tofLogWarning()</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \tofLogError()</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \tofLogFatalError()</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// // Set the log level.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// ofLog(OF_LOG_WARNING) &lt;&lt; \"a string \" &lt;&lt; 100 &lt;&lt; 20.234f;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// // This is the same as above.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// ofLogWarning() &lt;&lt; \"a string \" &lt;&lt; 100 &lt;&lt; 20.234f;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param level The ofLogLevel for this log message.</span>\n\t\t<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Log a string at a specific log level.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// Supply the logging message as a parameter to the function</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// instead of as a stream.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// The string message can be concatenated using the</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// ofToString(const T&amp; value) conversion function:</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// // Build a single string message.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// ofLog(OF_LOG_NOTICE, \"the number is \" </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// + ofToString(10) + \" and I have a float too \" + ofToString(123.45f));</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param level The ofLogLevel for this log message.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param message The log message.</span>\n\t\t<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Logs a message at a specific log level using the printf interface.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// The message is built using the formatting from the C printf function</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// and can be used as a direct replacement. Essentially, the second</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// argument is a string with special formatting specifiers starting</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// with '%' that specify where the following variables go in the</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// message. You can have as many variables as you want following the</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// logLevel and format string, but there must be a % specifier for each</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// subsequent variable.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// For quick reference, here are a few of the most useful formatting</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// specifiers:</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// * `%d`: integer number, `123`</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// * `%f`: floating point number, `123.45`</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// * `%s`: a C string ([null terminated](http://en.wikipedia.org/wiki/Null-terminated_string)); </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// this is not a C++ string, use [string::c_str()](http://www.cplusplus.com/reference/string/string/c_str/) </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// to get a C string from a C++ string</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// * `%c`: a single character</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// * `%x`: unsigned integer as a [hexidecimal](http://en.wikipedia.org/wiki/Hexadecimal) </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// number; `x` uses lower-case letters and `X` uses upper-case</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// * `%%`: prints a `%` character</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// The specifier should match the variable type as it is used to tell</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// the function how to convert that primitive type (int, float,</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// character, etc) into a string.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// For instance, let's say we want to print two messages, a salutation</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// and the value of an int, a float, and a string variable:</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// // Print a simple message with no variables.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// ofLog(OF_LOG_WARNING, \"Welcome to the jungle.\");</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// // Our variables.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// float fun = 11.11;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// int games = 100;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// string theNames = \"Dan, Kyle, &amp; Golan\";</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// // Print a message with variables, sets the message format in the</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// // format string.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// ofLog(OF_LOG_NOTICE, \"we've got %d &amp; %f, we got everything you want honey, we know %s\", fun, games, theNames.c_str());</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// Note: `theNames.c_str()` returns a C string from theNames which is</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// a C++ string object.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// There are other formatting options such as setting the decimal</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// precision of float objects and the forward padding of numbers</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// (i.e. 0001 instead of 1). See the [Wikipedia printf format string</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// article](http://en.wikipedia.org/wiki/Printf_format_string) for more</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// detailed information.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param level The ofLogLevel for this log message.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param format The printf-style format string.</span>\n\t\t<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token function\">OF_PRINTF_ATTR</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Logging configuration</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Let the logger automaticly add spaces between messages.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// Default is `false`.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param autoSpace Set to true to add spaces between messages</span>\n\t\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAutoSpace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> autoSpace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the logging channel destinations for messages.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// This can be used to output to files instead of stdout.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofFileLoggerChannel ofConsoleLoggerChannel</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param channel The channel to log to.</span>\n\t\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setChannel</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofBaseLoggerChannel<span class=\"token operator\">></span> channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the current logging channel.</span>\n\t\t<span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofBaseLoggerChannel<span class=\"token operator\">></span> <span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Destroy the ofLog.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// This destructor does the actual printing via std::ostream.</span>\n\t\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Define flexible stream operator.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// This allows the class to use the &lt;&lt; std::ostream to read data of</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// almost any type.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\tparam T the data type to be streamed.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param value the data to be streamed.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns A reference to itself.</span>\n\t\t<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> \n\t\tofLog<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tmessage <span class=\"token operator\">&lt;&lt;</span> value <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getPadding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Define flexible stream operator.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// This allows the class to use the &lt;&lt; std::ostream to catch function</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// pointers such as std::endl and std::hex.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param func A function pointer that takes a std::ostream as an argument.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns A reference to itself.</span>\n\t\tofLog<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n\t\n\t\n\n\t\n\t<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n\n\t\tofLogLevel level<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; Log level.</span>\n\t\t<span class=\"token keyword\">bool</span> bPrinted<span class=\"token punctuation\">;</span>\t  <span class=\"token comment\" spellcheck=\"true\">///&lt; Has the message been printed in the constructor?</span>\n\t\tstd<span class=\"token operator\">::</span>string module<span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">///&lt; The destination module for this message.</span>\n\t\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Print a log line.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param level The log level.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param module The target module.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param message The log message.</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">_log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Determine if the given module is active at the given log level.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param level The log level.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param module The target module.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the given module is active at the given log level.</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">checkLog</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\t<span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofBaseLoggerChannel<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\" spellcheck=\"true\">///&lt; The target channel.</span>\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n\t\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tstd<span class=\"token operator\">::</span>stringstream message<span class=\"token punctuation\">;</span>\t<span class=\"token comment\" spellcheck=\"true\">///&lt; Temporary buffer.</span>\n\t\t\n\t\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> bAutoSpace<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; Should space be added between messages?</span>\n\t\t\n\t\t<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>ofLog <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>        \t\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">// not defined, not copyable</span>\n\t\tofLog<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ofLog<span class=\"token operator\">&amp;</span> from<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\t<span class=\"token comment\" spellcheck=\"true\">// not defined, not assignable</span>\n\t\t\n\t\t<span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> <span class=\"token function\">getPadding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; The padding between std::ostream calls.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Derived log class for easy verbose logging.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Example: `ofLogVerbose(\"Log message\")`.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofLogVerbose</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofLog<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create a verbose log message.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param module The target module.</span>\n\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>module<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create a verbose log message.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param module The target module.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param message The log message.</span>\n\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create a verbose log message.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param module The target module.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param format The printf-style format string.</span>\n\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token function\">OF_PRINTF_ATTR</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Derived log class for easy notice logging.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Example: `ofLogNotice(\"Log message\")`.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofLogNotice</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofLog<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create a notice log message.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param module The target module.</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create a notice log message.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param module The target module.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param message The log message.</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create a notice log message.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param module The target module.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param format The printf-style format string.</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token function\">OF_PRINTF_ATTR</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Derived log class for easy warning logging.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Example: `ofLogWarning(\"Log message\")`.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofLogWarning</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofLog<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create a verbose log message.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param module The target module.</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create a verbose log message.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param module The target module.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param message The log message.</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create a verbose log message.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param module The target module.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param format The printf-style format string.</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token function\">OF_PRINTF_ATTR</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Derived log class for easy error logging.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Example: `ofLogError(\"Log message\")`.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofLogError</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofLog<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create a error log message.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param module The target module.</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create a error log message.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param module The target module.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param message The log message.</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create a error log message.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param module The target module.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param format The printf-style format string.</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token function\">OF_PRINTF_ATTR</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Derived log class for easy fatal error logging.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Example: `ofLogFatalError(\"Log message\")`.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofLogFatalError</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofLog<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create a fatal error log message.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param module The target module.</span>\n\t\t<span class=\"token function\">ofLogFatalError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create a fatal error log message.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param module The target module.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param message The log message.</span>\n\t\t<span class=\"token function\">ofLogFatalError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create a fatal error log message.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param module The target module.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param format The printf-style format string.</span>\n\t\t<span class=\"token function\">ofLogFatalError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token function\">OF_PRINTF_ATTR</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// Logger Channels</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief The base class representing a logger channel.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Users can derive their own logging channels from ofBaseLoggerChannel or use</span>\n<span class=\"token comment\" spellcheck=\"true\">/// default channels.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofBaseLoggerChannel</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Destroy the channel.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ofBaseLoggerChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Log a message.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param level The log level.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param module The target module.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param message The log message.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> message<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Log a message.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param level The log level.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param module The target module.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param format The printf-style format string.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>  <span class=\"token function\">OF_PRINTF_ATTR</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Log a message.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param level The log level.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param module The target module.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param format The printf-style format string.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param args the list of printf-style arguments.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> va_list args<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief A logger channel that logs its messages to the console.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofConsoleLoggerChannel</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofBaseLoggerChannel<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Destroy the console logger channel.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ofConsoleLoggerChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token function\">OF_PRINTF_ATTR</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> va_list args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n<span class=\"token comment\" spellcheck=\"true\">/// A logger channel that logs its messages to windows debug view and visual studio output.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofDebugViewLoggerChannel</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofBaseLoggerChannel <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Destroy the console logger channel.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ofDebugViewLoggerChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token function\">OF_PRINTF_ATTR</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> va_list args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief A logger channel that logs its messages to a log file.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofFileLoggerChannel</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofBaseLoggerChannel<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create an ofFileLoggerChannel.</span>\n\t<span class=\"token function\">ofFileLoggerChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create an ofFileLoggerChannel with parameters.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path The file path for the log file.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param append True if the log data should be added to an existing file.</span>\n    <span class=\"token function\">ofFileLoggerChannel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> append<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Destroy the file logger channel.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ofFileLoggerChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the log file.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path The file path for the log file.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param append True if the log data should be added to an existing file.</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span> append<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token function\">OF_PRINTF_ATTR</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> va_list args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief CLose the log file.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tofFile file<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; The location of the log file.</span>\n\t\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n","type":"source"}}],"fetch":[]}