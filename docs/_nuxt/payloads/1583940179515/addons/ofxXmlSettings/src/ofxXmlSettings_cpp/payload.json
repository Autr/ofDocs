{"data":[{"page":{"entry":{"name":"ofxXmlSettings.cpp","filename":"ofxXmlSettings.cpp","absolute":"/Users/Gilbert/Code/openFrameworks/addons/ofxXmlSettings/src/ofxXmlSettings.cpp","path":"/addons/ofxXmlSettings/src/ofxXmlSettings_cpp","route":"/addons/ofxXmlSettings/src/ofxXmlSettings.cpp","dir":"../addons/ofxXmlSettings/src","ext":"cpp","type":"source","id":192,"parent":190,"breadcrumbs":[190,191,36],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxXmlSettings.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">// this increases the accuracy of ofToString() when saving floating point values</span>\n<span class=\"token comment\" spellcheck=\"true\">// but in the process of setting it also causes very small values to be ignored.</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> floatPrecision <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// a pretty useful tokenization system:</span>\n<span class=\"token keyword\">static</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">tokenize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> delim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">tokenize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> delim<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> tokens<span class=\"token punctuation\">;</span>\n\n  size_t p0 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> p1 <span class=\"token operator\">=</span> string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p0 <span class=\"token operator\">!=</span> string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    p1 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">find_first_of</span><span class=\"token punctuation\">(</span>delim<span class=\"token punctuation\">,</span> p0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">!=</span> p0<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      string token <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>p0<span class=\"token punctuation\">,</span> p1 <span class=\"token operator\">-</span> p0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    p0 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">find_first_not_of</span><span class=\"token punctuation\">(</span>delim<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> tokens<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\nofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">ofxXmlSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">storedHandle</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tlevel\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//we do this so that we have a valid handle</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//without the need for loadFile</span>\n\tstoredHandle   <span class=\"token operator\">=</span> <span class=\"token function\">TiXmlHandle</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\nofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">ofxXmlSettings</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> xmlFile<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">storedHandle</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tlevel\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//we do this so that we have a valid handle</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//without the need for loadFile</span>\n\tstoredHandle   <span class=\"token operator\">=</span> <span class=\"token function\">TiXmlHandle</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">loadFile</span><span class=\"token punctuation\">(</span>xmlFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\nofxXmlSettings<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">ofxXmlSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">setVerbose</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> _verbose<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//we clear from our root level</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//this is usually the document</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//but if we are pushed  - it could</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//be all the tags inside of the pushed</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//node - including the node itself!</span>\n\n\tstoredHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">loadFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> xmlFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\tstring fullXmlFile <span class=\"token operator\">=</span> <span class=\"token function\">ofToDataPath</span><span class=\"token punctuation\">(</span>xmlFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">bool</span> loadOkay <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">LoadFile</span><span class=\"token punctuation\">(</span>fullXmlFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//theo removed bool check as it would</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//return false if the file exists but was</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//empty</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//our push pop level should be set to 0!</span>\n\tlevel <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\tstoredHandle <span class=\"token operator\">=</span> <span class=\"token function\">TiXmlHandle</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> loadOkay<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">saveFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> xmlFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\tstring fullXmlFile <span class=\"token operator\">=</span> <span class=\"token function\">ofToDataPath</span><span class=\"token punctuation\">(</span>xmlFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">SaveFile</span><span class=\"token punctuation\">(</span>fullXmlFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">saveFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">SaveFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">loadFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">saveFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">clearTagContents</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//we check it first to see if it exists</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//otherwise setValue will make a new empty tag</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">tagExists</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">removeTag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\tvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> tokens <span class=\"token operator\">=</span> <span class=\"token function\">tokenize</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//no tags so we return</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//grab the handle from the level we are at</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//normally this is the doc but could be a pushed node</span>\n\tTiXmlHandle tagHandle <span class=\"token operator\">=</span> storedHandle<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>which <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>x<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">//we only support multi tags</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//with same name at root level</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t\tTiXmlHandle isRealHandle <span class=\"token operator\">=</span> tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ChildElement</span><span class=\"token punctuation\">(</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>isRealHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">//if we are at the last tag and it exists</span>\n\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">//we use its parent to remove it - haha</span>\n\t\t\t\ttagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">RemoveChild</span><span class=\"token punctuation\">(</span> isRealHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\ttagHandle <span class=\"token operator\">=</span> isRealHandle<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> defaultValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    TiXmlHandle <span class=\"token function\">valHandle</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">readTag</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> valHandle<span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofToInt</span><span class=\"token punctuation\">(</span>valHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> defaultValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">double</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> defaultValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    TiXmlHandle <span class=\"token function\">valHandle</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">readTag</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> valHandle<span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofToDouble</span><span class=\"token punctuation\">(</span>valHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> defaultValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\nstring ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> defaultValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    TiXmlHandle <span class=\"token function\">valHandle</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">readTag</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> valHandle<span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> valHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">ValueStr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> defaultValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">readTag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span>  tag<span class=\"token punctuation\">,</span> TiXmlHandle<span class=\"token operator\">&amp;</span> valHandle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\n\tvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> tokens <span class=\"token operator\">=</span> <span class=\"token function\">tokenize</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tTiXmlHandle tagHandle <span class=\"token operator\">=</span> storedHandle<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>x<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>tagHandle <span class=\"token operator\">=</span> tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ChildElement</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> tagHandle <span class=\"token operator\">=</span> tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">FirstChildElement</span><span class=\"token punctuation\">(</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// once we've walked, let's get that value...</span>\n\tvalHandle <span class=\"token operator\">=</span> tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">Child</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>valHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">pushTag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span>  tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> tag<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Either find the tag specified, or the first tag if colon-seperated.</span>\n    string <span class=\"token function\">tagToFind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> tag<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//we only allow to push one tag at a time.</span>\n\tTiXmlHandle isRealHandle <span class=\"token operator\">=</span> storedHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ChildElement</span><span class=\"token punctuation\">(</span>tagToFind<span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> isRealHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tstoredHandle <span class=\"token operator\">=</span> isRealHandle<span class=\"token punctuation\">;</span>\n\t\tlevel<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlSettings\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"pushTag(): tag \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> tag <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\" not found\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">popTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>level <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tTiXmlHandle <span class=\"token function\">parent</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>storedHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstoredHandle <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\tlevel<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\tstoredHandle <span class=\"token operator\">=</span> <span class=\"token function\">TiXmlHandle</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlevel <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> level<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">getPushLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> level<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">tagExists</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\n\tvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> tokens <span class=\"token operator\">=</span> <span class=\"token function\">tokenize</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">bool</span> found <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//grab the handle from the level we are at</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//normally this is the doc but could be a pushed node</span>\n\tTiXmlHandle tagHandle <span class=\"token operator\">=</span> storedHandle<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>which <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>x<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">//we only support multi tags</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//with same name at root level</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t\tTiXmlHandle isRealHandle <span class=\"token operator\">=</span> tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ChildElement</span><span class=\"token punctuation\">(</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">//as soon as we find a tag that doesn't exist</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//we return false;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>isRealHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tfound <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\tfound <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\ttagHandle <span class=\"token operator\">=</span> isRealHandle<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> found<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">getNumTags</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span>  tag<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//this only works for tags at the current root level</span>\n\n\t<span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> tag<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Either find the tag specified, or the first tag if colon-seperated.</span>\n    string <span class=\"token function\">tagToFind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> tag<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//grab the handle from the level we are at</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//normally this is the doc but could be a pushed node</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//TiXmlHandle tagHandle = storedHandle;</span>\n\n\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//ripped from tinyXML as doing this ourselves once is a LOT! faster</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//than having this called n number of times in a while loop - we go from n*n iterations to n iterations</span>\n\n\tTiXmlElement<span class=\"token operator\">*</span> child <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> storedHandle<span class=\"token punctuation\">.</span><span class=\"token function\">FirstChildElement</span><span class=\"token punctuation\">(</span> tagToFind <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> child<span class=\"token punctuation\">;</span> child <span class=\"token operator\">=</span> child<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">NextSiblingElement</span><span class=\"token punctuation\">(</span> tagToFind <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//nothing</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">writeTag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span>  tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> valueStr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\tvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> tokens <span class=\"token operator\">=</span> <span class=\"token function\">tokenize</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// allocate on the stack</span>\n    vector<span class=\"token operator\">&lt;</span>TiXmlElement<span class=\"token operator\">></span> elements<span class=\"token punctuation\">;</span>\n    elements<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>x<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        elements<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\tTiXmlText <span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>valueStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// search our way up - do these tags exist?</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// find the first that DOESNT exist, then move backwards...</span>\n\tTiXmlHandle tagHandle <span class=\"token operator\">=</span> storedHandle<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">bool</span> addNewTag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>which <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>addNewTag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>x<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> x <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">//multi tags of same name</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">//only for the root level</span>\n\t\t\twhich <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\taddNewTag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tTiXmlHandle isRealHandle <span class=\"token operator\">=</span> tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ChildElement</span><span class=\"token punctuation\">(</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>isRealHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>  addNewTag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span>x<span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\telements<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">InsertEndChild</span><span class=\"token punctuation\">(</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\telements<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">InsertEndChild</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\ttagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">InsertEndChild</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t tagHandle <span class=\"token operator\">=</span> isRealHandle<span class=\"token punctuation\">;</span>\n\t\t\t <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">// what we want to change : TiXmlHandle valHandle = tagHandle.Child( 0 );</span>\n\t\t\t\ttagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\ttagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">InsertEndChild</span><span class=\"token punctuation\">(</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">//lets count how many tags with our name exist so we can return an index</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//ripped from tinyXML as doing this ourselves once is a LOT! faster</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//than having this called n number of times in a while loop - we go from n*n iterations to n iterations</span>\n\t<span class=\"token keyword\">int</span> numSameTags<span class=\"token punctuation\">;</span>\n\tTiXmlElement<span class=\"token operator\">*</span> child <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> storedHandle<span class=\"token punctuation\">.</span><span class=\"token function\">FirstChildElement</span><span class=\"token punctuation\">(</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>numSameTags <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> child<span class=\"token punctuation\">;</span> child <span class=\"token operator\">=</span> child<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">NextSiblingElement</span><span class=\"token punctuation\">(</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>numSameTags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//nothing</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> numSameTags<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> tagID <span class=\"token operator\">=</span> <span class=\"token function\">writeTag</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> tagID<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> tagID <span class=\"token operator\">=</span> <span class=\"token function\">writeTag</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> floatPrecision<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> tagID<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> tagID <span class=\"token operator\">=</span> <span class=\"token function\">writeTag</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> tagID<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">addValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> tagID <span class=\"token operator\">=</span> <span class=\"token function\">writeTag</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> tagID<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">addValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span>  tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> tagID <span class=\"token operator\">=</span> <span class=\"token function\">writeTag</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> floatPrecision<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> tagID<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">addValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> tagID <span class=\"token operator\">=</span> <span class=\"token function\">writeTag</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> tagID<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">addTag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> tagID <span class=\"token operator\">=</span> <span class=\"token function\">writeTag</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> tagID<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/*******************\n* Attribute addons *\n*******************/</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> tagID <span class=\"token operator\">=</span> <span class=\"token function\">writeAttribute</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> tagID<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span>attribute<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> tagID <span class=\"token operator\">=</span> <span class=\"token function\">writeAttribute</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> floatPrecision<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> tagID<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span>attribute<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> tagID <span class=\"token operator\">=</span> <span class=\"token function\">writeAttribute</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> attribute<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> tagID<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span>attribute<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> tokens <span class=\"token operator\">=</span> <span class=\"token function\">tokenize</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tTiXmlHandle tagHandle <span class=\"token operator\">=</span> storedHandle<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\ttagHandle <span class=\"token operator\">=</span> tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ChildElement</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\ttagHandle <span class=\"token operator\">=</span> tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">FirstChildElement</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tTiXmlElement<span class=\"token operator\">*</span> elem <span class=\"token operator\">=</span> tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\telem<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">RemoveAttribute</span><span class=\"token punctuation\">(</span>attribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">clearTagAttributes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> names<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">getAttributeNames</span><span class=\"token punctuation\">(</span> tag<span class=\"token punctuation\">,</span> names<span class=\"token punctuation\">,</span> which <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator i <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>i<span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">getNumAttributes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\tvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> tokens <span class=\"token operator\">=</span> <span class=\"token function\">tokenize</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tTiXmlHandle tagHandle <span class=\"token operator\">=</span> storedHandle<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\ttagHandle <span class=\"token operator\">=</span> tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ChildElement</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\ttagHandle <span class=\"token operator\">=</span> tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">FirstChildElement</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tTiXmlElement<span class=\"token operator\">*</span> elem <span class=\"token operator\">=</span> tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Do stuff with the element here</span>\n\t\tTiXmlAttribute<span class=\"token operator\">*</span> first <span class=\"token operator\">=</span> elem<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">FirstAttribute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>TiXmlAttribute<span class=\"token operator\">*</span> curr <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span> curr <span class=\"token operator\">!=</span> elem<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">LastAttribute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> curr <span class=\"token operator\">=</span> curr<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">attributeExists</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\tvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> tokens <span class=\"token operator\">=</span> <span class=\"token function\">tokenize</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tTiXmlHandle tagHandle <span class=\"token operator\">=</span> storedHandle<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\ttagHandle <span class=\"token operator\">=</span> tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ChildElement</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\ttagHandle <span class=\"token operator\">=</span> tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">FirstChildElement</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tTiXmlElement<span class=\"token operator\">*</span> elem <span class=\"token operator\">=</span> tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Do stuff with the element here</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>TiXmlAttribute<span class=\"token operator\">*</span> a <span class=\"token operator\">=</span> elem<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">FirstAttribute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">;</span> a <span class=\"token operator\">=</span> a<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> attribute<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">getAttributeNames</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> outNames<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\tvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> tokens <span class=\"token operator\">=</span> <span class=\"token function\">tokenize</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tTiXmlHandle tagHandle <span class=\"token operator\">=</span> storedHandle<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\ttagHandle <span class=\"token operator\">=</span> tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ChildElement</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\ttagHandle <span class=\"token operator\">=</span> tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">FirstChildElement</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tTiXmlElement<span class=\"token operator\">*</span> elem <span class=\"token operator\">=</span> tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Do stuff with the element here</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>TiXmlAttribute<span class=\"token operator\">*</span> a <span class=\"token operator\">=</span> elem<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">FirstAttribute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">;</span> a <span class=\"token operator\">=</span> a<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\toutNames<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>outNames<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> defaultValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> defaultValue<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">readIntAttribute</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> attribute<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">double</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> defaultValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">double</span> value <span class=\"token operator\">=</span> defaultValue<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">readDoubleAttribute</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> attribute<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\nstring ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> defaultValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    string value <span class=\"token operator\">=</span> defaultValue<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">readStringAttribute</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> attribute<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">char</span> valueStr<span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>valueStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%i\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> tagID <span class=\"token operator\">=</span> <span class=\"token function\">writeAttribute</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> attribute<span class=\"token punctuation\">,</span> valueStr<span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> tagID<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">char</span> valueStr<span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>valueStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%lf\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> tagID <span class=\"token operator\">=</span> <span class=\"token function\">writeAttribute</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> attribute<span class=\"token punctuation\">,</span> valueStr<span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> tagID<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> tagID <span class=\"token operator\">=</span> <span class=\"token function\">writeAttribute</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> attribute<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> tagID<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\nTiXmlElement<span class=\"token operator\">*</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">getElementForAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\tvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> tokens <span class=\"token operator\">=</span> <span class=\"token function\">tokenize</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tTiXmlHandle tagHandle <span class=\"token operator\">=</span> storedHandle<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\ttagHandle <span class=\"token operator\">=</span> tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ChildElement</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\ttagHandle <span class=\"token operator\">=</span> tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">FirstChildElement</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">readIntAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> outValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\n    TiXmlElement<span class=\"token operator\">*</span> elem <span class=\"token operator\">=</span> <span class=\"token function\">getElementForAttribute</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>elem<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">QueryIntAttribute</span><span class=\"token punctuation\">(</span>attribute<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>outValue<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> TIXML_SUCCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">readDoubleAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> outValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\n    TiXmlElement<span class=\"token operator\">*</span> elem <span class=\"token operator\">=</span> <span class=\"token function\">getElementForAttribute</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>elem<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">QueryDoubleAttribute</span><span class=\"token punctuation\">(</span>attribute<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>outValue<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> TIXML_SUCCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">readStringAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&amp;</span> outValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\n    TiXmlElement<span class=\"token operator\">*</span> elem <span class=\"token operator\">=</span> <span class=\"token function\">getElementForAttribute</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> string<span class=\"token operator\">*</span> value <span class=\"token operator\">=</span> elem<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Attribute</span><span class=\"token punctuation\">(</span>attribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            outValue <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>value<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">writeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> valueString<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> tokens <span class=\"token operator\">=</span> <span class=\"token function\">tokenize</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tTiXmlHandle tagHandle <span class=\"token operator\">=</span> storedHandle<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\ttagHandle <span class=\"token operator\">=</span> tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ChildElement</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\ttagHandle <span class=\"token operator\">=</span> tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">FirstChildElement</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tTiXmlElement<span class=\"token operator\">*</span> elem <span class=\"token operator\">=</span> tagHandle<span class=\"token punctuation\">.</span><span class=\"token function\">ToElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\telem<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">SetAttribute</span><span class=\"token punctuation\">(</span>attribute<span class=\"token punctuation\">,</span> valueString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// Do we really need this?  We could just ignore this and remove the 'addAttribute' functions...</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Now, just get the ID.</span>\n\t\t<span class=\"token keyword\">int</span> numSameTags<span class=\"token punctuation\">;</span>\n\t\tTiXmlElement<span class=\"token operator\">*</span> child <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> storedHandle<span class=\"token punctuation\">.</span><span class=\"token function\">FirstChildElement</span><span class=\"token punctuation\">(</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>numSameTags <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> child<span class=\"token punctuation\">;</span> child <span class=\"token operator\">=</span> child<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">NextSiblingElement</span><span class=\"token punctuation\">(</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>numSameTags<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// nothing</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tret <span class=\"token operator\">=</span> numSameTags<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">loadFromBuffer</span><span class=\"token punctuation\">(</span> string buffer <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> loadOkay <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">ReadFromMemory</span><span class=\"token punctuation\">(</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING);</span>\n    storedHandle <span class=\"token operator\">=</span> <span class=\"token function\">TiXmlHandle</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    level <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> loadOkay<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxXmlSettings<span class=\"token operator\">::</span><span class=\"token function\">copyXmlToString</span><span class=\"token punctuation\">(</span>string <span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">{</span>\n\tTiXmlPrinter printer<span class=\"token punctuation\">;</span>\n\tdoc<span class=\"token punctuation\">.</span><span class=\"token function\">Accept</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>printer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tstr <span class=\"token operator\">=</span> printer<span class=\"token punctuation\">.</span><span class=\"token function\">CStr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofSerialize</span><span class=\"token punctuation\">(</span>ofxXmlSettings <span class=\"token operator\">&amp;</span> xml<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofAbstractParameter <span class=\"token operator\">&amp;</span> parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>parameter<span class=\"token punctuation\">.</span><span class=\"token function\">isSerializable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\tstring name <span class=\"token operator\">=</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">getEscapedName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">==</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"UnknownName\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>ofParameterGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> ofParameterGroup <span class=\"token operator\">&amp;</span> group <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> ofParameterGroup<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>xml<span class=\"token punctuation\">.</span><span class=\"token function\">tagExists</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> xml<span class=\"token punctuation\">.</span><span class=\"token function\">addTag</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\txml<span class=\"token punctuation\">.</span><span class=\"token function\">pushTag</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> group<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofSerialize</span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">,</span> group<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\txml<span class=\"token punctuation\">.</span><span class=\"token function\">popTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\tstring value <span class=\"token operator\">=</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>xml<span class=\"token punctuation\">.</span><span class=\"token function\">tagExists</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\txml<span class=\"token punctuation\">.</span><span class=\"token function\">addValue</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\txml<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofDeserialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxXmlSettings <span class=\"token operator\">&amp;</span> xml<span class=\"token punctuation\">,</span> ofAbstractParameter <span class=\"token operator\">&amp;</span> parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>parameter<span class=\"token punctuation\">.</span><span class=\"token function\">isSerializable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\tstring name <span class=\"token operator\">=</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">getEscapedName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>ofParameterGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tofParameterGroup <span class=\"token operator\">&amp;</span> group <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span>ofParameterGroup<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">.</span><span class=\"token function\">tagExists</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">const_cast</span><span class=\"token operator\">&lt;</span>ofxXmlSettings<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pushTag</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> group<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">ofDeserialize</span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">,</span> group<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">const_cast</span><span class=\"token operator\">&lt;</span>ofxXmlSettings<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">popTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">.</span><span class=\"token function\">tagExists</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>ofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tparameter<span class=\"token punctuation\">.</span>cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> xml<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>ofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tparameter<span class=\"token punctuation\">.</span>cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> xml<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>ofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tparameter<span class=\"token punctuation\">.</span>cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> xml<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>ofParameter<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tparameter<span class=\"token punctuation\">.</span>cast<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> xml<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\tparameter<span class=\"token punctuation\">.</span><span class=\"token function\">fromString</span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n","type":"source","static":true}}],"fetch":[]}