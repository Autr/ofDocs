{"data":[{"page":{"entry":{"name":"ofxXmlSettings.h","filename":"ofxXmlSettings.h","absolute":"/Users/Gilbert/Code/openFrameworks/addons/ofxXmlSettings/src/ofxXmlSettings.h","path":"/addons/ofxXmlSettings/src/ofxXmlSettings_h","route":"/addons/ofxXmlSettings/src/ofxXmlSettings.h","dir":"../addons/ofxXmlSettings/src","ext":"h","type":"source","id":193,"parent":190,"breadcrumbs":[190,191,36],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofMain.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> (_MSC_VER)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"../libs/tinyxml.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"tinyxml.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/*\n\tQ: what is the which = 0 argument?\n\n\tA: Glad you asked - most of the time you can ignore this and treat it as if it weren't there\n\t   But if specified it selects the nth tag with the same tag name at the current root of the document\n\t   Normally this just means the top level tags in the document - but if you use the pushTag and popTag\n\t   you can temporarily set the root of the document to be that specified tag.\n\t   The main idea is to allow you to have multiple tags with the same name.\n\n\t   So here is an example without pushTag\n\n\t   &lt;time>102229&lt;/time>  &lt;-- which = 0\n\t   &lt;time>298292&lt;/time>  &lt;-- which = 1\n\t   &lt;time>393393&lt;/time>  &lt;-- which = 2\n\t   &lt;time>447373&lt;/time>  &lt;-- which = 3\n\n\t\tBut if we wanted to group these into multiple &lt;recording> tags and have multiple time values inside\n\t\twe can use push and pop to move into the recording tags as if they were the document root\n\n\t   &lt;recording> &lt;-- we temporarily push into here with pushTag(\"recording\", 0);\n\t\t\t&lt;time>19222&lt;/time>  &lt;-- to set this we call setValue(\"time\", 19222, 0);   ( which = 0 )\n\t\t\t&lt;time>23232&lt;/time>  &lt;-- to set this we call setValue(\"time\", 23232, 1);   ( which = 1 )\n\t   &lt;/recording> &lt;-- we pop back out here with popTag();\n\n\t\t&lt;recording>  &lt;-- we temporarily push into here with pushTag(\"recording\", 1); &lt;-- now we use 1 to select the 2nd recording tag\n\t\t\t&lt;time>33342&lt;/time>  &lt;-- setValue(\"time\", 33342, 0);   ( which = 0 )\n\t\t\t&lt;time>22722&lt;/time>  &lt;-- setValue(\"time\", 22722, 0);   ( which = 1 )\n\t   &lt;/recording>\n\n*/</span>\n\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> MAX_TAG_VALUE_LENGTH_IN_CHARS\t\t1024</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofxXmlSettings</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">ofxXmlSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofxXmlSettings</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> xmlFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token operator\">~</span><span class=\"token function\">ofxXmlSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">setVerbose</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> _verbose<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">loadFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> xmlFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">saveFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> xmlFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">saveFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">clearTagContents</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">removeTag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">tagExists</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// removes all tags from within either the whole document</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// or the tag you are currently at using pushTag</span>\n\t\t<span class=\"token keyword\">void</span>\t<span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">int</span> \t<span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span>  tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span>            defaultValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">double</span> \t<span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span>  tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span>         defaultValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\tstring \t<span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span>  tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> \tdefaultValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">int</span> \t<span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span>  tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span>            value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> \t<span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span>  tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span>         value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> \t<span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span>  tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> \tvalue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">//advanced</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">//-- pushTag/popTag</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//pushing a tag moves you inside it which has the effect of</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//temporarily treating the tag you are in as the document root</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//all setValue, readValue and getValue commands are then be relative to the tag you pushed.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//this can be used with addValue to create multiple tags of the same name within</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//the pushed tag - normally addValue only lets you create multiple tags of the same</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//at the top most level.</span>\n\n\t\t<span class=\"token keyword\">bool</span>\t<span class=\"token function\">pushTag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span>  tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span>\t\t<span class=\"token function\">popTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span>\t\t<span class=\"token function\">getPushLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">//-- numTags</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//this only works for tags at the current root level</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//use pushTag and popTag to get number of tags whithin other tags</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// both getNumTags(\"PT\"); and getNumTags(\"PT:X\"); will just return the</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//number of &lt;PT> tags at the current root level.</span>\n\t\t<span class=\"token keyword\">int</span>\t\t<span class=\"token function\">getNumTags</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">//-- addValue/addTag</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//adds a tag to the document even if a tag with the same name</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//already exists - returns an index which can then be used to</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//modify the tag by passing it as the last argument to setValue</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">//-- important - this only works for top level tags</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//   to put multiple tags inside other tags - use pushTag() and popTag()</span>\n\n\t\t<span class=\"token keyword\">int</span> \t<span class=\"token function\">addValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span>  tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span>            value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> \t<span class=\"token function\">addValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span>  tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span>         value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> \t<span class=\"token function\">addValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span>  tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> \tvalue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">int</span>\t\t<span class=\"token function\">addTag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//adds an empty tag at the current level</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// Attribute-related methods</span>\n\t\t<span class=\"token keyword\">int</span>\t\t<span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span>\t\t<span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span>\t\t<span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">int</span>\t\t<span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span>\t\t<span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span>\t\t<span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">void</span>\t<span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span>\t<span class=\"token function\">clearTagAttributes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">int</span>\t\t<span class=\"token function\">getNumAttributes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">bool</span>\t<span class=\"token function\">attributeExists</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">bool</span>    <span class=\"token function\">getAttributeNames</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> outNames<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">int</span>\t\t<span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> defaultValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">double</span>\t<span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> defaultValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\tstring\t<span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> defaultValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">int</span>\t\t<span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span>\t\t<span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span>\t\t<span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">int</span>\t\t<span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span>\t\t<span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span>\t\t<span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">bool</span>\t<span class=\"token function\">loadFromBuffer</span><span class=\"token punctuation\">(</span> string buffer <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span>\t<span class=\"token function\">copyXmlToString</span><span class=\"token punctuation\">(</span>string <span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t\tTiXmlDocument \tdoc<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> \t\t\tbDocLoaded<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\n\t\tTiXmlHandle     storedHandle<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span>             level<span class=\"token punctuation\">;</span>\n\n\n\t\t<span class=\"token keyword\">int</span> \t<span class=\"token function\">writeTag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span>  tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> valueString<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> \t<span class=\"token function\">readTag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span>  tag<span class=\"token punctuation\">,</span> TiXmlHandle<span class=\"token operator\">&amp;</span> valHandle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\" spellcheck=\"true\">// max 1024 chars...</span>\n\n\n\t\t<span class=\"token keyword\">int</span>\t\t<span class=\"token function\">writeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> valueString<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tTiXmlElement<span class=\"token operator\">*</span> <span class=\"token function\">getElementForAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">readIntAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> valueString<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">readDoubleAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> outValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">readStringAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> attribute<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&amp;</span> outValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>   \n\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofSerialize</span><span class=\"token punctuation\">(</span>ofxXmlSettings <span class=\"token operator\">&amp;</span> settings<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofAbstractParameter <span class=\"token operator\">&amp;</span> parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofDeserialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxXmlSettings <span class=\"token operator\">&amp;</span> settings<span class=\"token punctuation\">,</span> ofAbstractParameter <span class=\"token operator\">&amp;</span> parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n","type":"source","static":true}}],"fetch":[]}