{"data":[{"page":{"entry":{"name":"ofxUDPManager.cpp","filename":"ofxUDPManager.cpp","absolute":"/Users/Gilbert/Code/openFrameworks/addons/ofxNetwork/src/ofxUDPManager.cpp","path":"/addons/ofxNetwork/src/ofxUDPManager_cpp","route":"/addons/ofxNetwork/src/ofxUDPManager.cpp","dir":"../addons/ofxNetwork/src","ext":"cpp","type":"source","id":135,"parent":123,"breadcrumbs":[123,124,36],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> _CRT_SECURE_NO_DEPRECATE</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxUDPManager.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxNetworkUtils.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxNetwork.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofLog.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofUtils.h\"</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxUDPManager<span class=\"token operator\">::</span>m_bWinsockInit<span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\nofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">ofxUDPManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// was winsock initialized?</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_bWinsockInit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> vr<span class=\"token punctuation\">;</span>\n\t\t\tWSADATA\twsaData<span class=\"token punctuation\">;</span>\n\t\t\tvr<span class=\"token operator\">=</span>\t<span class=\"token function\">MAKEWORD</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\t<span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">WSAStartup</span><span class=\"token punctuation\">(</span>vr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>wsaData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tm_bWinsockInit<span class=\"token operator\">=</span>\t<span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\tm_hSocket<span class=\"token operator\">=</span> INVALID_SOCKET<span class=\"token punctuation\">;</span>\n\tm_dwTimeoutReceive <span class=\"token operator\">=</span> OF_UDP_DEFAULT_TIMEOUT<span class=\"token punctuation\">;</span>\n    m_dwTimeoutSend <span class=\"token operator\">=</span> OF_UDP_DEFAULT_TIMEOUT<span class=\"token punctuation\">;</span>\n\n\tcanGetRemoteAddress\t<span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tnonBlocking\t\t\t<span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">///\tCloses an open socket.</span>\n<span class=\"token comment\" spellcheck=\"true\">///\tNOTE: A\tclosed socket cannot be\treused again without a call\tto \"Create()\".</span>\n<span class=\"token keyword\">bool</span> ofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">closesocket</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> SOCKET_ERROR<span class=\"token punctuation\">)</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> SOCKET_ERROR<span class=\"token punctuation\">)</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tm_hSocket<span class=\"token operator\">=</span> INVALID_SOCKET<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">Setup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxUDPSettings <span class=\"token operator\">&amp;</span> settings<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>settings<span class=\"token punctuation\">.</span>bindPort <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>settings<span class=\"token punctuation\">.</span>sendPort<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxUDPManager\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"passed settings object was not initialized with .receiveOn or .sendTo\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// TODO: check each return value, destroy socket and return false ?</span>\n\t<span class=\"token function\">SetReuseAddress</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>reuse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SetEnableBroadcast</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>broadcast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SetNonBlocking</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>settings<span class=\"token punctuation\">.</span>blocking<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">SetTimeoutSend</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>sendTimeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SetTimeoutReceive</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>receiveTimeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>receiveBufferSize<span class=\"token punctuation\">)</span> <span class=\"token function\">SetReceiveBufferSize</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>receiveBufferSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>sendBufferSize<span class=\"token punctuation\">)</span> <span class=\"token function\">SetSendBufferSize</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>sendBufferSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SetTTL</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>ttl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>bindPort<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>multicast<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">BindMcast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>settings<span class=\"token punctuation\">.</span>bindAddress<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>bindPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">Bind</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>bindPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>sendPort<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>multicast<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ConnectMcast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>settings<span class=\"token punctuation\">.</span>sendAddress<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>sendPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>settings<span class=\"token punctuation\">.</span>sendAddress<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>sendPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">!=</span> INVALID_SOCKET<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tm_hSocket <span class=\"token operator\">=</span>\t<span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span>\tSOCK_DGRAM<span class=\"token punctuation\">,</span>\t<span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">!=</span> INVALID_SOCKET<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> unused <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>unused<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>unused<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> __APPLE__   </span><span class=\"token comment\" spellcheck=\"true\">// MacOS/X requires an additional call</span>\n\t\t\t<span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_REUSEPORT<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>unused<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>unused<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">bool</span> ret <span class=\"token operator\">=</span> m_hSocket <span class=\"token operator\">!=</span>\tINVALID_SOCKET<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ret<span class=\"token punctuation\">)</span> <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">WaitReceive</span><span class=\"token punctuation\">(</span>time_t timeoutSeconds<span class=\"token punctuation\">,</span> time_t timeoutMicros<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> SOCKET_ERROR<span class=\"token punctuation\">;</span>\n\n\tfd_set fd<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">FD_ZERO</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttimeval\ttv<span class=\"token punctuation\">;</span>\n\ttv<span class=\"token punctuation\">.</span>tv_sec <span class=\"token operator\">=</span> timeoutSeconds<span class=\"token punctuation\">;</span>\n\ttv<span class=\"token punctuation\">.</span>tv_usec <span class=\"token operator\">=</span> timeoutMicros<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>fd<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>tv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> SOCKET_TIMEOUT<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> SOCKET_ERROR<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">WaitSend</span><span class=\"token punctuation\">(</span>time_t timeoutSeconds<span class=\"token punctuation\">,</span> time_t timeoutMicros<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> SOCKET_ERROR<span class=\"token punctuation\">;</span>\n\n\tfd_set fd<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">FD_ZERO</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttimeval\ttv<span class=\"token punctuation\">;</span>\n\ttv<span class=\"token punctuation\">.</span>tv_sec <span class=\"token operator\">=</span> timeoutSeconds<span class=\"token punctuation\">;</span>\n\ttv<span class=\"token punctuation\">.</span>tv_usec <span class=\"token operator\">=</span> timeoutMicros<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>fd<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>tv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> SOCKET_TIMEOUT<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> SOCKET_ERROR<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">SetNonBlocking</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> useNonBlocking<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tnonBlocking\t\t<span class=\"token operator\">=</span> useNonBlocking<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> arg <span class=\"token operator\">=</span> nonBlocking<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> retVal <span class=\"token operator\">=</span> <span class=\"token function\">ioctlsocket</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span>FIONBIO<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t<span class=\"token keyword\">int</span> arg\t\t\t<span class=\"token operator\">=</span> nonBlocking<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> retVal <span class=\"token operator\">=</span> <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span>FIONBIO<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token keyword\">bool</span> ret<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>retVal <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ret<span class=\"token punctuation\">)</span> <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">Bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> usPort<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tsaServer<span class=\"token punctuation\">.</span>sin_family\t<span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>\n\tsaServer<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> INADDR_ANY<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//Port MUST\tbe in Network Byte Order</span>\n\tsaServer<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span>\t<span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>usPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token operator\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> sockaddr<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>saServer<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> sockaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> SOCKET_ERROR<span class=\"token punctuation\">)</span> <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">BindMcast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pMcast<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> usPort<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// bind to port</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">Bind</span><span class=\"token punctuation\">(</span>usPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxUDPManager\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"BindMcast(): couldn't bind to port \"</span> <span class=\"token operator\">&lt;&lt;</span> usPort<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// join the multicast group</span>\n\t<span class=\"token keyword\">struct</span> ip_mreq mreq<span class=\"token punctuation\">;</span>\n\tmreq<span class=\"token punctuation\">.</span>imr_multiaddr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span>pMcast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmreq<span class=\"token punctuation\">.</span>imr_interface<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> INADDR_ANY<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> IPPROTO_IP<span class=\"token punctuation\">,</span> IP_ADD_MEMBERSHIP<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> FAR<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>mreq<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span>mreq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> SOCKET_ERROR<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// multicast bind successful</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pHost<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> usPort<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//\tsockaddr_in\taddr_in= {0};</span>\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>saClient<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sockaddr_in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> hostent <span class=\"token operator\">*</span>he<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofUtils.h\"</span></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>he\t<span class=\"token operator\">=</span> <span class=\"token function\">gethostbyname</span><span class=\"token punctuation\">(</span>pHost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tsaClient<span class=\"token punctuation\">.</span>sin_family<span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// host byte order</span>\n\tsaClient<span class=\"token punctuation\">.</span>sin_port  <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>usPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\" spellcheck=\"true\">// short, network byte order</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//\tsaClient.sin_addr  = *((struct g_addr *)he->h_addr_list);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//ofLogNotice(\"ofxUDPManager\") &lt;&lt; \"Connect(): connected to \" &lt;&lt; inet_addr( pHost );</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//saClient.sin_addr.s_addr= inet_addr( pHost );</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//saClient.sin_addr = *((struct in_addr *)he->h_addr);</span>\n\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>saClient<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr<span class=\"token punctuation\">,</span>\n\t\t he<span class=\"token operator\">-</span><span class=\"token operator\">></span>h_addr_list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> he<span class=\"token operator\">-</span><span class=\"token operator\">></span>h_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>saClient<span class=\"token punctuation\">.</span>sin_zero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// zero the rest of the struct</span>\n\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">ConnectMcast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pMcast<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> usPort<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// associate the source socket's address with the socket</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">Bind</span><span class=\"token punctuation\">(</span>usPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> _DEBUG</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxUDPManager\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ConnectMcast(): couldn't bind to \"</span> <span class=\"token operator\">&lt;&lt;</span> usPort<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// set ttl to default</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">SetTTL</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> _DEBUG</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxUDPManager\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ConnectMcast(): couldn't set TTL; continuing anyway\"</span><span class=\"token punctuation\">;</span> \n\t\t<span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span>pMcast<span class=\"token punctuation\">,</span> usPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> _DEBUG</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxUDPManager\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" ConnectMcast(): couldn't connect to socket\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// multicast connect successful</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">///\tReturn values:</span>\n<span class=\"token comment\" spellcheck=\"true\">///\tSOCKET_TIMEOUT indicates timeout</span>\n<span class=\"token comment\" spellcheck=\"true\">///\tSOCKET_ERROR in\tcase of\ta problem.</span>\n<span class=\"token keyword\">int</span>\tofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">Send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pBuff<span class=\"token punctuation\">,</span>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> iSize<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>SOCKET_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_dwTimeoutSend\t<span class=\"token operator\">!=</span> NO_TIMEOUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">WaitSend</span><span class=\"token punctuation\">(</span>m_dwTimeoutSend<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">sendto</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pBuff<span class=\"token punctuation\">,</span>\tiSize<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>sockaddr <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>saClient<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sockaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//\treturn(send(m_hSocket, pBuff, iSize, 0));</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">///\tReturn values:</span>\n<span class=\"token comment\" spellcheck=\"true\">///\tSOCKET_TIMEOUT indicates timeout</span>\n<span class=\"token comment\" spellcheck=\"true\">///\tSOCKET_ERROR in\tcase of\ta problem.</span>\n<span class=\"token keyword\">int</span>\tofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">SendAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span>\tpBuff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> iSize<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>SOCKET_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">auto</span> timestamp <span class=\"token operator\">=</span> <span class=\"token function\">ofGetElapsedTimeMicros</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> timeleftSecs <span class=\"token operator\">=</span> m_dwTimeoutSend<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> timeleftMicros <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> total<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> bytesleft <span class=\"token operator\">=</span> iSize<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> ret<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>total <span class=\"token operator\">&lt;</span> iSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_dwTimeoutSend\t<span class=\"token operator\">!=</span> NO_TIMEOUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">WaitSend</span><span class=\"token punctuation\">(</span>timeleftSecs<span class=\"token punctuation\">,</span>timeleftMicros<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">sendto</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pBuff<span class=\"token punctuation\">,</span>\tiSize<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>sockaddr <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>saClient<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sockaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> SOCKET_ERROR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> SOCKET_ERROR<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\ttotal <span class=\"token operator\">+</span><span class=\"token operator\">=</span> ret<span class=\"token punctuation\">;</span>\n\t\tbytesleft <span class=\"token operator\">-</span><span class=\"token operator\">=</span>ret<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_dwTimeoutSend\t<span class=\"token operator\">!=</span> NO_TIMEOUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">auto</span> now <span class=\"token operator\">=</span> <span class=\"token function\">ofGetElapsedTimeMicros</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">auto</span> diff <span class=\"token operator\">=</span> now <span class=\"token operator\">-</span> timestamp<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>diff <span class=\"token operator\">></span> m_dwTimeoutSend <span class=\"token operator\">*</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> SOCKET_TIMEOUT<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">float</span> timeFloat <span class=\"token operator\">=</span> m_dwTimeoutSend <span class=\"token operator\">-</span> diff<span class=\"token operator\">/</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n\t\t\ttimeleftSecs <span class=\"token operator\">=</span> timeFloat<span class=\"token punctuation\">;</span>\n\t\t\ttimeleftMicros <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>timeFloat <span class=\"token operator\">-</span> timeleftSecs<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">//\treturns number of bytes wiating or SOCKET_ERROR if error</span>\n<span class=\"token keyword\">int</span>\tofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">PeekReceive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"INVALID_SOCKET\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> SOCKET_ERROR<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_dwTimeoutReceive\t<span class=\"token operator\">!=</span> NO_TIMEOUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">WaitReceive</span><span class=\"token punctuation\">(</span>m_dwTimeoutReceive<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//\twe can use MSG_PEEK, but we still need a large buffer (udp protocol max is 64kb even if max for this socket is less)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//\tdon't want a 64kb stack item here, so instead read how much can be read (note: not queue size, there may be more data-more packets)</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\t\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> retVal <span class=\"token operator\">=</span> <span class=\"token function\">ioctlsocket</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span>FIONREAD<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t\t<span class=\"token keyword\">int</span> size  <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> retVal <span class=\"token operator\">=</span> <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span>FIONREAD<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">//\terror</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> retVal <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//assert( Result == SOCKET_ERROR );</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//\treport error</span>\n\t\t<span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> SOCKET_ERROR<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">///\tReturn values:</span>\n<span class=\"token comment\" spellcheck=\"true\">///\tSOCKET_TIMEOUT indicates timeout</span>\n<span class=\"token comment\" spellcheck=\"true\">///\tSOCKET_ERROR in\tcase of\ta problem.</span>\n<span class=\"token keyword\">int</span>\tofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">Receive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pBuff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> iSize<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxUDPManager\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"INVALID_SOCKET\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>SOCKET_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_dwTimeoutReceive\t<span class=\"token operator\">!=</span> NO_TIMEOUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">WaitReceive</span><span class=\"token punctuation\">(</span>m_dwTimeoutReceive<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_WIN32</span>\n\t\tsocklen_t nLen<span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sockaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t<span class=\"token keyword\">int</span>\tnLen<span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sockaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token keyword\">int</span>\tret<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>pBuff<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> iSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tret<span class=\"token operator\">=</span> <span class=\"token function\">recvfrom</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> pBuff<span class=\"token punctuation\">,</span>\tiSize<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>sockaddr <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>saClient<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>nLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret\t<span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//ofLogNotice(\"ofxUDPManager\") &lt;&lt; \"received from: \" &lt;&lt; inet_ntoa((in_addr)saClient.sin_addr);</span>\n\t\tcanGetRemoteAddress<span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tcanGetRemoteAddress <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">//\tif the network error is WOULDBLOCK, then return 0 instead of SOCKET_ERROR as it's not really a problem, just no data.</span>\n\t\t<span class=\"token keyword\">int</span> SocketError <span class=\"token operator\">=</span> <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> SocketError <span class=\"token operator\">==</span> <span class=\"token function\">OFXNETWORK_ERROR</span><span class=\"token punctuation\">(</span>WOULDBLOCK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//\treturn(recvfrom(m_hSocket, pBuff, iSize, 0));</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">SetTimeoutSend</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span>\ttimeoutInSeconds<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tm_dwTimeoutSend<span class=\"token operator\">=</span> timeoutInSeconds<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> ofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">SetTimeoutReceive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> timeoutInSeconds<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tm_dwTimeoutReceive<span class=\"token operator\">=</span>\ttimeoutInSeconds<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span>\tofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">GetTimeoutSend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> m_dwTimeoutSend<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span>\tofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">GetTimeoutReceive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> m_dwTimeoutReceive<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">GetRemoteAddr</span><span class=\"token punctuation\">(</span>string<span class=\"token operator\">&amp;</span> address<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> port<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> canGetRemoteAddress <span class=\"token operator\">==</span>\t<span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//\tget the static-winsock-allocated address-conversion string and make a copy of it</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> AddressStr <span class=\"token operator\">=</span> <span class=\"token function\">inet_ntoa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>in_addr<span class=\"token punctuation\">)</span>saClient<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\taddress <span class=\"token operator\">=</span> AddressStr<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//\tget the port</span>\n\tport <span class=\"token operator\">=</span> <span class=\"token function\">ntohs</span><span class=\"token punctuation\">(</span>saClient<span class=\"token punctuation\">.</span>sin_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">GetListenAddr</span><span class=\"token punctuation\">(</span>string<span class=\"token operator\">&amp;</span> address<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> port<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//\tget the static-winsock-allocated address-conversion string and make a copy of it</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> AddressStr <span class=\"token operator\">=</span> <span class=\"token function\">inet_ntoa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>in_addr<span class=\"token punctuation\">)</span>saServer<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\taddress <span class=\"token operator\">=</span> AddressStr<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//\tget the port</span>\n\tport <span class=\"token operator\">=</span> <span class=\"token function\">ntohs</span><span class=\"token punctuation\">(</span>saServer<span class=\"token punctuation\">.</span>sin_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">int</span>\tofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">GetMaxMsgSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span>\tsizeBuffer<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_WIN32</span>\n\t\tsocklen_t size <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t<span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">getsockopt</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_MAX_MSG_SIZE<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>sizeBuffer<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> sizeBuffer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">int</span>\tofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">GetReceiveBufferSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span>\tsizeBuffer<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_WIN32</span>\n\t\tsocklen_t size <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t<span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">getsockopt</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_RCVBUF<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>sizeBuffer<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> sizeBuffer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">SetReceiveBufferSize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sizeInByte<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_RCVBUF<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>sizeInByte<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sizeInByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">int</span>\tofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">GetSendBufferSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span>\tsizeBuffer<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_WIN32</span>\n\t\tsocklen_t size <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t<span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">getsockopt</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_SNDBUF<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>sizeBuffer<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> sizeBuffer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">SetSendBufferSize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sizeInByte<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_SNDBUF<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>sizeInByte<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sizeInByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">SetReuseAddress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> allowReuse<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span>\ton<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>allowReuse<span class=\"token punctuation\">)</span>\ton<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\t\t\ton<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>on<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span>\t<span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">SetEnableBroadcast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> enableBroadcast<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span>\ton<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>enableBroadcast<span class=\"token punctuation\">)</span>\ton<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\t\t\t\t\ton<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_BROADCAST<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>on<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span>\t<span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">GetTTL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> nTTL<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_WIN32</span>\n\t\tsocklen_t nSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t<span class=\"token keyword\">int</span> nSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getsockopt</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> IPPROTO_IP<span class=\"token punctuation\">,</span> IP_MULTICAST_TTL<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> FAR <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>nTTL<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>nSize<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> SOCKET_ERROR<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> _DEBUG</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxUDPManager\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"GetTTL(): getsockopt failed\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t<span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> nTTL<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxUDPManager<span class=\"token operator\">::</span><span class=\"token function\">SetTTL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nTTL<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// Set the Time-to-Live of the multicast.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> IPPROTO_IP<span class=\"token punctuation\">,</span> IP_MULTICAST_TTL<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> FAR <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>nTTL<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> SOCKET_ERROR<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> _DEBUG</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxUDPManager\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"SetTTL(): setsockopt failed\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t<span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/*\n//--------------------------------------------------------------------------------\nbool ofxUDPManager::GetInetAddr(LPINETADDR\tpInetAddr)\n{\nif (m_hSocket == INVALID_SOCKET) return(false);\n\nint\tiSize= sizeof(sockaddr);\nreturn(getsockname(m_hSocket, (sockaddr *)pInetAddr, &amp;iSize) !=\tSOCKET_ERROR);\n}\n*/</span>\n","type":"source","static":true}}],"fetch":[]}