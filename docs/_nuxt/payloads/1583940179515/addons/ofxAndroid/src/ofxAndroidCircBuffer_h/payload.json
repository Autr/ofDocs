{"data":[{"page":{"entry":{"name":"ofxAndroidCircBuffer.h","filename":"ofxAndroidCircBuffer.h","absolute":"/Users/Gilbert/Code/openFrameworks/addons/ofxAndroid/src/ofxAndroidCircBuffer.h","path":"/addons/ofxAndroid/src/ofxAndroidCircBuffer_h","route":"/addons/ofxAndroid/src/ofxAndroidCircBuffer.h","dir":"../addons/ofxAndroid/src","ext":"h","type":"source","id":46,"parent":39,"breadcrumbs":[39,40,36],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Content</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofxAndroidCircBuffer</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">ofxAndroidCircBuffer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxAndroidCircBuffer<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tofxAndroidCircBuffer <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxAndroidCircBuffer<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">ofxAndroidCircBuffer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> _size<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Content <span class=\"token operator\">&amp;</span> init_val <span class=\"token operator\">=</span> <span class=\"token function\">Content</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> _size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Content <span class=\"token operator\">&amp;</span> init_val <span class=\"token operator\">=</span> <span class=\"token function\">Content</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Content <span class=\"token operator\">&amp;</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tContent <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Content <span class=\"token operator\">&amp;</span> default_c <span class=\"token operator\">=</span> <span class=\"token function\">Content</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> buffer_size<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> empty<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">is_full</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> full<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">num_elements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>writeIndex<span class=\"token operator\">>=</span>readIndex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> writeIndex <span class=\"token operator\">-</span> readIndex<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> buffer_size <span class=\"token operator\">-</span> readIndex <span class=\"token operator\">+</span> writeIndex<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>Content<span class=\"token operator\">></span> buffer<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> readIndex<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> writeIndex<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> buffer_size<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">bool</span> full<span class=\"token punctuation\">,</span> empty<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Content</span><span class=\"token operator\">></span>\nofxAndroidCircBuffer<span class=\"token operator\">&lt;</span>Content<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">ofxAndroidCircBuffer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Content <span class=\"token operator\">&amp;</span> init_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\treadIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\twriteIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tbuffer_size <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n\tfull <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tempty <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span>init_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Content</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofxAndroidCircBuffer<span class=\"token operator\">&lt;</span>Content<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> _size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Content <span class=\"token operator\">&amp;</span> init_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>_size<span class=\"token punctuation\">,</span>init_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbuffer_size <span class=\"token operator\">=</span> _size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Content</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofxAndroidCircBuffer<span class=\"token operator\">&lt;</span>Content<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Content <span class=\"token operator\">&amp;</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/*if(full){\n\t\treturn;\n\t}*/</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//empty = false;</span>\n\tbuffer<span class=\"token punctuation\">[</span>writeIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n\twriteIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>writeIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> buffer_size<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//full = (writeIndex == readIndex); // true if write catches up to read</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Content</span><span class=\"token operator\">></span>\nContent ofxAndroidCircBuffer<span class=\"token operator\">&lt;</span>Content<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Content <span class=\"token operator\">&amp;</span> default_c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/*if (empty){\n\t\treturn default_c;\n\t}*/</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//full = false;</span>\n\t<span class=\"token keyword\">const</span> Content <span class=\"token operator\">&amp;</span> element <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">[</span>readIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\treadIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>readIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> buffer_size<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//empty = (readIndex == writeIndex);</span>\n\t<span class=\"token keyword\">return</span> element<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n","type":"source","static":true}}],"fetch":[]}