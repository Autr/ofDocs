{"data":[{"page":{"entry":{"name":"threadedObject.h","filename":"threadedObject.h","absolute":"/Users/Gilbert/Code/openFrameworks/examples/threads/threadExample/src/threadedObject.h","path":"/examples/threads/threadExample/src/threadedObject_h","route":"/examples/threads/threadExample/src/threadedObject.h","dir":"../examples/threads/threadExample/src","ext":"h","type":"source","id":1653,"parent":1649,"breadcrumbs":[1649,1647,1636,436],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofMain.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;atomic></span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// This is a simple example of a ThreadedObject created by extending ofThread.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// It contains data (count) that will be accessed from within and outside the</span>\n<span class=\"token comment\" spellcheck=\"true\">/// thread and demonstrates several of the data protection mechanisms (aka</span>\n<span class=\"token comment\" spellcheck=\"true\">/// mutexes).</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadedObject</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofThread\n<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// On destruction wait for the thread to finish</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// so we don't destroy the pixels while they are</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// being used. Otherwise we would crash</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">ThreadedObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">waitForThread</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        pixels<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span><span class=\"token number\">480</span><span class=\"token punctuation\">,</span>OF_PIXELS_GRAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tex<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// Start the thread.</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">startThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// Signal the thread to stop.  After calling this method,</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// isThreadRunning() will return false and the while loop will stop</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// next time it has the chance to.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// In order for the thread to actually go out of the while loop</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// we need to notify the condition, otherwise the thread will</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// sleep there forever.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// We also lock the mutex so the notify_all call only happens</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// once the thread is waiting. We lock the mutex during the</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// whole while loop but when we call condition.wait, that</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// unlocks the mutex which ensures that we'll only call</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// stop and notify here once the condition is waiting</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        std<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lck</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">stopThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        condition<span class=\"token punctuation\">.</span><span class=\"token function\">notify_all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// Everything in this function will happen in a different</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// thread which leaves the main thread completelty free for</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// other tasks.</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">threadedFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isThreadRunning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// since we are only writting to the frame number from one thread</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// and there's no calculations that depend on it we can just write to</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// it without locking</span>\n\t\t\tthreadFrameNum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// Lock the mutex until the end of the block, until the closing }</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// in which this variable is contained or we unlock it explicitly</span>\n            std<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">// The mutex is now locked so we can modify</span>\n            <span class=\"token comment\" spellcheck=\"true\">// the shared memory without problem</span>\n            <span class=\"token keyword\">auto</span> t <span class=\"token operator\">=</span> <span class=\"token function\">ofGetElapsedTimef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> line<span class=\"token operator\">:</span> pixels<span class=\"token punctuation\">.</span><span class=\"token function\">getLines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">auto</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> pixel<span class=\"token operator\">:</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">auto</span> ux <span class=\"token operator\">=</span> x<span class=\"token operator\">/</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">auto</span> uy <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">getLineNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    pixel<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofNoise</span><span class=\"token punctuation\">(</span>ux<span class=\"token punctuation\">,</span> uy<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">// Now we wait for the main thread to finish</span>\n            <span class=\"token comment\" spellcheck=\"true\">// with this frame until we can generate a new one</span>\n            <span class=\"token comment\" spellcheck=\"true\">// This sleeps the thread until the condition is signaled</span>\n            <span class=\"token comment\" spellcheck=\"true\">// and unlocks the mutex so the main thread can lock it</span>\n            condition<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// if we didn't lock here we would see</span>\n        <span class=\"token comment\" spellcheck=\"true\">// tearing as the thread would be updating</span>\n        <span class=\"token comment\" spellcheck=\"true\">// the pixels while we upload them to the texture</span>\n\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tex<span class=\"token punctuation\">.</span><span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        condition<span class=\"token punctuation\">.</span><span class=\"token function\">notify_all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">updateNoLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// we don't lock here so we will see</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// tearing as the thread will update</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// the pixels while we upload them to the texture</span>\n\t\ttex<span class=\"token punctuation\">.</span><span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcondition<span class=\"token punctuation\">.</span><span class=\"token function\">notify_all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// This drawing function cannot be called from the thread itself because</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// it includes OpenGL calls</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        tex<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getThreadFrameNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> threadFrameNum<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\">// pixels represents shared data that we aim to always access from both the</span>\n    <span class=\"token comment\" spellcheck=\"true\">// main thread AND this threaded object and at least from one of them for</span>\n    <span class=\"token comment\" spellcheck=\"true\">// writing. Therefore, we need to protect it with the mutex.</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Otherwise it wouldn't make sense to lock.</span>\n    ofFloatPixels pixels<span class=\"token punctuation\">;</span>\n\n    ofTexture tex<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>condition_variable condition<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> threadFrameNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n","type":"source","static":true}}],"fetch":[]}