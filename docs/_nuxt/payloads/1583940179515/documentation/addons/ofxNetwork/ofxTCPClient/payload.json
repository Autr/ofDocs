{"data":[{"page":{"entry":{"name":"ofxTCPClient","filename":"ofxTCPClient.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/addons/ofxNetwork/ofxTCPClient.markdown","path":"/documentation/addons/ofxNetwork/ofxTCPClient","route":"/documentation/addons/ofxNetwork/ofxTCPClient.markdown","dir":"../ofSite/documentation/addons/ofxNetwork","ext":"markdown","type":"page","id":1828,"parent":1824,"breadcrumbs":[1824,1743,1718],"siblings":[],"translations":{}},"description":{"short":"","full":"<p>The ofxTCPClient is what you used to connect to another server and request information. This other server could be a service running on your local machine, or it could somewhere out there in the internet. As of version 0.8 it doesn't do SSL or other tricky things well, nor does it handle forms or GET and POST requests but you can handle strings or raw bytes. A trivial usage might look like the following:</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">bool</span> connected <span class=\"token operator\">=</span> tcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token number\">127.0</span><span class=\"token punctuation\">.</span><span class=\"token number\">0.1</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">isConnected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tstring str <span class=\"token operator\">=</span> tcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// did anything come in</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">keyReleased</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">isConnected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\ttcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>HELLO WORLD<span class=\"token operator\">!</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>To receive something meaningful from a regular webserver you'll want to at least do something like the following:</p>\n<pre><code>string msg <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>GET <span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>html HTTP<span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\ntcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>but if you're using ofxTCPServer, then you're free to invent whatever sort of low level communication you'd like. Another important element of the ofxTCPClient and of TCP communication in general, is the message delimiter. You can see that using:</p>\n<p>tcpClient.setMessageDelimiter(&quot;\\n&quot;);</p>\n<p>This is important because the message delimiter used by your client has to match what your sever is using. If the server uses '\\r\\n', then your client needs to do the same so that the server knows when a message has ended.</p>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"close()","name":"close","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This closes any open connection to a server.</p>\n"},{"syntax":"getIP()","name":"getIP","returns":"string","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the IP address number set in the setup() method of the client.</p>\n"},{"syntax":"getNumReceivedBytes()","name":"getNumReceivedBytes","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the number of bytes that a single call to receive has gotten.</p>\n"},{"syntax":"getPort()","name":"getPort","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the port number set in the setup() method of the client.</p>\n"},{"syntax":"isClosingCondition(messageSize, errorCode)","name":"isClosingCondition","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> messageSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> errorCode","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"isConnected()","name":"isConnected","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns whether the client is currently connected to a server.</p>\n"},{"syntax":"ofxTCPClient(&mom)","name":"ofxTCPClient","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxTCPManager <span class=\"token operator\">&amp;</span>mom","access":"private","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofxTCPClient()","name":"ofxTCPClient","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Constructor. This doesn't prepare your client to send and receive information though, you need to call the setup() method for that.</p>\n"},{"syntax":"operator=(&mom)","name":"operator=","returns":"ofxTCPClient &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxTCPClient <span class=\"token operator\">&amp;</span>mom","access":"private","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"peekReceiveRawBytes(*receiveBytes, numBytes)","name":"peekReceiveRawBytes","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>receiveBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numBytes","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"receive()","name":"receive","returns":"string","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Receives ASCII encoded data from the server. You should make sure you check that the client is connected before calling this.</p>\n<pre><code><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">isConnected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        string str <span class=\"token operator\">=</span> tcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> str <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"receiveRaw()","name":"receiveRaw","returns":"string","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This receives the raw bytes from a server. Like with receive(), you should check that the client is connected before calling this.</p>\n<pre><code>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">isConnected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        string s <span class=\"token operator\">=</span> tcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">receiveRaw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> str <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n"},{"syntax":"receiveRawBytes(*receiveBytes, numBytes)","name":"receiveRawBytes","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>receiveBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numBytes","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This retrieves non-ASCII from a server, handy for receiving an image or other binary data to a client. For instance:</p>\n<pre><code>\n        <span class=\"token keyword\">bool</span> dataRecd <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span><span class=\"token number\">7800</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> recd <span class=\"token operator\">=</span> <span class=\"token number\">7800</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> totalReceived <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> messageSize <span class=\"token operator\">=</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>recd </code></pre>\n"},{"syntax":"receiveRawMsg(*receiveBuffer, numBytes)","name":"receiveRawMsg","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>receiveBuffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numBytes","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"send(message)","name":"send","returns":"bool","returns_description":null,"parameters":"string message","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Send the message, which can be as complex as a full GET request or as simple as raw string.</p>\n"},{"syntax":"sendRaw(message)","name":"sendRaw","returns":"bool","returns_description":null,"parameters":"string message","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This sends the message as raw, i.e. not ASCII encoded. This is what you'll want to do if you're sending bitmap data or other kinds of non-text information.</p>\n"},{"syntax":"sendRawBytes(*rawBytes, numBytes)","name":"sendRawBytes","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>rawBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> numBytes","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This method sends raw bytes (i.e. not ASCII encoded bytes) to the server.</p>\n"},{"syntax":"sendRawMsg(*msg, size)","name":"sendRawMsg","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setMessageDelimiter(delim)","name":"setMessageDelimiter","returns":"void","returns_description":null,"parameters":"string delim","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This is important because the message delimiter used by your client has to match what your sever is using. If the server uses '[\\TCP]', which is the default for ofxTCPClient and ofxTCPServer, then your client needs to do the same so that the server knows when a message has ended. ofxTCPServer allows you to use whatever delimiter you want.</p>\n"},{"syntax":"setVerbose(_verbose)","name":"setVerbose","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> _verbose","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setup(&settings)","name":"setup","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxTCPSettings <span class=\"token operator\">&amp;</span>settings","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setup(ip, _port, blocking = false)","name":"setup","returns":"bool","returns_description":null,"parameters":"string ip<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> _port<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> blocking<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>You call this to setup what IP and port your client will try to connect to:</p>\n<pre><code>tcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token number\">127.0</span><span class=\"token punctuation\">.</span><span class=\"token number\">0.1</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>It returns whether the connection has successfully been made. Don't mistake this for a URI or URL, it comes before that, where the connection is made so that files or data streams can be requested.</p>\n"},{"syntax":"setupConnectionIdx(_index, blocking)","name":"setupConnectionIdx","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> _index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> blocking","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"threadedFunction()","name":"threadedFunction","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"~ofxTCPClient()","name":"~ofxTCPClient","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"name":"TCPClient","type":"ofxTCPManager","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"connected","type":"bool","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"index","type":"int","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"ipAddr","type":"string","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"messageDelimiter","type":"string","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"messageSize","type":"int","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"partialPrevMsg","type":"string","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"port","type":"int","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"str","type":"string","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"tmpBuff","type":"char","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"tmpBuffReceive","type":"ofBuffer ","access":"private","version_started":"0.8.0","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"tmpBuffSend","type":"ofBuffer ","access":"private","version_started":"0.8.0","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"tmpStr","type":"string","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofxTCPClient</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n_extends: _\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>##Description</p>\n<p>The ofxTCPClient is what you used to connect to another server and request information. This other server could be a service running on your local machine, or it could somewhere out there in the internet. As of version 0.8 it doesn't do SSL or other tricky things well, nor does it handle forms or GET and POST requests but you can handle strings or raw bytes. A trivial usage might look like the following:</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">bool</span> connected <span class=\"token operator\">=</span> tcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token number\">127.0</span><span class=\"token punctuation\">.</span><span class=\"token number\">0.1</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">isConnected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tstring str <span class=\"token operator\">=</span> tcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// did anything come in</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">keyReleased</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">isConnected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\ttcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>HELLO WORLD<span class=\"token operator\">!</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>To receive something meaningful from a regular webserver you'll want to at least do something like the following:</p>\n<pre><code>string msg <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>GET <span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>html HTTP<span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\ntcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>but if you're using ofxTCPServer, then you're free to invent whatever sort of low level communication you'd like. Another important element of the ofxTCPClient and of TCP communication in general, is the message delimiter. You can see that using:</p>\n<p>tcpClient.setMessageDelimiter(&quot;\\n&quot;);</p>\n<p>This is important because the message delimiter used by your client has to match what your sever is using. If the server uses '\\r\\n', then your client needs to do the same so that the server knows when a message has ended.</p>\n<p>##Methods</p>\n<p>###bool close()</p>\n<p>&lt;!--\n<em>syntax: close()</em>\n<em>name: close</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This closes any open connection to a server.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string getIP()</p>\n<p>&lt;!--\n<em>syntax: getIP()</em>\n<em>name: getIP</em>\n<em>returns: string</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the IP address number set in the setup() method of the client.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getNumReceivedBytes()</p>\n<p>&lt;!--\n<em>syntax: getNumReceivedBytes()</em>\n<em>name: getNumReceivedBytes</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the number of bytes that a single call to receive has gotten.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getPort()</p>\n<p>&lt;!--\n<em>syntax: getPort()</em>\n<em>name: getPort</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the port number set in the setup() method of the client.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isClosingCondition(messageSize, errorCode)</p>\n<p>&lt;!--\n<em>syntax: isClosingCondition(messageSize, errorCode)</em>\n<em>name: isClosingCondition</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: int messageSize, int errorCode</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isConnected()</p>\n<p>&lt;!--\n<em>syntax: isConnected()</em>\n<em>name: isConnected</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns whether the client is currently connected to a server.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofxTCPClient(&amp;mom)</h3>\n<p>&lt;!--\n<em>syntax: ofxTCPClient(&amp;mom)</em>\n<em>name: ofxTCPClient</em>\n_returns: _\n_returns_description: _\n<em>parameters: const ofxTCPManager &amp;mom</em>\n<em>access: private</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofxTCPClient()</h3>\n<p>&lt;!--\n<em>syntax: ofxTCPClient()</em>\n<em>name: ofxTCPClient</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Constructor. This doesn't prepare your client to send and receive information though, you need to call the setup() method for that.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofxTCPClient &amp; operator=(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;mom)</em>\n<em>name: operator=</em>\n<em>returns: ofxTCPClient &amp;</em>\n_returns_description: _\n<em>parameters: const ofxTCPClient &amp;mom</em>\n<em>access: private</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int peekReceiveRawBytes(*receiveBytes, numBytes)</p>\n<p>&lt;!--\n<em>syntax: peekReceiveRawBytes(*receiveBytes, numBytes)</em>\n<em>name: peekReceiveRawBytes</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: char *receiveBytes, int numBytes</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string receive()</p>\n<p>&lt;!--\n<em>syntax: receive()</em>\n<em>name: receive</em>\n<em>returns: string</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Receives ASCII encoded data from the server. You should make sure you check that the client is connected before calling this.</p>\n<pre><code><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">isConnected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        string str <span class=\"token operator\">=</span> tcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> str <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string receiveRaw()</p>\n<p>&lt;!--\n<em>syntax: receiveRaw()</em>\n<em>name: receiveRaw</em>\n<em>returns: string</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This receives the raw bytes from a server. Like with receive(), you should check that the client is connected before calling this.</p>\n<pre><code>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">isConnected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        string s <span class=\"token operator\">=</span> tcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">receiveRaw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> str <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int receiveRawBytes(*receiveBytes, numBytes)</p>\n<p>&lt;!--\n<em>syntax: receiveRawBytes(*receiveBytes, numBytes)</em>\n<em>name: receiveRawBytes</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: char *receiveBytes, int numBytes</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This retrieves non-ASCII from a server, handy for receiving an image or other binary data to a client. For instance:</p>\n<pre><code>\n        <span class=\"token keyword\">bool</span> dataRecd <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span><span class=\"token number\">7800</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> recd <span class=\"token operator\">=</span> <span class=\"token number\">7800</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> totalReceived <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> messageSize <span class=\"token operator\">=</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>recd <span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>recd <span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> messageSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                tcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">receiveRawBytes</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>buffer<span class=\"token punctuation\">[</span>totalReceived<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> messageSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                recd <span class=\"token operator\">-</span><span class=\"token operator\">=</span> messageSize<span class=\"token punctuation\">;</span>\n                totalReceived <span class=\"token operator\">+</span><span class=\"token operator\">=</span> messageSize<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                tcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">receiveRawBytes</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>buffer<span class=\"token punctuation\">[</span>totalReceived<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> recd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                totalReceived <span class=\"token operator\">+</span><span class=\"token operator\">=</span> recd<span class=\"token punctuation\">;</span>\n                recd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                dataRecd <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dataRecd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            img<span class=\"token punctuation\">.</span><span class=\"token function\">setFromPixels</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>buffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">52</span><span class=\"token punctuation\">,</span> OF_IMAGE_COLOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>On the ofxTCPServer side this would look like:</p>\n<pre><code>        ofImage img<span class=\"token punctuation\">;</span>\n        img<span class=\"token punctuation\">.</span><span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>tmp<span class=\"token punctuation\">.</span>jpg<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> imageBytesToSend <span class=\"token operator\">=</span> <span class=\"token number\">7800</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> totalBytesSent <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> messageSize <span class=\"token operator\">=</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> imageBytesToSend <span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>imageBytesToSend <span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> messageSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                TCP<span class=\"token punctuation\">.</span><span class=\"token function\">sendRawBytesToAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>img<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>totalBytesSent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> messageSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                imageBytesToSend <span class=\"token operator\">-</span><span class=\"token operator\">=</span> messageSize<span class=\"token punctuation\">;</span>\n                totalBytesSent <span class=\"token operator\">+</span><span class=\"token operator\">=</span> messageSize<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                TCP<span class=\"token punctuation\">.</span><span class=\"token function\">sendRawBytesToAll</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>img<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>totalBytesSent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> imageBytesToSend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                totalBytesSent <span class=\"token operator\">+</span><span class=\"token operator\">=</span> imageBytesToSend<span class=\"token punctuation\">;</span>\n                imageBytesToSend <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int receiveRawMsg(*receiveBuffer, numBytes)</p>\n<p>&lt;!--\n<em>syntax: receiveRawMsg(*receiveBuffer, numBytes)</em>\n<em>name: receiveRawMsg</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: char *receiveBuffer, int numBytes</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool send(message)</p>\n<p>&lt;!--\n<em>syntax: send(message)</em>\n<em>name: send</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: string message</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Send the message, which can be as complex as a full GET request or as simple as raw string.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool sendRaw(message)</p>\n<p>&lt;!--\n<em>syntax: sendRaw(message)</em>\n<em>name: sendRaw</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: string message</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This sends the message as raw, i.e. not ASCII encoded. This is what you'll want to do if you're sending bitmap data or other kinds of non-text information.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool sendRawBytes(*rawBytes, numBytes)</p>\n<p>&lt;!--\n<em>syntax: sendRawBytes(*rawBytes, numBytes)</em>\n<em>name: sendRawBytes</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const char *rawBytes, const int numBytes</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This method sends raw bytes (i.e. not ASCII encoded bytes) to the server.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool sendRawMsg(*msg, size)</p>\n<p>&lt;!--\n<em>syntax: sendRawMsg(*msg, size)</em>\n<em>name: sendRawMsg</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const char *msg, int size</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setMessageDelimiter(delim)</p>\n<p>&lt;!--\n<em>syntax: setMessageDelimiter(delim)</em>\n<em>name: setMessageDelimiter</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: string delim</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This is important because the message delimiter used by your client has to match what your sever is using. If the server uses '[\\TCP]', which is the default for ofxTCPClient and ofxTCPServer, then your client needs to do the same so that the server knows when a message has ended. ofxTCPServer allows you to use whatever delimiter you want.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setVerbose(_verbose)</p>\n<p>&lt;!--\n_syntax: setVerbose(<em>verbose)</em>\n<em>name: setVerbose</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: bool <em>verbose</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool setup(&amp;settings)</p>\n<p>&lt;!--\n<em>syntax: setup(&amp;settings)</em>\n<em>name: setup</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofxTCPSettings &amp;settings</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool setup(ip, _port, blocking = false)</p>\n<p>&lt;!--\n_syntax: setup(ip, <em>port, blocking = false)</em>\n<em>name: setup</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: string ip, int <em>port, bool blocking=false</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>You call this to setup what IP and port your client will try to connect to:</p>\n<pre><code>tcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token number\">127.0</span><span class=\"token punctuation\">.</span><span class=\"token number\">0.1</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>It returns whether the connection has successfully been made. Don't mistake this for a URI or URL, it comes before that, where the connection is made so that files or data streams can be requested.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool setupConnectionIdx(_index, blocking)</p>\n<p>&lt;!--\n_syntax: setupConnectionIdx(<em>index, blocking)</em>\n<em>name: setupConnectionIdx</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: int <em>index, bool blocking</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void threadedFunction()</p>\n<p>&lt;!--\n<em>syntax: threadedFunction()</em>\n<em>name: threadedFunction</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>~ofxTCPClient()</h3>\n<p>&lt;!--\n<em>syntax: ~ofxTCPClient()</em>\n<em>name: ~ofxTCPClient</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###ofxTCPManager TCPClient</p>\n<p>&lt;!--\n<em>name: TCPClient</em>\n<em>type: ofxTCPManager</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool connected</p>\n<p>&lt;!--\n<em>name: connected</em>\n<em>type: bool</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int index</p>\n<p>&lt;!--\n<em>name: index</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string ipAddr</p>\n<p>&lt;!--\n<em>name: ipAddr</em>\n<em>type: string</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string messageDelimiter</p>\n<p>&lt;!--\n<em>name: messageDelimiter</em>\n<em>type: string</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int messageSize</p>\n<p>&lt;!--\n<em>name: messageSize</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string partialPrevMsg</p>\n<p>&lt;!--\n<em>name: partialPrevMsg</em>\n<em>type: string</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int port</p>\n<p>&lt;!--\n<em>name: port</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string str</p>\n<p>&lt;!--\n<em>name: str</em>\n<em>type: string</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###char tmpBuff</p>\n<p>&lt;!--\n<em>name: tmpBuff</em>\n<em>type: char</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofBuffer  tmpBuffReceive</p>\n<p>&lt;!--\n<em>name: tmpBuffReceive</em>\n_type: ofBuffer _\n<em>access: private</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofBuffer  tmpBuffSend</p>\n<p>&lt;!--\n<em>name: tmpBuffSend</em>\n_type: ofBuffer _\n<em>access: private</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string tmpStr</p>\n<p>&lt;!--\n<em>name: tmpStr</em>\n<em>type: string</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofxTCPClient\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\n\n\n\n\n\n##Description\n\nThe ofxTCPClient is what you used to connect to another server and request information. This other server could be a service running on your local machine, or it could somewhere out there in the internet. As of version 0.8 it doesn't do SSL or other tricky things well, nor does it handle forms or GET and POST requests but you can handle strings or raw bytes. A trivial usage might look like the following:\n\n~~~~{.cpp}\nvoid ofApp::setup()\n{\n\tbool connected = tcpClient.setup(\"127.0.0.1\", 11999);\n}\n\nvoid ofApp::update()\n{\n\tif(tcpClient.isConnected()) {\n\t\tstring str = tcpClient.receive(); // did anything come in\n\t}\n}\n\nvoid ofApp::keyReleased(int key)\n{\n\tif(tcpClient.isConnected()) {\n\t\ttcpClient.send(\"HELLO WORLD!\");\n\t}\n}\n~~~~\n\nTo receive something meaningful from a regular webserver you'll want to at least do something like the following:\n\n~~~~{.cpp}\nstring msg = \"GET /index.html HTTP/1.1\\r\\n\";\ntcpClient.send(msg);\n\n~~~~\n\nbut if you're using ofxTCPServer, then you're free to invent whatever sort of low level communication you'd like. Another important element of the ofxTCPClient and of TCP communication in general, is the message delimiter. You can see that using:\n\ntcpClient.setMessageDelimiter(\"\\n\");\n\nThis is important because the message delimiter used by your client has to match what your sever is using. If the server uses '\\r\\n', then your client needs to do the same so that the server knows when a message has ended.\n\n\n\n\n\n##Methods\n\n\n\n###bool close()\n\n<!--\n_syntax: close()_\n_name: close_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis closes any open connection to a server.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string getIP()\n\n<!--\n_syntax: getIP()_\n_name: getIP_\n_returns: string_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the IP address number set in the setup() method of the client.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getNumReceivedBytes()\n\n<!--\n_syntax: getNumReceivedBytes()_\n_name: getNumReceivedBytes_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the number of bytes that a single call to receive has gotten.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getPort()\n\n<!--\n_syntax: getPort()_\n_name: getPort_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the port number set in the setup() method of the client.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isClosingCondition(messageSize, errorCode)\n\n<!--\n_syntax: isClosingCondition(messageSize, errorCode)_\n_name: isClosingCondition_\n_returns: bool_\n_returns_description: _\n_parameters: int messageSize, int errorCode_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isConnected()\n\n<!--\n_syntax: isConnected()_\n_name: isConnected_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns whether the client is currently connected to a server.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofxTCPClient(&mom)\n\n<!--\n_syntax: ofxTCPClient(&mom)_\n_name: ofxTCPClient_\n_returns: _\n_returns_description: _\n_parameters: const ofxTCPManager &mom_\n_access: private_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofxTCPClient()\n\n<!--\n_syntax: ofxTCPClient()_\n_name: ofxTCPClient_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nConstructor. This doesn't prepare your client to send and receive information though, you need to call the setup() method for that.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofxTCPClient & operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: ofxTCPClient &_\n_returns_description: _\n_parameters: const ofxTCPClient &mom_\n_access: private_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int peekReceiveRawBytes(*receiveBytes, numBytes)\n\n<!--\n_syntax: peekReceiveRawBytes(*receiveBytes, numBytes)_\n_name: peekReceiveRawBytes_\n_returns: int_\n_returns_description: _\n_parameters: char *receiveBytes, int numBytes_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string receive()\n\n<!--\n_syntax: receive()_\n_name: receive_\n_returns: string_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReceives ASCII encoded data from the server. You should make sure you check that the client is connected before calling this.\n\n~~~~{.cpp}\nif(tcpClient.isConnected()) {\n        string str = tcpClient.receive();\n        cout << str << endl;\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string receiveRaw()\n\n<!--\n_syntax: receiveRaw()_\n_name: receiveRaw_\n_returns: string_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis receives the raw bytes from a server. Like with receive(), you should check that the client is connected before calling this.\n\n~~~~{.cpp}\n\nif(tcpClient.isConnected()) {\n        string s = tcpClient.receiveRaw();\n        cout << str << endl;\n}\n\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int receiveRawBytes(*receiveBytes, numBytes)\n\n<!--\n_syntax: receiveRawBytes(*receiveBytes, numBytes)_\n_name: receiveRawBytes_\n_returns: int_\n_returns_description: _\n_parameters: char *receiveBytes, int numBytes_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis retrieves non-ASCII from a server, handy for receiving an image or other binary data to a client. For instance:\n\n~~~~{.cpp}\n\n        bool dataRecd = false;\n        unsigned char buffer[7800];\n        int recd = 7800;\n        int totalReceived = 0;\n        int messageSize = 256;\n        while(recd > 0) {\n            \n            if(recd > messageSize) {\n                tcpClient.receiveRawBytes( (char*) &buffer[totalReceived], messageSize);\n                recd -= messageSize;\n                totalReceived += messageSize;\n            } else {\n                tcpClient.receiveRawBytes( (char*) &buffer[totalReceived], recd);\n                totalReceived += recd;\n                recd = 0;\n                dataRecd = true;\n            }\n        }\n        \n        if(dataRecd) {\n            img.setFromPixels( &buffer[0], 50, 52, OF_IMAGE_COLOR);\n        }\n\n~~~~\n\nOn the ofxTCPServer side this would look like:\n\n~~~~{.cpp}\n        ofImage img;\n        img.loadImage(\"tmp.jpg\");\n        int imageBytesToSend = 7800;\n        int totalBytesSent = 0;\n        int messageSize = 256;\n        while( imageBytesToSend > 1 )\n        {\n            \n            if(imageBytesToSend > messageSize) {\n                TCP.sendRawBytesToAll((char*) &img.getPixels()[totalBytesSent], messageSize);\n                imageBytesToSend -= messageSize;\n                totalBytesSent += messageSize;\n            } else {\n                TCP.sendRawBytesToAll( (char*) &img.getPixels()[totalBytesSent], imageBytesToSend);\n                totalBytesSent += imageBytesToSend;\n                imageBytesToSend = 0;\n            }\n        }\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int receiveRawMsg(*receiveBuffer, numBytes)\n\n<!--\n_syntax: receiveRawMsg(*receiveBuffer, numBytes)_\n_name: receiveRawMsg_\n_returns: int_\n_returns_description: _\n_parameters: char *receiveBuffer, int numBytes_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool send(message)\n\n<!--\n_syntax: send(message)_\n_name: send_\n_returns: bool_\n_returns_description: _\n_parameters: string message_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSend the message, which can be as complex as a full GET request or as simple as raw string.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool sendRaw(message)\n\n<!--\n_syntax: sendRaw(message)_\n_name: sendRaw_\n_returns: bool_\n_returns_description: _\n_parameters: string message_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis sends the message as raw, i.e. not ASCII encoded. This is what you'll want to do if you're sending bitmap data or other kinds of non-text information.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool sendRawBytes(*rawBytes, numBytes)\n\n<!--\n_syntax: sendRawBytes(*rawBytes, numBytes)_\n_name: sendRawBytes_\n_returns: bool_\n_returns_description: _\n_parameters: const char *rawBytes, const int numBytes_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis method sends raw bytes (i.e. not ASCII encoded bytes) to the server.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool sendRawMsg(*msg, size)\n\n<!--\n_syntax: sendRawMsg(*msg, size)_\n_name: sendRawMsg_\n_returns: bool_\n_returns_description: _\n_parameters: const char *msg, int size_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setMessageDelimiter(delim)\n\n<!--\n_syntax: setMessageDelimiter(delim)_\n_name: setMessageDelimiter_\n_returns: void_\n_returns_description: _\n_parameters: string delim_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis is important because the message delimiter used by your client has to match what your sever is using. If the server uses '[\\TCP]', which is the default for ofxTCPClient and ofxTCPServer, then your client needs to do the same so that the server knows when a message has ended. ofxTCPServer allows you to use whatever delimiter you want.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setVerbose(_verbose)\n\n<!--\n_syntax: setVerbose(_verbose)_\n_name: setVerbose_\n_returns: void_\n_returns_description: _\n_parameters: bool _verbose_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool setup(&settings)\n\n<!--\n_syntax: setup(&settings)_\n_name: setup_\n_returns: bool_\n_returns_description: _\n_parameters: const ofxTCPSettings &settings_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool setup(ip, _port, blocking = false)\n\n<!--\n_syntax: setup(ip, _port, blocking = false)_\n_name: setup_\n_returns: bool_\n_returns_description: _\n_parameters: string ip, int _port, bool blocking=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nYou call this to setup what IP and port your client will try to connect to:\n\n~~~~{.cpp}\ntcpClient.setup(\"127.0.0.1\", 11999);\n~~~~\n\nIt returns whether the connection has successfully been made. Don't mistake this for a URI or URL, it comes before that, where the connection is made so that files or data streams can be requested.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool setupConnectionIdx(_index, blocking)\n\n<!--\n_syntax: setupConnectionIdx(_index, blocking)_\n_name: setupConnectionIdx_\n_returns: bool_\n_returns_description: _\n_parameters: int _index, bool blocking_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void threadedFunction()\n\n<!--\n_syntax: threadedFunction()_\n_name: threadedFunction_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofxTCPClient()\n\n<!--\n_syntax: ~ofxTCPClient()_\n_name: ~ofxTCPClient_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###ofxTCPManager TCPClient\n\n<!--\n_name: TCPClient_\n_type: ofxTCPManager_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool connected\n\n<!--\n_name: connected_\n_type: bool_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int index\n\n<!--\n_name: index_\n_type: int_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ipAddr\n\n<!--\n_name: ipAddr_\n_type: string_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string messageDelimiter\n\n<!--\n_name: messageDelimiter_\n_type: string_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int messageSize\n\n<!--\n_name: messageSize_\n_type: int_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string partialPrevMsg\n\n<!--\n_name: partialPrevMsg_\n_type: string_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int port\n\n<!--\n_name: port_\n_type: int_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string str\n\n<!--\n_name: str_\n_type: string_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###char tmpBuff\n\n<!--\n_name: tmpBuff_\n_type: char_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofBuffer  tmpBuffReceive\n\n<!--\n_name: tmpBuffReceive_\n_type: ofBuffer _\n_access: private_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofBuffer  tmpBuffSend\n\n<!--\n_name: tmpBuffSend_\n_type: ofBuffer _\n_access: private_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string tmpStr\n\n<!--\n_name: tmpStr_\n_type: string_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}