{"data":[{"page":{"entry":{"name":"gtx_euler_angles_functions","filename":"gtx_euler_angles_functions.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/glm/gtx_euler_angles_functions.markdown","path":"/documentation/glm/gtx_euler_angles_functions","route":"/documentation/glm/gtx_euler_angles_functions.markdown","dir":"../ofSite/documentation/glm","ext":"markdown","type":"page","id":2034,"parent":1985,"breadcrumbs":[1985,1718],"siblings":[],"translations":{}},"description":{},"methods":[null,{"short":"<p>Creates a 3D 4 * 4 homogeneous rotation matrix from an euler angle X.</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n","desc":""},{"short":"<p>Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (X * Y).</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n","desc":""},{"short":"<p>Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (X * Y * Z).</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n","desc":""},{"short":"<p>Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (X * Z).</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n","desc":""},{"short":"<p>Creates a 3D 4 * 4 homogeneous rotation matrix from an euler angle Y.</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n","desc":""},{"short":"<p>Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Y * X).</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n","desc":""},{"short":"<p>Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Y * X * Z).</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n","desc":""},{"short":"<p>Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Y * Z).</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n","desc":""},{"short":"<p>Creates a 3D 4 * 4 homogeneous rotation matrix from an euler angle Z.</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n","desc":""},{"short":"<p>Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Z * X).</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n","desc":""},{"short":"<p>Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Z * Y).</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n","desc":""},{"short":"<p>Extracts the (X * Y * Z) Euler angles from the rotation matrix M</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n","desc":""},{"short":"<p>Creates a 2D 2 * 2 rotation matrix from an euler angle.</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n","desc":""},{"short":"<p>Creates a 2D 4 * 4 homogeneous rotation matrix from an euler angle.</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n","desc":""},{"syntax":"glm::orientate3(&angles = P)","name":"glm::orientate3","returns":"glm::mat3","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>angles<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Creates a 3D 3 * 3 rotation matrix from euler angles (Y * X * Z).</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n","desc":""},{"syntax":"glm::orientate4(&angles = P)","name":"glm::orientate4","returns":"glm::mat4","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>angles<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Y * X * Z).</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n","desc":""},{"short":"<p>Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Y * X * Z).</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n","desc":""},{}],"document":"<p>#functions</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>##Description</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::eulerAngleX(&amp;angleX)</p>\n<p>&lt;!--\n<em>syntax: glm::eulerAngleX(&amp;angleX)</em>\n<em>name: glm::eulerAngleX</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: const T &amp;angleX</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a 3D 4 * 4 homogeneous rotation matrix from an euler angle X.</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::eulerAngleXY(&amp;angleX, &amp;angleY)</p>\n<p>&lt;!--\n<em>syntax: glm::eulerAngleXY(&amp;angleX, &amp;angleY)</em>\n<em>name: glm::eulerAngleXY</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: const T &amp;angleX, const T &amp;angleY</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (X * Y).</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::eulerAngleXYZ(&amp;t1, &amp;t2, &amp;t3)</p>\n<p>&lt;!--\n<em>syntax: glm::eulerAngleXYZ(&amp;t1, &amp;t2, &amp;t3)</em>\n<em>name: glm::eulerAngleXYZ</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: const T &amp;t1, const T &amp;t2, const T &amp;t3</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (X * Y * Z).</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::eulerAngleXZ(&amp;angleX, &amp;angleZ)</p>\n<p>&lt;!--\n<em>syntax: glm::eulerAngleXZ(&amp;angleX, &amp;angleZ)</em>\n<em>name: glm::eulerAngleXZ</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: const T &amp;angleX, const T &amp;angleZ</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (X * Z).</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::eulerAngleY(&amp;angleY)</p>\n<p>&lt;!--\n<em>syntax: glm::eulerAngleY(&amp;angleY)</em>\n<em>name: glm::eulerAngleY</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: const T &amp;angleY</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a 3D 4 * 4 homogeneous rotation matrix from an euler angle Y.</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::eulerAngleYX(&amp;angleY, &amp;angleX)</p>\n<p>&lt;!--\n<em>syntax: glm::eulerAngleYX(&amp;angleY, &amp;angleX)</em>\n<em>name: glm::eulerAngleYX</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: const T &amp;angleY, const T &amp;angleX</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Y * X).</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::eulerAngleYXZ(&amp;yaw, &amp;pitch, &amp;roll)</p>\n<p>&lt;!--\n<em>syntax: glm::eulerAngleYXZ(&amp;yaw, &amp;pitch, &amp;roll)</em>\n<em>name: glm::eulerAngleYXZ</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: const T &amp;yaw, const T &amp;pitch, const T &amp;roll</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Y * X * Z).</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::eulerAngleYZ(&amp;angleY, &amp;angleZ)</p>\n<p>&lt;!--\n<em>syntax: glm::eulerAngleYZ(&amp;angleY, &amp;angleZ)</em>\n<em>name: glm::eulerAngleYZ</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: const T &amp;angleY, const T &amp;angleZ</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Y * Z).</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::eulerAngleZ(&amp;angleZ)</p>\n<p>&lt;!--\n<em>syntax: glm::eulerAngleZ(&amp;angleZ)</em>\n<em>name: glm::eulerAngleZ</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: const T &amp;angleZ</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a 3D 4 * 4 homogeneous rotation matrix from an euler angle Z.</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::eulerAngleZX(&amp;angle, &amp;angleX)</p>\n<p>&lt;!--\n<em>syntax: glm::eulerAngleZX(&amp;angle, &amp;angleX)</em>\n<em>name: glm::eulerAngleZX</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: const T &amp;angle, const T &amp;angleX</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Z * X).</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::eulerAngleZY(&amp;angleZ, &amp;angleY)</p>\n<p>&lt;!--\n<em>syntax: glm::eulerAngleZY(&amp;angleZ, &amp;angleY)</em>\n<em>name: glm::eulerAngleZY</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: const T &amp;angleZ, const T &amp;angleY</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Z * Y).</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void glm::extractEulerAngleXYZ(T, &amp;M = defaultp, &amp;t1, &amp;t2, &amp;t3)</p>\n<p>&lt;!--\n<em>syntax: glm::extractEulerAngleXYZ(T, &amp;M = defaultp, &amp;t1, &amp;t2, &amp;t3)</em>\n<em>name: glm::extractEulerAngleXYZ</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const tmat4x4&lt; T, defaultp &gt; &amp;M=defaultp, T &amp;t1, T &amp;t2, T &amp;t3</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Extracts the (X * Y * Z) Euler angles from the rotation matrix M</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat2x2&lt; T, defaultp &gt; glm::orientate2(&amp;angle)</p>\n<p>&lt;!--\n<em>syntax: glm::orientate2(&amp;angle)</em>\n<em>name: glm::orientate2</em>\n<em>returns: tmat2x2&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: const T &amp;angle</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a 2D 2 * 2 rotation matrix from an euler angle.</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat3x3&lt; T, defaultp &gt; glm::orientate3(&amp;angle)</p>\n<p>&lt;!--\n<em>syntax: glm::orientate3(&amp;angle)</em>\n<em>name: glm::orientate3</em>\n<em>returns: tmat3x3&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: const T &amp;angle</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a 2D 4 * 4 homogeneous rotation matrix from an euler angle.</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::mat3 glm::orientate3(&amp;angles = P)</p>\n<p>&lt;!--\n<em>syntax: glm::orientate3(&amp;angles = P)</em>\n<em>name: glm::orientate3</em>\n<em>returns: glm::mat3</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;angles=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a 3D 3 * 3 rotation matrix from euler angles (Y * X * Z).</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::mat4 glm::orientate4(&amp;angles = P)</p>\n<p>&lt;!--\n<em>syntax: glm::orientate4(&amp;angles = P)</em>\n<em>name: glm::orientate4</em>\n<em>returns: glm::mat4</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;angles=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Y * X * Z).</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::yawPitchRoll(&amp;yaw, &amp;pitch, &amp;roll)</p>\n<p>&lt;!--\n<em>syntax: glm::yawPitchRoll(&amp;yaw, &amp;pitch, &amp;roll)</em>\n<em>name: glm::yawPitchRoll</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: const T &amp;yaw, const T &amp;pitch, const T &amp;roll</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Y * X * Z).</p>\n<p><strong>See also</strong>: gtx_euler_angles</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#functions\n\n\n<!--\n_visible: True_\n_advanced: False_\n-->\n\n##Description\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::eulerAngleX(&angleX)\n\n<!--\n_syntax: glm::eulerAngleX(&angleX)_\n_name: glm::eulerAngleX_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: const T &angleX_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a 3D 4 * 4 homogeneous rotation matrix from an euler angle X.\n\n**See also**: gtx_euler_angles\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::eulerAngleXY(&angleX, &angleY)\n\n<!--\n_syntax: glm::eulerAngleXY(&angleX, &angleY)_\n_name: glm::eulerAngleXY_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: const T &angleX, const T &angleY_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a 3D 4 * 4 homogeneous rotation matrix from euler angles (X * Y).\n\n**See also**: gtx_euler_angles\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::eulerAngleXYZ(&t1, &t2, &t3)\n\n<!--\n_syntax: glm::eulerAngleXYZ(&t1, &t2, &t3)_\n_name: glm::eulerAngleXYZ_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: const T &t1, const T &t2, const T &t3_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a 3D 4 * 4 homogeneous rotation matrix from euler angles (X * Y * Z).\n\n**See also**: gtx_euler_angles\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::eulerAngleXZ(&angleX, &angleZ)\n\n<!--\n_syntax: glm::eulerAngleXZ(&angleX, &angleZ)_\n_name: glm::eulerAngleXZ_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: const T &angleX, const T &angleZ_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a 3D 4 * 4 homogeneous rotation matrix from euler angles (X * Z).\n\n**See also**: gtx_euler_angles\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::eulerAngleY(&angleY)\n\n<!--\n_syntax: glm::eulerAngleY(&angleY)_\n_name: glm::eulerAngleY_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: const T &angleY_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a 3D 4 * 4 homogeneous rotation matrix from an euler angle Y.\n\n**See also**: gtx_euler_angles\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::eulerAngleYX(&angleY, &angleX)\n\n<!--\n_syntax: glm::eulerAngleYX(&angleY, &angleX)_\n_name: glm::eulerAngleYX_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: const T &angleY, const T &angleX_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Y * X).\n\n**See also**: gtx_euler_angles\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::eulerAngleYXZ(&yaw, &pitch, &roll)\n\n<!--\n_syntax: glm::eulerAngleYXZ(&yaw, &pitch, &roll)_\n_name: glm::eulerAngleYXZ_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: const T &yaw, const T &pitch, const T &roll_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Y * X * Z).\n\n**See also**: gtx_euler_angles\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::eulerAngleYZ(&angleY, &angleZ)\n\n<!--\n_syntax: glm::eulerAngleYZ(&angleY, &angleZ)_\n_name: glm::eulerAngleYZ_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: const T &angleY, const T &angleZ_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Y * Z).\n\n**See also**: gtx_euler_angles\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::eulerAngleZ(&angleZ)\n\n<!--\n_syntax: glm::eulerAngleZ(&angleZ)_\n_name: glm::eulerAngleZ_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: const T &angleZ_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a 3D 4 * 4 homogeneous rotation matrix from an euler angle Z.\n\n**See also**: gtx_euler_angles\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::eulerAngleZX(&angle, &angleX)\n\n<!--\n_syntax: glm::eulerAngleZX(&angle, &angleX)_\n_name: glm::eulerAngleZX_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: const T &angle, const T &angleX_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Z * X).\n\n**See also**: gtx_euler_angles\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::eulerAngleZY(&angleZ, &angleY)\n\n<!--\n_syntax: glm::eulerAngleZY(&angleZ, &angleY)_\n_name: glm::eulerAngleZY_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: const T &angleZ, const T &angleY_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Z * Y).\n\n**See also**: gtx_euler_angles\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void glm::extractEulerAngleXYZ(T, &M = defaultp, &t1, &t2, &t3)\n\n<!--\n_syntax: glm::extractEulerAngleXYZ(T, &M = defaultp, &t1, &t2, &t3)_\n_name: glm::extractEulerAngleXYZ_\n_returns: void_\n_returns_description: _\n_parameters: const tmat4x4< T, defaultp > &M=defaultp, T &t1, T &t2, T &t3_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nExtracts the (X * Y * Z) Euler angles from the rotation matrix M\n\n**See also**: gtx_euler_angles\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat2x2< T, defaultp > glm::orientate2(&angle)\n\n<!--\n_syntax: glm::orientate2(&angle)_\n_name: glm::orientate2_\n_returns: tmat2x2< T, defaultp >_\n_returns_description: _\n_parameters: const T &angle_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a 2D 2 * 2 rotation matrix from an euler angle.\n\n**See also**: gtx_euler_angles\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat3x3< T, defaultp > glm::orientate3(&angle)\n\n<!--\n_syntax: glm::orientate3(&angle)_\n_name: glm::orientate3_\n_returns: tmat3x3< T, defaultp >_\n_returns_description: _\n_parameters: const T &angle_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a 2D 4 * 4 homogeneous rotation matrix from an euler angle.\n\n**See also**: gtx_euler_angles\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat3 glm::orientate3(&angles = P)\n\n<!--\n_syntax: glm::orientate3(&angles = P)_\n_name: glm::orientate3_\n_returns: glm::mat3_\n_returns_description: _\n_parameters: const glm::vec3 &angles=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a 3D 3 * 3 rotation matrix from euler angles (Y * X * Z).\n\n**See also**: gtx_euler_angles\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat4 glm::orientate4(&angles = P)\n\n<!--\n_syntax: glm::orientate4(&angles = P)_\n_name: glm::orientate4_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: const glm::vec3 &angles=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Y * X * Z).\n\n**See also**: gtx_euler_angles\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::yawPitchRoll(&yaw, &pitch, &roll)\n\n<!--\n_syntax: glm::yawPitchRoll(&yaw, &pitch, &roll)_\n_name: glm::yawPitchRoll_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: const T &yaw, const T &pitch, const T &roll_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Y * X * Z).\n\n**See also**: gtx_euler_angles\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}