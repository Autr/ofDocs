{"data":[{"page":{"entry":{"name":"ofEvent","filename":"ofEvent.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/events/ofEvent.markdown","path":"/documentation/events/ofEvent","route":"/documentation/events/ofEvent.markdown","dir":"../ofSite/documentation/events","ext":"markdown","type":"page","id":1928,"parent":1922,"breadcrumbs":[1922,1718],"siblings":[],"translations":{}},"description":{"short":"","full":"<p>Class for creating custom events. Also used inside oF for its own events (see ofCoreEvents).</p>\n<p>ie: To create a new event:</p>\n<pre><code>ofEvent<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token keyword\">float</span></code></pre>\n"},"config":{},"methods":[{"syntax":"add(*listener, method, priority)","name":"add","returns":"void","returns_description":null,"parameters":"TObj <span class=\"token operator\">*</span>listener<span class=\"token punctuation\">,</span> TMethod method<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"add(function, priority)","name":"add","returns":"void","returns_description":null,"parameters":"TFunction function<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"short":"","desc":""},{"short":"","desc":""},{"syntax":"make_function(*listener, *, method, priority)","name":"make_function","returns":"ofEvent::FunctionPtr","returns_description":null,"parameters":"TObj <span class=\"token operator\">*</span>listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span>TObj<span class=\"token operator\">::</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> T <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> method<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority","access":"protected","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"make_function(*listener, *, method, priority)","name":"make_function","returns":"ofEvent::FunctionPtr","returns_description":null,"parameters":"TObj <span class=\"token operator\">*</span>listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>TObj<span class=\"token operator\">::</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> T <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> method<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority","access":"protected","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"make_function(*listener, method, priority)","name":"make_function","returns":"ofEvent::FunctionPtr","returns_description":null,"parameters":"TObj <span class=\"token operator\">*</span>listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span>TObj<span class=\"token operator\">::</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> method<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority","access":"protected","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"make_function(*listener, method, priority)","name":"make_function","returns":"ofEvent::FunctionPtr","returns_description":null,"parameters":"TObj <span class=\"token operator\">*</span>listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>TObj<span class=\"token operator\">::</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> method<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority","access":"protected","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"short":"","desc":""},{"short":"","desc":""},{"short":"","desc":""},{"short":"","desc":""},{"short":"","desc":""},{"short":"","desc":""},{"syntax":"notify(&param)","name":"notify","returns":"bool","returns_description":null,"parameters":"T <span class=\"token operator\">&amp;</span>param","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"notify(*sender, &param)","name":"notify","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>sender<span class=\"token punctuation\">,</span> T <span class=\"token operator\">&amp;</span>param","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"remove(*listener, method, priority)","name":"remove","returns":"void","returns_description":null,"parameters":"TObj <span class=\"token operator\">*</span>listener<span class=\"token punctuation\">,</span> TMethod method<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"remove(function, priority)","name":"remove","returns":"void","returns_description":null,"parameters":"TFunction function<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofEvent</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n<em>extends: of::priv::BaseEvent&lt;of::priv::Function&lt;T, Mutex&gt;, Mutex&gt;</em>\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>##Description</p>\n<p>Class for creating custom events. Also used inside oF for its own events (see ofCoreEvents).</p>\n<p>ie: To create a new event:</p>\n<pre><code>ofEvent<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> onVolumeChange<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>To notify an event of that type:</p>\n<pre><code><span class=\"token keyword\">float</span> value <span class=\"token operator\">=</span> <span class=\"token number\">10.0f</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofNotifyEvent</span><span class=\"token punctuation\">(</span>onVolumeChange<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>To add a listener to that event, if the event is for example in an object called mySoundObject, and you want to register ofApp as a listener for that event:</p>\n<pre><code><span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span>mySoundObject<span class=\"token punctuation\">.</span>onVolumeChange<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>ofApp<span class=\"token operator\">::</span>onVolumeChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>where ofApp::onVolumeChange is a function with the following signature:</p>\n<pre><code><span class=\"token keyword\">void</span> <span class=\"token function\">onVolumeChange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span> volume<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>See the advancedEventsExample to see a complete example of how to work with events in oF.</p>\n<p>Be careful when using events, it's a powerful structure but can also lead to really confusing code as there's no direct calls to an object.</p>\n<p>It's important to unregister events in the destruction of listeners, if not an object that has already been destroyed can get called and the application will crash.</p>\n<pre><code><span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span>mySoundObject<span class=\"token punctuation\">.</span>onVolumeChange<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>ofApp<span class=\"token operator\">:</span>onVolumeChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Events have a private copy constructor to avoid that a copy of an object with an event gets all the registered listeners of the original. To be able to create a copy of an object that contains an event, use a pointer to an event instead of a normal var. This also means that you cannot store events directly in a vector or any other collection, the solution is the same, just use a pointer to an event.</p>\n<p>ie:</p>\n<p>wrong:</p>\n<pre><code>vector<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> ofEvent<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> events<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>right:</p>\n<pre><code>vector<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> ofEvent<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span><span class=\"token operator\">*</span> <span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> events<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>##Methods</p>\n<p>###void add(*listener, method, priority)</p>\n<p>&lt;!--\n<em>syntax: add(*listener, method, priority)</em>\n<em>name: add</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: TObj *listener, TMethod method, int priority</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void add(function, priority)</p>\n<p>&lt;!--\n<em>syntax: add(function, priority)</em>\n<em>name: add</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: TFunction function, int priority</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofEvent::FunctionPtr make_function(*, f, priority)</p>\n<p>&lt;!--\n<em>syntax: make_function(*, f, priority)</em>\n<em>name: make_function</em>\n<em>returns: ofEvent::FunctionPtr</em>\n_returns_description: _\n<em>parameters: function&lt; bool (const void *, T &amp;) &gt; f, int priority</em>\n<em>access: protected</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofEvent::FunctionPtr make_function(*, f, priority)</p>\n<p>&lt;!--\n<em>syntax: make_function(*, f, priority)</em>\n<em>name: make_function</em>\n<em>returns: ofEvent::FunctionPtr</em>\n_returns_description: _\n<em>parameters: function&lt; void (const void *, T &amp;) &gt; f, int priority</em>\n<em>access: protected</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofEvent::FunctionPtr make_function(*listener, *, method, priority)</p>\n<p>&lt;!--\n<em>syntax: make_function(*listener, *, method, priority)</em>\n<em>name: make_function</em>\n<em>returns: ofEvent::FunctionPtr</em>\n_returns_description: _\n<em>parameters: TObj <em>listener, bool (TObj::</em>)(const void *, T &amp;) method, int priority</em>\n<em>access: protected</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofEvent::FunctionPtr make_function(*listener, *, method, priority)</p>\n<p>&lt;!--\n<em>syntax: make_function(*listener, *, method, priority)</em>\n<em>name: make_function</em>\n<em>returns: ofEvent::FunctionPtr</em>\n_returns_description: _\n<em>parameters: TObj <em>listener, void (TObj::</em>)(const void *, T &amp;) method, int priority</em>\n<em>access: protected</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofEvent::FunctionPtr make_function(*listener, method, priority)</p>\n<p>&lt;!--\n<em>syntax: make_function(*listener, method, priority)</em>\n<em>name: make_function</em>\n<em>returns: ofEvent::FunctionPtr</em>\n_returns_description: _\n<em>parameters: TObj <em>listener, bool (TObj::</em>)(T &amp;) method, int priority</em>\n<em>access: protected</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofEvent::FunctionPtr make_function(*listener, method, priority)</p>\n<p>&lt;!--\n<em>syntax: make_function(*listener, method, priority)</em>\n<em>name: make_function</em>\n<em>returns: ofEvent::FunctionPtr</em>\n_returns_description: _\n<em>parameters: TObj <em>listener, void (TObj::</em>)(T &amp;) method, int priority</em>\n<em>access: protected</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofEvent::FunctionPtr make_function(f, priority)</p>\n<p>&lt;!--\n<em>syntax: make_function(f, priority)</em>\n<em>name: make_function</em>\n<em>returns: ofEvent::FunctionPtr</em>\n_returns_description: _\n<em>parameters: function&lt; bool (T &amp;) &gt; f, int priority</em>\n<em>access: protected</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofEvent::FunctionPtr make_function(f, priority)</p>\n<p>&lt;!--\n<em>syntax: make_function(f, priority)</em>\n<em>name: make_function</em>\n<em>returns: ofEvent::FunctionPtr</em>\n_returns_description: _\n<em>parameters: function&lt; void (T &amp;) &gt; f, int priority</em>\n<em>access: protected</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###unique_ptr&lt;FunctionId&lt; TObj, TMethod&gt;  &gt; make_function_id(*listener, method)</p>\n<p>&lt;!--\n<em>syntax: make_function_id(*listener, method)</em>\n<em>name: make_function_id</em>\n<em>returns: unique_ptr&lt;FunctionId&lt; TObj, TMethod&gt;  &gt;</em>\n_returns_description: _\n<em>parameters: TObj *listener, TMethod method</em>\n<em>access: protected</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###unique_ptr&lt; of::priv::BaseFunctionId &gt; make_std_function_id(&amp;f)</p>\n<p>&lt;!--\n<em>syntax: make_std_function_id(&amp;f)</em>\n<em>name: make_std_function_id</em>\n<em>returns: unique_ptr&lt; of::priv::BaseFunctionId &gt;</em>\n_returns_description: _\n<em>parameters: const F &amp;f</em>\n<em>access: protected</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###unique_ptr&lt; of::priv::AbstractEventToken &gt; newListener(*listener, method, priority)</p>\n<p>&lt;!--\n<em>syntax: newListener(*listener, method, priority)</em>\n<em>name: newListener</em>\n<em>returns: unique_ptr&lt; of::priv::AbstractEventToken &gt;</em>\n_returns_description: _\n<em>parameters: TObj *listener, TMethod method, int priority</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###unique_ptr&lt; of::priv::AbstractEventToken &gt; newListener(function, priority)</p>\n<p>&lt;!--\n<em>syntax: newListener(function, priority)</em>\n<em>name: newListener</em>\n<em>returns: unique_ptr&lt; of::priv::AbstractEventToken &gt;</em>\n_returns_description: _\n<em>parameters: TFunction function, int priority</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool notify(&amp;param)</p>\n<p>&lt;!--\n<em>syntax: notify(&amp;param)</em>\n<em>name: notify</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: T &amp;param</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool notify(*sender, &amp;param)</p>\n<p>&lt;!--\n<em>syntax: notify(*sender, &amp;param)</em>\n<em>name: notify</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const void *sender, T &amp;param</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void remove(*listener, method, priority)</p>\n<p>&lt;!--\n<em>syntax: remove(*listener, method, priority)</em>\n<em>name: remove</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: TObj *listener, TMethod method, int priority</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void remove(function, priority)</p>\n<p>&lt;!--\n<em>syntax: remove(function, priority)</em>\n<em>name: remove</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: TFunction function, int priority</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n","raw":"#class ofEvent\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: of::priv::BaseEvent<of::priv::Function<T, Mutex>, Mutex>_\n-->\n\n##InlineDescription\n\n\n\n\n\n\n##Description\n\nClass for creating custom events. Also used inside oF for its own events (see ofCoreEvents).\n\nie: To create a new event:\n\n~~~~{.cpp}\nofEvent<float> onVolumeChange;\n~~~~\n\nTo notify an event of that type:\n\n~~~~{.cpp}\nfloat value = 10.0f;\nofNotifyEvent(onVolumeChange, value);\n~~~~\n\nTo add a listener to that event, if the event is for example in an object called mySoundObject, and you want to register ofApp as a listener for that event:\n\n~~~~{.cpp}\nofAddListener(mySoundObject.onVolumeChange, this, &ofApp::onVolumeChange);\n~~~~\n\nwhere ofApp::onVolumeChange is a function with the following signature:\n\n~~~~{.cpp}\nvoid onVolumeChange(float & volume);\n~~~~\n\nSee the advancedEventsExample to see a complete example of how to work with events in oF.\n\nBe careful when using events, it's a powerful structure but can also lead to really confusing code as there's no direct calls to an object.\n\nIt's important to unregister events in the destruction of listeners, if not an object that has already been destroyed can get called and the application will crash.\n\n~~~~{.cpp}\nofRemoveListener(mySoundObject.onVolumeChange, this, &ofApp:onVolumeChange);\n~~~~\n\nEvents have a private copy constructor to avoid that a copy of an object with an event gets all the registered listeners of the original. To be able to create a copy of an object that contains an event, use a pointer to an event instead of a normal var. This also means that you cannot store events directly in a vector or any other collection, the solution is the same, just use a pointer to an event.\n\nie:\n\nwrong:\n~~~~{.cpp}\nvector< ofEvent<int> > events;\n~~~~\n\nright:\n~~~~{.cpp}\nvector< ofEvent<int>* > events;\n~~~~\n\n\n\n\n\n##Methods\n\n\n\n###void add(*listener, method, priority)\n\n<!--\n_syntax: add(*listener, method, priority)_\n_name: add_\n_returns: void_\n_returns_description: _\n_parameters: TObj *listener, TMethod method, int priority_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void add(function, priority)\n\n<!--\n_syntax: add(function, priority)_\n_name: add_\n_returns: void_\n_returns_description: _\n_parameters: TFunction function, int priority_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofEvent::FunctionPtr make_function(*, f, priority)\n\n<!--\n_syntax: make_function(*, f, priority)_\n_name: make_function_\n_returns: ofEvent::FunctionPtr_\n_returns_description: _\n_parameters: function< bool (const void *, T &) > f, int priority_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofEvent::FunctionPtr make_function(*, f, priority)\n\n<!--\n_syntax: make_function(*, f, priority)_\n_name: make_function_\n_returns: ofEvent::FunctionPtr_\n_returns_description: _\n_parameters: function< void (const void *, T &) > f, int priority_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofEvent::FunctionPtr make_function(*listener, *, method, priority)\n\n<!--\n_syntax: make_function(*listener, *, method, priority)_\n_name: make_function_\n_returns: ofEvent::FunctionPtr_\n_returns_description: _\n_parameters: TObj *listener, bool (TObj::*)(const void *, T &) method, int priority_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofEvent::FunctionPtr make_function(*listener, *, method, priority)\n\n<!--\n_syntax: make_function(*listener, *, method, priority)_\n_name: make_function_\n_returns: ofEvent::FunctionPtr_\n_returns_description: _\n_parameters: TObj *listener, void (TObj::*)(const void *, T &) method, int priority_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofEvent::FunctionPtr make_function(*listener, method, priority)\n\n<!--\n_syntax: make_function(*listener, method, priority)_\n_name: make_function_\n_returns: ofEvent::FunctionPtr_\n_returns_description: _\n_parameters: TObj *listener, bool (TObj::*)(T &) method, int priority_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofEvent::FunctionPtr make_function(*listener, method, priority)\n\n<!--\n_syntax: make_function(*listener, method, priority)_\n_name: make_function_\n_returns: ofEvent::FunctionPtr_\n_returns_description: _\n_parameters: TObj *listener, void (TObj::*)(T &) method, int priority_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofEvent::FunctionPtr make_function(f, priority)\n\n<!--\n_syntax: make_function(f, priority)_\n_name: make_function_\n_returns: ofEvent::FunctionPtr_\n_returns_description: _\n_parameters: function< bool (T &) > f, int priority_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofEvent::FunctionPtr make_function(f, priority)\n\n<!--\n_syntax: make_function(f, priority)_\n_name: make_function_\n_returns: ofEvent::FunctionPtr_\n_returns_description: _\n_parameters: function< void (T &) > f, int priority_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###unique_ptr<FunctionId< TObj, TMethod>  > make_function_id(*listener, method)\n\n<!--\n_syntax: make_function_id(*listener, method)_\n_name: make_function_id_\n_returns: unique_ptr<FunctionId< TObj, TMethod>  >_\n_returns_description: _\n_parameters: TObj *listener, TMethod method_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###unique_ptr< of::priv::BaseFunctionId > make_std_function_id(&f)\n\n<!--\n_syntax: make_std_function_id(&f)_\n_name: make_std_function_id_\n_returns: unique_ptr< of::priv::BaseFunctionId >_\n_returns_description: _\n_parameters: const F &f_\n_access: protected_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###unique_ptr< of::priv::AbstractEventToken > newListener(*listener, method, priority)\n\n<!--\n_syntax: newListener(*listener, method, priority)_\n_name: newListener_\n_returns: unique_ptr< of::priv::AbstractEventToken >_\n_returns_description: _\n_parameters: TObj *listener, TMethod method, int priority_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###unique_ptr< of::priv::AbstractEventToken > newListener(function, priority)\n\n<!--\n_syntax: newListener(function, priority)_\n_name: newListener_\n_returns: unique_ptr< of::priv::AbstractEventToken >_\n_returns_description: _\n_parameters: TFunction function, int priority_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool notify(&param)\n\n<!--\n_syntax: notify(&param)_\n_name: notify_\n_returns: bool_\n_returns_description: _\n_parameters: T &param_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool notify(*sender, &param)\n\n<!--\n_syntax: notify(*sender, &param)_\n_name: notify_\n_returns: bool_\n_returns_description: _\n_parameters: const void *sender, T &param_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void remove(*listener, method, priority)\n\n<!--\n_syntax: remove(*listener, method, priority)_\n_name: remove_\n_returns: void_\n_returns_description: _\n_parameters: TObj *listener, TMethod method, int priority_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void remove(function, priority)\n\n<!--\n_syntax: remove(function, priority)_\n_name: remove_\n_returns: void_\n_returns_description: _\n_parameters: TFunction function, int priority_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n","type":"page","static":true}}],"fetch":[]}