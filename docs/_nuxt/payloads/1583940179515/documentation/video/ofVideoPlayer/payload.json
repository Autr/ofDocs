{"data":[{"page":{"entry":{"name":"ofVideoPlayer","filename":"ofVideoPlayer.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/video/ofVideoPlayer.markdown","path":"/documentation/video/ofVideoPlayer","route":"/documentation/video/ofVideoPlayer.markdown","dir":"../ofSite/documentation/video","ext":"markdown","type":"page","id":2261,"parent":2237,"breadcrumbs":[2237,1718],"siblings":[],"translations":{}},"description":{"short":"","full":"<p>The ofVideoPlayer class loads in a movie file via quicktime in windows and OSX or gstreamer in linux, and offers various controls to play the movie, control the properties of the movie, and to access the pixels of a given frame.</p>\n<p>Example:</p>\n<pre><code>ofVideoPlayer myPlayer<span class=\"token punctuation\">;</span>\nmyPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>movies<span class=\"token operator\">/</span>fingers<span class=\"token punctuation\">.</span>mov<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>You need to call play() for your video to begin playing:</p>\n<pre><code>myPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>and update to ensure that you're grabbing new frames from the file as the video library decodes them and serves them up as textures:</p>\n<pre><code>\n<span class=\"token keyword\">void</span> myApp<span class=\"token operator\">::</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    myPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// get all the new frames</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>Just like the ofImage, the ofVideoPlayer can be drawn:</p>\n<pre><code>\nmyPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// draw at 20, 20 from the current transform matrix</span>\n\n</code></pre>\n<p>or you can just get the pixels from the player, as we do in the videoGrabberExample in the examples:</p>\n<pre><code>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vidGrabber<span class=\"token punctuation\">.</span><span class=\"token function\">isFrameNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> totalPixels <span class=\"token operator\">=</span> camWidth<span class=\"token operator\">*</span>camHeight<span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> pixels <span class=\"token operator\">=</span> vidGrabber<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> totalPixels<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tvideoInverted<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> pixels<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\ttexture<span class=\"token punctuation\">.</span><span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span>videoInverted<span class=\"token punctuation\">,</span> camWidth<span class=\"token punctuation\">,</span>camHeight<span class=\"token punctuation\">,</span> GL_RGB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":"ofBaseVideoPlayer, ofBaseVideoDraws"},"methods":[{"syntax":"bind()","name":"bind","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Binds the video texture to the current rendering context.</p>\n<p>For advanced users who need to manually manage texture drawing\nwithout calling draw(). Only binds the texture if one exists.</p>\n<p><strong>See also</strong>: ofTexture::bind()</p>\n<p><strong>See also</strong>: http://www.opengl.org/sdk/docs/man4/html/glBindTexture.xhtml</p>\n","desc":""},{"syntax":"close()","name":"close","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Closes the movie file releases its resources.</p>\n<p>This is an alias for closeMovie().</p>\n<p><strong>See also</strong>: closeMovie()</p>\n","desc":""},{"syntax":"closeMovie()","name":"closeMovie","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Closes the movie file and releases its resources.</p>\n<p>This is an alias for close().</p>\n<p><strong>See also</strong>: close()</p>\n","desc":"<p>Example:</p>\n<pre><code>ofVideoPlayer myPlayer<span class=\"token punctuation\">;</span>\nmyPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">loadMovie</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>myMovie<span class=\"token punctuation\">.</span>mov<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//Loads video resources</span>\nmyPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">closeMovie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//Unloads video resources</span>\n</code></pre>\n"},{"syntax":"draw(x, y)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Draws the texture of the movie player class as the position (x,y) with the internal width and height of the loaded movie.</p>\n"},{"syntax":"draw(x, y, w, h)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Draws the texture of the movie player class at the position (x,y) with the given width (w) and height (h).</p>\n"},{"syntax":"firstFrame()","name":"firstFrame","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getCurrentFrame()","name":"getCurrentFrame","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getDuration()","name":"getDuration","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getHeight()","name":"getHeight","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getIsMovieDone()","name":"getIsMovieDone","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getLoopState()","name":"getLoopState","returns":"ofLoopType","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getMoviePath()","name":"getMoviePath","returns":"string","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the path to the loaded video file.</p>\n<p>If no video file is loaded this returns an empty string.</p>\n<p><strong>Returns</strong>: A path to the loaded video or an empty string if not loaded.</p>\n","desc":""},{"syntax":"getPixelFormat()","name":"getPixelFormat","returns":"ofPixelFormat","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getPixels()","name":"getPixels","returns":"ofPixels &","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>For example, to get the red, green, and blue of the pixel at (100,20):</p>\n<pre><code><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> pixels <span class=\"token operator\">=</span> myMovie<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> nChannels <span class=\"token operator\">=</span> movie<span class=\"token punctuation\">.</span><span class=\"token function\">getPixelsRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> widthOfLine <span class=\"token operator\">=</span> myMovie<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// how long is a line of pixels</span>\n<span class=\"token keyword\">int</span> red \t<span class=\"token operator\">=</span> pixels<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span> <span class=\"token operator\">*</span> widthOfLine <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> nChannels    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> green \t<span class=\"token operator\">=</span> pixels<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span> <span class=\"token operator\">*</span> widthOfLine <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> nChannels <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> blue \t<span class=\"token operator\">=</span> pixels<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span> <span class=\"token operator\">*</span> widthOfLine <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> nChannels <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"syntax":"getPixels()","name":"getPixels","returns":"const ofPixels &","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"desc":""},{"desc":""},{"desc":""},{"desc":""},{"syntax":"getPosition()","name":"getPosition","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getSpeed()","name":"getSpeed","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getTexture()","name":"getTexture","returns":"ofTexture &","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getTexture()","name":"getTexture","returns":"const ofTexture &","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getTexturePlanes()","name":"getTexturePlanes","returns":"int &","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getTexturePlanes()","name":"getTexturePlanes","returns":"const int &","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getTotalNumFrames()","name":"getTotalNumFrames","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getWidth()","name":"getWidth","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"initDefaultPlayer()","name":"initDefaultPlayer","returns":"void","returns_description":null,"parameters":null,"access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Initialize the default player implementations.</p>\n","desc":""},{"syntax":"isFrameNew()","name":"isFrameNew","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This gets whether there are new pixels in your movies player. This is a way to poll the library that's actually reading your video file to see whether there's something new: For example, if the pixels are new, you could then process them.</p>\n<pre><code>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myMovie<span class=\"token punctuation\">.</span><span class=\"token function\">isFrameNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tofPixels p <span class=\"token operator\">=</span> myPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">getPixelsRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// walk over each pixel and make something fun</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"isInitialized()","name":"isInitialized","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"isLoaded()","name":"isLoaded","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Whether the resources that you've tried to load into your ofVideoPlayer have been loaded yet.</p>\n"},{"syntax":"isPaused()","name":"isPaused","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Whether the the ofVideoPlayer is currently paused.</p>\n"},{"syntax":"isPlaying()","name":"isPlaying","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Whether the the ofVideoPlayer is currently playing.</p>\n"},{"syntax":"isUsingTexture()","name":"isUsingTexture","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"load(name)","name":"load","returns":"bool","returns_description":null,"parameters":"string name","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"loadAsync(name)","name":"loadAsync","returns":"void","returns_description":null,"parameters":"string name","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"nextFrame()","name":"nextFrame","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofVideoPlayer()","name":"ofVideoPlayer","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"False","advanced":"False","short":"","desc":"<p>Constructor.</p>\n"},{"syntax":"play()","name":"play","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"previousFrame()","name":"previousFrame","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"resetAnchor()","name":"resetAnchor","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"","desc":"<p>Resets the ancher point of this ofVideoPlayer, if one has been set.</p>\n"},{"syntax":"setAnchorPercent(xPct, yPct)","name":"setAnchorPercent","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> xPct<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> yPct","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"","desc":"<p>Sets an anchor percentage for this ofVideoPlayer instance</p>\n"},{"syntax":"setAnchorPoint(x, y)","name":"setAnchorPoint","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Sets anchor points for this ofVideoPlayer instance.</p>\n"},{"syntax":"setFrame(frame)","name":"setFrame","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> frame","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setLoopState(state)","name":"setLoopState","returns":"void","returns_description":null,"parameters":"ofLoopType state","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<pre><code>\nOF_LOOP_NONE <span class=\"token operator\">-</span> don't loop<span class=\"token punctuation\">,</span> the movie will stop when it gets to the last <span class=\"token function\">frame</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">or</span> first frame<span class=\"token punctuation\">,</span> <span class=\"token keyword\">if</span> playing backwards<span class=\"token punctuation\">)</span>\nOF_LOOP_NORMAL <span class=\"token operator\">-</span> loop <span class=\"token function\">normally</span> <span class=\"token punctuation\">(</span>the last frame loops to the first frame<span class=\"token punctuation\">)</span>\nOF_LOOP_PALINDROME <span class=\"token operator\">-</span> loop back <span class=\"token operator\">and</span> forth<span class=\"token punctuation\">.</span> Movie will play forward until it gets to the last frame<span class=\"token punctuation\">,</span> then plays backwards until it gets to the first frame<span class=\"token punctuation\">,</span> <span class=\"token operator\">and</span> so on<span class=\"token punctuation\">.</span>\n</code></pre>\n"},{"syntax":"setPaused(bPause)","name":"setPaused","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> bPause","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setPixelFormat(pixelFormat)","name":"setPixelFormat","returns":"bool","returns_description":null,"parameters":"ofPixelFormat pixelFormat","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>OSX: Choose from OF_PIXELS_RGB or OF_PIXELS_RGBA</p>\n"},{"short":"<p>Set the internal video player implementation.</p>\n<p>Advanced users may find it useful to set a custom internal video\nplayer implementation. The custom video player must implment the\nofBaseVideoPlayer interface.</p>\n<p><strong>Parameters:</strong></p>\n<p>newPlayer Shared pointer to the new video player that extends\nfrom ofBaseVideoPlayer.</p>\n","desc":""},{"syntax":"setPosition(pct)","name":"setPosition","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> pct","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Sets the position of the playhead to a given percentage through the movie. This can be used to scrub through a movie.</p>\n"},{"syntax":"setSpeed(speed)","name":"setSpeed","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> speed","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setUseTexture(bUse)","name":"setUseTexture","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> bUse","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Set the usage of texture inside this object. Typically, you will want to draw the movie on screen, and so it will be necessary to use a texture, but there may be cases where it helps to not use a texture in order to save memory or for better performance. To disable the internal use of the texture, you can load the movie like this:</p>\n<pre><code>\nmyMovie<span class=\"token punctuation\">.</span><span class=\"token function\">setUseTexture</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyMovie<span class=\"token punctuation\">.</span><span class=\"token function\">loadMovie</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>blah<span class=\"token punctuation\">.</span>mov<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"syntax":"setVolume(volume)","name":"setVolume","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> volume","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"stop()","name":"stop","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"unbind()","name":"unbind","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Unbinds the video texture from the current rendering context.</p>\n<p>For advanced users who need to manually manage texture drawing\nwithout calling draw(). Only binds the texture if one exists.</p>\n<p><strong>See also</strong>: ofTexture::unbind()</p>\n","desc":""},{"syntax":"update()","name":"update","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Update the video player's internal state to continue playback.</p>\n<p>If normal video playback is desired, this method is usually called\nonce per animation frame inside of ofApp::update().</p>\n","desc":""},{"name":"bUseTexture","type":"bool","access":"private","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>True if the video player is using a texture.</p>\n","desc":""},{"name":"internalPixelFormat","type":"ofPixelFormat","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>The internal pixel format.</p>\n","desc":""},{"name":"moviePath","type":"string","access":"private","version_started":"0072","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>The stored path to the video's path.</p>\n","desc":""},{"name":"player","type":"ofPtr","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>A pointer to the internal video player implementation.</p>\n","desc":""},{"name":"playerTex","type":"ofTexture * ","access":"private","version_started":"0.8.0","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>A pointer to the internal player's texture if available.</p>\n<p>Video players that implement ofBaseVideoPlayer::getTexturePtr()\ncan provide a pointer to an internal texture. When possible,\nofVideoPlayer will use the internal texture to avoid extra pixel\ncopies.</p>\n","desc":""},{"name":"tex","type":"ofTexture","access":"private","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>A collection of texture planes used by the video player.</p>\n","desc":""},{}],"document":"<p>#class ofVideoPlayer</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n<em>extends: ofBaseVideoPlayer, ofBaseVideoDraws</em>\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>##Description</p>\n<p>The ofVideoPlayer class loads in a movie file via quicktime in windows and OSX or gstreamer in linux, and offers various controls to play the movie, control the properties of the movie, and to access the pixels of a given frame.</p>\n<p>Example:</p>\n<pre><code>ofVideoPlayer myPlayer<span class=\"token punctuation\">;</span>\nmyPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>movies<span class=\"token operator\">/</span>fingers<span class=\"token punctuation\">.</span>mov<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>You need to call play() for your video to begin playing:</p>\n<pre><code>myPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>and update to ensure that you're grabbing new frames from the file as the video library decodes them and serves them up as textures:</p>\n<pre><code>\n<span class=\"token keyword\">void</span> myApp<span class=\"token operator\">::</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    myPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// get all the new frames</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>Just like the ofImage, the ofVideoPlayer can be drawn:</p>\n<pre><code>\nmyPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// draw at 20, 20 from the current transform matrix</span>\n\n</code></pre>\n<p>or you can just get the pixels from the player, as we do in the videoGrabberExample in the examples:</p>\n<pre><code>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vidGrabber<span class=\"token punctuation\">.</span><span class=\"token function\">isFrameNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> totalPixels <span class=\"token operator\">=</span> camWidth<span class=\"token operator\">*</span>camHeight<span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> pixels <span class=\"token operator\">=</span> vidGrabber<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> totalPixels<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tvideoInverted<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> pixels<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\ttexture<span class=\"token punctuation\">.</span><span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span>videoInverted<span class=\"token punctuation\">,</span> camWidth<span class=\"token punctuation\">,</span>camHeight<span class=\"token punctuation\">,</span> GL_RGB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>##Methods</p>\n<p>###void bind()</p>\n<p>&lt;!--\n<em>syntax: bind()</em>\n<em>name: bind</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Binds the video texture to the current rendering context.</p>\n<p>For advanced users who need to manually manage texture drawing\nwithout calling draw(). Only binds the texture if one exists.</p>\n<p><strong>See also</strong>: ofTexture::bind()</p>\n<p><strong>See also</strong>: http://www.opengl.org/sdk/docs/man4/html/glBindTexture.xhtml</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void close()</p>\n<p>&lt;!--\n<em>syntax: close()</em>\n<em>name: close</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Closes the movie file releases its resources.</p>\n<p>This is an alias for closeMovie().</p>\n<p><strong>See also</strong>: closeMovie()</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void closeMovie()</p>\n<p>&lt;!--\n<em>syntax: closeMovie()</em>\n<em>name: closeMovie</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Closes the movie file and releases its resources.</p>\n<p>This is an alias for close().</p>\n<p><strong>See also</strong>: close()</p>\n<p>_description: _</p>\n<p>Example:</p>\n<pre><code>ofVideoPlayer myPlayer<span class=\"token punctuation\">;</span>\nmyPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">loadMovie</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>myMovie<span class=\"token punctuation\">.</span>mov<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//Loads video resources</span>\nmyPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">closeMovie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//Unloads video resources</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw(x, y)</p>\n<p>&lt;!--\n<em>syntax: draw(x, y)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Draws the texture of the movie player class as the position (x,y) with the internal width and height of the loaded movie.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw(x, y, w, h)</p>\n<p>&lt;!--\n<em>syntax: draw(x, y, w, h)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float w, float h</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Draws the texture of the movie player class at the position (x,y) with the given width (w) and height (h).</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void firstFrame()</p>\n<p>&lt;!--\n<em>syntax: firstFrame()</em>\n<em>name: firstFrame</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getCurrentFrame()</p>\n<p>&lt;!--\n<em>syntax: getCurrentFrame()</em>\n<em>name: getCurrentFrame</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getDuration()</p>\n<p>&lt;!--\n<em>syntax: getDuration()</em>\n<em>name: getDuration</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getHeight()</p>\n<p>&lt;!--\n<em>syntax: getHeight()</em>\n<em>name: getHeight</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool getIsMovieDone()</p>\n<p>&lt;!--\n<em>syntax: getIsMovieDone()</em>\n<em>name: getIsMovieDone</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofLoopType getLoopState()</p>\n<p>&lt;!--\n<em>syntax: getLoopState()</em>\n<em>name: getLoopState</em>\n<em>returns: ofLoopType</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string getMoviePath()</p>\n<p>&lt;!--\n<em>syntax: getMoviePath()</em>\n<em>name: getMoviePath</em>\n<em>returns: string</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the path to the loaded video file.</p>\n<p>If no video file is loaded this returns an empty string.</p>\n<p><strong>Returns</strong>: A path to the loaded video or an empty string if not loaded.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixelFormat getPixelFormat()</p>\n<p>&lt;!--\n<em>syntax: getPixelFormat()</em>\n<em>name: getPixelFormat</em>\n<em>returns: ofPixelFormat</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels &amp; getPixels()</p>\n<p>&lt;!--\n<em>syntax: getPixels()</em>\n<em>name: getPixels</em>\n<em>returns: ofPixels &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>For example, to get the red, green, and blue of the pixel at (100,20):</p>\n<pre><code><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> pixels <span class=\"token operator\">=</span> myMovie<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> nChannels <span class=\"token operator\">=</span> movie<span class=\"token punctuation\">.</span><span class=\"token function\">getPixelsRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> widthOfLine <span class=\"token operator\">=</span> myMovie<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// how long is a line of pixels</span>\n<span class=\"token keyword\">int</span> red \t<span class=\"token operator\">=</span> pixels<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span> <span class=\"token operator\">*</span> widthOfLine <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> nChannels    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> green \t<span class=\"token operator\">=</span> pixels<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span> <span class=\"token operator\">*</span> widthOfLine <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> nChannels <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> blue \t<span class=\"token operator\">=</span> pixels<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span> <span class=\"token operator\">*</span> widthOfLine <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> nChannels <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const ofPixels &amp; getPixels()</p>\n<p>&lt;!--\n<em>syntax: getPixels()</em>\n<em>name: getPixels</em>\n<em>returns: const ofPixels &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###shared_ptr&lt; ofBaseVideoPlayer &gt; getPlayer()</p>\n<p>&lt;!--\n<em>syntax: getPlayer()</em>\n<em>name: getPlayer</em>\n<em>returns: shared_ptr&lt; ofBaseVideoPlayer &gt;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get a pointer to the internal video player implementation.</p>\n<p>This returns a pointer to the ofBaseVideoPlayer interface. For\nimplementation-specfic features, this can be cast to the subtype\nusing dynamic_cast&lt;MyVideoPlayerImplementation&gt;(getPlayer()) or the\ntemplated getPlayer&lt;MyVideoPlayerImplementation&gt;() method.</p>\n<p><strong>Returns</strong>: A pointer to the internal video player implementation.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const shared_ptr&lt; ofBaseVideoPlayer &gt; getPlayer()</p>\n<p>&lt;!--\n<em>syntax: getPlayer()</em>\n<em>name: getPlayer</em>\n<em>returns: const shared_ptr&lt; ofBaseVideoPlayer &gt;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get a const pointer to the internal video player implementation.</p>\n<p>This returns a pointer to the ofBaseVideoPlayer interface. For\nimplementation-specfic features, this can be cast to the subtype\nusing dynamic_pointer_cast&lt;MyVideoPlayerImplementation&gt;(getPlayer())\nor the templated getPlayer&lt;MyVideoPlayerImplementation&gt;() method.</p>\n<p><strong>Returns</strong>: A const pointer to the internal video player implementation.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###shared_ptr&lt; PlayerType &gt; getPlayer()</p>\n<p>&lt;!--\n<em>syntax: getPlayer()</em>\n<em>name: getPlayer</em>\n<em>returns: shared_ptr&lt; PlayerType &gt;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get a pointer to the internal video player implementation.</p>\n<p>Calling getPlayer&lt;MyVideoPlayerImplementation&gt;() is equivalent to\ndynamic_pointer_cast&lt;MyVideoPlayerImplementation&gt;(getPlayer()).</p>\n<p><strong>Returns</strong>: A pointer to the internal video player implementation or\nnullptr if the cast fails.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const shared_ptr&lt; PlayerType &gt; getPlayer()</p>\n<p>&lt;!--\n<em>syntax: getPlayer()</em>\n<em>name: getPlayer</em>\n<em>returns: const shared_ptr&lt; PlayerType &gt;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get a const pointer to the internal video player implementation.</p>\n<p>Calling getPlayer&lt;MyVideoPlayerImplementation&gt;() is equivalent to\ndynamic_pointer_cast&lt;MyVideoPlayerImplementation&gt;(getPlayer()).</p>\n<p><strong>Returns</strong>: A const pointer to the internal video player implementation\nor nullptr if the cast fails.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getPosition()</p>\n<p>&lt;!--\n<em>syntax: getPosition()</em>\n<em>name: getPosition</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getSpeed()</p>\n<p>&lt;!--\n<em>syntax: getSpeed()</em>\n<em>name: getSpeed</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofTexture &amp; getTexture()</p>\n<p>&lt;!--\n<em>syntax: getTexture()</em>\n<em>name: getTexture</em>\n<em>returns: ofTexture &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const ofTexture &amp; getTexture()</p>\n<p>&lt;!--\n<em>syntax: getTexture()</em>\n<em>name: getTexture</em>\n<em>returns: const ofTexture &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int &amp; getTexturePlanes()</p>\n<p>&lt;!--\n<em>syntax: getTexturePlanes()</em>\n<em>name: getTexturePlanes</em>\n<em>returns: int &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const int &amp; getTexturePlanes()</p>\n<p>&lt;!--\n<em>syntax: getTexturePlanes()</em>\n<em>name: getTexturePlanes</em>\n<em>returns: const int &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getTotalNumFrames()</p>\n<p>&lt;!--\n<em>syntax: getTotalNumFrames()</em>\n<em>name: getTotalNumFrames</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getWidth()</p>\n<p>&lt;!--\n<em>syntax: getWidth()</em>\n<em>name: getWidth</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void initDefaultPlayer()</p>\n<p>&lt;!--\n<em>syntax: initDefaultPlayer()</em>\n<em>name: initDefaultPlayer</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Initialize the default player implementations.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isFrameNew()</p>\n<p>&lt;!--\n<em>syntax: isFrameNew()</em>\n<em>name: isFrameNew</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This gets whether there are new pixels in your movies player. This is a way to poll the library that's actually reading your video file to see whether there's something new: For example, if the pixels are new, you could then process them.</p>\n<pre><code>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myMovie<span class=\"token punctuation\">.</span><span class=\"token function\">isFrameNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tofPixels p <span class=\"token operator\">=</span> myPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">getPixelsRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// walk over each pixel and make something fun</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isInitialized()</p>\n<p>&lt;!--\n<em>syntax: isInitialized()</em>\n<em>name: isInitialized</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isLoaded()</p>\n<p>&lt;!--\n<em>syntax: isLoaded()</em>\n<em>name: isLoaded</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Whether the resources that you've tried to load into your ofVideoPlayer have been loaded yet.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isPaused()</p>\n<p>&lt;!--\n<em>syntax: isPaused()</em>\n<em>name: isPaused</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Whether the the ofVideoPlayer is currently paused.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isPlaying()</p>\n<p>&lt;!--\n<em>syntax: isPlaying()</em>\n<em>name: isPlaying</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Whether the the ofVideoPlayer is currently playing.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isUsingTexture()</p>\n<p>&lt;!--\n<em>syntax: isUsingTexture()</em>\n<em>name: isUsingTexture</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool load(name)</p>\n<p>&lt;!--\n<em>syntax: load(name)</em>\n<em>name: load</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: string name</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void loadAsync(name)</p>\n<p>&lt;!--\n<em>syntax: loadAsync(name)</em>\n<em>name: loadAsync</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: string name</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void nextFrame()</p>\n<p>&lt;!--\n<em>syntax: nextFrame()</em>\n<em>name: nextFrame</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVideoPlayer()</h3>\n<p>&lt;!--\n<em>syntax: ofVideoPlayer()</em>\n<em>name: ofVideoPlayer</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Constructor.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void play()</p>\n<p>&lt;!--\n<em>syntax: play()</em>\n<em>name: play</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void previousFrame()</p>\n<p>&lt;!--\n<em>syntax: previousFrame()</em>\n<em>name: previousFrame</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void resetAnchor()</p>\n<p>&lt;!--\n<em>syntax: resetAnchor()</em>\n<em>name: resetAnchor</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Resets the ancher point of this ofVideoPlayer, if one has been set.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setAnchorPercent(xPct, yPct)</p>\n<p>&lt;!--\n<em>syntax: setAnchorPercent(xPct, yPct)</em>\n<em>name: setAnchorPercent</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float xPct, float yPct</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Sets an anchor percentage for this ofVideoPlayer instance</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setAnchorPoint(x, y)</p>\n<p>&lt;!--\n<em>syntax: setAnchorPoint(x, y)</em>\n<em>name: setAnchorPoint</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Sets anchor points for this ofVideoPlayer instance.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setFrame(frame)</p>\n<p>&lt;!--\n<em>syntax: setFrame(frame)</em>\n<em>name: setFrame</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int frame</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setLoopState(state)</p>\n<p>&lt;!--\n<em>syntax: setLoopState(state)</em>\n<em>name: setLoopState</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofLoopType state</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<pre><code>\nOF_LOOP_NONE <span class=\"token operator\">-</span> don't loop<span class=\"token punctuation\">,</span> the movie will stop when it gets to the last <span class=\"token function\">frame</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">or</span> first frame<span class=\"token punctuation\">,</span> <span class=\"token keyword\">if</span> playing backwards<span class=\"token punctuation\">)</span>\nOF_LOOP_NORMAL <span class=\"token operator\">-</span> loop <span class=\"token function\">normally</span> <span class=\"token punctuation\">(</span>the last frame loops to the first frame<span class=\"token punctuation\">)</span>\nOF_LOOP_PALINDROME <span class=\"token operator\">-</span> loop back <span class=\"token operator\">and</span> forth<span class=\"token punctuation\">.</span> Movie will play forward until it gets to the last frame<span class=\"token punctuation\">,</span> then plays backwards until it gets to the first frame<span class=\"token punctuation\">,</span> <span class=\"token operator\">and</span> so on<span class=\"token punctuation\">.</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setPaused(bPause)</p>\n<p>&lt;!--\n<em>syntax: setPaused(bPause)</em>\n<em>name: setPaused</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool bPause</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool setPixelFormat(pixelFormat)</p>\n<p>&lt;!--\n<em>syntax: setPixelFormat(pixelFormat)</em>\n<em>name: setPixelFormat</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: ofPixelFormat pixelFormat</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>OSX: Choose from OF_PIXELS_RGB or OF_PIXELS_RGBA</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setPlayer(newPlayer)</p>\n<p>&lt;!--\n<em>syntax: setPlayer(newPlayer)</em>\n<em>name: setPlayer</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: shared_ptr&lt; ofBaseVideoPlayer &gt; newPlayer</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the internal video player implementation.</p>\n<p>Advanced users may find it useful to set a custom internal video\nplayer implementation. The custom video player must implment the\nofBaseVideoPlayer interface.</p>\n<p><strong>Parameters:</strong></p>\n<p>newPlayer Shared pointer to the new video player that extends\nfrom ofBaseVideoPlayer.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setPosition(pct)</p>\n<p>&lt;!--\n<em>syntax: setPosition(pct)</em>\n<em>name: setPosition</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float pct</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Sets the position of the playhead to a given percentage through the movie. This can be used to scrub through a movie.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setSpeed(speed)</p>\n<p>&lt;!--\n<em>syntax: setSpeed(speed)</em>\n<em>name: setSpeed</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float speed</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setUseTexture(bUse)</p>\n<p>&lt;!--\n<em>syntax: setUseTexture(bUse)</em>\n<em>name: setUseTexture</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool bUse</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Set the usage of texture inside this object. Typically, you will want to draw the movie on screen, and so it will be necessary to use a texture, but there may be cases where it helps to not use a texture in order to save memory or for better performance. To disable the internal use of the texture, you can load the movie like this:</p>\n<pre><code>\nmyMovie<span class=\"token punctuation\">.</span><span class=\"token function\">setUseTexture</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyMovie<span class=\"token punctuation\">.</span><span class=\"token function\">loadMovie</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>blah<span class=\"token punctuation\">.</span>mov<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setVolume(volume)</p>\n<p>&lt;!--\n<em>syntax: setVolume(volume)</em>\n<em>name: setVolume</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float volume</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void stop()</p>\n<p>&lt;!--\n<em>syntax: stop()</em>\n<em>name: stop</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void unbind()</p>\n<p>&lt;!--\n<em>syntax: unbind()</em>\n<em>name: unbind</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Unbinds the video texture from the current rendering context.</p>\n<p>For advanced users who need to manually manage texture drawing\nwithout calling draw(). Only binds the texture if one exists.</p>\n<p><strong>See also</strong>: ofTexture::unbind()</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void update()</p>\n<p>&lt;!--\n<em>syntax: update()</em>\n<em>name: update</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Update the video player's internal state to continue playback.</p>\n<p>If normal video playback is desired, this method is usually called\nonce per animation frame inside of ofApp::update().</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###bool bUseTexture</p>\n<p>&lt;!--\n<em>name: bUseTexture</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>True if the video player is using a texture.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixelFormat internalPixelFormat</p>\n<p>&lt;!--\n<em>name: internalPixelFormat</em>\n<em>type: ofPixelFormat</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>The internal pixel format.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string moviePath</p>\n<p>&lt;!--\n<em>name: moviePath</em>\n<em>type: string</em>\n<em>access: private</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>The stored path to the video's path.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPtr player</p>\n<p>&lt;!--\n<em>name: player</em>\n<em>type: ofPtr</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>A pointer to the internal video player implementation.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofTexture *  playerTex</p>\n<p>&lt;!--\n<em>name: playerTex</em>\n_type: ofTexture * _\n<em>access: private</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>A pointer to the internal player's texture if available.</p>\n<p>Video players that implement ofBaseVideoPlayer::getTexturePtr()\ncan provide a pointer to an internal texture. When possible,\nofVideoPlayer will use the internal texture to avoid extra pixel\ncopies.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofTexture tex</p>\n<p>&lt;!--\n<em>name: tex</em>\n<em>type: ofTexture</em>\n<em>access: private</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>A collection of texture planes used by the video player.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofVideoPlayer\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: ofBaseVideoPlayer, ofBaseVideoDraws_\n-->\n\n##InlineDescription\n\n\n\n\n\n\n##Description\n\nThe ofVideoPlayer class loads in a movie file via quicktime in windows and OSX or gstreamer in linux, and offers various controls to play the movie, control the properties of the movie, and to access the pixels of a given frame.\n\nExample:\n\n~~~~{.cpp}\nofVideoPlayer myPlayer;\nmyPlayer.load(\"movies/fingers.mov\");\n~~~~\n\nYou need to call play() for your video to begin playing:\n\n~~~~{.cpp}\nmyPlayer.play();\n~~~~\n\nand update to ensure that you're grabbing new frames from the file as the video library decodes them and serves them up as textures:\n\n~~~~{.cpp}\n\nvoid myApp::update(){\n    myPlayer.update(); // get all the new frames\n}\n\n~~~~\n\nJust like the ofImage, the ofVideoPlayer can be drawn:\n\n~~~~{.cpp}\n\nmyPlayer.draw(20,20); // draw at 20, 20 from the current transform matrix\n\n~~~~\n\nor you can just get the pixels from the player, as we do in the videoGrabberExample in the examples:\n\n~~~~{.cpp}\n\nif (vidGrabber.isFrameNew()){\n\tint totalPixels = camWidth*camHeight*3;\n\tunsigned char * pixels = vidGrabber.getPixels();\n\tfor (int i = 0; i < totalPixels; i++){\n\t\tvideoInverted[i] = 255 - pixels[i];\n\t}\n\ttexture.loadData(videoInverted, camWidth,camHeight, GL_RGB);\n}\n\n~~~~\n\n\n\n\n\n##Methods\n\n\n\n###void bind()\n\n<!--\n_syntax: bind()_\n_name: bind_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nBinds the video texture to the current rendering context.\n\nFor advanced users who need to manually manage texture drawing\nwithout calling draw(). Only binds the texture if one exists.\n\n\n**See also**: ofTexture::bind()\n\n**See also**: http://www.opengl.org/sdk/docs/man4/html/glBindTexture.xhtml\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void close()\n\n<!--\n_syntax: close()_\n_name: close_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCloses the movie file releases its resources.\n\nThis is an alias for closeMovie().\n\n\n**See also**: closeMovie()\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void closeMovie()\n\n<!--\n_syntax: closeMovie()_\n_name: closeMovie_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCloses the movie file and releases its resources.\n\nThis is an alias for close().\n\n\n**See also**: close()\n\n\n\n\n\n_description: _\n\nExample:\n\n~~~~{.cpp}\nofVideoPlayer myPlayer;\nmyPlayer.loadMovie(\"myMovie.mov\"); //Loads video resources\nmyPlayer.closeMovie(); //Unloads video resources\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(x, y)\n\n<!--\n_syntax: draw(x, y)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nDraws the texture of the movie player class as the position (x,y) with the internal width and height of the loaded movie. \n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(x, y, w, h)\n\n<!--\n_syntax: draw(x, y, w, h)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float w, float h_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nDraws the texture of the movie player class at the position (x,y) with the given width (w) and height (h). \n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void firstFrame()\n\n<!--\n_syntax: firstFrame()_\n_name: firstFrame_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getCurrentFrame()\n\n<!--\n_syntax: getCurrentFrame()_\n_name: getCurrentFrame_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getDuration()\n\n<!--\n_syntax: getDuration()_\n_name: getDuration_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getHeight()\n\n<!--\n_syntax: getHeight()_\n_name: getHeight_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool getIsMovieDone()\n\n<!--\n_syntax: getIsMovieDone()_\n_name: getIsMovieDone_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofLoopType getLoopState()\n\n<!--\n_syntax: getLoopState()_\n_name: getLoopState_\n_returns: ofLoopType_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string getMoviePath()\n\n<!--\n_syntax: getMoviePath()_\n_name: getMoviePath_\n_returns: string_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the path to the loaded video file.\n\nIf no video file is loaded this returns an empty string.\n\n\n**Returns**: A path to the loaded video or an empty string if not loaded.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixelFormat getPixelFormat()\n\n<!--\n_syntax: getPixelFormat()_\n_name: getPixelFormat_\n_returns: ofPixelFormat_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels & getPixels()\n\n<!--\n_syntax: getPixels()_\n_name: getPixels_\n_returns: ofPixels &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nFor example, to get the red, green, and blue of the pixel at (100,20):\n\n~~~~{.cpp}\nunsigned char * pixels = myMovie.getPixels();\nint nChannels = movie.getPixelsRef().getNumChannels();\nint widthOfLine = myMovie.width;  // how long is a line of pixels\nint red \t= pixels[(20 * widthOfLine + 100) * nChannels    ];\nint green \t= pixels[(20 * widthOfLine + 100) * nChannels + 1];\nint blue \t= pixels[(20 * widthOfLine + 100) * nChannels + 2];\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofPixels & getPixels()\n\n<!--\n_syntax: getPixels()_\n_name: getPixels_\n_returns: const ofPixels &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###shared_ptr< ofBaseVideoPlayer > getPlayer()\n\n<!--\n_syntax: getPlayer()_\n_name: getPlayer_\n_returns: shared_ptr< ofBaseVideoPlayer >_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet a pointer to the internal video player implementation.\n\nThis returns a pointer to the ofBaseVideoPlayer interface. For\nimplementation-specfic features, this can be cast to the subtype\nusing dynamic_cast<MyVideoPlayerImplementation>(getPlayer()) or the\ntemplated getPlayer<MyVideoPlayerImplementation>() method.\n\n\n**Returns**: A pointer to the internal video player implementation.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const shared_ptr< ofBaseVideoPlayer > getPlayer()\n\n<!--\n_syntax: getPlayer()_\n_name: getPlayer_\n_returns: const shared_ptr< ofBaseVideoPlayer >_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet a const pointer to the internal video player implementation.\n\nThis returns a pointer to the ofBaseVideoPlayer interface. For\nimplementation-specfic features, this can be cast to the subtype\nusing dynamic_pointer_cast<MyVideoPlayerImplementation>(getPlayer())\nor the templated getPlayer<MyVideoPlayerImplementation>() method.\n\n\n**Returns**: A const pointer to the internal video player implementation.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###shared_ptr< PlayerType > getPlayer()\n\n<!--\n_syntax: getPlayer()_\n_name: getPlayer_\n_returns: shared_ptr< PlayerType >_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet a pointer to the internal video player implementation.\n\nCalling getPlayer<MyVideoPlayerImplementation>() is equivalent to\ndynamic_pointer_cast<MyVideoPlayerImplementation>(getPlayer()).\n\n\n**Returns**: A pointer to the internal video player implementation or\n\t\t\t nullptr if the cast fails.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const shared_ptr< PlayerType > getPlayer()\n\n<!--\n_syntax: getPlayer()_\n_name: getPlayer_\n_returns: const shared_ptr< PlayerType >_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet a const pointer to the internal video player implementation.\n\nCalling getPlayer<MyVideoPlayerImplementation>() is equivalent to\ndynamic_pointer_cast<MyVideoPlayerImplementation>(getPlayer()).\n\n\n**Returns**: A const pointer to the internal video player implementation\n\t\t\t or nullptr if the cast fails.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getPosition()\n\n<!--\n_syntax: getPosition()_\n_name: getPosition_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getSpeed()\n\n<!--\n_syntax: getSpeed()_\n_name: getSpeed_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofTexture & getTexture()\n\n<!--\n_syntax: getTexture()_\n_name: getTexture_\n_returns: ofTexture &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofTexture & getTexture()\n\n<!--\n_syntax: getTexture()_\n_name: getTexture_\n_returns: const ofTexture &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int & getTexturePlanes()\n\n<!--\n_syntax: getTexturePlanes()_\n_name: getTexturePlanes_\n_returns: int &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const int & getTexturePlanes()\n\n<!--\n_syntax: getTexturePlanes()_\n_name: getTexturePlanes_\n_returns: const int &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getTotalNumFrames()\n\n<!--\n_syntax: getTotalNumFrames()_\n_name: getTotalNumFrames_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getWidth()\n\n<!--\n_syntax: getWidth()_\n_name: getWidth_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void initDefaultPlayer()\n\n<!--\n_syntax: initDefaultPlayer()_\n_name: initDefaultPlayer_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nInitialize the default player implementations.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isFrameNew()\n\n<!--\n_syntax: isFrameNew()_\n_name: isFrameNew_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis gets whether there are new pixels in your movies player. This is a way to poll the library that's actually reading your video file to see whether there's something new: For example, if the pixels are new, you could then process them.\n\n~~~~{.cpp}\n\nif (myMovie.isFrameNew()){\n\tofPixels p = myPlayer.getPixelsRef();\n\t// walk over each pixel and make something fun\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isInitialized()\n\n<!--\n_syntax: isInitialized()_\n_name: isInitialized_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isLoaded()\n\n<!--\n_syntax: isLoaded()_\n_name: isLoaded_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nWhether the resources that you've tried to load into your ofVideoPlayer have been loaded yet.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isPaused()\n\n<!--\n_syntax: isPaused()_\n_name: isPaused_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nWhether the the ofVideoPlayer is currently paused.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isPlaying()\n\n<!--\n_syntax: isPlaying()_\n_name: isPlaying_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nWhether the the ofVideoPlayer is currently playing.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isUsingTexture()\n\n<!--\n_syntax: isUsingTexture()_\n_name: isUsingTexture_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool load(name)\n\n<!--\n_syntax: load(name)_\n_name: load_\n_returns: bool_\n_returns_description: _\n_parameters: string name_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void loadAsync(name)\n\n<!--\n_syntax: loadAsync(name)_\n_name: loadAsync_\n_returns: void_\n_returns_description: _\n_parameters: string name_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void nextFrame()\n\n<!--\n_syntax: nextFrame()_\n_name: nextFrame_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVideoPlayer()\n\n<!--\n_syntax: ofVideoPlayer()_\n_name: ofVideoPlayer_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nConstructor.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void play()\n\n<!--\n_syntax: play()_\n_name: play_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void previousFrame()\n\n<!--\n_syntax: previousFrame()_\n_name: previousFrame_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void resetAnchor()\n\n<!--\n_syntax: resetAnchor()_\n_name: resetAnchor_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nResets the ancher point of this ofVideoPlayer, if one has been set.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setAnchorPercent(xPct, yPct)\n\n<!--\n_syntax: setAnchorPercent(xPct, yPct)_\n_name: setAnchorPercent_\n_returns: void_\n_returns_description: _\n_parameters: float xPct, float yPct_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSets an anchor percentage for this ofVideoPlayer instance\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setAnchorPoint(x, y)\n\n<!--\n_syntax: setAnchorPoint(x, y)_\n_name: setAnchorPoint_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSets anchor points for this ofVideoPlayer instance.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFrame(frame)\n\n<!--\n_syntax: setFrame(frame)_\n_name: setFrame_\n_returns: void_\n_returns_description: _\n_parameters: int frame_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setLoopState(state)\n\n<!--\n_syntax: setLoopState(state)_\n_name: setLoopState_\n_returns: void_\n_returns_description: _\n_parameters: ofLoopType state_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n~~~~{.cpp}\n\nOF_LOOP_NONE - don't loop, the movie will stop when it gets to the last frame (or first frame, if playing backwards)\nOF_LOOP_NORMAL - loop normally (the last frame loops to the first frame)\nOF_LOOP_PALINDROME - loop back and forth. Movie will play forward until it gets to the last frame, then plays backwards until it gets to the first frame, and so on.\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setPaused(bPause)\n\n<!--\n_syntax: setPaused(bPause)_\n_name: setPaused_\n_returns: void_\n_returns_description: _\n_parameters: bool bPause_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool setPixelFormat(pixelFormat)\n\n<!--\n_syntax: setPixelFormat(pixelFormat)_\n_name: setPixelFormat_\n_returns: bool_\n_returns_description: _\n_parameters: ofPixelFormat pixelFormat_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nOSX: Choose from OF_PIXELS_RGB or OF_PIXELS_RGBA\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setPlayer(newPlayer)\n\n<!--\n_syntax: setPlayer(newPlayer)_\n_name: setPlayer_\n_returns: void_\n_returns_description: _\n_parameters: shared_ptr< ofBaseVideoPlayer > newPlayer_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the internal video player implementation.\n\nAdvanced users may find it useful to set a custom internal video\nplayer implementation. The custom video player must implment the\nofBaseVideoPlayer interface.\n\n\n**Parameters:**\n\nnewPlayer Shared pointer to the new video player that extends\nfrom ofBaseVideoPlayer.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setPosition(pct)\n\n<!--\n_syntax: setPosition(pct)_\n_name: setPosition_\n_returns: void_\n_returns_description: _\n_parameters: float pct_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSets the position of the playhead to a given percentage through the movie. This can be used to scrub through a movie. \n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setSpeed(speed)\n\n<!--\n_syntax: setSpeed(speed)_\n_name: setSpeed_\n_returns: void_\n_returns_description: _\n_parameters: float speed_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setUseTexture(bUse)\n\n<!--\n_syntax: setUseTexture(bUse)_\n_name: setUseTexture_\n_returns: void_\n_returns_description: _\n_parameters: bool bUse_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSet the usage of texture inside this object. Typically, you will want to draw the movie on screen, and so it will be necessary to use a texture, but there may be cases where it helps to not use a texture in order to save memory or for better performance. To disable the internal use of the texture, you can load the movie like this:\n~~~~{.cpp}\n\nmyMovie.setUseTexture(false);\nmyMovie.loadMovie(\"blah.mov\");\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setVolume(volume)\n\n<!--\n_syntax: setVolume(volume)_\n_name: setVolume_\n_returns: void_\n_returns_description: _\n_parameters: float volume_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void stop()\n\n<!--\n_syntax: stop()_\n_name: stop_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void unbind()\n\n<!--\n_syntax: unbind()_\n_name: unbind_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nUnbinds the video texture from the current rendering context.\n\nFor advanced users who need to manually manage texture drawing\nwithout calling draw(). Only binds the texture if one exists.\n\n\n**See also**: ofTexture::unbind()\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void update()\n\n<!--\n_syntax: update()_\n_name: update_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nUpdate the video player's internal state to continue playback.\n\nIf normal video playback is desired, this method is usually called\nonce per animation frame inside of ofApp::update().\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###bool bUseTexture\n\n<!--\n_name: bUseTexture_\n_type: bool_\n_access: private_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTrue if the video player is using a texture.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixelFormat internalPixelFormat\n\n<!--\n_name: internalPixelFormat_\n_type: ofPixelFormat_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThe internal pixel format.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string moviePath\n\n<!--\n_name: moviePath_\n_type: string_\n_access: private_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThe stored path to the video's path.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPtr player\n\n<!--\n_name: player_\n_type: ofPtr_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nA pointer to the internal video player implementation.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofTexture *  playerTex\n\n<!--\n_name: playerTex_\n_type: ofTexture * _\n_access: private_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nA pointer to the internal player's texture if available.\n\nVideo players that implement ofBaseVideoPlayer::getTexturePtr()\ncan provide a pointer to an internal texture. When possible,\nofVideoPlayer will use the internal texture to avoid extra pixel\ncopies.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofTexture tex\n\n<!--\n_name: tex_\n_type: ofTexture_\n_access: private_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nA collection of texture planes used by the video player.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}