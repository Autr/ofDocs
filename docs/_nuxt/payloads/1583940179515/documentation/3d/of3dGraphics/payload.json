{"data":[{"page":{"entry":{"name":"of3dGraphics","filename":"of3dGraphics.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/3d/of3dGraphics.markdown","path":"/documentation/3d/of3dGraphics","route":"/documentation/3d/of3dGraphics.markdown","dir":"../ofSite/documentation/3d","ext":"markdown","type":"page","id":1727,"parent":1717,"breadcrumbs":[1717,1718],"siblings":[],"translations":{}},"description":{"short":"","full":"<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"drawArrow(&start, &end, headSize)","name":"drawArrow","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>end<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> headSize","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"drawAxis(size)","name":"drawAxis","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> size","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"drawBox(&position, size)","name":"drawBox","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>position<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> size","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a cube with the specified size, starting from the specified position.</p>\n<p>A cube is drawn starting from a 3D reference position, with the specified size.\nThe cube is drawn with the current color, e.g. set with ofSetColor().\nThe cube is drawn filled by default; change this with ofFill();</p>\n<p><strong>Parameters:</strong></p>\n<p>position an glm::vec3 which contains the (x,y,z) coordinates for the cube's reference corner.</p>\n<p>size The size of the cube.</p>\n","desc":""},{"syntax":"drawBox(&position, width, height, depth)","name":"drawBox","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>position<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> depth","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a rectangular box with the specified dimensions, starting from the specified position.</p>\n<p>A box is a rectangular solid: an extruded rectangle.\nIt is drawn starting from a 3D reference coordinate.\nIt has a width (in x), a height (in y), and a depth (in z).\nThe box is drawn with the current color, e.g. set with ofSetColor().\nThe box is drawn filled by default; change this with ofFill();</p>\n<p><strong>Parameters:</strong></p>\n<p>position an glm::vec3 which contains the (x,y,z) coordinates for the box's reference corner.</p>\n<p>width The width of the box.</p>\n<p>height The height of the box.</p>\n<p>depth The depth of the box.</p>\n","desc":""},{"syntax":"drawBox(size)","name":"drawBox","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> size","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a cube with the specified size, starting from the origin.</p>\n<p>The cube is drawn with the current color, e.g. set with ofSetColor().\nThe cube is drawn filled by default; change this with ofFill();</p>\n<p><strong>Parameters:</strong></p>\n<p>size The size of the cube.</p>\n","desc":""},{"syntax":"drawBox(width, height, depth)","name":"drawBox","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> depth","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a rectangular box with the specified dimensions, starting from the origin.</p>\n<p>A box is a rectangular solid: an extruded rectangle.\nIt is drawn starting from the origin of the current reference frame.\nIt has a width (in x), a height (in y), and a depth (in z).\nThe box is drawn with the current color, e.g. set with ofSetColor().\nThe box is drawn filled by default; change this with ofFill();</p>\n<p><strong>Parameters:</strong></p>\n<p>width The width of the box.</p>\n<p>height The height of the box.</p>\n<p>depth The depth of the box.</p>\n","desc":""},{"syntax":"drawBox(x, y, z, size)","name":"drawBox","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> size","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a cube with the specified size, starting from the specified coordinates.</p>\n<p>A cube is a rectangular solid bounded by six square faces of equal size.\nIt is also known as a regular hexahedron, a square parallelepiped, an equilateral cuboid\nand a right rhombohedron. It is a regular square prism in three orientations.</p>\n<p>It is drawn starting from a 3D reference coordinate, with the specified size.\nThe cube is drawn with the current color, e.g. set with ofSetColor().\nThe cube is drawn filled by default; change this with ofFill();</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x-coordinate of the cube's origin.</p>\n<p>y The y-coordinate of the cube's origin.</p>\n<p>z The z-coordinate of the cube's origin.</p>\n<p>size The size of the cube.</p>\n","desc":""},{"syntax":"drawBox(x, y, z, width, height, depth)","name":"drawBox","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> depth","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a rectangular box with the specified dimensions, starting from the specified coordinates.</p>\n<p>A box is a rectangular solid: an extruded rectangle.\nIt is drawn starting from a 3D reference coordinate.\nIt has a width (in x), a height (in y), and a depth (in z).\nThe box is drawn with the current color, e.g. set with ofSetColor().\nThe box is drawn filled by default; change this with ofFill();</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x-coordinate of the box's origin.</p>\n<p>y The y-coordinate of the box's origin.</p>\n<p>z The z-coordinate of the box's origin.</p>\n<p>width The width of the box.</p>\n<p>height The height of the box.</p>\n<p>depth The depth of the box.</p>\n","desc":""},{"syntax":"drawCone(&position, radius, height)","name":"drawCone","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>position<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"drawCone(radius, height)","name":"drawCone","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"drawCone(x, y, radius, height)","name":"drawCone","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"drawCone(x, y, z, radius, height)","name":"drawCone","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"drawCylinder(&position, radius, height)","name":"drawCylinder","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>position<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"drawCylinder(radius, height)","name":"drawCylinder","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"drawCylinder(x, y, radius, height)","name":"drawCylinder","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"drawCylinder(x, y, z, radius, height)","name":"drawCylinder","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"drawGrid(stepSize, numberOfSteps, labels, x, y, z)","name":"drawGrid","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> stepSize<span class=\"token punctuation\">,</span> size_t numberOfSteps<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> labels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> z","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"drawGridPlane(stepSize, numberOfSteps, labels)","name":"drawGridPlane","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> stepSize<span class=\"token punctuation\">,</span> size_t numberOfSteps<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> labels","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"drawIcoSphere(&position, radius)","name":"drawIcoSphere","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>position<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"drawIcoSphere(radius)","name":"drawIcoSphere","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radius","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"drawIcoSphere(x, y, radius)","name":"drawIcoSphere","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"drawIcoSphere(x, y, z, radius)","name":"drawIcoSphere","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"drawPlane(&position, width, height)","name":"drawPlane","returns":"void","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>position<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"drawPlane(width, height)","name":"drawPlane","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"drawPlane(x, y, width, height)","name":"drawPlane","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"drawPlane(x, y, z, width, height)","name":"drawPlane","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"drawRotationAxes(radius, stripWidth, circleRes)","name":"drawRotationAxes","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> stripWidth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> circleRes","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"drawSphere(&position, radius)","name":"drawSphere","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>position<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"drawSphere(radius)","name":"drawSphere","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radius","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"drawSphere(x, y, radius)","name":"drawSphere","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"drawSphere(x, y, z, radius)","name":"drawSphere","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getBoxResolution()","name":"getBoxResolution","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getConeResolution()","name":"getConeResolution","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Retrieve a data structure describing the resolution with which cones are polygonized.</p>\n<p>Allows you to fetch the resolution with which cones are polygonized.\nReturns an ofVec3f containing the following data:\nEncoded as &quot;x&quot;: radiusSegments, the number of facets (subdivisions) around the cone's circular footprint.\nEncoded as &quot;y&quot;: heightSegments, the number of subdivisions from the cone's top to bottom.\nEncoded as &quot;z&quot;: capSegments, the number of annular (ring-shaped) subdivisions of the cone's endcap.</p>\n<p><strong>Returns</strong>: An ofVec3f containing (radiusSegments, heightSegments, capSegments) for cone polygonization.</p>\n","desc":""},{"syntax":"getCylinderResolution()","name":"getCylinderResolution","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getIcoSphereResolution()","name":"getIcoSphereResolution","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getPlaneResolution()","name":"getPlaneResolution","returns":"glm::vec2","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getSphereResolution()","name":"getSphereResolution","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"of3dGraphics(*renderer)","name":"of3dGraphics","returns":null,"returns_description":null,"parameters":"ofBaseRenderer <span class=\"token operator\">*</span>renderer","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"renderCached3dPrimitive(&model)","name":"renderCached3dPrimitive","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> of3dPrimitive <span class=\"token operator\">&amp;</span>model","access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setBoxResolution(res)","name":"setBoxResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> res","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setBoxResolution(resWidth, resHeight, resDepth)","name":"setBoxResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> resWidth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> resHeight<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> resDepth","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setConeResolution(radiusSegments, heightSegments, capSegments = 2)","name":"setConeResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> radiusSegments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightSegments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> capSegments<span class=\"token operator\">=</span><span class=\"token number\">2</span>","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the resolution of a polygonized cone.</p>\n<p>Allows you to set the polygonization resolution of any cones you subsequently draw with ofDrawCone().</p>\n<p><strong>Parameters:</strong></p>\n<p>radiusSegments The number of facets (subdivisions) around the cone's circular footprint.</p>\n<p>heightSegments The number of subdivisions from the cone's top to bottom.</p>\n<p>capSegments The number of annular (ring-shaped) subdivisions of the cone's endcap.</p>\n","desc":""},{"syntax":"setCylinderResolution(radiusSegments, heightSegments, capSegments = 2)","name":"setCylinderResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> radiusSegments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightSegments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> capSegments<span class=\"token operator\">=</span><span class=\"token number\">2</span>","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setIcoSphereResolution(res)","name":"setIcoSphereResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> res","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setPlaneResolution(columns, rows)","name":"setPlaneResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> columns<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rows","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setSphereResolution(res)","name":"setSphereResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> res","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"name":"axis","type":"of3dPrimitive","access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"box","type":"ofBoxPrimitive","access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"boxWireframe","type":"ofBoxPrimitive","access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"cone","type":"ofConePrimitive","access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"cylinder","type":"ofCylinderPrimitive","access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"icoSphere","type":"ofIcoSpherePrimitive","access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"plane","type":"ofPlanePrimitive","access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"renderer","type":"ofBaseRenderer *","access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"sphere","type":"ofSpherePrimitive","access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{}],"document":"<p>#class of3dGraphics</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n_extends: _\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>##Description</p>\n<p>##Methods</p>\n<p>###void drawArrow(&amp;start, &amp;end, headSize)</p>\n<p>&lt;!--\n<em>syntax: drawArrow(&amp;start, &amp;end, headSize)</em>\n<em>name: drawArrow</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;start, const glm::vec3 &amp;end, float headSize</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawAxis(size)</p>\n<p>&lt;!--\n<em>syntax: drawAxis(size)</em>\n<em>name: drawAxis</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float size</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawBox(&amp;position, size)</p>\n<p>&lt;!--\n<em>syntax: drawBox(&amp;position, size)</em>\n<em>name: drawBox</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;position, float size</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a cube with the specified size, starting from the specified position.</p>\n<p>A cube is drawn starting from a 3D reference position, with the specified size.\nThe cube is drawn with the current color, e.g. set with ofSetColor().\nThe cube is drawn filled by default; change this with ofFill();</p>\n<p><strong>Parameters:</strong></p>\n<p>position an glm::vec3 which contains the (x,y,z) coordinates for the cube's reference corner.</p>\n<p>size The size of the cube.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawBox(&amp;position, width, height, depth)</p>\n<p>&lt;!--\n<em>syntax: drawBox(&amp;position, width, height, depth)</em>\n<em>name: drawBox</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;position, float width, float height, float depth</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a rectangular box with the specified dimensions, starting from the specified position.</p>\n<p>A box is a rectangular solid: an extruded rectangle.\nIt is drawn starting from a 3D reference coordinate.\nIt has a width (in x), a height (in y), and a depth (in z).\nThe box is drawn with the current color, e.g. set with ofSetColor().\nThe box is drawn filled by default; change this with ofFill();</p>\n<p><strong>Parameters:</strong></p>\n<p>position an glm::vec3 which contains the (x,y,z) coordinates for the box's reference corner.</p>\n<p>width The width of the box.</p>\n<p>height The height of the box.</p>\n<p>depth The depth of the box.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawBox(size)</p>\n<p>&lt;!--\n<em>syntax: drawBox(size)</em>\n<em>name: drawBox</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float size</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a cube with the specified size, starting from the origin.</p>\n<p>The cube is drawn with the current color, e.g. set with ofSetColor().\nThe cube is drawn filled by default; change this with ofFill();</p>\n<p><strong>Parameters:</strong></p>\n<p>size The size of the cube.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawBox(width, height, depth)</p>\n<p>&lt;!--\n<em>syntax: drawBox(width, height, depth)</em>\n<em>name: drawBox</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float width, float height, float depth</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a rectangular box with the specified dimensions, starting from the origin.</p>\n<p>A box is a rectangular solid: an extruded rectangle.\nIt is drawn starting from the origin of the current reference frame.\nIt has a width (in x), a height (in y), and a depth (in z).\nThe box is drawn with the current color, e.g. set with ofSetColor().\nThe box is drawn filled by default; change this with ofFill();</p>\n<p><strong>Parameters:</strong></p>\n<p>width The width of the box.</p>\n<p>height The height of the box.</p>\n<p>depth The depth of the box.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawBox(x, y, z, size)</p>\n<p>&lt;!--\n<em>syntax: drawBox(x, y, z, size)</em>\n<em>name: drawBox</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float size</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a cube with the specified size, starting from the specified coordinates.</p>\n<p>A cube is a rectangular solid bounded by six square faces of equal size.\nIt is also known as a regular hexahedron, a square parallelepiped, an equilateral cuboid\nand a right rhombohedron. It is a regular square prism in three orientations.</p>\n<p>It is drawn starting from a 3D reference coordinate, with the specified size.\nThe cube is drawn with the current color, e.g. set with ofSetColor().\nThe cube is drawn filled by default; change this with ofFill();</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x-coordinate of the cube's origin.</p>\n<p>y The y-coordinate of the cube's origin.</p>\n<p>z The z-coordinate of the cube's origin.</p>\n<p>size The size of the cube.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawBox(x, y, z, width, height, depth)</p>\n<p>&lt;!--\n<em>syntax: drawBox(x, y, z, width, height, depth)</em>\n<em>name: drawBox</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float width, float height, float depth</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a rectangular box with the specified dimensions, starting from the specified coordinates.</p>\n<p>A box is a rectangular solid: an extruded rectangle.\nIt is drawn starting from a 3D reference coordinate.\nIt has a width (in x), a height (in y), and a depth (in z).\nThe box is drawn with the current color, e.g. set with ofSetColor().\nThe box is drawn filled by default; change this with ofFill();</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x-coordinate of the box's origin.</p>\n<p>y The y-coordinate of the box's origin.</p>\n<p>z The z-coordinate of the box's origin.</p>\n<p>width The width of the box.</p>\n<p>height The height of the box.</p>\n<p>depth The depth of the box.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawCone(&amp;position, radius, height)</p>\n<p>&lt;!--\n<em>syntax: drawCone(&amp;position, radius, height)</em>\n<em>name: drawCone</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;position, float radius, float height</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawCone(radius, height)</p>\n<p>&lt;!--\n<em>syntax: drawCone(radius, height)</em>\n<em>name: drawCone</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float radius, float height</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawCone(x, y, radius, height)</p>\n<p>&lt;!--\n<em>syntax: drawCone(x, y, radius, height)</em>\n<em>name: drawCone</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float radius, float height</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawCone(x, y, z, radius, height)</p>\n<p>&lt;!--\n<em>syntax: drawCone(x, y, z, radius, height)</em>\n<em>name: drawCone</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float radius, float height</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawCylinder(&amp;position, radius, height)</p>\n<p>&lt;!--\n<em>syntax: drawCylinder(&amp;position, radius, height)</em>\n<em>name: drawCylinder</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;position, float radius, float height</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawCylinder(radius, height)</p>\n<p>&lt;!--\n<em>syntax: drawCylinder(radius, height)</em>\n<em>name: drawCylinder</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float radius, float height</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawCylinder(x, y, radius, height)</p>\n<p>&lt;!--\n<em>syntax: drawCylinder(x, y, radius, height)</em>\n<em>name: drawCylinder</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float radius, float height</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawCylinder(x, y, z, radius, height)</p>\n<p>&lt;!--\n<em>syntax: drawCylinder(x, y, z, radius, height)</em>\n<em>name: drawCylinder</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float radius, float height</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawGrid(stepSize, numberOfSteps, labels, x, y, z)</p>\n<p>&lt;!--\n<em>syntax: drawGrid(stepSize, numberOfSteps, labels, x, y, z)</em>\n<em>name: drawGrid</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float stepSize, size_t numberOfSteps, bool labels, bool x, bool y, bool z</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawGridPlane(stepSize, numberOfSteps, labels)</p>\n<p>&lt;!--\n<em>syntax: drawGridPlane(stepSize, numberOfSteps, labels)</em>\n<em>name: drawGridPlane</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float stepSize, size_t numberOfSteps, bool labels</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawIcoSphere(&amp;position, radius)</p>\n<p>&lt;!--\n<em>syntax: drawIcoSphere(&amp;position, radius)</em>\n<em>name: drawIcoSphere</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;position, float radius</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawIcoSphere(radius)</p>\n<p>&lt;!--\n<em>syntax: drawIcoSphere(radius)</em>\n<em>name: drawIcoSphere</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float radius</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawIcoSphere(x, y, radius)</p>\n<p>&lt;!--\n<em>syntax: drawIcoSphere(x, y, radius)</em>\n<em>name: drawIcoSphere</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float radius</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawIcoSphere(x, y, z, radius)</p>\n<p>&lt;!--\n<em>syntax: drawIcoSphere(x, y, z, radius)</em>\n<em>name: drawIcoSphere</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float radius</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawPlane(&amp;position, width, height)</p>\n<p>&lt;!--\n<em>syntax: drawPlane(&amp;position, width, height)</em>\n<em>name: drawPlane</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: glm::vec3 &amp;position, float width, float height</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawPlane(width, height)</p>\n<p>&lt;!--\n<em>syntax: drawPlane(width, height)</em>\n<em>name: drawPlane</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float width, float height</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawPlane(x, y, width, height)</p>\n<p>&lt;!--\n<em>syntax: drawPlane(x, y, width, height)</em>\n<em>name: drawPlane</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float width, float height</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawPlane(x, y, z, width, height)</p>\n<p>&lt;!--\n<em>syntax: drawPlane(x, y, z, width, height)</em>\n<em>name: drawPlane</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float width, float height</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawRotationAxes(radius, stripWidth, circleRes)</p>\n<p>&lt;!--\n<em>syntax: drawRotationAxes(radius, stripWidth, circleRes)</em>\n<em>name: drawRotationAxes</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float radius, float stripWidth, int circleRes</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawSphere(&amp;position, radius)</p>\n<p>&lt;!--\n<em>syntax: drawSphere(&amp;position, radius)</em>\n<em>name: drawSphere</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;position, float radius</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawSphere(radius)</p>\n<p>&lt;!--\n<em>syntax: drawSphere(radius)</em>\n<em>name: drawSphere</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float radius</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawSphere(x, y, radius)</p>\n<p>&lt;!--\n<em>syntax: drawSphere(x, y, radius)</em>\n<em>name: drawSphere</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float radius</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawSphere(x, y, z, radius)</p>\n<p>&lt;!--\n<em>syntax: drawSphere(x, y, z, radius)</em>\n<em>name: drawSphere</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float radius</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getBoxResolution()</p>\n<p>&lt;!--\n<em>syntax: getBoxResolution()</em>\n<em>name: getBoxResolution</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getConeResolution()</p>\n<p>&lt;!--\n<em>syntax: getConeResolution()</em>\n<em>name: getConeResolution</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Retrieve a data structure describing the resolution with which cones are polygonized.</p>\n<p>Allows you to fetch the resolution with which cones are polygonized.\nReturns an ofVec3f containing the following data:\nEncoded as &quot;x&quot;: radiusSegments, the number of facets (subdivisions) around the cone's circular footprint.\nEncoded as &quot;y&quot;: heightSegments, the number of subdivisions from the cone's top to bottom.\nEncoded as &quot;z&quot;: capSegments, the number of annular (ring-shaped) subdivisions of the cone's endcap.</p>\n<p><strong>Returns</strong>: An ofVec3f containing (radiusSegments, heightSegments, capSegments) for cone polygonization.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getCylinderResolution()</p>\n<p>&lt;!--\n<em>syntax: getCylinderResolution()</em>\n<em>name: getCylinderResolution</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getIcoSphereResolution()</p>\n<p>&lt;!--\n<em>syntax: getIcoSphereResolution()</em>\n<em>name: getIcoSphereResolution</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec2 getPlaneResolution()</p>\n<p>&lt;!--\n<em>syntax: getPlaneResolution()</em>\n<em>name: getPlaneResolution</em>\n<em>returns: glm::vec2</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getSphereResolution()</p>\n<p>&lt;!--\n<em>syntax: getSphereResolution()</em>\n<em>name: getSphereResolution</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>of3dGraphics(*renderer)</h3>\n<p>&lt;!--\n<em>syntax: of3dGraphics(*renderer)</em>\n<em>name: of3dGraphics</em>\n_returns: _\n_returns_description: _\n<em>parameters: ofBaseRenderer *renderer</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void renderCached3dPrimitive(&amp;model)</p>\n<p>&lt;!--\n<em>syntax: renderCached3dPrimitive(&amp;model)</em>\n<em>name: renderCached3dPrimitive</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const of3dPrimitive &amp;model</em>\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setBoxResolution(res)</p>\n<p>&lt;!--\n<em>syntax: setBoxResolution(res)</em>\n<em>name: setBoxResolution</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int res</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setBoxResolution(resWidth, resHeight, resDepth)</p>\n<p>&lt;!--\n<em>syntax: setBoxResolution(resWidth, resHeight, resDepth)</em>\n<em>name: setBoxResolution</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int resWidth, int resHeight, int resDepth</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setConeResolution(radiusSegments, heightSegments, capSegments = 2)</p>\n<p>&lt;!--\n<em>syntax: setConeResolution(radiusSegments, heightSegments, capSegments = 2)</em>\n<em>name: setConeResolution</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int radiusSegments, int heightSegments, int capSegments=2</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the resolution of a polygonized cone.</p>\n<p>Allows you to set the polygonization resolution of any cones you subsequently draw with ofDrawCone().</p>\n<p><strong>Parameters:</strong></p>\n<p>radiusSegments The number of facets (subdivisions) around the cone's circular footprint.</p>\n<p>heightSegments The number of subdivisions from the cone's top to bottom.</p>\n<p>capSegments The number of annular (ring-shaped) subdivisions of the cone's endcap.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setCylinderResolution(radiusSegments, heightSegments, capSegments = 2)</p>\n<p>&lt;!--\n<em>syntax: setCylinderResolution(radiusSegments, heightSegments, capSegments = 2)</em>\n<em>name: setCylinderResolution</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int radiusSegments, int heightSegments, int capSegments=2</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setIcoSphereResolution(res)</p>\n<p>&lt;!--\n<em>syntax: setIcoSphereResolution(res)</em>\n<em>name: setIcoSphereResolution</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int res</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setPlaneResolution(columns, rows)</p>\n<p>&lt;!--\n<em>syntax: setPlaneResolution(columns, rows)</em>\n<em>name: setPlaneResolution</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int columns, int rows</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setSphereResolution(res)</p>\n<p>&lt;!--\n<em>syntax: setSphereResolution(res)</em>\n<em>name: setSphereResolution</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int res</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###of3dPrimitive axis</p>\n<p>&lt;!--\n<em>name: axis</em>\n<em>type: of3dPrimitive</em>\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofBoxPrimitive box</p>\n<p>&lt;!--\n<em>name: box</em>\n<em>type: ofBoxPrimitive</em>\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofBoxPrimitive boxWireframe</p>\n<p>&lt;!--\n<em>name: boxWireframe</em>\n<em>type: ofBoxPrimitive</em>\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofConePrimitive cone</p>\n<p>&lt;!--\n<em>name: cone</em>\n<em>type: ofConePrimitive</em>\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofCylinderPrimitive cylinder</p>\n<p>&lt;!--\n<em>name: cylinder</em>\n<em>type: ofCylinderPrimitive</em>\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofIcoSpherePrimitive icoSphere</p>\n<p>&lt;!--\n<em>name: icoSphere</em>\n<em>type: ofIcoSpherePrimitive</em>\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPlanePrimitive plane</p>\n<p>&lt;!--\n<em>name: plane</em>\n<em>type: ofPlanePrimitive</em>\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofBaseRenderer * renderer</p>\n<p>&lt;!--\n<em>name: renderer</em>\n<em>type: ofBaseRenderer *</em>\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofSpherePrimitive sphere</p>\n<p>&lt;!--\n<em>name: sphere</em>\n<em>type: ofSpherePrimitive</em>\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class of3dGraphics\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\n\n\n\n\n\n##Description\n\n\n\n\n\n##Methods\n\n\n\n###void drawArrow(&start, &end, headSize)\n\n<!--\n_syntax: drawArrow(&start, &end, headSize)_\n_name: drawArrow_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &start, const glm::vec3 &end, float headSize_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawAxis(size)\n\n<!--\n_syntax: drawAxis(size)_\n_name: drawAxis_\n_returns: void_\n_returns_description: _\n_parameters: float size_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawBox(&position, size)\n\n<!--\n_syntax: drawBox(&position, size)_\n_name: drawBox_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &position, float size_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a cube with the specified size, starting from the specified position.\n\nA cube is drawn starting from a 3D reference position, with the specified size.\nThe cube is drawn with the current color, e.g. set with ofSetColor().\nThe cube is drawn filled by default; change this with ofFill();\n\n\n**Parameters:**\n\nposition an glm::vec3 which contains the (x,y,z) coordinates for the cube's reference corner.\n\nsize The size of the cube.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawBox(&position, width, height, depth)\n\n<!--\n_syntax: drawBox(&position, width, height, depth)_\n_name: drawBox_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &position, float width, float height, float depth_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a rectangular box with the specified dimensions, starting from the specified position.\n\nA box is a rectangular solid: an extruded rectangle.\nIt is drawn starting from a 3D reference coordinate.\nIt has a width (in x), a height (in y), and a depth (in z).\nThe box is drawn with the current color, e.g. set with ofSetColor().\nThe box is drawn filled by default; change this with ofFill();\n\n\n**Parameters:**\n\nposition an glm::vec3 which contains the (x,y,z) coordinates for the box's reference corner.\n\nwidth The width of the box.\n\nheight The height of the box.\n\ndepth The depth of the box.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawBox(size)\n\n<!--\n_syntax: drawBox(size)_\n_name: drawBox_\n_returns: void_\n_returns_description: _\n_parameters: float size_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a cube with the specified size, starting from the origin.\n\nThe cube is drawn with the current color, e.g. set with ofSetColor().\nThe cube is drawn filled by default; change this with ofFill();\n\n\n**Parameters:**\n\nsize The size of the cube.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawBox(width, height, depth)\n\n<!--\n_syntax: drawBox(width, height, depth)_\n_name: drawBox_\n_returns: void_\n_returns_description: _\n_parameters: float width, float height, float depth_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a rectangular box with the specified dimensions, starting from the origin.\n\nA box is a rectangular solid: an extruded rectangle.\nIt is drawn starting from the origin of the current reference frame.\nIt has a width (in x), a height (in y), and a depth (in z).\nThe box is drawn with the current color, e.g. set with ofSetColor().\nThe box is drawn filled by default; change this with ofFill();\n\n\n**Parameters:**\n\nwidth The width of the box.\n\nheight The height of the box.\n\ndepth The depth of the box.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawBox(x, y, z, size)\n\n<!--\n_syntax: drawBox(x, y, z, size)_\n_name: drawBox_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float size_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a cube with the specified size, starting from the specified coordinates.\n\nA cube is a rectangular solid bounded by six square faces of equal size.\nIt is also known as a regular hexahedron, a square parallelepiped, an equilateral cuboid\nand a right rhombohedron. It is a regular square prism in three orientations.\n\nIt is drawn starting from a 3D reference coordinate, with the specified size.\nThe cube is drawn with the current color, e.g. set with ofSetColor().\nThe cube is drawn filled by default; change this with ofFill();\n\n\n**Parameters:**\n\nx The x-coordinate of the cube's origin.\n\ny The y-coordinate of the cube's origin.\n\nz The z-coordinate of the cube's origin.\n\nsize The size of the cube.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawBox(x, y, z, width, height, depth)\n\n<!--\n_syntax: drawBox(x, y, z, width, height, depth)_\n_name: drawBox_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float width, float height, float depth_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a rectangular box with the specified dimensions, starting from the specified coordinates.\n\nA box is a rectangular solid: an extruded rectangle.\nIt is drawn starting from a 3D reference coordinate.\nIt has a width (in x), a height (in y), and a depth (in z).\nThe box is drawn with the current color, e.g. set with ofSetColor().\nThe box is drawn filled by default; change this with ofFill();\n\n\n**Parameters:**\n\nx The x-coordinate of the box's origin.\n\ny The y-coordinate of the box's origin.\n\nz The z-coordinate of the box's origin.\n\nwidth The width of the box.\n\nheight The height of the box.\n\ndepth The depth of the box.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawCone(&position, radius, height)\n\n<!--\n_syntax: drawCone(&position, radius, height)_\n_name: drawCone_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &position, float radius, float height_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawCone(radius, height)\n\n<!--\n_syntax: drawCone(radius, height)_\n_name: drawCone_\n_returns: void_\n_returns_description: _\n_parameters: float radius, float height_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawCone(x, y, radius, height)\n\n<!--\n_syntax: drawCone(x, y, radius, height)_\n_name: drawCone_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float radius, float height_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawCone(x, y, z, radius, height)\n\n<!--\n_syntax: drawCone(x, y, z, radius, height)_\n_name: drawCone_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float radius, float height_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawCylinder(&position, radius, height)\n\n<!--\n_syntax: drawCylinder(&position, radius, height)_\n_name: drawCylinder_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &position, float radius, float height_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawCylinder(radius, height)\n\n<!--\n_syntax: drawCylinder(radius, height)_\n_name: drawCylinder_\n_returns: void_\n_returns_description: _\n_parameters: float radius, float height_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawCylinder(x, y, radius, height)\n\n<!--\n_syntax: drawCylinder(x, y, radius, height)_\n_name: drawCylinder_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float radius, float height_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawCylinder(x, y, z, radius, height)\n\n<!--\n_syntax: drawCylinder(x, y, z, radius, height)_\n_name: drawCylinder_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float radius, float height_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawGrid(stepSize, numberOfSteps, labels, x, y, z)\n\n<!--\n_syntax: drawGrid(stepSize, numberOfSteps, labels, x, y, z)_\n_name: drawGrid_\n_returns: void_\n_returns_description: _\n_parameters: float stepSize, size_t numberOfSteps, bool labels, bool x, bool y, bool z_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawGridPlane(stepSize, numberOfSteps, labels)\n\n<!--\n_syntax: drawGridPlane(stepSize, numberOfSteps, labels)_\n_name: drawGridPlane_\n_returns: void_\n_returns_description: _\n_parameters: float stepSize, size_t numberOfSteps, bool labels_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawIcoSphere(&position, radius)\n\n<!--\n_syntax: drawIcoSphere(&position, radius)_\n_name: drawIcoSphere_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &position, float radius_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawIcoSphere(radius)\n\n<!--\n_syntax: drawIcoSphere(radius)_\n_name: drawIcoSphere_\n_returns: void_\n_returns_description: _\n_parameters: float radius_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawIcoSphere(x, y, radius)\n\n<!--\n_syntax: drawIcoSphere(x, y, radius)_\n_name: drawIcoSphere_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float radius_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawIcoSphere(x, y, z, radius)\n\n<!--\n_syntax: drawIcoSphere(x, y, z, radius)_\n_name: drawIcoSphere_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float radius_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawPlane(&position, width, height)\n\n<!--\n_syntax: drawPlane(&position, width, height)_\n_name: drawPlane_\n_returns: void_\n_returns_description: _\n_parameters: glm::vec3 &position, float width, float height_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawPlane(width, height)\n\n<!--\n_syntax: drawPlane(width, height)_\n_name: drawPlane_\n_returns: void_\n_returns_description: _\n_parameters: float width, float height_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawPlane(x, y, width, height)\n\n<!--\n_syntax: drawPlane(x, y, width, height)_\n_name: drawPlane_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float width, float height_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawPlane(x, y, z, width, height)\n\n<!--\n_syntax: drawPlane(x, y, z, width, height)_\n_name: drawPlane_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float width, float height_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawRotationAxes(radius, stripWidth, circleRes)\n\n<!--\n_syntax: drawRotationAxes(radius, stripWidth, circleRes)_\n_name: drawRotationAxes_\n_returns: void_\n_returns_description: _\n_parameters: float radius, float stripWidth, int circleRes_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawSphere(&position, radius)\n\n<!--\n_syntax: drawSphere(&position, radius)_\n_name: drawSphere_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &position, float radius_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawSphere(radius)\n\n<!--\n_syntax: drawSphere(radius)_\n_name: drawSphere_\n_returns: void_\n_returns_description: _\n_parameters: float radius_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawSphere(x, y, radius)\n\n<!--\n_syntax: drawSphere(x, y, radius)_\n_name: drawSphere_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float radius_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawSphere(x, y, z, radius)\n\n<!--\n_syntax: drawSphere(x, y, z, radius)_\n_name: drawSphere_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float radius_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getBoxResolution()\n\n<!--\n_syntax: getBoxResolution()_\n_name: getBoxResolution_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getConeResolution()\n\n<!--\n_syntax: getConeResolution()_\n_name: getConeResolution_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRetrieve a data structure describing the resolution with which cones are polygonized.\n\nAllows you to fetch the resolution with which cones are polygonized.\nReturns an ofVec3f containing the following data:\nEncoded as \"x\": radiusSegments, the number of facets (subdivisions) around the cone's circular footprint.\nEncoded as \"y\": heightSegments, the number of subdivisions from the cone's top to bottom.\nEncoded as \"z\": capSegments, the number of annular (ring-shaped) subdivisions of the cone's endcap.\n\n\n**Returns**: An ofVec3f containing (radiusSegments, heightSegments, capSegments) for cone polygonization.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getCylinderResolution()\n\n<!--\n_syntax: getCylinderResolution()_\n_name: getCylinderResolution_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getIcoSphereResolution()\n\n<!--\n_syntax: getIcoSphereResolution()_\n_name: getIcoSphereResolution_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec2 getPlaneResolution()\n\n<!--\n_syntax: getPlaneResolution()_\n_name: getPlaneResolution_\n_returns: glm::vec2_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getSphereResolution()\n\n<!--\n_syntax: getSphereResolution()_\n_name: getSphereResolution_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### of3dGraphics(*renderer)\n\n<!--\n_syntax: of3dGraphics(*renderer)_\n_name: of3dGraphics_\n_returns: _\n_returns_description: _\n_parameters: ofBaseRenderer *renderer_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void renderCached3dPrimitive(&model)\n\n<!--\n_syntax: renderCached3dPrimitive(&model)_\n_name: renderCached3dPrimitive_\n_returns: void_\n_returns_description: _\n_parameters: const of3dPrimitive &model_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setBoxResolution(res)\n\n<!--\n_syntax: setBoxResolution(res)_\n_name: setBoxResolution_\n_returns: void_\n_returns_description: _\n_parameters: int res_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setBoxResolution(resWidth, resHeight, resDepth)\n\n<!--\n_syntax: setBoxResolution(resWidth, resHeight, resDepth)_\n_name: setBoxResolution_\n_returns: void_\n_returns_description: _\n_parameters: int resWidth, int resHeight, int resDepth_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setConeResolution(radiusSegments, heightSegments, capSegments = 2)\n\n<!--\n_syntax: setConeResolution(radiusSegments, heightSegments, capSegments = 2)_\n_name: setConeResolution_\n_returns: void_\n_returns_description: _\n_parameters: int radiusSegments, int heightSegments, int capSegments=2_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the resolution of a polygonized cone.\n\nAllows you to set the polygonization resolution of any cones you subsequently draw with ofDrawCone().\n\n\n**Parameters:**\n\nradiusSegments The number of facets (subdivisions) around the cone's circular footprint.\n\nheightSegments The number of subdivisions from the cone's top to bottom.\n\ncapSegments The number of annular (ring-shaped) subdivisions of the cone's endcap.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setCylinderResolution(radiusSegments, heightSegments, capSegments = 2)\n\n<!--\n_syntax: setCylinderResolution(radiusSegments, heightSegments, capSegments = 2)_\n_name: setCylinderResolution_\n_returns: void_\n_returns_description: _\n_parameters: int radiusSegments, int heightSegments, int capSegments=2_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setIcoSphereResolution(res)\n\n<!--\n_syntax: setIcoSphereResolution(res)_\n_name: setIcoSphereResolution_\n_returns: void_\n_returns_description: _\n_parameters: int res_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setPlaneResolution(columns, rows)\n\n<!--\n_syntax: setPlaneResolution(columns, rows)_\n_name: setPlaneResolution_\n_returns: void_\n_returns_description: _\n_parameters: int columns, int rows_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setSphereResolution(res)\n\n<!--\n_syntax: setSphereResolution(res)_\n_name: setSphereResolution_\n_returns: void_\n_returns_description: _\n_parameters: int res_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###of3dPrimitive axis\n\n<!--\n_name: axis_\n_type: of3dPrimitive_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofBoxPrimitive box\n\n<!--\n_name: box_\n_type: ofBoxPrimitive_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofBoxPrimitive boxWireframe\n\n<!--\n_name: boxWireframe_\n_type: ofBoxPrimitive_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofConePrimitive cone\n\n<!--\n_name: cone_\n_type: ofConePrimitive_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofCylinderPrimitive cylinder\n\n<!--\n_name: cylinder_\n_type: ofCylinderPrimitive_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofIcoSpherePrimitive icoSphere\n\n<!--\n_name: icoSphere_\n_type: ofIcoSpherePrimitive_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPlanePrimitive plane\n\n<!--\n_name: plane_\n_type: ofPlanePrimitive_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofBaseRenderer * renderer\n\n<!--\n_name: renderer_\n_type: ofBaseRenderer *_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofSpherePrimitive sphere\n\n<!--\n_name: sphere_\n_type: ofSpherePrimitive_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}