{"data":[{"page":{"entry":{"name":"ofFileUtils.cpp","filename":"ofFileUtils.cpp","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/utils/ofFileUtils.cpp","path":"/openframeworks/utils/ofFileUtils_cpp","route":"/openframeworks/utils/ofFileUtils.cpp","dir":"../libs/openFrameworks/utils","ext":"cpp","type":"source","id":331,"parent":329,"breadcrumbs":[329,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofFileUtils.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_WIN32</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pwd.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofUtils.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofLog.h\"</span></span>\n\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_OSX</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mach-o/dyld.h></span>       </span><span class=\"token comment\" spellcheck=\"true\">/* _NSGetExecutablePath */</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;limits.h></span>        </span><span class=\"token comment\" spellcheck=\"true\">/* PATH_MAX */</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// -- ofBuffer</span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofBuffer<span class=\"token operator\">::</span><span class=\"token function\">ofBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">currentLine</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofBuffer<span class=\"token operator\">::</span><span class=\"token function\">ofBuffer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t size<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span>buffer<span class=\"token operator\">+</span>size<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">currentLine</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofBuffer<span class=\"token operator\">::</span><span class=\"token function\">ofBuffer</span><span class=\"token punctuation\">(</span>istream <span class=\"token operator\">&amp;</span> stream<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t ioBlockSize<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">currentLine</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> ioBlockSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>istream <span class=\"token operator\">&amp;</span> stream<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t ioBlockSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">.</span><span class=\"token function\">bad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> <span class=\"token function\">aux_buffer</span><span class=\"token punctuation\">(</span>ioBlockSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">.</span><span class=\"token function\">good</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tstream<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>aux_buffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ioBlockSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">append</span><span class=\"token punctuation\">(</span>aux_buffer<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">gcount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">setall</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> mem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">writeTo</span><span class=\"token punctuation\">(</span>ostream <span class=\"token operator\">&amp;</span> stream<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">.</span><span class=\"token function\">bad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tstream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">good</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> buffer<span class=\"token operator\">+</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">append</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">,</span> buffer <span class=\"token operator\">+</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">getBinaryBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">getBinaryBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nstring ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofBuffer<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span> std<span class=\"token operator\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofBuffer <span class=\"token operator\">&amp;</span> ofBuffer<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>size_t ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nstring ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">getNextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>currentLine<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tcurrentLine <span class=\"token operator\">=</span> <span class=\"token function\">getLines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">++</span>currentLine<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> currentLine<span class=\"token punctuation\">.</span><span class=\"token function\">asString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nstring ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">getFirstLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tcurrentLine <span class=\"token operator\">=</span> <span class=\"token function\">getLines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> currentLine<span class=\"token punctuation\">.</span><span class=\"token function\">asString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">isLastLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> currentLine <span class=\"token operator\">==</span> <span class=\"token function\">getLines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">resetLineReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tcurrentLine <span class=\"token operator\">=</span> <span class=\"token function\">getLines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>const_iterator ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>const_iterator ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>reverse_iterator ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>reverse_iterator ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>const_reverse_iterator ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>const_reverse_iterator ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofBuffer<span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token function\">Line</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator _begin<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator _end<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">:</span><span class=\"token function\">_current</span><span class=\"token punctuation\">(</span>_begin<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">,</span><span class=\"token function\">_begin</span><span class=\"token punctuation\">(</span>_begin<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">,</span><span class=\"token function\">_end</span><span class=\"token punctuation\">(</span>_end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_begin <span class=\"token operator\">==</span> _end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tline <span class=\"token operator\">=</span>  <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t_current <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>_begin<span class=\"token punctuation\">,</span> _end<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_current <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">>=</span> _begin <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_current <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'\\r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tline <span class=\"token operator\">=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>_begin<span class=\"token punctuation\">,</span> _current <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\tline <span class=\"token operator\">=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>_begin<span class=\"token punctuation\">,</span> _current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_current <span class=\"token operator\">!=</span> _end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t_current<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> ofBuffer<span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> line<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">*</span> ofBuffer<span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>line<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> ofBuffer<span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token function\">asString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> line<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofBuffer<span class=\"token operator\">::</span>Line <span class=\"token operator\">&amp;</span> ofBuffer<span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> <span class=\"token function\">Line</span><span class=\"token punctuation\">(</span>_current<span class=\"token punctuation\">,</span>_end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofBuffer<span class=\"token operator\">::</span>Line ofBuffer<span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tLine <span class=\"token function\">tmp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofBuffer<span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span>Line <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> rhs<span class=\"token punctuation\">.</span>_begin <span class=\"token operator\">!=</span> _begin <span class=\"token operator\">||</span> rhs<span class=\"token punctuation\">.</span>_end <span class=\"token operator\">!=</span> _end<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofBuffer<span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>Line <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> rhs<span class=\"token punctuation\">.</span>_begin <span class=\"token operator\">==</span> _begin <span class=\"token operator\">&amp;&amp;</span> rhs<span class=\"token punctuation\">.</span>_end <span class=\"token operator\">==</span> _end<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofBuffer<span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> _begin <span class=\"token operator\">==</span> _end<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofBuffer<span class=\"token operator\">::</span>RLine<span class=\"token operator\">::</span><span class=\"token function\">RLine</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>reverse_iterator _rbegin<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>reverse_iterator _rend<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">:</span><span class=\"token function\">_current</span><span class=\"token punctuation\">(</span>_rbegin<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">,</span><span class=\"token function\">_rbegin</span><span class=\"token punctuation\">(</span>_rbegin<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">,</span><span class=\"token function\">_rend</span><span class=\"token punctuation\">(</span>_rend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_rbegin <span class=\"token operator\">==</span> _rend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tline <span class=\"token operator\">=</span>  <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t_current <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>_rbegin<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> _rend<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tline <span class=\"token operator\">=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>_current<span class=\"token punctuation\">.</span><span class=\"token function\">base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> _rbegin<span class=\"token punctuation\">.</span><span class=\"token function\">base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_current <span class=\"token operator\">&lt;</span> _rend<span class=\"token number\">-1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_current <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'\\r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t_current<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> ofBuffer<span class=\"token operator\">::</span>RLine<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> line<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">*</span> ofBuffer<span class=\"token operator\">::</span>RLine<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>line<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> ofBuffer<span class=\"token operator\">::</span>RLine<span class=\"token operator\">::</span><span class=\"token function\">asString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> line<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofBuffer<span class=\"token operator\">::</span>RLine <span class=\"token operator\">&amp;</span> ofBuffer<span class=\"token operator\">::</span>RLine<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> <span class=\"token function\">RLine</span><span class=\"token punctuation\">(</span>_current<span class=\"token punctuation\">,</span>_rend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofBuffer<span class=\"token operator\">::</span>RLine ofBuffer<span class=\"token operator\">::</span>RLine<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tRLine <span class=\"token function\">tmp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofBuffer<span class=\"token operator\">::</span>RLine<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span>RLine <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> rhs<span class=\"token punctuation\">.</span>_rbegin <span class=\"token operator\">!=</span> _rbegin <span class=\"token operator\">||</span> rhs<span class=\"token punctuation\">.</span>_rend <span class=\"token operator\">!=</span> _rend<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofBuffer<span class=\"token operator\">::</span>RLine<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>RLine <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> rhs<span class=\"token punctuation\">.</span>_rbegin <span class=\"token operator\">==</span> _rbegin <span class=\"token operator\">&amp;&amp;</span> rhs<span class=\"token punctuation\">.</span>_rend <span class=\"token operator\">==</span> _rend<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofBuffer<span class=\"token operator\">::</span>RLine<span class=\"token operator\">::</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> _rbegin <span class=\"token operator\">==</span> _rend<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofBuffer<span class=\"token operator\">::</span>Lines<span class=\"token operator\">::</span><span class=\"token function\">Lines</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator begin<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator end<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">_begin</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">_end</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofBuffer<span class=\"token operator\">::</span>Line ofBuffer<span class=\"token operator\">::</span>Lines<span class=\"token operator\">::</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">Line</span><span class=\"token punctuation\">(</span>_begin<span class=\"token punctuation\">,</span>_end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofBuffer<span class=\"token operator\">::</span>Line ofBuffer<span class=\"token operator\">::</span>Lines<span class=\"token operator\">::</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">Line</span><span class=\"token punctuation\">(</span>_end<span class=\"token punctuation\">,</span>_end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofBuffer<span class=\"token operator\">::</span>RLines<span class=\"token operator\">::</span><span class=\"token function\">RLines</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>reverse_iterator rbegin<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>reverse_iterator rend<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">_rbegin</span><span class=\"token punctuation\">(</span>rbegin<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">_rend</span><span class=\"token punctuation\">(</span>rend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofBuffer<span class=\"token operator\">::</span>RLine ofBuffer<span class=\"token operator\">::</span>RLines<span class=\"token operator\">::</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">RLine</span><span class=\"token punctuation\">(</span>_rbegin<span class=\"token punctuation\">,</span>_rend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofBuffer<span class=\"token operator\">::</span>RLine ofBuffer<span class=\"token operator\">::</span>RLines<span class=\"token operator\">::</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">RLine</span><span class=\"token punctuation\">(</span>_rend<span class=\"token punctuation\">,</span>_rend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofBuffer<span class=\"token operator\">::</span>Lines ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">getLines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">Lines</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofBuffer<span class=\"token operator\">::</span>RLines ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">getReverseLines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> ofBuffer<span class=\"token operator\">::</span><span class=\"token function\">RLines</span><span class=\"token punctuation\">(</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nostream <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream <span class=\"token operator\">&amp;</span> ostr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofBuffer <span class=\"token operator\">&amp;</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tbuf<span class=\"token punctuation\">.</span><span class=\"token function\">writeTo</span><span class=\"token punctuation\">(</span>ostr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> ostr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nistream <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>istream <span class=\"token operator\">&amp;</span> istr<span class=\"token punctuation\">,</span> ofBuffer <span class=\"token operator\">&amp;</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tbuf<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>istr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> istr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofBuffer <span class=\"token function\">ofBufferFromFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tofFile <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>ReadOnly<span class=\"token punctuation\">,</span> binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofBuffer</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofBufferToFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofBuffer<span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tofFile <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> ofFile<span class=\"token operator\">::</span>WriteOnly<span class=\"token punctuation\">,</span> binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">writeTo</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// -- ofFile</span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nofFile<span class=\"token operator\">::</span><span class=\"token function\">ofFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">mode</span><span class=\"token punctuation\">(</span>Reference<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">binary</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\nofFile<span class=\"token operator\">::</span><span class=\"token function\">ofFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> Mode mode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> binary<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">mode</span><span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">binary</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">,</span> binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------------------------------------------------------------------</span>\nofFile<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">ofFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//close();</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------------------------------------------------------------------</span>\nofFile<span class=\"token operator\">::</span><span class=\"token function\">ofFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFile <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">basic_ios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">fstream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">mode</span><span class=\"token punctuation\">(</span>Reference<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">binary</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">copyFrom</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------------------------------------------------------------------</span>\nofFile <span class=\"token operator\">&amp;</span> ofFile<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFile <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">copyFrom</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">copyFrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFile <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mom <span class=\"token operator\">!=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tMode new_mode <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>new_mode <span class=\"token operator\">!=</span> Reference <span class=\"token operator\">&amp;&amp;</span> new_mode <span class=\"token operator\">!=</span> ReadOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tnew_mode <span class=\"token operator\">=</span> ReadOnly<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofFile\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"copyFrom(): copying a writable file, opening new copy as read only\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">open</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>myFile<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> new_mode<span class=\"token punctuation\">,</span> mom<span class=\"token punctuation\">.</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">openStream</span><span class=\"token punctuation\">(</span>Mode _mode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> _binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tmode <span class=\"token operator\">=</span> _mode<span class=\"token punctuation\">;</span>\n\tbinary <span class=\"token operator\">=</span> _binary<span class=\"token punctuation\">;</span>\n\tios_base<span class=\"token operator\">::</span>openmode binary_mode <span class=\"token operator\">=</span> binary <span class=\"token operator\">?</span> ios<span class=\"token operator\">::</span>binary <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>ios_base<span class=\"token operator\">::</span>openmode<span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>_mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> WriteOnly<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> ReadWrite<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> Append<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">ofDirectory</span><span class=\"token punctuation\">(</span>ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getEnclosingDirectory</span><span class=\"token punctuation\">(</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tofFilePath<span class=\"token operator\">::</span><span class=\"token function\">createEnclosingDirectory</span><span class=\"token punctuation\">(</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> Reference<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> ReadOnly<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>_mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> Reference<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">case</span> ReadOnly<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tfstream<span class=\"token operator\">::</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ios<span class=\"token operator\">::</span>in <span class=\"token operator\">|</span> binary_mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">case</span> WriteOnly<span class=\"token operator\">:</span>\n\t\t\tfstream<span class=\"token operator\">::</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ios<span class=\"token operator\">::</span>out <span class=\"token operator\">|</span> binary_mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">case</span> ReadWrite<span class=\"token operator\">:</span>\n\t\t\tfstream<span class=\"token operator\">::</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ios_base<span class=\"token operator\">::</span>in <span class=\"token operator\">|</span> ios_base<span class=\"token operator\">::</span>out <span class=\"token operator\">|</span> binary_mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">case</span> Append<span class=\"token operator\">:</span>\n\t\t\tfstream<span class=\"token operator\">::</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ios<span class=\"token operator\">::</span>out <span class=\"token operator\">|</span> ios<span class=\"token operator\">::</span>app <span class=\"token operator\">|</span> binary_mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> fstream<span class=\"token operator\">::</span><span class=\"token function\">good</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> _path<span class=\"token punctuation\">,</span> Mode _mode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmyFile <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofToDataPath</span><span class=\"token punctuation\">(</span>_path<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">openStream</span><span class=\"token punctuation\">(</span>_mode<span class=\"token punctuation\">,</span> binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">openFromCWD</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> _path<span class=\"token punctuation\">,</span> Mode _mode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmyFile <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span>_path<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">openStream</span><span class=\"token punctuation\">(</span>_mode<span class=\"token punctuation\">,</span> binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">changeMode</span><span class=\"token punctuation\">(</span>Mode _mode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_mode <span class=\"token operator\">!=</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tstring _path <span class=\"token operator\">=</span> <span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmyFile <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span>_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">openStream</span><span class=\"token punctuation\">(</span>_mode<span class=\"token punctuation\">,</span> binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">isWriteMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> mode <span class=\"token operator\">!=</span> ReadOnly<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tmyFile <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mode<span class=\"token operator\">!=</span>Reference<span class=\"token punctuation\">)</span> fstream<span class=\"token operator\">::</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">bool</span> success <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">auto</span> oldmode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>mode<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> oldpath <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsuccess <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>WriteOnly<span class=\"token punctuation\">,</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> oldpath<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">open</span><span class=\"token punctuation\">(</span>oldpath<span class=\"token punctuation\">,</span>oldmode<span class=\"token punctuation\">,</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">return</span> success<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nofBuffer ofFile<span class=\"token operator\">::</span><span class=\"token function\">readToBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofBuffer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">writeFromBuffer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofBuffer <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isWriteMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofFile\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"writeFromBuffer(): trying to write to read only file \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> myFile<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">writeTo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nfilebuf <span class=\"token operator\">*</span>ofFile<span class=\"token operator\">::</span><span class=\"token function\">getFileBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">rdbuf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofFile<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> myFile<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofFile<span class=\"token operator\">::</span><span class=\"token function\">getExtension</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> dotext <span class=\"token operator\">=</span> myFile<span class=\"token punctuation\">.</span><span class=\"token function\">extension</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dotext<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> dotext<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>dotext<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>dotext<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> dotext<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofFile<span class=\"token operator\">::</span><span class=\"token function\">getFileName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> myFile<span class=\"token punctuation\">.</span><span class=\"token function\">filename</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofFile<span class=\"token operator\">::</span><span class=\"token function\">getBaseName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> myFile<span class=\"token punctuation\">.</span><span class=\"token function\">stem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofFile<span class=\"token operator\">::</span><span class=\"token function\">getEnclosingDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getEnclosingDirectory</span><span class=\"token punctuation\">(</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofFile<span class=\"token operator\">::</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">canRead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> perm <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">permissions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\tDWORD attr <span class=\"token operator\">=</span> <span class=\"token function\">GetFileAttributes</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">.</span><span class=\"token function\">native</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>attr <span class=\"token operator\">==</span> INVALID_FILE_ATTRIBUTES<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token keyword\">struct</span> stat info<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">stat</span><span class=\"token punctuation\">(</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// Error check omitted</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> OF_USING_STD_FS</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">geteuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> info<span class=\"token punctuation\">.</span>st_uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>perm <span class=\"token operator\">&amp;</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>owner_read<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>none<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getegid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> info<span class=\"token punctuation\">.</span>st_gid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>perm <span class=\"token operator\">&amp;</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>group_read<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>none<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>perm <span class=\"token operator\">&amp;</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>others_read<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>none<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">geteuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> info<span class=\"token punctuation\">.</span>st_uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> perm <span class=\"token operator\">&amp;</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>owner_read<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getegid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> info<span class=\"token punctuation\">.</span>st_gid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> perm <span class=\"token operator\">&amp;</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>group_read<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> perm <span class=\"token operator\">&amp;</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>others_read<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">canWrite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> perm <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">permissions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\tDWORD attr <span class=\"token operator\">=</span> <span class=\"token function\">GetFileAttributes</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">.</span><span class=\"token function\">native</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>attr <span class=\"token operator\">==</span> INVALID_FILE_ATTRIBUTES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>attr <span class=\"token operator\">&amp;</span> FILE_ATTRIBUTE_READONLY<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token keyword\">struct</span> stat info<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">stat</span><span class=\"token punctuation\">(</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// Error check omitted</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> OF_USING_STD_FS</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">geteuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> info<span class=\"token punctuation\">.</span>st_uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>perm <span class=\"token operator\">&amp;</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>owner_write<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>none<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getegid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> info<span class=\"token punctuation\">.</span>st_gid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>perm <span class=\"token operator\">&amp;</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>group_write<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>none<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>perm <span class=\"token operator\">&amp;</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>others_write<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>none<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">geteuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> info<span class=\"token punctuation\">.</span>st_uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> perm <span class=\"token operator\">&amp;</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>owner_write<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getegid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> info<span class=\"token punctuation\">.</span>st_gid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> perm <span class=\"token operator\">&amp;</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>group_write<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> perm <span class=\"token operator\">&amp;</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>others_write<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">canExecute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> perm <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">permissions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getExtension</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"exe\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token keyword\">struct</span> stat info<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">stat</span><span class=\"token punctuation\">(</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// Error check omitted</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> OF_USING_STD_FS</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">geteuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> info<span class=\"token punctuation\">.</span>st_uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>perm <span class=\"token operator\">&amp;</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>owner_exec<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>none<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getegid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> info<span class=\"token punctuation\">.</span>st_gid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>perm <span class=\"token operator\">&amp;</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>group_exec<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>none<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>perm <span class=\"token operator\">&amp;</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>others_exec<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>none<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">geteuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> info<span class=\"token punctuation\">.</span>st_uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> perm <span class=\"token operator\">&amp;</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>owner_exe<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getegid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> info<span class=\"token punctuation\">.</span>st_gid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> perm <span class=\"token operator\">&amp;</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>group_exe<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> perm <span class=\"token operator\">&amp;</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>others_exe<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">is_regular_file</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">isLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">is_symlink</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">is_directory</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">isDevice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> OF_USING_STD_FS</span>\n\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">is_block_file</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>block_file<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">isHidden</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token keyword\">return</span> myFile<span class=\"token punctuation\">.</span><span class=\"token function\">filename</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">&amp;&amp;</span> myFile<span class=\"token punctuation\">.</span><span class=\"token function\">filename</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"..\"</span> <span class=\"token operator\">&amp;&amp;</span> myFile<span class=\"token punctuation\">.</span><span class=\"token function\">filename</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">setWriteable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">permissions</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">,</span>std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>owner_write <span class=\"token operator\">|</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>add_perms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">permissions</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">,</span>std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>owner_write <span class=\"token operator\">|</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>remove_perms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>exception <span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Couldn't set write permission on \"</span> <span class=\"token operator\">&lt;&lt;</span> myFile <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// deprecated</span>\n<span class=\"token keyword\">void</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">setReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setWriteable</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">setReadable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">permissions</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">,</span>std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>owner_read <span class=\"token operator\">|</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>add_perms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">permissions</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">,</span>std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>owner_read <span class=\"token operator\">|</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>remove_perms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>exception <span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Couldn't set read permission on \"</span> <span class=\"token operator\">&lt;&lt;</span> myFile <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">setExecutable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> OF_USING_STD_FS</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">permissions</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>owner_exec <span class=\"token operator\">|</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>add_perms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">permissions</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>owner_exec <span class=\"token operator\">|</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>remove_perms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">permissions</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>owner_exe <span class=\"token operator\">|</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>add_perms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">permissions</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>owner_exe <span class=\"token operator\">|</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>perms<span class=\"token operator\">::</span>remove_perms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>exception <span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Couldn't set executable permission on \"</span> <span class=\"token operator\">&lt;&lt;</span> myFile <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">copyTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> _path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> overwrite<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> path <span class=\"token operator\">=</span> _path<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofFile\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"copyTo(): destination path \"</span> <span class=\"token operator\">&lt;&lt;</span> _path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is empty\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tofDirectory tmp<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//don't want to add ofToDataPath to myFile path as it was already done in ofFile::open</span>\n\t\ttmp<span class=\"token punctuation\">.</span><span class=\"token function\">openFromCWD</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">.</span><span class=\"token function\">copyTo</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span>bRelativeToData<span class=\"token punctuation\">,</span>overwrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofFile\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"copyTo(): source file \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" does not exist\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//bRelativeToData is handled here for the destination path - so we pass false to static functions below</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bRelativeToData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tpath <span class=\"token operator\">=</span> <span class=\"token function\">ofToDataPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ofFile<span class=\"token operator\">::</span><span class=\"token function\">doesFileExist</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tofFile tmp<span class=\"token punctuation\">;</span>\n\t\t\ttmp<span class=\"token punctuation\">.</span><span class=\"token function\">openFromCWD</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">.</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tpath <span class=\"token operator\">=</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span><span class=\"token function\">getFileName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ofFile<span class=\"token operator\">::</span><span class=\"token function\">doesFileExist</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>overwrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tofFile<span class=\"token operator\">::</span><span class=\"token function\">removeFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofFile\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"copyTo(): destination file \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\" already exists, set bool overwrite to true if you want to overwrite it\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\tofDirectory destDir<span class=\"token punctuation\">;</span>\n\t\tdestDir<span class=\"token punctuation\">.</span><span class=\"token function\">openFromCWD</span><span class=\"token punctuation\">(</span>ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getEnclosingDirectory</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>destDir<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tofFilePath<span class=\"token operator\">::</span><span class=\"token function\">createEnclosingDirectory</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tstd<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">copy_file</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>exception <span class=\"token operator\">&amp;</span> except<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofFile\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span>  <span class=\"token string\">\"copyTo(): unable to copy \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\":\"</span> <span class=\"token operator\">&lt;&lt;</span> except<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> _path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> overwrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> path <span class=\"token operator\">=</span> _path<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofFile\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"moveTo(): destination path is empty\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofFile\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"moveTo(): source file does not exist\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bRelativeToData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tpath <span class=\"token operator\">=</span> <span class=\"token function\">ofToDataPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ofFile<span class=\"token operator\">::</span><span class=\"token function\">doesFileExist</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tofFile tmp<span class=\"token punctuation\">;</span>\n\t\t\ttmp<span class=\"token punctuation\">.</span><span class=\"token function\">openFromCWD</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">.</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tpath <span class=\"token operator\">=</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span><span class=\"token function\">getFileName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ofFile<span class=\"token operator\">::</span><span class=\"token function\">doesFileExist</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>overwrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tofFile<span class=\"token operator\">::</span><span class=\"token function\">removeFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofFile\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"copyTo(): destination file \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\" already exists, set bool overwrite to true if you want to overwrite it\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">auto</span> mode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>mode<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mode <span class=\"token operator\">!=</span> ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">changeMode</span><span class=\"token punctuation\">(</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">,</span> binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tofDirectory destDir<span class=\"token punctuation\">;</span>\n\t\tdestDir<span class=\"token punctuation\">.</span><span class=\"token function\">openFromCWD</span><span class=\"token punctuation\">(</span>ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getEnclosingDirectory</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>destDir<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tofFilePath<span class=\"token operator\">::</span><span class=\"token function\">createEnclosingDirectory</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tstd<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">rename</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmyFile <span class=\"token operator\">=</span> path<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mode <span class=\"token operator\">!=</span> ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">changeMode</span><span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">,</span> binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>exception <span class=\"token operator\">&amp;</span> except<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofFile\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"moveTo(): unable to move \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\":\"</span> <span class=\"token operator\">&lt;&lt;</span> except<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">renameTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> overwrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span>bRelativeToData<span class=\"token punctuation\">,</span>overwrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> recursive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofFile\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"remove(): file path is empty\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofFile\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"remove(): file does not exist\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mode<span class=\"token operator\">!=</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>Reference<span class=\"token punctuation\">,</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>recursive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">remove_all</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>exception <span class=\"token operator\">&amp;</span> except<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofFile\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"remove(): unable to remove \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> myFile <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\": \"</span> <span class=\"token operator\">&lt;&lt;</span> except<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nuint64_t ofFile<span class=\"token operator\">::</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">file_size</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>exception <span class=\"token operator\">&amp;</span> except<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofFile\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getSize(): unable to get size of \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> myFile <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\": \"</span> <span class=\"token operator\">&lt;&lt;</span> except<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFile <span class=\"token operator\">&amp;</span> file<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFile <span class=\"token operator\">&amp;</span> file<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFile <span class=\"token operator\">&amp;</span> file<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFile <span class=\"token operator\">&amp;</span> file<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFile <span class=\"token operator\">&amp;</span> file<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> file<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">>=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFile <span class=\"token operator\">&amp;</span> file<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// ofFile Static Methods</span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">copyFromTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> pathSrc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> pathDst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">bool</span> overwrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tofFile tmp<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> bRelativeToData <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\ttmp<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>pathSrc<span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\ttmp<span class=\"token punctuation\">.</span><span class=\"token function\">openFromCWD</span><span class=\"token punctuation\">(</span>pathSrc<span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">.</span><span class=\"token function\">copyTo</span><span class=\"token punctuation\">(</span>pathDst<span class=\"token punctuation\">,</span>bRelativeToData<span class=\"token punctuation\">,</span>overwrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//be careful with slashes here - appending a slash when moving a folder will causes mad headaches</span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">moveFromTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> pathSrc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> pathDst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> overwrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tofFile tmp<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> bRelativeToData <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\ttmp<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>pathSrc<span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\ttmp<span class=\"token punctuation\">.</span><span class=\"token function\">openFromCWD</span><span class=\"token punctuation\">(</span>pathSrc<span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span>pathDst<span class=\"token punctuation\">,</span> bRelativeToData<span class=\"token punctuation\">,</span> overwrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">doesFileExist</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> _fPath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tofFile tmp<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bRelativeToData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\ttmp<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>_fPath<span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\ttmp<span class=\"token punctuation\">.</span><span class=\"token function\">openFromCWD</span><span class=\"token punctuation\">(</span>_fPath<span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>_fPath<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> tmp<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFile<span class=\"token operator\">::</span><span class=\"token function\">removeFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> _path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tofFile tmp<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bRelativeToData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\ttmp<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>_path<span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\ttmp<span class=\"token punctuation\">.</span><span class=\"token function\">openFromCWD</span><span class=\"token punctuation\">(</span>_path<span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// -- ofDirectory</span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nofDirectory<span class=\"token operator\">::</span><span class=\"token function\">ofDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tshowHidden <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nofDirectory<span class=\"token operator\">::</span><span class=\"token function\">ofDirectory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tshowHidden <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\toriginalDirectory <span class=\"token operator\">=</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getPathForDirectory</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tfiles<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmyDir <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofToDataPath</span><span class=\"token punctuation\">(</span>originalDirectory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">openFromCWD</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\toriginalDirectory <span class=\"token operator\">=</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getPathForDirectory</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tfiles<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmyDir <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span>originalDirectory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tmyDir <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> recursive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>myDir<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>recursive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tstd<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">create_directories</span><span class=\"token punctuation\">(</span>myDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\tstd<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">create_directory</span><span class=\"token punctuation\">(</span>myDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>exception <span class=\"token operator\">&amp;</span> except<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofDirectory\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"create(): \"</span> <span class=\"token operator\">&lt;&lt;</span> except<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>myDir <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">||</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>myDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> myDir<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">canonical</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">absolute</span><span class=\"token punctuation\">(</span>myDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">absolute</span><span class=\"token punctuation\">(</span>myDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">canRead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofFile</span><span class=\"token punctuation\">(</span>myDir<span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">canRead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">canWrite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofFile</span><span class=\"token punctuation\">(</span>myDir<span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">canWrite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">canExecute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofFile</span><span class=\"token punctuation\">(</span>myDir<span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">canExecute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">isHidden</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofFile</span><span class=\"token punctuation\">(</span>myDir<span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isHidden</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">setWriteable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofFile</span><span class=\"token punctuation\">(</span>myDir<span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setWriteable</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// deprecated</span>\n<span class=\"token keyword\">void</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">setReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setWriteable</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">setReadable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofFile</span><span class=\"token punctuation\">(</span>myDir<span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setReadable</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">setExecutable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofFile</span><span class=\"token punctuation\">(</span>myDir<span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setExecutable</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">setShowHidden</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> showHidden<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>showHidden <span class=\"token operator\">=</span> showHidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">is_directory</span><span class=\"token punctuation\">(</span>myDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">copyTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> _path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> overwrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> path <span class=\"token operator\">=</span> _path<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>myDir<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofDirectory\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"copyTo(): source path is empty\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>myDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofDirectory\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"copyTo(): source directory does not exist\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">is_directory</span><span class=\"token punctuation\">(</span>myDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofDirectory\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"copyTo(): source path is not a directory\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bRelativeToData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tpath <span class=\"token operator\">=</span> <span class=\"token function\">ofToDataPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> bRelativeToData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">doesDirectoryExist</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>overwrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tofDirectory<span class=\"token operator\">::</span><span class=\"token function\">removeDirectory</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofDirectory\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"copyTo(): dest \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\" already exists, set bool overwrite to true to overwrite it\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//our path is bRelativeToData handled from above - so can't open via the constructor approach </span>\n\tofDirectory dir<span class=\"token punctuation\">;</span>\n\tdir<span class=\"token punctuation\">.</span><span class=\"token function\">openFromCWD</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdir<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">// Iterate through the source directory</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>directory_iterator <span class=\"token function\">file</span><span class=\"token punctuation\">(</span>myDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> file <span class=\"token operator\">!=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">directory_iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">auto</span> currentPath <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">absolute</span><span class=\"token punctuation\">(</span>file<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">auto</span> dst <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> currentPath<span class=\"token punctuation\">.</span><span class=\"token function\">filename</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">is_directory</span><span class=\"token punctuation\">(</span>currentPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tofDirectory <span class=\"token function\">current</span><span class=\"token punctuation\">(</span>currentPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// Found directory: Recursion</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">copyTo</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>overwrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\tofFile tmp<span class=\"token punctuation\">;</span>\n\t\t\ttmp<span class=\"token punctuation\">.</span><span class=\"token function\">openFromCWD</span><span class=\"token punctuation\">(</span>file<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\ttmp<span class=\"token punctuation\">.</span><span class=\"token function\">copyTo</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>overwrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> overwrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">copyTo</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span>bRelativeToData<span class=\"token punctuation\">,</span>overwrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">renameTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> overwrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> bRelativeToData<span class=\"token punctuation\">,</span> overwrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> recursive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>myDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>recursive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">remove_all</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">canonical</span><span class=\"token punctuation\">(</span>myDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">canonical</span><span class=\"token punctuation\">(</span>myDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>exception <span class=\"token operator\">&amp;</span> except<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofDirectory\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"remove(): unable to remove file/directory: \"</span> <span class=\"token operator\">&lt;&lt;</span> except<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">allowExt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> extension<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>extension <span class=\"token operator\">==</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofDirectory\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"allowExt(): wildcard extension * is deprecated\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\textensions<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofToLower</span><span class=\"token punctuation\">(</span>extension<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>size_t ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">listDir</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> directory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">open</span><span class=\"token punctuation\">(</span>directory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">listDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>size_t ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">listDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tfiles<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofDirectory\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"listDir(): directory path is empty\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>myDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofDirectory\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"listDir:() source directory does not exist: \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> myDir <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\tstd<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>directory_iterator end_iter<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>myDir<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">is_directory</span><span class=\"token punctuation\">(</span>myDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>directory_iterator <span class=\"token function\">dir_iter</span><span class=\"token punctuation\">(</span>myDir<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> dir_iter <span class=\"token operator\">!=</span> end_iter <span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>dir_iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tfiles<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>dir_iter<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofDirectory\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"listDir:() source directory does not exist: \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> myDir <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>showHidden<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofRemove</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>ofFile <span class=\"token operator\">&amp;</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">isHidden</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>extensions<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">ofContains</span><span class=\"token punctuation\">(</span>extensions<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofRemove</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>ofFile <span class=\"token operator\">&amp;</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>extensions<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> extensions<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofToLower</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getExtension</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> extensions<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>        \n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetLogLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OF_LOG_VERBOSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"listed \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" files in \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> originalDirectory <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">getOriginalDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> originalDirectory<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t position<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> files<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFileName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t position<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> originalDirectory <span class=\"token operator\">+</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nofFile ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">getFile</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t position<span class=\"token punctuation\">,</span> ofFile<span class=\"token operator\">::</span>Mode mode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> binary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\tofFile file <span class=\"token operator\">=</span> files<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tfile<span class=\"token punctuation\">.</span><span class=\"token function\">changeMode</span><span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">,</span> binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> file<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nofFile ofDirectory<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t position<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getFile</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>ofFile<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">getFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>myDir<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const_cast</span><span class=\"token operator\">&lt;</span>ofDirectory<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">listDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> files<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">getShowHidden</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> showHidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">natural</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFile<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofFile<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tstring aname <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getBaseName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bname <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getBaseName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> aint <span class=\"token operator\">=</span> <span class=\"token function\">ofToInt</span><span class=\"token punctuation\">(</span>aname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bint <span class=\"token operator\">=</span> <span class=\"token function\">ofToInt</span><span class=\"token punctuation\">(</span>bname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>aint<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> aname <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>bint<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> bname<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> aint <span class=\"token operator\">&lt;</span> bint<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">byDate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFile<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofFile<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> ta <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">last_write_time</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> tb <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">last_write_time</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> ta <span class=\"token operator\">&lt;</span> tb<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">sortByDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>myDir<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">listDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">ofSort</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">,</span> byDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>myDir<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">listDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">ofSort</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">,</span> natural<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nofDirectory ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">getSorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tofDirectory <span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsorted<span class=\"token punctuation\">.</span><span class=\"token function\">listDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsorted<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> sorted<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>size_t ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> files<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">numFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// ofDirectory Static Methods</span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">removeDirectory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> _path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> deleteIfNotEmpty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> path <span class=\"token operator\">=</span> _path<span class=\"token punctuation\">;</span>\n\n\tofFile dirToRemove<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bRelativeToData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tdirToRemove<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\tdirToRemove<span class=\"token punctuation\">.</span><span class=\"token function\">openFromCWD</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">return</span> dirToRemove<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>deleteIfNotEmpty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">createDirectory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> _dirPath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> recursive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> dirPath <span class=\"token operator\">=</span> _dirPath<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bRelativeToData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tdirPath <span class=\"token operator\">=</span> <span class=\"token function\">ofToDataPath</span><span class=\"token punctuation\">(</span>dirPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">// on OSX,std::filesystem::create_directories seems to return false *if* the path has folders that already exist</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// and true if it doesn't</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// so to avoid unnecessary warnings on OSX, we check if it exists here:</span>\n\t\n\t<span class=\"token keyword\">bool</span> bDoesExistAlready <span class=\"token operator\">=</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">doesDirectoryExist</span><span class=\"token punctuation\">(</span>dirPath<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bDoesExistAlready<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\n\t\t<span class=\"token keyword\">bool</span> success <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>recursive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tsuccess <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">create_directory</span><span class=\"token punctuation\">(</span>dirPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\tsuccess <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">create_directories</span><span class=\"token punctuation\">(</span>dirPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>exception <span class=\"token operator\">&amp;</span> except<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofDirectory\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createDirectory(): couldn't create directory \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> dirPath <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\": \"</span> <span class=\"token operator\">&lt;&lt;</span> except<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> success<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">// no need to create it - it already exists.</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">doesDirectoryExist</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> _dirPath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> dirPath <span class=\"token operator\">=</span> _dirPath<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bRelativeToData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tdirPath <span class=\"token operator\">=</span> <span class=\"token function\">ofToDataPath</span><span class=\"token punctuation\">(</span>dirPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>dirPath<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">is_directory</span><span class=\"token punctuation\">(</span>dirPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>exception <span class=\"token operator\">&amp;</span> except<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofDirectory\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"doesDirectoryExist(): couldn't find directory \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> dirPath <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\": \"</span> <span class=\"token operator\">&lt;&lt;</span> except<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">isDirectoryEmpty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> _dirPath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> dirPath <span class=\"token operator\">=</span> _dirPath<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bRelativeToData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tdirPath <span class=\"token operator\">=</span> <span class=\"token function\">ofToDataPath</span><span class=\"token punctuation\">(</span>dirPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dirPath<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>dirPath<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">is_directory</span><span class=\"token punctuation\">(</span>dirPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">directory_iterator</span><span class=\"token punctuation\">(</span>dirPath<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">directory_iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofDirectory <span class=\"token operator\">&amp;</span> dir<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> dir<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofDirectory <span class=\"token operator\">&amp;</span> dir<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> dir<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofDirectory <span class=\"token operator\">&amp;</span> dir<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> dir<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofDirectory <span class=\"token operator\">&amp;</span> dir<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> dir<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofDirectory <span class=\"token operator\">&amp;</span> dir<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> dir<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">>=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofDirectory <span class=\"token operator\">&amp;</span> dir<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> dir<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nvector<span class=\"token operator\">&lt;</span>ofFile<span class=\"token operator\">></span><span class=\"token operator\">::</span>const_iterator ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nvector<span class=\"token operator\">&lt;</span>ofFile<span class=\"token operator\">></span><span class=\"token operator\">::</span>const_iterator ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> files<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nvector<span class=\"token operator\">&lt;</span>ofFile<span class=\"token operator\">></span><span class=\"token operator\">::</span>const_reverse_iterator ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nvector<span class=\"token operator\">&lt;</span>ofFile<span class=\"token operator\">></span><span class=\"token operator\">::</span>const_reverse_iterator ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> files<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// -- ofFilePath</span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">addLeadingSlash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> _path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">auto</span> path <span class=\"token operator\">=</span> _path<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> sep <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">make_preferred</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> sep<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tpath <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sep <span class=\"token operator\">/</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> path<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">addTrailingSlash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> _path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">auto</span> path <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span>_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">make_preferred</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> sep <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">make_preferred</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> sep<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tpath <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>path <span class=\"token operator\">/</span> sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> path<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getFileExt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofFile</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getExtension</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">removeExt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token function\">getEnclosingDirectory</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofFile</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBaseName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getPathForDirectory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// if a trailing slash is missing from a path, this will clean it up</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// if it's a windows-style \"\\\" path it will add a \"\\\"</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// if it's a unix-style \"/\" path it will add a \"/\"</span>\n\t<span class=\"token keyword\">auto</span> sep <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">make_preferred</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>sep<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>path <span class=\"token operator\">/</span> sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">removeTrailingSlash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> _path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">auto</span> path <span class=\"token operator\">=</span> _path<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">||</span> path<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'\\\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tpath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> path<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getFileName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> _filePath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span>string filePath <span class=\"token operator\">=</span> _filePath<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bRelativeToData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        filePath <span class=\"token operator\">=</span> <span class=\"token function\">ofToDataPath</span><span class=\"token punctuation\">(</span>_filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filename</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getBaseName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofFile</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBaseName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getEnclosingDirectory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> _filePath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span>string filePath <span class=\"token operator\">=</span> _filePath<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bRelativeToData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tfilePath <span class=\"token operator\">=</span> <span class=\"token function\">ofToDataPath</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">addTrailingSlash</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parent_path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">createEnclosingDirectory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> filePath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRecursive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> ofDirectory<span class=\"token operator\">::</span><span class=\"token function\">createDirectory</span><span class=\"token punctuation\">(</span>ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getEnclosingDirectory</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span>bRelativeToData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bRelativeToData<span class=\"token punctuation\">,</span> bRecursive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bRelativeToData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofToDataPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">canonical</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">absolute</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">absolute</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">isAbsolute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">is_absolute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getCurrentWorkingDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">current_path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span>path1<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span>path2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getCurrentExePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TARGET_LINUX) || defined(TARGET_ANDROID)</span>\n\t\t<span class=\"token keyword\">char</span> buff<span class=\"token punctuation\">[</span>FILENAME_MAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tssize_t size <span class=\"token operator\">=</span> <span class=\"token function\">readlink</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/proc/self/exe\"</span><span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buff<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofFilePath\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getCurrentExePath(): readlink failed with error \"</span> <span class=\"token operator\">&lt;&lt;</span> errno<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\tbuff<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> buff<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">elif</span> defined(TARGET_OSX)</span>\n\t\t<span class=\"token keyword\">char</span> path<span class=\"token punctuation\">[</span>FILENAME_MAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tuint32_t size <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">_NSGetExecutablePath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>size<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofFilePath\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getCurrentExePath(): path buffer too small, need size \"</span> <span class=\"token operator\">&lt;&lt;</span>  size<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> path<span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">elif</span> defined(TARGET_WIN32)</span>\n\t\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> <span class=\"token function\">executablePath</span><span class=\"token punctuation\">(</span>MAX_PATH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tDWORD result <span class=\"token operator\">=</span> <span class=\"token operator\">::</span><span class=\"token function\">GetModuleFileNameA</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>executablePath<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span>DWORD<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>executablePath<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofFilePath\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getCurrentExePath(): couldn't get path, GetModuleFileNameA failed\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>executablePath<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> executablePath<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getCurrentExeDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getEnclosingDirectory</span><span class=\"token punctuation\">(</span><span class=\"token function\">getCurrentExePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------------------------------------------------</span>\nstring ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getUserHomeDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// getenv will return any Environent Variable on Windows</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// USERPROFILE is the key on Windows 7 but it might be HOME</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// in other flavours of windows...need to check XP and NT...</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofGetEnv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"USERPROFILE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">elif</span> !defined(TARGET_EMSCRIPTEN)</span>\n\t\t<span class=\"token keyword\">struct</span> passwd <span class=\"token operator\">*</span> pw <span class=\"token operator\">=</span> <span class=\"token function\">getpwuid</span><span class=\"token punctuation\">(</span><span class=\"token function\">getuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> pw<span class=\"token operator\">-</span><span class=\"token operator\">></span>pw_dir<span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\nstring ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">makeRelative</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> pathFrom <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">absolute</span><span class=\"token punctuation\">(</span> from <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> pathTo <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">absolute</span><span class=\"token punctuation\">(</span> to <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path ret<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">::</span>const_iterator <span class=\"token function\">itrFrom</span><span class=\"token punctuation\">(</span> pathFrom<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">itrTo</span><span class=\"token punctuation\">(</span> pathTo<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// Find common base</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">::</span>const_iterator <span class=\"token function\">toEnd</span><span class=\"token punctuation\">(</span> pathTo<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">fromEnd</span><span class=\"token punctuation\">(</span> pathFrom<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> itrFrom <span class=\"token operator\">!=</span> fromEnd <span class=\"token operator\">&amp;&amp;</span> itrTo <span class=\"token operator\">!=</span> toEnd <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>itrFrom <span class=\"token operator\">==</span> <span class=\"token operator\">*</span>itrTo<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>itrFrom<span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>itrTo <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// Navigate backwards in directory to reach previously found base</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">::</span>const_iterator <span class=\"token function\">fromEnd</span><span class=\"token punctuation\">(</span> pathFrom<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> itrFrom <span class=\"token operator\">!=</span> fromEnd<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>itrFrom <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>itrFrom<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\".\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tret <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token string\">\"..\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// Now navigate down the directory branch</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">;</span> itrTo <span class=\"token operator\">!=</span> pathTo<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>itrTo <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> itrTo<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tret <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token operator\">*</span>itrTo<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n","type":"source","static":true}}],"fetch":[]}