{"data":[{"page":{"entry":{"name":"ofUtils.cpp","filename":"ofUtils.cpp","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/utils/ofUtils.cpp","path":"/openframeworks/utils/ofUtils_cpp","route":"/openframeworks/utils/ofUtils.cpp","dir":"../libs/openFrameworks/utils","ext":"cpp","type":"source","id":350,"parent":329,"breadcrumbs":[329,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofUtils.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofImage.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofFileUtils.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofLog.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofAppBaseWindow.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofMainLoop.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofAppRunner.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofEvents.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofGLUtils.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofMath.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;chrono></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;numeric></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;locale></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdarg></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"uriparser/Uri.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32\t </span><span class=\"token comment\" spellcheck=\"true\">// For ofLaunchBrowser.</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;shellapi.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n    <span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> _MSC_VER</span>\n        <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span> </span><span class=\"token comment\" spellcheck=\"true\">// this if for MINGW / _getcwd</span>\n\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/param.h></span> </span><span class=\"token comment\" spellcheck=\"true\">// for MAXPATHLEN</span>\n    <span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TARGET_OF_IOS) || defined(TARGET_OSX ) || defined(TARGET_LINUX) || defined(TARGET_EMSCRIPTEN)</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/time.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_OSX</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OF_IOS</span>\n\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mach-o/dyld.h></span></span>\n\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/param.h></span> </span><span class=\"token comment\" spellcheck=\"true\">// for MAXPATHLEN</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mach/clock.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mach/mach.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n    <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mmsystem.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> _MSC_VER</span>\n\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;direct.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_OF_IOS</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxiOSExtras.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_ANDROID</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxAndroidUtils.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> MAXPATHLEN</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> MAXPATHLEN 1024</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">bool</span> enableDataPath <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n    string <span class=\"token function\">defaultDataPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined TARGET_OSX</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">canonical</span><span class=\"token punctuation\">(</span>ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getCurrentExeDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">\"../../../data/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getCurrentExeDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">\"../../../data/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\">#<span class=\"token directive keyword\">elif</span> defined TARGET_ANDROID</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sdcard/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">canonical</span><span class=\"token punctuation\">(</span>ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getCurrentExeDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">\"data/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">make_preferred</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getCurrentExeDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">\"data/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n    std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> <span class=\"token function\">defaultWorkingDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">*</span> defaultWorkingDirectory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span> defaultWorkingDirectory<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n    std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> <span class=\"token function\">dataPathRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">*</span> dataPathRoot <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token function\">defaultDataPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>dataPathRoot<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">namespace</span> of<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">namespace</span> priv<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">initutils</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">defaultWorkingDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">absolute</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">current_path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofResetElapsedTimeCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofSeedRandom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">endutils</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token comment\" spellcheck=\"true\">//#ifdef TARGET_OSX</span>\n<span class=\"token comment\" spellcheck=\"true\">//        mach_port_deallocate(mach_task_self(), cs);</span>\n<span class=\"token comment\" spellcheck=\"true\">//#endif</span>\n    <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">Clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_OSX</span>\n\t\t\t<span class=\"token function\">host_get_clock_service</span><span class=\"token punctuation\">(</span><span class=\"token function\">mach_host_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> SYSTEM_CLOCK<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">setTimeModeSystem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tmode <span class=\"token operator\">=</span> ofTime<span class=\"token operator\">::</span>System<span class=\"token punctuation\">;</span>\n\t\t\tloopListener<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">setTimeModeFixedRate</span><span class=\"token punctuation\">(</span>uint64_t stepNanos<span class=\"token punctuation\">,</span> ofMainLoop <span class=\"token operator\">&amp;</span> mainLoop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tfixedRateTime <span class=\"token operator\">=</span> <span class=\"token function\">getMonotonicTimeForMode</span><span class=\"token punctuation\">(</span>ofTime<span class=\"token operator\">::</span>System<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmode <span class=\"token operator\">=</span> ofTime<span class=\"token operator\">::</span>FixedRate<span class=\"token punctuation\">;</span>\n\t\t\tfixedRateStep <span class=\"token operator\">=</span> stepNanos<span class=\"token punctuation\">;</span>\n\t\t\tloopListener <span class=\"token operator\">=</span> mainLoop<span class=\"token punctuation\">.</span>loopEvent<span class=\"token punctuation\">.</span><span class=\"token function\">newListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>\n\t\t\t\tfixedRateTime<span class=\"token punctuation\">.</span>nanoseconds <span class=\"token operator\">+</span><span class=\"token operator\">=</span> fixedRateStep<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>fixedRateTime<span class=\"token punctuation\">.</span>nanoseconds<span class=\"token operator\">></span><span class=\"token number\">1000000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\tfixedRateTime<span class=\"token punctuation\">.</span>nanoseconds <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token number\">1000000000</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tfixedRateTime<span class=\"token punctuation\">.</span>seconds <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\n\t\tofTime <span class=\"token function\">getCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">getMonotonicTimeForMode</span><span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\n\t\tstd<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>nanoseconds <span class=\"token function\">getElapsedTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">getCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">resetElapsedTimeCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstartTime <span class=\"token operator\">=</span> <span class=\"token function\">getMonotonicTimeForMode</span><span class=\"token punctuation\">(</span>ofTime<span class=\"token operator\">::</span>System<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\n\t\tofTime <span class=\"token function\">getMonotonicTimeForMode</span><span class=\"token punctuation\">(</span>ofTime<span class=\"token operator\">::</span>Mode mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tofTime t<span class=\"token punctuation\">;</span>\n\t\t\tt<span class=\"token punctuation\">.</span>mode <span class=\"token operator\">=</span> mode<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mode <span class=\"token operator\">==</span> ofTime<span class=\"token operator\">::</span>System<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> (defined(TARGET_LINUX) &amp;&amp; !defined(TARGET_RASPBERRY_PI_LEGACY)) || defined(TARGET_EMSCRIPTEN)</span>\n\t\t\t\t<span class=\"token keyword\">struct</span> timespec now<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">clock_gettime</span><span class=\"token punctuation\">(</span>CLOCK_MONOTONIC<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tt<span class=\"token punctuation\">.</span>seconds <span class=\"token operator\">=</span> now<span class=\"token punctuation\">.</span>tv_sec<span class=\"token punctuation\">;</span>\n\t\t\t\tt<span class=\"token punctuation\">.</span>nanoseconds <span class=\"token operator\">=</span> now<span class=\"token punctuation\">.</span>tv_nsec<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">elif</span> defined(TARGET_OSX)</span>\n\t\t\t\tmach_timespec_t now<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">clock_get_time</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tt<span class=\"token punctuation\">.</span>seconds <span class=\"token operator\">=</span> now<span class=\"token punctuation\">.</span>tv_sec<span class=\"token punctuation\">;</span>\n\t\t\t\tt<span class=\"token punctuation\">.</span>nanoseconds <span class=\"token operator\">=</span> now<span class=\"token punctuation\">.</span>tv_nsec<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">elif</span> defined( TARGET_WIN32 )</span>\n\t\t\t\tLARGE_INTEGER freq<span class=\"token punctuation\">;</span>\n\t\t\t\tLARGE_INTEGER counter<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">QueryPerformanceFrequency</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>freq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">QueryPerformanceCounter</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tt<span class=\"token punctuation\">.</span>seconds <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">.</span>QuadPart<span class=\"token operator\">/</span>freq<span class=\"token punctuation\">.</span>QuadPart<span class=\"token punctuation\">;</span>\n\t\t\t\tt<span class=\"token punctuation\">.</span>nanoseconds <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">%</span> freq<span class=\"token punctuation\">.</span>QuadPart<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">1000000000</span><span class=\"token operator\">/</span>freq<span class=\"token punctuation\">.</span>QuadPart<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t\t\t<span class=\"token keyword\">struct</span> timeval now<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">gettimeofday</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>now<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tt<span class=\"token punctuation\">.</span>seconds <span class=\"token operator\">=</span> now<span class=\"token punctuation\">.</span>tv_sec<span class=\"token punctuation\">;</span>\n\t\t\t\tt<span class=\"token punctuation\">.</span>nanoseconds <span class=\"token operator\">=</span> now<span class=\"token punctuation\">.</span>tv_usec <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\tt <span class=\"token operator\">=</span> fixedRateTime<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tuint64_t fixedRateStep <span class=\"token operator\">=</span> <span class=\"token number\">1666667</span><span class=\"token punctuation\">;</span>\n\t\tofTime fixedRateTime<span class=\"token punctuation\">;</span>\n\t\tofTime startTime<span class=\"token punctuation\">;</span>\n\t\tofTime<span class=\"token operator\">::</span>Mode mode <span class=\"token operator\">=</span> ofTime<span class=\"token operator\">::</span>System<span class=\"token punctuation\">;</span>\n\t\tofEventListener loopListener<span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_OSX</span>\n\t\tclock_serv_t cs<span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\tClock <span class=\"token operator\">&amp;</span> <span class=\"token function\">getClock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">static</span> Clock <span class=\"token operator\">*</span> clock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Clock<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>clock<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\nuint64_t ofTime<span class=\"token operator\">::</span><span class=\"token function\">getAsMilliseconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> seconds <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>seconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> nanoseconds <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span><span class=\"token function\">nanoseconds</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>nanoseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>duration_cast<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>milliseconds<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>seconds<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n\t\t\tstd<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>duration_cast<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>milliseconds<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>nanoseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\nuint64_t ofTime<span class=\"token operator\">::</span><span class=\"token function\">getAsMicroseconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> seconds <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>seconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> nanoseconds <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span><span class=\"token function\">nanoseconds</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>nanoseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>duration_cast<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>microseconds<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>seconds<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n\t\t\tstd<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>duration_cast<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>microseconds<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>nanoseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\nuint64_t ofTime<span class=\"token operator\">::</span><span class=\"token function\">getAsNanoseconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> seconds <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>seconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> nanoseconds <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span><span class=\"token function\">nanoseconds</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>nanoseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>duration_cast<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>nanoseconds<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>seconds<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> nanoseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\n<span class=\"token keyword\">double</span> ofTime<span class=\"token operator\">::</span><span class=\"token function\">getAsSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> seconds <span class=\"token operator\">+</span> nanoseconds <span class=\"token operator\">/</span> <span class=\"token number\">1000000000</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_WIN32</span>\ntimespec ofTime<span class=\"token operator\">::</span><span class=\"token function\">getAsTimespec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\ttimespec ret<span class=\"token punctuation\">;</span>\n\tret<span class=\"token punctuation\">.</span>tv_sec <span class=\"token operator\">=</span> seconds<span class=\"token punctuation\">;</span>\n\tret<span class=\"token punctuation\">.</span>tv_nsec <span class=\"token operator\">=</span> nanoseconds<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\nstd<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>time_point<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>nanoseconds<span class=\"token operator\">></span> ofTime<span class=\"token operator\">::</span><span class=\"token function\">getAsTimePoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> seconds <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>seconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> nanoseconds <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span><span class=\"token function\">nanoseconds</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>nanoseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>time_point<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>nanoseconds<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n\t\t\t\tstd<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>duration_cast<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>nanoseconds<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>seconds<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> nanoseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\nstd<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>nanoseconds ofTime<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofTime<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> seconds <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>seconds<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>seconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> nanoseconds <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span><span class=\"token function\">nanoseconds</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>nanoseconds<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span><span class=\"token function\">nanoseconds</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>nanoseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>duration_cast<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>nanoseconds<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>seconds<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> nanoseconds<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofTime<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofTime <span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> seconds <span class=\"token operator\">&lt;</span> other<span class=\"token punctuation\">.</span>seconds <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>seconds <span class=\"token operator\">==</span> other<span class=\"token punctuation\">.</span>seconds <span class=\"token operator\">&amp;&amp;</span> nanoseconds <span class=\"token operator\">&lt;</span> other<span class=\"token punctuation\">.</span>nanoseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofTime<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofTime <span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> seconds <span class=\"token operator\">></span> other<span class=\"token punctuation\">.</span>seconds <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>seconds <span class=\"token operator\">==</span> other<span class=\"token punctuation\">.</span>seconds <span class=\"token operator\">&amp;&amp;</span> nanoseconds <span class=\"token operator\">></span> other<span class=\"token punctuation\">.</span>nanoseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofTime<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofTime <span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> seconds <span class=\"token operator\">&lt;=</span> other<span class=\"token punctuation\">.</span>seconds <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>seconds <span class=\"token operator\">==</span> other<span class=\"token punctuation\">.</span>seconds <span class=\"token operator\">&amp;&amp;</span> nanoseconds <span class=\"token operator\">&lt;=</span> other<span class=\"token punctuation\">.</span>nanoseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofTime<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">>=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofTime <span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> seconds <span class=\"token operator\">>=</span> other<span class=\"token punctuation\">.</span>seconds <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>seconds <span class=\"token operator\">==</span> other<span class=\"token punctuation\">.</span>seconds <span class=\"token operator\">&amp;&amp;</span> nanoseconds <span class=\"token operator\">>=</span> other<span class=\"token punctuation\">.</span>nanoseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\nuint64_t <span class=\"token function\">ofGetFixedStepForFps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> fps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1000000000</span> <span class=\"token operator\">/</span> fps<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofSetTimeModeSystem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> mainLoop <span class=\"token operator\">=</span> <span class=\"token function\">ofGetMainLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mainLoop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSetSystemTimeMode\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ofMainLoop is not initialized yet, can't set time mode\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">auto</span> window <span class=\"token operator\">=</span> mainLoop<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getCurrentWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSetSystemTimeMode\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"No window setup yet can't set time mode\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\twindow<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">events</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setTimeModeSystem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tof<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span><span class=\"token function\">getClock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setTimeModeSystem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofSetTimeModeFixedRate</span><span class=\"token punctuation\">(</span>uint64_t stepNanos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> mainLoop <span class=\"token operator\">=</span> <span class=\"token function\">ofGetMainLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mainLoop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSetSystemTimeMode\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ofMainLoop is not initialized yet, can't set time mode\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">auto</span> window <span class=\"token operator\">=</span> mainLoop<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getCurrentWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSetSystemTimeMode\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"No window setup yet can't set time mode\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\twindow<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">events</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setTimeModeFixedRate</span><span class=\"token punctuation\">(</span>stepNanos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tof<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span><span class=\"token function\">getClock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setTimeModeFixedRate</span><span class=\"token punctuation\">(</span>stepNanos<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>mainLoop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofSetTimeModeFiltered</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> alpha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> mainLoop <span class=\"token operator\">=</span> <span class=\"token function\">ofGetMainLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mainLoop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSetSystemTimeMode\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ofMainLoop is not initialized yet, can't set time mode\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">auto</span> window <span class=\"token operator\">=</span> mainLoop<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getCurrentWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSetSystemTimeMode\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"No window setup yet can't set time mode\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\twindow<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">events</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setTimeModeFiltered</span><span class=\"token punctuation\">(</span>alpha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tof<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span><span class=\"token function\">getClock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setTimeModeSystem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\nofTime <span class=\"token function\">ofGetCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span><span class=\"token function\">getClock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\nuint64_t <span class=\"token function\">ofGetElapsedTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>duration_cast<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>milliseconds<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span><span class=\"token function\">getClock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getElapsedTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\nuint64_t <span class=\"token function\">ofGetElapsedTimeMicros</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>duration_cast<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>microseconds<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span><span class=\"token function\">getClock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getElapsedTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofGetElapsedTimef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>duration<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span><span class=\"token function\">getClock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getElapsedTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofResetElapsedTimeCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tof<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span><span class=\"token function\">getClock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">resetElapsedTimeCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\nuint64_t <span class=\"token function\">ofGetSystemTime</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span><span class=\"token function\">getClock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAsMilliseconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\nuint64_t <span class=\"token function\">ofGetSystemTimeMillis</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span><span class=\"token function\">getClock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAsMilliseconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\nuint64_t <span class=\"token function\">ofGetSystemTimeMicros</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span><span class=\"token function\">getClock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAsMicroseconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">ofGetUnixTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofSleepMillis</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> millis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\t\t<span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>millis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">elif</span> defined(TARGET_LINUX)</span>\n\t\ttimespec interval <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>millis<span class=\"token operator\">/</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> millis<span class=\"token operator\">%</span><span class=\"token number\">1000</span><span class=\"token operator\">*</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\ttimespec rem <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">clock_nanosleep</span><span class=\"token punctuation\">(</span>CLOCK_MONOTONIC<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>interval<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>rem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">elif</span> !defined(TARGET_EMSCRIPTEN)</span>\n\t\t<span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span>millis <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//default ofGetTimestampString returns in this format: 2011-01-15-18-29-35-299</span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nstring <span class=\"token function\">ofGetTimestampString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\tstring timeFormat <span class=\"token operator\">=</span> <span class=\"token string\">\"%Y-%m-%d-%H-%M-%S-%i\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofGetTimestampString</span><span class=\"token punctuation\">(</span>timeFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//specify the string format - eg: %Y-%m-%d-%H-%M-%S-%i ( 2011-01-15-18-29-35-299 )</span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nstring <span class=\"token function\">ofGetTimestampString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> timestampFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tstd<span class=\"token operator\">::</span>stringstream str<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> now <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>system_clock<span class=\"token operator\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> t <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>system_clock<span class=\"token operator\">::</span><span class=\"token function\">to_time_t</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>duration<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> now <span class=\"token operator\">-</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>system_clock<span class=\"token operator\">::</span><span class=\"token function\">from_time_t</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ms <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> tm <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>std<span class=\"token operator\">::</span><span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> bufsize <span class=\"token operator\">=</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span>bufsize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// Beware! an invalid timestamp string crashes windows apps.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// so we have to filter out %i (which is not supported by vs)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// earlier.</span>\n\t<span class=\"token keyword\">auto</span> tmpTimestampFormat <span class=\"token operator\">=</span> timestampFormat<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofStringReplace</span><span class=\"token punctuation\">(</span>tmpTimestampFormat<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%i\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strftime</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span>bufsize<span class=\"token punctuation\">,</span> tmpTimestampFormat<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>tm<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tstr <span class=\"token operator\">&lt;&lt;</span> buf<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ofGetSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\ttime_t \tcurr<span class=\"token punctuation\">;</span>\n\ttm \t\tlocal<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>curr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlocal\t<span class=\"token operator\">=</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>curr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> local<span class=\"token punctuation\">.</span>tm_sec<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ofGetMinutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\ttime_t \tcurr<span class=\"token punctuation\">;</span>\n\ttm \t\tlocal<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>curr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlocal\t<span class=\"token operator\">=</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>curr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> local<span class=\"token punctuation\">.</span>tm_min<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ofGetHours</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\ttime_t \tcurr<span class=\"token punctuation\">;</span>\n\ttm \t\tlocal<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>curr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlocal\t<span class=\"token operator\">=</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>curr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> local<span class=\"token punctuation\">.</span>tm_hour<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ofGetYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\ttime_t    curr<span class=\"token punctuation\">;</span>\n\ttm       local<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>curr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlocal   <span class=\"token operator\">=</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>curr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> year <span class=\"token operator\">=</span> local<span class=\"token punctuation\">.</span>tm_year <span class=\"token operator\">+</span> <span class=\"token number\">1900</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> year<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ofGetMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\ttime_t    curr<span class=\"token punctuation\">;</span>\n\ttm       local<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>curr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlocal   <span class=\"token operator\">=</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>curr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> month <span class=\"token operator\">=</span> local<span class=\"token punctuation\">.</span>tm_mon <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> month<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ofGetDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\ttime_t    curr<span class=\"token punctuation\">;</span>\n\ttm       local<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>curr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlocal   <span class=\"token operator\">=</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>curr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> local<span class=\"token punctuation\">.</span>tm_mday<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ofGetWeekday</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\ttime_t    curr<span class=\"token punctuation\">;</span>\n\ttm       local<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>curr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlocal   <span class=\"token operator\">=</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>curr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> local<span class=\"token punctuation\">.</span>tm_wday<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofEnableDataPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tenableDataPath <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofDisableDataPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tenableDataPath <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofRestoreWorkingDirectoryToDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n        std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">current_path</span><span class=\"token punctuation\">(</span><span class=\"token function\">defaultWorkingDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofSetDataPathRoot</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> newRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">dataPathRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> newRoot<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nstring <span class=\"token function\">ofToDataPath</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> makeAbsolute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>makeAbsolute <span class=\"token operator\">&amp;&amp;</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">is_absolute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>enableDataPath<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">bool</span> hasTrailingSlash <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">generic_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// if our Current Working Directory has changed (e.g. file open dialog)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">defaultWorkingDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">current_path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// change our cwd back to where it was on app load</span>\n\t\t<span class=\"token keyword\">bool</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">ofRestoreWorkingDirectoryToDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofUtils\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ofToDataPath: error while trying to change back to default working directory \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">defaultWorkingDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// this could be performed here, or wherever we might think we accidentally change the cwd, e.g. after file dialogs on windows</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span>  <span class=\"token operator\">&amp;</span> dataPath <span class=\"token operator\">=</span> <span class=\"token function\">dataPathRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token function\">inputPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path outputPath<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// if path is already absolute, just return it</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inputPath<span class=\"token punctuation\">.</span><span class=\"token function\">is_absolute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">auto</span> outpath <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">canonical</span><span class=\"token punctuation\">(</span>inputPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">make_preferred</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">is_directory</span><span class=\"token punctuation\">(</span>outpath<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> hasTrailingSlash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">addTrailingSlash</span><span class=\"token punctuation\">(</span>outpath<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> outpath<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> inputPath<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// here we check whether path already refers to the data folder by looking for common elements</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// if the path begins with the full contents of dataPathRoot then the data path has already been added</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// we compare inputPath.toString() rather that the input var path to ensure common formatting against dataPath.toString()</span>\n    <span class=\"token keyword\">auto</span> dirDataPath <span class=\"token operator\">=</span> dataPath<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// also, we strip the trailing slash from dataPath since `path` may be input as a file formatted path even if it is a folder (i.e. missing trailing slash)</span>\n    dirDataPath <span class=\"token operator\">=</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">addTrailingSlash</span><span class=\"token punctuation\">(</span>dirDataPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">auto</span> relativeDirDataPath <span class=\"token operator\">=</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">makeRelative</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">current_path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dataPath<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    relativeDirDataPath  <span class=\"token operator\">=</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">addTrailingSlash</span><span class=\"token punctuation\">(</span>relativeDirDataPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inputPath<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>dirDataPath<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> inputPath<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>relativeDirDataPath<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// inputPath doesn't contain data path already, so we build the output path as the inputPath relative to the dataPath</span>\n\t    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>makeAbsolute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            outputPath <span class=\"token operator\">=</span> dirDataPath <span class=\"token operator\">/</span> inputPath<span class=\"token punctuation\">;</span>\n\t    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            outputPath <span class=\"token operator\">=</span> relativeDirDataPath <span class=\"token operator\">/</span> inputPath<span class=\"token punctuation\">;</span>\n\t    <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// inputPath already contains data path, so no need to change</span>\n\t\toutputPath <span class=\"token operator\">=</span> inputPath<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// finally, if we do want an absolute path and we don't already have one</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>makeAbsolute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t    <span class=\"token comment\" spellcheck=\"true\">// then we return the absolute form of the path</span>\n\t    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">auto</span> outpath <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">canonical</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">absolute</span><span class=\"token punctuation\">(</span>outputPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">make_preferred</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">is_directory</span><span class=\"token punctuation\">(</span>outpath<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> hasTrailingSlash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">addTrailingSlash</span><span class=\"token punctuation\">(</span>outpath<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> outpath<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\t    <span class=\"token punctuation\">}</span>\n\t    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>exception <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">absolute</span><span class=\"token punctuation\">(</span>outputPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// or output the relative path</span>\n        <span class=\"token keyword\">return</span> outputPath<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\nstring <span class=\"token function\">ofFromString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">ofFromString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\nstring <span class=\"token function\">ofToHex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tostringstream out<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// how many bytes are in the string</span>\n\tstd<span class=\"token operator\">::</span>size_t numBytes <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numBytes<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// print each byte as a 2-character wide hex value</span>\n\t\tout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setfill</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span><span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>hex <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> out<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\nstring <span class=\"token function\">ofToHex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// this function is necessary if you want to print a string</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// using a syntax like ofToHex(\"test\")</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofToHex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ofToInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> intString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> ofTo<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>intString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ofHexToInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> intHexString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tistringstream <span class=\"token function\">cur</span><span class=\"token punctuation\">(</span>intHexString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcur <span class=\"token operator\">>></span> std<span class=\"token operator\">::</span>hex <span class=\"token operator\">>></span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\n<span class=\"token keyword\">char</span> <span class=\"token function\">ofHexToChar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> charHexString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tistringstream <span class=\"token function\">cur</span><span class=\"token punctuation\">(</span>charHexString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcur <span class=\"token operator\">>></span> std<span class=\"token operator\">::</span>hex <span class=\"token operator\">>></span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofHexToFloat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> floatHexString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">union</span> intFloatUnion <span class=\"token punctuation\">{</span>\n\t\tuint32_t i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">float</span> f<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> myUnion<span class=\"token punctuation\">;</span>\n\tmyUnion<span class=\"token punctuation\">.</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tistringstream <span class=\"token function\">cur</span><span class=\"token punctuation\">(</span>floatHexString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcur <span class=\"token operator\">>></span> std<span class=\"token operator\">::</span>hex <span class=\"token operator\">>></span> myUnion<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> myUnion<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\nstring <span class=\"token function\">ofHexToString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> stringHexString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tstringstream out<span class=\"token punctuation\">;</span>\n\tstringstream <span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>stringHexString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// a hex string has two characters per byte</span>\n\tstd<span class=\"token operator\">::</span>size_t numBytes <span class=\"token operator\">=</span> stringHexString<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numBytes<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tstring curByte<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// grab two characters from the hex string</span>\n\t\tstream <span class=\"token operator\">>></span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> curByte<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// prepare to parse the two characters</span>\n\t\tstringstream <span class=\"token function\">curByteStream</span><span class=\"token punctuation\">(</span>curByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// parse the two characters as a hex-encoded int</span>\n\t\tcurByteStream <span class=\"token operator\">>></span> std<span class=\"token operator\">::</span>hex <span class=\"token operator\">>></span> cur<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// add the int as a char to our output stream</span>\n\t\tout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> cur<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> out<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofToFloat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> floatString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> ofTo<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>floatString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">ofToDouble</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> doubleString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> ofTo<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>doubleString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\nint64_t <span class=\"token function\">ofToInt64</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> intString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> ofTo<span class=\"token operator\">&lt;</span>int64_t<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>intString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofToBool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> boolString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> lower <span class=\"token operator\">=</span> <span class=\"token function\">ofToLower</span><span class=\"token punctuation\">(</span>boolString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lower <span class=\"token operator\">==</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lower <span class=\"token operator\">==</span> <span class=\"token string\">\"false\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">bool</span> x <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tistringstream <span class=\"token function\">cur</span><span class=\"token punctuation\">(</span>lower<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcur <span class=\"token operator\">>></span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\n<span class=\"token keyword\">char</span> <span class=\"token function\">ofToChar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> charString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> ofTo<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>charString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span> string <span class=\"token function\">ofToBinary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tstringstream out<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>size_t numBytes <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numBytes<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tstd<span class=\"token operator\">::</span>bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token operator\">></span> <span class=\"token function\">bitBuffer</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tout <span class=\"token operator\">&lt;&lt;</span> bitBuffer<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> out<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\nstring <span class=\"token function\">ofToBinary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// this function is necessary if you want to print a string</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// using a syntax like ofToBinary(\"test\")</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofToBinary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ofBinaryToInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> intSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>bitset<span class=\"token operator\">&lt;</span>intSize<span class=\"token operator\">></span> <span class=\"token function\">binaryString</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> binaryString<span class=\"token punctuation\">.</span><span class=\"token function\">to_ulong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\n<span class=\"token keyword\">char</span> <span class=\"token function\">ofBinaryToChar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> charSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>bitset<span class=\"token operator\">&lt;</span>charSize<span class=\"token operator\">></span> <span class=\"token function\">binaryString</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> binaryString<span class=\"token punctuation\">.</span><span class=\"token function\">to_ulong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofBinaryToFloat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> floatSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>bitset<span class=\"token operator\">&lt;</span>floatSize<span class=\"token operator\">></span> <span class=\"token function\">binaryString</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">union</span> ulongFloatUnion <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> result<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">float</span> f<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> myUFUnion<span class=\"token punctuation\">;</span>\n\tmyUFUnion<span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> binaryString<span class=\"token punctuation\">.</span><span class=\"token function\">to_ulong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> myUFUnion<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\nstring <span class=\"token function\">ofBinaryToString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tostringstream out<span class=\"token punctuation\">;</span>\n\tstringstream <span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token operator\">></span> byteString<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>size_t numBytes <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numBytes<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tstream <span class=\"token operator\">>></span> byteString<span class=\"token punctuation\">;</span>\n\t\tout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> byteString<span class=\"token punctuation\">.</span><span class=\"token function\">to_ulong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> out<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nvector <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">ofSplitString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> source<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> delimiter<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> ignoreEmpty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> trim<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> result<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tresult<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tstring<span class=\"token operator\">::</span>const_iterator substart <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> subend<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tsubend <span class=\"token operator\">=</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>substart<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> delimiter<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> delimiter<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstring <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>substart<span class=\"token punctuation\">,</span> subend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>trim<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tsub <span class=\"token operator\">=</span> <span class=\"token function\">ofTrim</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ignoreEmpty <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>sub<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tresult<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subend <span class=\"token operator\">==</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tsubstart <span class=\"token operator\">=</span> subend <span class=\"token operator\">+</span> delimiter<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nstring <span class=\"token function\">ofJoinString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> stringElements<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> delimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tstring str<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stringElements<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">auto</span> numStrings <span class=\"token operator\">=</span> stringElements<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstring<span class=\"token operator\">::</span>size_type strSize <span class=\"token operator\">=</span> delimiter<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>numStrings <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s <span class=\"token operator\">:</span> stringElements<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tstrSize <span class=\"token operator\">+</span><span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tstr<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>strSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstr <span class=\"token operator\">+</span><span class=\"token operator\">=</span> stringElements<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>numStrings<span class=\"token punctuation\">)</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numStrings<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tstr <span class=\"token operator\">+</span><span class=\"token operator\">=</span> delimiter<span class=\"token punctuation\">;</span>\n\t\tstr <span class=\"token operator\">+</span><span class=\"token operator\">=</span> stringElements<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofStringReplace</span><span class=\"token punctuation\">(</span>string<span class=\"token operator\">&amp;</span> input<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> searchStr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> replaceStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> pos <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>searchStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">!=</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tinput<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> searchStr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> replaceStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tpos <span class=\"token operator\">+</span><span class=\"token operator\">=</span> replaceStr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">nextfind</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pos<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">auto</span> nextpos <span class=\"token operator\">=</span> nextfind<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>searchStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nextpos<span class=\"token operator\">==</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tpos <span class=\"token operator\">+</span><span class=\"token operator\">=</span> nextpos<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofIsStringInString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> haystack<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> needle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> haystack<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>needle<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>size_t <span class=\"token function\">ofStringTimesInString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> haystack<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> needle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> size_t step <span class=\"token operator\">=</span> needle<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tsize_t <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsize_t <span class=\"token function\">pos</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>pos<span class=\"token operator\">=</span>haystack<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>needle<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tpos <span class=\"token operator\">+</span><span class=\"token operator\">=</span>step<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">++</span>count <span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\nofUTF8Iterator<span class=\"token operator\">::</span><span class=\"token function\">ofUTF8Iterator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\tutf8<span class=\"token operator\">::</span><span class=\"token function\">replace_invalid</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">back_inserter</span><span class=\"token punctuation\">(</span>src_valid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nutf8<span class=\"token operator\">::</span>iterator<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">::</span>const_iterator<span class=\"token operator\">></span> ofUTF8Iterator<span class=\"token operator\">::</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> utf8<span class=\"token operator\">::</span>iterator<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">::</span>const_iterator<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>src_valid<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> src_valid<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> src_valid<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> utf8<span class=\"token operator\">::</span>iterator<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">::</span>const_iterator<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nutf8<span class=\"token operator\">::</span>iterator<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">::</span>const_iterator<span class=\"token operator\">></span> ofUTF8Iterator<span class=\"token operator\">::</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> utf8<span class=\"token operator\">::</span>iterator<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">::</span>const_iterator<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>src_valid<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> src_valid<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> src_valid<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> utf8<span class=\"token operator\">::</span>iterator<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">::</span>const_iterator<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nutf8<span class=\"token operator\">::</span>iterator<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">::</span>const_reverse_iterator<span class=\"token operator\">></span> ofUTF8Iterator<span class=\"token operator\">::</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> utf8<span class=\"token operator\">::</span>iterator<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">::</span>const_reverse_iterator<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>src_valid<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> src_valid<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> src_valid<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> utf8<span class=\"token operator\">::</span>iterator<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">::</span>const_reverse_iterator<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nutf8<span class=\"token operator\">::</span>iterator<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">::</span>const_reverse_iterator<span class=\"token operator\">></span> ofUTF8Iterator<span class=\"token operator\">::</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> utf8<span class=\"token operator\">::</span>iterator<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">::</span>const_reverse_iterator<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>src_valid<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> src_valid<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> src_valid<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> utf8<span class=\"token operator\">::</span>iterator<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">::</span>const_reverse_iterator<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// helper method to get locale from name</span>\n<span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>locale <span class=\"token function\">getLocale</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> locale<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nstd<span class=\"token operator\">::</span>locale loc<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TARGET_WIN32) &amp;&amp; !_MSC_VER</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> printonce <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> printonce <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">current</span><span class=\"token punctuation\">(</span> <span class=\"token function\">setlocale</span><span class=\"token punctuation\">(</span>LC_ALL<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">setlocale</span> <span class=\"token punctuation\">(</span>LC_ALL<span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofUtils\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"std::locale not supported. Using C locale  :\"</span> <span class=\"token operator\">&lt;&lt;</span> current <span class=\"token punctuation\">;</span>\n\t\tprintonce <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\tloc <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">locale</span><span class=\"token punctuation\">(</span>locale<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofUtils\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Couldn't create locale \"</span> <span class=\"token operator\">&lt;&lt;</span> locale <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" using default, \"</span> <span class=\"token operator\">&lt;&lt;</span> loc<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token keyword\">return</span> loc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nstring <span class=\"token function\">ofToLower</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> src<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> locale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tstd<span class=\"token operator\">::</span>string dst<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>locale loc <span class=\"token operator\">=</span> <span class=\"token function\">getLocale</span><span class=\"token punctuation\">(</span>locale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> c<span class=\"token operator\">:</span> <span class=\"token function\">ofUTF8Iterator</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tutf8<span class=\"token operator\">::</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>tolower<span class=\"token operator\">&lt;</span><span class=\"token keyword\">wchar_t</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> loc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">back_inserter</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> dst<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nstring <span class=\"token function\">ofToUpper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> src<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> locale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tstd<span class=\"token operator\">::</span>string dst<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>locale loc <span class=\"token operator\">=</span> <span class=\"token function\">getLocale</span><span class=\"token punctuation\">(</span>locale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> c<span class=\"token operator\">:</span> <span class=\"token function\">ofUTF8Iterator</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tutf8<span class=\"token operator\">::</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>toupper<span class=\"token operator\">&lt;</span><span class=\"token keyword\">wchar_t</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> loc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">back_inserter</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> dst<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nstring <span class=\"token function\">ofTrimFront</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> src<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> locale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">auto</span> dst <span class=\"token operator\">=</span> src<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>locale loc <span class=\"token operator\">=</span> <span class=\"token function\">getLocale</span><span class=\"token punctuation\">(</span>locale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dst<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>std<span class=\"token operator\">::</span><span class=\"token function\">find_if_not</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dst<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>isspace<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>loc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> dst<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nstring <span class=\"token function\">ofTrimBack</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> src<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> locale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">auto</span> dst <span class=\"token operator\">=</span> src<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>locale loc <span class=\"token operator\">=</span> <span class=\"token function\">getLocale</span><span class=\"token punctuation\">(</span>locale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdst<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">find_if_not</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dst<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>isspace<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>loc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> dst<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nstring <span class=\"token function\">ofTrim</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> src<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> locale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ofTrimFront</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofTrimBack</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofAppendUTF8</span><span class=\"token punctuation\">(</span>string <span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> uint32_t utf8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\tutf8<span class=\"token operator\">::</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>utf8<span class=\"token punctuation\">,</span> <span class=\"token function\">back_inserter</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofUTF8Append</span><span class=\"token punctuation\">(</span>string <span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> uint32_t utf8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\tutf8<span class=\"token operator\">::</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>utf8<span class=\"token punctuation\">,</span> <span class=\"token function\">back_inserter</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofUTF8Insert</span><span class=\"token punctuation\">(</span>string <span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> size_t pos<span class=\"token punctuation\">,</span> uint32_t utf8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tstd<span class=\"token operator\">::</span>string newText<span class=\"token punctuation\">;</span>\n\tsize_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> c<span class=\"token operator\">:</span> <span class=\"token function\">ofUTF8Iterator</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofUTF8Append</span><span class=\"token punctuation\">(</span>newText<span class=\"token punctuation\">,</span> utf8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">ofUTF8Append</span><span class=\"token punctuation\">(</span>newText<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ti<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofUTF8Append</span><span class=\"token punctuation\">(</span>newText<span class=\"token punctuation\">,</span> utf8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tstr <span class=\"token operator\">=</span> newText<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofUTF8Erase</span><span class=\"token punctuation\">(</span>string <span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> size_t start<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tstd<span class=\"token operator\">::</span>string newText<span class=\"token punctuation\">;</span>\n\tsize_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> c<span class=\"token operator\">:</span> <span class=\"token function\">ofUTF8Iterator</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>start <span class=\"token operator\">||</span> i<span class=\"token operator\">>=</span>start <span class=\"token operator\">+</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofUTF8Append</span><span class=\"token punctuation\">(</span>newText<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\ti<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tstr <span class=\"token operator\">=</span> newText<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>string <span class=\"token function\">ofUTF8Substring</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> size_t start<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tsize_t i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>string newText<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> c<span class=\"token operator\">:</span> <span class=\"token function\">ofUTF8Iterator</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">>=</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofUTF8Append</span><span class=\"token punctuation\">(</span>newText<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\ti <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span>start <span class=\"token operator\">+</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> newText<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>string <span class=\"token function\">ofUTF8ToString</span><span class=\"token punctuation\">(</span>uint32_t utf8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tstd<span class=\"token operator\">::</span>string str<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofUTF8Append</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> utf8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nsize_t <span class=\"token function\">ofUTF8Length</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> utf8<span class=\"token operator\">::</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nstring <span class=\"token function\">ofVAArgsToString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tva_list args<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tsize_t n <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">vsnprintf</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// Static buffer large enough?</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span> buf<span class=\"token punctuation\">,</span> n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// Static buffer too small</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span><span class=\"token function\">vsnprintf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nstring <span class=\"token function\">ofVAArgsToString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> va_list args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tsize_t n <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">vsnprintf</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// Static buffer large enough?</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span> buf<span class=\"token punctuation\">,</span> n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// Static buffer too small</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span><span class=\"token function\">vsnprintf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofLaunchBrowser</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> uriEncodeQuery<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tUriParserStateA state<span class=\"token punctuation\">;</span>\n\tUriUriA uri<span class=\"token punctuation\">;</span>\n\tstate<span class=\"token punctuation\">.</span>uri <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>uri<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">uriParseUriA</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>state<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>URI_SUCCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofUtils\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ofLaunchBrowser(): malformed url \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> url <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">uriFreeUriMembersA</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>uriEncodeQuery<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">uriNormalizeSyntaxA</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// URI encodes during set</span>\n\t<span class=\"token punctuation\">}</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">scheme</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">.</span>scheme<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> uri<span class=\"token punctuation\">.</span>scheme<span class=\"token punctuation\">.</span>afterLast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">uriToStringCharsRequiredA</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>uri<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> <span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> written<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">uriToStringA</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>uri<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>written<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">uriStr</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> written<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">uriFreeUriMembersA</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">// http://support.microsoft.com/kb/224816</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// make sure it is a properly formatted url:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//   some platforms, like Android, require urls to start with lower-case http/https</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//   Poco::URI automatically converts the scheme to lower case</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>scheme <span class=\"token operator\">!=</span> <span class=\"token string\">\"http\"</span> <span class=\"token operator\">&amp;&amp;</span> scheme <span class=\"token operator\">!=</span> <span class=\"token string\">\"https\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofUtils\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ofLaunchBrowser(): url does not begin with http:// or https://: \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> uriStr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\t\t<span class=\"token function\">ShellExecuteA</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"open\"</span><span class=\"token punctuation\">,</span> uriStr<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> SW_SHOWNORMAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_OSX</span>\n        <span class=\"token comment\" spellcheck=\"true\">// could also do with LSOpenCFURLRef</span>\n\t\tstring commandStr <span class=\"token operator\">=</span> <span class=\"token string\">\"open \\\"\"</span> <span class=\"token operator\">+</span> uriStr <span class=\"token operator\">+</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">system</span><span class=\"token punctuation\">(</span>commandStr<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofUtils\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ofLaunchBrowser(): couldn't open browser, commandStr \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> commandStr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_LINUX</span>\n\t\tstring commandStr <span class=\"token operator\">=</span> <span class=\"token string\">\"xdg-open \\\"\"</span> <span class=\"token operator\">+</span> uriStr <span class=\"token operator\">+</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">system</span><span class=\"token punctuation\">(</span>commandStr<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofUtils\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ofLaunchBrowser(): couldn't open browser, commandStr \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> commandStr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_OF_IOS</span>\n\t\t<span class=\"token function\">ofxiOSLaunchBrowser</span><span class=\"token punctuation\">(</span>uriStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_ANDROID</span>\n\t\t<span class=\"token function\">ofxAndroidLaunchBrowser</span><span class=\"token punctuation\">(</span>uriStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_EMSCRIPTEN</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofUtils\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ofLaunchBrowser() not implementeed in emscripten\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nstring <span class=\"token function\">ofGetVersionInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tstringstream sstr<span class=\"token punctuation\">;</span>\n\tsstr <span class=\"token operator\">&lt;&lt;</span> OF_VERSION_MAJOR <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">&lt;&lt;</span> OF_VERSION_MINOR <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">&lt;&lt;</span> OF_VERSION_PATCH<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>std<span class=\"token operator\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>OF_VERSION_PRE_RELEASE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tsstr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">&lt;&lt;</span> OF_VERSION_PRE_RELEASE<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> sstr<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">ofGetVersionMajor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> OF_VERSION_MAJOR<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">ofGetVersionMinor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> OF_VERSION_MINOR<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">ofGetVersionPatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> OF_VERSION_PATCH<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nstd<span class=\"token operator\">::</span>string <span class=\"token function\">ofGetVersionPreRelease</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> OF_VERSION_PRE_RELEASE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//---- new to 006</span>\n<span class=\"token comment\" spellcheck=\"true\">//from the forums http://www.openframeworks.cc/forum/viewtopic.php?t=1413</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofSaveScreen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> filename<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\" spellcheck=\"true\">/*ofImage screen;\n   screen.allocate(ofGetWidth(), ofGetHeight(), OF_IMAGE_COLOR);\n   screen.grabScreen(0, 0, ofGetWidth(), ofGetHeight());\n   screen.save(filename);*/</span>\n\tofPixels pixels<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofGetGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">saveFullViewport</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofSaveImage</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofSaveViewport</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> filename<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// because ofSaveScreen doesn't related to viewports</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/*ofImage screen;\n\tofRectangle view = ofGetCurrentViewport();\n\tscreen.allocate(view.width, view.height, OF_IMAGE_COLOR);\n\tscreen.grabScreen(0, 0, view.width, view.height);\n\tscreen.save(filename);*/</span>\n\n\tofPixels pixels<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofGetGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">saveFullViewport</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofSaveImage</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">int</span> saveImageCounter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofSaveFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> bUseViewport<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   string fileName <span class=\"token operator\">=</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>saveImageCounter<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".png\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bUseViewport<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofSaveViewport</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofSaveScreen</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tsaveImageCounter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nstring <span class=\"token function\">ofSystem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tFILE <span class=\"token operator\">*</span> ret <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\tret <span class=\"token operator\">=</span> <span class=\"token function\">_popen</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\tret <span class=\"token operator\">=</span> <span class=\"token function\">popen</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\tstring strret<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofUtils\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ofSystem(): error opening return file for command \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> command  <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\tc <span class=\"token operator\">=</span> <span class=\"token function\">fgetc</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tstrret <span class=\"token operator\">+</span><span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n\t\t\tc <span class=\"token operator\">=</span> <span class=\"token function\">fgetc</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\t\t<span class=\"token function\">_pclose</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t<span class=\"token function\">pclose</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> strret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofTargetPlatform <span class=\"token function\">ofGetTargetPlatform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_LINUX</span>\n    string arch <span class=\"token operator\">=</span> <span class=\"token function\">ofSystem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"uname -m\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofIsStringInString</span><span class=\"token punctuation\">(</span>arch<span class=\"token punctuation\">,</span><span class=\"token string\">\"x86_64\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> OF_TARGET_LINUX64<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofIsStringInString</span><span class=\"token punctuation\">(</span>arch<span class=\"token punctuation\">,</span><span class=\"token string\">\"armv6l\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> OF_TARGET_LINUXARMV6L<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofIsStringInString</span><span class=\"token punctuation\">(</span>arch<span class=\"token punctuation\">,</span><span class=\"token string\">\"armv7l\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> OF_TARGET_LINUXARMV7L<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> OF_TARGET_LINUX<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">elif</span> defined(TARGET_OSX)</span>\n    <span class=\"token keyword\">return</span> OF_TARGET_OSX<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">elif</span> defined(TARGET_WIN32)</span>\n    <span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> (_MSC_VER)</span>\n        <span class=\"token keyword\">return</span> OF_TARGET_WINVS<span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n        <span class=\"token keyword\">return</span> OF_TARGET_MINGW<span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">elif</span> defined(TARGET_ANDROID)</span>\n    <span class=\"token keyword\">return</span> OF_TARGET_ANDROID<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">elif</span> defined(TARGET_OF_IOS)</span>\n    <span class=\"token keyword\">return</span> OF_TARGET_IOS<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">elif</span> defined(TARGET_EMSCRIPTEN)</span>\n    <span class=\"token keyword\">return</span> OF_TARGET_EMSCRIPTEN<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\nstd<span class=\"token operator\">::</span>string <span class=\"token function\">ofGetEnv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\t<span class=\"token keyword\">const</span> size_t BUFSIZE <span class=\"token operator\">=</span> <span class=\"token number\">4096</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> <span class=\"token function\">pszOldVal</span><span class=\"token punctuation\">(</span>BUFSIZE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> size <span class=\"token operator\">=</span> <span class=\"token function\">GetEnvironmentVariableA</span><span class=\"token punctuation\">(</span>var<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pszOldVal<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> BUFSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>pszOldVal<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pszOldVal<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token keyword\">auto</span> value <span class=\"token operator\">=</span> <span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span>var<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n","type":"source","static":true}}],"fetch":[]}