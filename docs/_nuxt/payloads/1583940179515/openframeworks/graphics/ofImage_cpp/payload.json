{"data":[{"page":{"entry":{"name":"ofImage.cpp","filename":"ofImage.cpp","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/graphics/ofImage.cpp","path":"/openframeworks/graphics/ofImage_cpp","route":"/openframeworks/graphics/ofImage.cpp","dir":"../libs/openFrameworks/graphics","ext":"cpp","type":"source","id":271,"parent":259,"breadcrumbs":[259,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofImage.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofAppRunner.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"FreeImage.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofURLFileLoader.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"uriparser/Uri.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TARGET_ANDROID)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxAndroidUtils.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// static variable for freeImage initialization:</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofInitFreeImage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> deinit<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// need a new bool to avoid c++ \"deinitialization order fiasco\":</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.15</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span>\t<span class=\"token operator\">*</span> bFreeImageInited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">*</span>bFreeImageInited <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>deinit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">FreeImage_Initialise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">*</span>bFreeImageInited <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>bFreeImageInited <span class=\"token operator\">&amp;&amp;</span> deinit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">FreeImage_DeInitialise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">*</span>bFreeImageInited <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\nFREE_IMAGE_TYPE <span class=\"token function\">getFreeImageType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofPixels_<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\nFREE_IMAGE_TYPE <span class=\"token function\">getFreeImageType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofPixels<span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> FIT_BITMAP<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\nFREE_IMAGE_TYPE <span class=\"token function\">getFreeImageType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofShortPixels<span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>pix<span class=\"token punctuation\">.</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> FIT_UINT16<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> FIT_RGB16<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> FIT_RGBA16<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofImage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getFreeImageType(): unknown FreeImage type for number of channels:\"</span> <span class=\"token operator\">&lt;&lt;</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> FIT_UNKNOWN<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\nFREE_IMAGE_TYPE <span class=\"token function\">getFreeImageType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFloatPixels<span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>pix<span class=\"token punctuation\">.</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> FIT_FLOAT<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> FIT_RGBF<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> FIT_RGBAF<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofImage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getFreeImageType(): unknown FreeImage type for number of channels:\"</span> <span class=\"token operator\">&lt;&lt;</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> FIT_UNKNOWN<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\nFIBITMAP<span class=\"token operator\">*</span> <span class=\"token function\">getBmpFromPixels</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>pix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> PixelType<span class=\"token operator\">*</span> pixels <span class=\"token operator\">=</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> width <span class=\"token operator\">=</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> bpp <span class=\"token operator\">=</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getBitsPerPixel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tFREE_IMAGE_TYPE freeImageType <span class=\"token operator\">=</span> <span class=\"token function\">getFreeImageType</span><span class=\"token punctuation\">(</span>pix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tFIBITMAP<span class=\"token operator\">*</span> bmp <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_AllocateT</span><span class=\"token punctuation\">(</span>freeImageType<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> bpp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> bmpBits <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_GetBits</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bmpBits <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> srcStride <span class=\"token operator\">=</span> width <span class=\"token operator\">*</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getBytesPerPixel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> dstStride <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_GetPitch</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> pixels<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dst <span class=\"token operator\">=</span> bmpBits<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>srcStride <span class=\"token operator\">!=</span> dstStride<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>height<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> srcStride<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tsrc <span class=\"token operator\">+</span><span class=\"token operator\">=</span> srcStride<span class=\"token punctuation\">;</span>\n\t\t\t\tdst <span class=\"token operator\">+</span><span class=\"token operator\">=</span> dstStride<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span>src<span class=\"token punctuation\">,</span>dstStride<span class=\"token operator\">*</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofImage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getBmpFromPixels(): unable to get FIBITMAP from ofPixels\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// ofPixels are top left, FIBITMAP is bottom left</span>\n\t<span class=\"token function\">FreeImage_FlipVertical</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> bmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">putBmpIntoPixels</span><span class=\"token punctuation\">(</span>FIBITMAP <span class=\"token operator\">*</span> bmp<span class=\"token punctuation\">,</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> swapOnLittleEndian <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// convert to correct type depending on type of input bmp and PixelType</span>\n\tFIBITMAP<span class=\"token operator\">*</span> bmpConverted <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\tFREE_IMAGE_TYPE imgType <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_GetImageType</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PixelType<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span>\n\t\t<span class=\"token punctuation\">(</span><span class=\"token function\">FreeImage_GetColorType</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> FIC_PALETTE <span class=\"token operator\">||</span> <span class=\"token function\">FreeImage_GetBPP</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span>\n\t\t<span class=\"token operator\">||</span>  imgType<span class=\"token operator\">!=</span>FIT_BITMAP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">FreeImage_IsTransparent</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tbmpConverted <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_ConvertTo32Bits</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tbmpConverted <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_ConvertTo24Bits</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tbmp <span class=\"token operator\">=</span> bmpConverted<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PixelType<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> imgType<span class=\"token operator\">!=</span>FIT_UINT16 <span class=\"token operator\">&amp;&amp;</span> imgType<span class=\"token operator\">!=</span>FIT_RGB16 <span class=\"token operator\">&amp;&amp;</span> imgType<span class=\"token operator\">!=</span>FIT_RGBA16<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">FreeImage_IsTransparent</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tbmpConverted <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_ConvertToType</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">,</span>FIT_RGBA16<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tbmpConverted <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_ConvertToType</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">,</span>FIT_RGB16<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tbmp <span class=\"token operator\">=</span> bmpConverted<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PixelType<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> imgType<span class=\"token operator\">!=</span>FIT_FLOAT <span class=\"token operator\">&amp;&amp;</span> imgType<span class=\"token operator\">!=</span>FIT_RGBF <span class=\"token operator\">&amp;&amp;</span> imgType<span class=\"token operator\">!=</span>FIT_RGBAF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">FreeImage_IsTransparent</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tbmpConverted <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_ConvertToType</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">,</span>FIT_RGBAF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tbmpConverted <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_ConvertToType</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">,</span>FIT_RGBF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tbmp <span class=\"token operator\">=</span> bmpConverted<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> width <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_GetWidth</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_GetHeight</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> bpp <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_GetBPP</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> channels <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>bpp <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PixelType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> pitch <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_GetPitch</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_LITTLE_ENDIAN</span>\n    <span class=\"token keyword\">bool</span> swapRG <span class=\"token operator\">=</span> channels <span class=\"token operator\">&amp;&amp;</span> swapOnLittleEndian <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>bpp<span class=\"token operator\">/</span>channels <span class=\"token operator\">==</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n    <span class=\"token keyword\">bool</span> swapRG <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\n\tofPixelFormat pixFormat<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>channels<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> pixFormat<span class=\"token operator\">=</span>OF_PIXELS_GRAY<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>swapRG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>channels<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> pixFormat<span class=\"token operator\">=</span>OF_PIXELS_BGR<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>channels<span class=\"token operator\">==</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> pixFormat<span class=\"token operator\">=</span>OF_PIXELS_BGRA<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>channels<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> pixFormat<span class=\"token operator\">=</span>OF_PIXELS_RGB<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>channels<span class=\"token operator\">==</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> pixFormat<span class=\"token operator\">=</span>OF_PIXELS_RGBA<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// ofPixels are top left, FIBITMAP is bottom left</span>\n\t<span class=\"token function\">FreeImage_FlipVertical</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> bmpBits <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_GetBits</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bmpBits <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tpix<span class=\"token punctuation\">.</span><span class=\"token function\">setFromAlignedPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PixelType<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> bmpBits<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> pixFormat<span class=\"token punctuation\">,</span> pitch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofImage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"putBmpIntoPixels(): unable to set ofPixels from FIBITMAP\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bmpConverted <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">FreeImage_Unload</span><span class=\"token punctuation\">(</span>bmpConverted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>swapRG <span class=\"token operator\">&amp;&amp;</span> channels <span class=\"token operator\">>=</span><span class=\"token number\">3</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tpix<span class=\"token punctuation\">.</span><span class=\"token function\">swapRgb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// internal</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getJpegOptionFromImageLoadSetting</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofImageLoadSettings <span class=\"token operator\">&amp;</span>settings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> option <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>accurate<span class=\"token punctuation\">)</span>     option <span class=\"token operator\">|</span><span class=\"token operator\">=</span> JPEG_ACCURATE<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>exifRotate<span class=\"token punctuation\">)</span>   option <span class=\"token operator\">|</span><span class=\"token operator\">=</span> JPEG_EXIFROTATE<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>grayscale<span class=\"token punctuation\">)</span>    option <span class=\"token operator\">|</span><span class=\"token operator\">=</span> JPEG_GREYSCALE<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>separateCMYK<span class=\"token punctuation\">)</span> option <span class=\"token operator\">|</span><span class=\"token operator\">=</span> JPEG_CMYK<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> option<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span>ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> _fileName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofImageLoadSettings<span class=\"token operator\">&amp;</span> settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">ofInitFreeImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">auto</span> uriStr <span class=\"token operator\">=</span> _fileName<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tUriUriA uri<span class=\"token punctuation\">;</span>\n\tUriParserStateA state<span class=\"token punctuation\">;</span>\n\tstate<span class=\"token punctuation\">.</span>uri <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>uri<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">uriParseUriA</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>state<span class=\"token punctuation\">,</span> uriStr<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>URI_SUCCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> bytesNeeded <span class=\"token operator\">=</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>uriStr<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> <span class=\"token function\">absUri</span><span class=\"token punctuation\">(</span>bytesNeeded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\t\t<span class=\"token function\">uriWindowsFilenameToUriStringA</span><span class=\"token punctuation\">(</span>uriStr<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> absUri<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t<span class=\"token function\">uriUnixFilenameToUriStringA</span><span class=\"token punctuation\">(</span>uriStr<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> absUri<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">uriParseUriA</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>state<span class=\"token punctuation\">,</span> absUri<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>URI_SUCCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofImage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"loadImage(): malformed uri when loading image from uri \"</span> <span class=\"token operator\">&lt;&lt;</span> _fileName<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">uriFreeUriMembersA</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">scheme</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">.</span>scheme<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> uri<span class=\"token punctuation\">.</span>scheme<span class=\"token punctuation\">.</span>afterLast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">uriFreeUriMembersA</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>scheme <span class=\"token operator\">==</span> <span class=\"token string\">\"http\"</span> <span class=\"token operator\">||</span> scheme <span class=\"token operator\">==</span> <span class=\"token string\">\"https\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofLoadImage</span><span class=\"token punctuation\">(</span>pix<span class=\"token punctuation\">,</span> <span class=\"token function\">ofLoadURL</span><span class=\"token punctuation\">(</span>_fileName<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tstd<span class=\"token operator\">::</span>string fileName <span class=\"token operator\">=</span> <span class=\"token function\">ofToDataPath</span><span class=\"token punctuation\">(</span>_fileName<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> bLoaded <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tFIBITMAP <span class=\"token operator\">*</span> bmp <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\n\tFREE_IMAGE_FORMAT fif <span class=\"token operator\">=</span> FIF_UNKNOWN<span class=\"token punctuation\">;</span>\n\tfif <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_GetFileType</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fif <span class=\"token operator\">==</span> FIF_UNKNOWN<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// or guess via filename</span>\n\t\tfif <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_GetFIFFromFilename</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fif <span class=\"token operator\">!=</span> FIF_UNKNOWN<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">FreeImage_FIFSupportsReading</span><span class=\"token punctuation\">(</span>fif<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fif <span class=\"token operator\">==</span> FIF_JPEG<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">int</span> option <span class=\"token operator\">=</span> <span class=\"token function\">getJpegOptionFromImageLoadSetting</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tbmp <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_Load</span><span class=\"token punctuation\">(</span>fif<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> option<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tbmp <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_Load</span><span class=\"token punctuation\">(</span>fif<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bmp <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tbLoaded <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//-----------------------------</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> bLoaded <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">putBmpIntoPixels</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">,</span>pix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bmp <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">FreeImage_Unload</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> bLoaded<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span>ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofBuffer <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofImageLoadSettings <span class=\"token operator\">&amp;</span>settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">ofInitFreeImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> bLoaded <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tFIBITMAP<span class=\"token operator\">*</span> bmp <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\tFIMEMORY<span class=\"token operator\">*</span> hmem <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\n\thmem <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_OpenMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hmem <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofImage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"loadImage(): couldn't load image from ofBuffer, opening FreeImage memory failed\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//get the file type!</span>\n\tFREE_IMAGE_FORMAT fif <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_GetFileTypeFromMemory</span><span class=\"token punctuation\">(</span>hmem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> fif <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofImage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"loadImage(): couldn't load image from ofBuffer, unable to guess image format from memory\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">FreeImage_CloseMemory</span><span class=\"token punctuation\">(</span>hmem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">//make the image!!</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fif <span class=\"token operator\">==</span> FIF_JPEG<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> option <span class=\"token operator\">=</span> <span class=\"token function\">getJpegOptionFromImageLoadSetting</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbmp <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_LoadFromMemory</span><span class=\"token punctuation\">(</span>fif<span class=\"token punctuation\">,</span> hmem<span class=\"token punctuation\">,</span> option<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tbmp <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_LoadFromMemory</span><span class=\"token punctuation\">(</span>fif<span class=\"token punctuation\">,</span> hmem<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> bmp <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tbLoaded <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//-----------------------------</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">putBmpIntoPixels</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">,</span>pix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bmp <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">FreeImage_Unload</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> hmem <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">FreeImage_CloseMemory</span><span class=\"token punctuation\">(</span>hmem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> bLoaded<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofLoadImage</span><span class=\"token punctuation\">(</span>ofPixels <span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofImageLoadSettings <span class=\"token operator\">&amp;</span>settings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span>pix<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofLoadImage</span><span class=\"token punctuation\">(</span>ofPixels <span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofBuffer <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofImageLoadSettings <span class=\"token operator\">&amp;</span>settings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span>pix<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofLoadImage</span><span class=\"token punctuation\">(</span>ofShortPixels <span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofImageLoadSettings <span class=\"token operator\">&amp;</span>settings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span>pix<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofLoadImage</span><span class=\"token punctuation\">(</span>ofShortPixels <span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofBuffer <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofImageLoadSettings <span class=\"token operator\">&amp;</span>settings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span>pix<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofLoadImage</span><span class=\"token punctuation\">(</span>ofFloatPixels <span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofImageLoadSettings <span class=\"token operator\">&amp;</span>settings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span>pix<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofLoadImage</span><span class=\"token punctuation\">(</span>ofFloatPixels <span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofBuffer <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofImageLoadSettings <span class=\"token operator\">&amp;</span>settings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span>pix<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofLoadImage</span><span class=\"token punctuation\">(</span>ofTexture <span class=\"token operator\">&amp;</span> tex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofImageLoadSettings <span class=\"token operator\">&amp;</span>settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tofPixels pixels<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> loaded <span class=\"token operator\">=</span> <span class=\"token function\">ofLoadImage</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>loaded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\ttex<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pixels<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetGLInternalFormat</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ttex<span class=\"token punctuation\">.</span><span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> loaded<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofLoadImage</span><span class=\"token punctuation\">(</span>ofTexture <span class=\"token operator\">&amp;</span> tex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofBuffer <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofImageLoadSettings <span class=\"token operator\">&amp;</span>settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tofPixels pixels<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> loaded <span class=\"token operator\">=</span> <span class=\"token function\">ofLoadImage</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>loaded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\ttex<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pixels<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetGLInternalFormat</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ttex<span class=\"token punctuation\">.</span><span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> loaded<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">saveImage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> _pix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> _fileName<span class=\"token punctuation\">,</span> ofImageQualityType qualityLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">ofInitFreeImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_pix<span class=\"token punctuation\">.</span><span class=\"token function\">isAllocated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofImage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"saveImage(): couldn't save \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> _fileName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\", pixels are not allocated\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tofFilePath<span class=\"token operator\">::</span><span class=\"token function\">createEnclosingDirectory</span><span class=\"token punctuation\">(</span>_fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>string fileName <span class=\"token operator\">=</span> <span class=\"token function\">ofToDataPath</span><span class=\"token punctuation\">(</span>_fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tFREE_IMAGE_FORMAT fif <span class=\"token operator\">=</span> FIF_UNKNOWN<span class=\"token punctuation\">;</span>\n\tfif <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_GetFileType</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fif <span class=\"token operator\">==</span> FIF_UNKNOWN<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// or guess via filename</span>\n\t\tfif <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_GetFIFFromFilename</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fif<span class=\"token operator\">==</span>FIF_JPEG <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>_pix<span class=\"token punctuation\">.</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">4</span> <span class=\"token operator\">||</span> _pix<span class=\"token punctuation\">.</span><span class=\"token function\">getBitsPerChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tofPixels pix3 <span class=\"token operator\">=</span> _pix<span class=\"token punctuation\">;</span>\n\t\tpix3<span class=\"token punctuation\">.</span><span class=\"token function\">setNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">saveImage</span><span class=\"token punctuation\">(</span>pix3<span class=\"token punctuation\">,</span>_fileName<span class=\"token punctuation\">,</span>qualityLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tFIBITMAP <span class=\"token operator\">*</span> bmp <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_LITTLE_ENDIAN</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PixelType<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>_pix<span class=\"token punctuation\">.</span><span class=\"token function\">getPixelFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>OF_PIXELS_RGB <span class=\"token operator\">||</span> _pix<span class=\"token punctuation\">.</span><span class=\"token function\">getPixelFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>OF_PIXELS_RGBA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\t<span class=\"token comment\" spellcheck=\"true\">// Make a local copy.</span>\n\t\tofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> pix <span class=\"token operator\">=</span> _pix<span class=\"token punctuation\">;</span>\n\t\tpix<span class=\"token punctuation\">.</span><span class=\"token function\">swapRgb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbmp\t<span class=\"token operator\">=</span> <span class=\"token function\">getBmpFromPixels</span><span class=\"token punctuation\">(</span>pix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t\tbmp\t<span class=\"token operator\">=</span> <span class=\"token function\">getBmpFromPixels</span><span class=\"token punctuation\">(</span>_pix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_LITTLE_ENDIAN</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token keyword\">bool</span> retValue <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fif <span class=\"token operator\">!=</span> FIF_UNKNOWN<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">FreeImage_FIFSupportsReading</span><span class=\"token punctuation\">(</span>fif<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fif <span class=\"token operator\">==</span> FIF_JPEG<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">int</span> quality <span class=\"token operator\">=</span> JPEG_QUALITYSUPERB<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>qualityLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">case</span> OF_IMAGE_QUALITY_WORST<span class=\"token operator\">:</span> quality <span class=\"token operator\">=</span> JPEG_QUALITYBAD<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">case</span> OF_IMAGE_QUALITY_LOW<span class=\"token operator\">:</span> quality <span class=\"token operator\">=</span> JPEG_QUALITYAVERAGE<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">case</span> OF_IMAGE_QUALITY_MEDIUM<span class=\"token operator\">:</span> quality <span class=\"token operator\">=</span> JPEG_QUALITYNORMAL<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">case</span> OF_IMAGE_QUALITY_HIGH<span class=\"token operator\">:</span> quality <span class=\"token operator\">=</span> JPEG_QUALITYGOOD<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">case</span> OF_IMAGE_QUALITY_BEST<span class=\"token operator\">:</span> quality <span class=\"token operator\">=</span> JPEG_QUALITYSUPERB<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tretValue <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_Save</span><span class=\"token punctuation\">(</span>fif<span class=\"token punctuation\">,</span> bmp<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> quality<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>qualityLevel <span class=\"token operator\">!=</span> OF_IMAGE_QUALITY_BEST<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofImage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"saveImage(): ofImageCompressionType only applies to JPEGs,\"</span>\n\t\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" ignoring value for \\\" \"</span><span class=\"token operator\">&lt;&lt;</span> fileName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fif <span class=\"token operator\">==</span> FIF_GIF<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tFIBITMAP<span class=\"token operator\">*</span> convertedBmp<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_pix<span class=\"token punctuation\">.</span><span class=\"token function\">getImageType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OF_IMAGE_COLOR_ALPHA<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">// this just converts the image to grayscale so it can save something</span>\n\t\t\t\t\tconvertedBmp <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_ConvertTo8Bits</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">// this will create a 256-color palette from the image</span>\n\t\t\t\t\tconvertedBmp <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_ColorQuantize</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">,</span> FIQ_NNQUANT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\tretValue <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_Save</span><span class=\"token punctuation\">(</span>fif<span class=\"token punctuation\">,</span> convertedBmp<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>convertedBmp <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token function\">FreeImage_Unload</span><span class=\"token punctuation\">(</span>convertedBmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tretValue <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_Save</span><span class=\"token punctuation\">(</span>fif<span class=\"token punctuation\">,</span> bmp<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bmp <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">FreeImage_Unload</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> retValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofSaveImage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofPixels <span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> fileName<span class=\"token punctuation\">,</span> ofImageQualityType qualityLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">saveImage</span><span class=\"token punctuation\">(</span>pix<span class=\"token punctuation\">,</span>fileName<span class=\"token punctuation\">,</span>qualityLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofSaveImage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFloatPixels <span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> fileName<span class=\"token punctuation\">,</span> ofImageQualityType qualityLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">saveImage</span><span class=\"token punctuation\">(</span>pix<span class=\"token punctuation\">,</span>fileName<span class=\"token punctuation\">,</span>qualityLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofSaveImage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofShortPixels <span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> fileName<span class=\"token punctuation\">,</span> ofImageQualityType qualityLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">saveImage</span><span class=\"token punctuation\">(</span>pix<span class=\"token punctuation\">,</span>fileName<span class=\"token punctuation\">,</span>qualityLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">saveImage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> _pix<span class=\"token punctuation\">,</span> ofBuffer <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">,</span> ofImageFormat format<span class=\"token punctuation\">,</span> ofImageQualityType qualityLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// thanks to alvaro casinelli for the implementation</span>\n\n\t<span class=\"token function\">ofInitFreeImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_pix<span class=\"token punctuation\">.</span><span class=\"token function\">isAllocated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofImage\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"saveImage(): couldn't save to ofBuffer, pixels are not allocated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>format<span class=\"token operator\">==</span>OF_IMAGE_FORMAT_JPEG <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>_pix<span class=\"token punctuation\">.</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">4</span> <span class=\"token operator\">||</span> _pix<span class=\"token punctuation\">.</span><span class=\"token function\">getBitsPerChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tofPixels pix3 <span class=\"token operator\">=</span> _pix<span class=\"token punctuation\">;</span>\n\t\tpix3<span class=\"token punctuation\">.</span><span class=\"token function\">setNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">saveImage</span><span class=\"token punctuation\">(</span>pix3<span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">,</span>format<span class=\"token punctuation\">,</span>qualityLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\n\tFIBITMAP <span class=\"token operator\">*</span> bmp <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_LITTLE_ENDIAN</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PixelType<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>_pix<span class=\"token punctuation\">.</span><span class=\"token function\">getPixelFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>OF_PIXELS_RGB <span class=\"token operator\">||</span> _pix<span class=\"token punctuation\">.</span><span class=\"token function\">getPixelFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>OF_PIXELS_RGBA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\t<span class=\"token comment\" spellcheck=\"true\">// Make a local copy.</span>\n\t\tofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> pix <span class=\"token operator\">=</span> _pix<span class=\"token punctuation\">;</span>\n\t\tpix<span class=\"token punctuation\">.</span><span class=\"token function\">swapRgb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbmp\t<span class=\"token operator\">=</span> <span class=\"token function\">getBmpFromPixels</span><span class=\"token punctuation\">(</span>pix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t\tbmp\t<span class=\"token operator\">=</span> <span class=\"token function\">getBmpFromPixels</span><span class=\"token punctuation\">(</span>_pix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_LITTLE_ENDIAN</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">// bitmap successfully created</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">bool</span> returnValue<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// (b) open a memory stream to compress the image onto mem_buffer:</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//</span>\n\t\tFIMEMORY <span class=\"token operator\">*</span>hmem <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_OpenMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// (c) encode and save the image to the memory (on dib FIBITMAP image):</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">FREE_IMAGE_FORMAT</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> FIF_JPEG<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">int</span> quality <span class=\"token operator\">=</span> JPEG_QUALITYSUPERB<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>qualityLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">case</span> OF_IMAGE_QUALITY_WORST<span class=\"token operator\">:</span> quality <span class=\"token operator\">=</span> JPEG_QUALITYBAD<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">case</span> OF_IMAGE_QUALITY_LOW<span class=\"token operator\">:</span> quality <span class=\"token operator\">=</span> JPEG_QUALITYAVERAGE<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">case</span> OF_IMAGE_QUALITY_MEDIUM<span class=\"token operator\">:</span> quality <span class=\"token operator\">=</span> JPEG_QUALITYNORMAL<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">case</span> OF_IMAGE_QUALITY_HIGH<span class=\"token operator\">:</span> quality <span class=\"token operator\">=</span> JPEG_QUALITYGOOD<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">case</span> OF_IMAGE_QUALITY_BEST<span class=\"token operator\">:</span> quality <span class=\"token operator\">=</span> JPEG_QUALITYSUPERB<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\treturnValue <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_SaveToMemory</span><span class=\"token punctuation\">(</span>FIF_JPEG<span class=\"token punctuation\">,</span> bmp<span class=\"token punctuation\">,</span> hmem<span class=\"token punctuation\">,</span> quality<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\treturnValue <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_SaveToMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>FREE_IMAGE_FORMAT<span class=\"token punctuation\">)</span>format<span class=\"token punctuation\">,</span> bmp<span class=\"token punctuation\">,</span> hmem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/*\n\n\t\tNOTE: at this point, hmem contains the entire data in memory stored in fif format. the\n\t\tamount of space used by the memory is equal to file_size:\n\t\tlong file_size = FreeImage_TellMemory(hmem);\n\t\tbut can also be retrieved by FreeImage_AcquireMemory that retrieves both the\n\t\tlength of the buffer, and the buffer memory address.\n\t\t*/</span>\n\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\t\t   DWORD size_in_bytes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t   std<span class=\"token operator\">::</span>uint32_t size_in_bytes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Save compressed data on mem_buffer</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// note: FreeImage_AquireMemory allocates space for aux_mem_buffer):</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//</span>\n\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>mem_buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">FreeImage_AcquireMemory</span><span class=\"token punctuation\">(</span>hmem<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>mem_buffer<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>size_in_bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofImage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"saveImage(): couldn't save to ofBuffer, aquiring compressed image from memory failed\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/*\n\t\t  Now, before closing the memory stream, copy the content of mem_buffer\n\t\t  to an auxiliary buffer\n\t\t*/</span>\n\n\t\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>mem_buffer<span class=\"token punctuation\">,</span>size_in_bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Finally, close the FIBITMAP object, or we will get a memory leak:</span>\n\t\t<span class=\"token function\">FreeImage_Unload</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Close the memory stream (otherwise we may get a memory leak).</span>\n\t\t<span class=\"token function\">FreeImage_CloseMemory</span><span class=\"token punctuation\">(</span>hmem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> returnValue<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofSaveImage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofPixels <span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">,</span> ofBuffer <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">,</span> ofImageFormat format<span class=\"token punctuation\">,</span> ofImageQualityType qualityLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">saveImage</span><span class=\"token punctuation\">(</span>pix<span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">,</span>format<span class=\"token punctuation\">,</span>qualityLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofSaveImage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFloatPixels <span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">,</span> ofBuffer <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">,</span> ofImageFormat format<span class=\"token punctuation\">,</span> ofImageQualityType qualityLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">saveImage</span><span class=\"token punctuation\">(</span>pix<span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">,</span>format<span class=\"token punctuation\">,</span>qualityLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofSaveImage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofShortPixels <span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">,</span> ofBuffer <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">,</span> ofImageFormat format<span class=\"token punctuation\">,</span> ofImageQualityType qualityLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">saveImage</span><span class=\"token punctuation\">(</span>pix<span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">,</span>format<span class=\"token punctuation\">,</span>qualityLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// freeImage based stuff:</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofCloseFreeImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">ofInitFreeImage</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">//  implementation</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\nofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">ofImage_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\twidth\t\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\theight\t\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tbpp\t\t\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\ttype\t\t\t\t\t\t<span class=\"token operator\">=</span> OF_IMAGE_UNDEFINED<span class=\"token punctuation\">;</span>\n\tbUseTexture\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">// the default is, yes, use a texture</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//----------------------- init free image if necessary</span>\n\t<span class=\"token function\">ofInitFreeImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\nofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">ofImage_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\twidth\t\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\theight\t\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tbpp\t\t\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\ttype\t\t\t\t\t\t<span class=\"token operator\">=</span> OF_IMAGE_UNDEFINED<span class=\"token punctuation\">;</span>\n\tbUseTexture\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">// the default is, yes, use a texture</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//----------------------- init free image if necessary</span>\n\t<span class=\"token function\">ofInitFreeImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token function\">setFromPixels</span><span class=\"token punctuation\">(</span>pix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\nofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">ofImage_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> fileName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofImageLoadSettings <span class=\"token operator\">&amp;</span>settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\twidth\t\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\theight\t\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tbpp\t\t\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\ttype\t\t\t\t\t\t<span class=\"token operator\">=</span> OF_IMAGE_UNDEFINED<span class=\"token punctuation\">;</span>\n\tbUseTexture\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">// the default is, yes, use a texture</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//----------------------- init free image if necessary</span>\n\t<span class=\"token function\">ofInitFreeImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token function\">load</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\nofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mom<span class=\"token operator\">==</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TARGET_ANDROID)</span>\n\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>unloadTexture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\nofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">ofImage_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TARGET_ANDROID)</span>\n\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>unloadTexture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\nofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">ofImage_</span><span class=\"token punctuation\">(</span>ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    pixels      <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>pixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tex         <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>tex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    bUseTexture <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>bUseTexture<span class=\"token punctuation\">;</span>\n    width       <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n    height      <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n    bpp         <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>bpp<span class=\"token punctuation\">;</span>\n    type        <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n\n    mom<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//clear remaining flags and sizes from the mom</span>\n\n    <span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TARGET_ANDROID)</span>\n    <span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>unloadTexture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\nofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mom<span class=\"token operator\">==</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\n    pixels      <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>pixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tex         <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>tex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    bUseTexture <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>bUseTexture<span class=\"token punctuation\">;</span>\n    width       <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n    height      <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n    bpp         <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>bpp<span class=\"token punctuation\">;</span>\n    type        <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n\n    mom<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//clear remaining flags and sizes from the mom</span>\n\n    <span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TARGET_ANDROID)</span>\n    <span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>unloadTexture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\nofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">ofImage_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">bool</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFile <span class=\"token operator\">&amp;</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">bool</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> fileName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofImageLoadSettings <span class=\"token operator\">&amp;</span>settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TARGET_ANDROID)</span>\n\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>unloadTexture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token keyword\">bool</span> bLoadedOk <span class=\"token operator\">=</span> <span class=\"token function\">ofLoadImage</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bLoadedOk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofImage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"loadImage(): couldn't load image from \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> fileName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> bLoadedOk<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">bool</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">bool</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofBuffer <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofImageLoadSettings <span class=\"token operator\">&amp;</span>settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TARGET_ANDROID)</span>\n\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>unloadTexture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token keyword\">bool</span> bLoadedOk <span class=\"token operator\">=</span> <span class=\"token function\">ofLoadImage</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bLoadedOk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofImage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"loadImage(): couldn't load image from ofBuffer\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> bLoadedOk<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">bool</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofBuffer <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">bool</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> fileName<span class=\"token punctuation\">,</span> ofImageQualityType qualityLevel<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofSaveImage</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">,</span> qualityLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">bool</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>ofBuffer <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">,</span> ofImageFormat imageFormat<span class=\"token punctuation\">,</span> ofImageQualityType qualityLevel<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofSaveImage</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">,</span> imageFormat<span class=\"token punctuation\">,</span> qualityLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">saveImage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> fileName<span class=\"token punctuation\">,</span> ofImageQualityType qualityLevel<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">save</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span> qualityLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">saveImage</span><span class=\"token punctuation\">(</span>ofBuffer <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">,</span> ofImageQualityType qualityLevel<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> OF_IMAGE_FORMAT_PNG<span class=\"token punctuation\">,</span> qualityLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">saveImage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFile <span class=\"token operator\">&amp;</span> file<span class=\"token punctuation\">,</span> ofImageQualityType compressionLevel<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">save</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span>compressionLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// we could cap these values - but it might be more useful</span>\n<span class=\"token comment\" spellcheck=\"true\">// to be able to set anchor points outside the image</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">setAnchorPercent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> xPct<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> yPct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bUseTexture<span class=\"token punctuation\">)</span>tex<span class=\"token punctuation\">.</span><span class=\"token function\">setAnchorPercent</span><span class=\"token punctuation\">(</span>xPct<span class=\"token punctuation\">,</span> yPct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">setAnchorPoint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bUseTexture<span class=\"token punctuation\">)</span>tex<span class=\"token punctuation\">.</span><span class=\"token function\">setAnchorPoint</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">resetAnchor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bUseTexture<span class=\"token punctuation\">)</span>tex<span class=\"token punctuation\">.</span><span class=\"token function\">resetAnchor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">,</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">,</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">drawSubsection</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> pos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">drawSubsection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sy<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">drawSubsection</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span>sx<span class=\"token punctuation\">,</span>sy<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">drawSubsection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _sw<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _sh<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">drawSubsection</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span>sx<span class=\"token punctuation\">,</span>sy<span class=\"token punctuation\">,</span>_sw<span class=\"token punctuation\">,</span>_sh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">drawSubsection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sy<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">drawSubsection</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span>sx<span class=\"token punctuation\">,</span>sy<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">drawSubsection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sw<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sh<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">ofGetCurrentRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span>sx<span class=\"token punctuation\">,</span>sy<span class=\"token punctuation\">,</span>sw<span class=\"token punctuation\">,</span>sh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span> ofImageType newType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>width <span class=\"token operator\">==</span> w <span class=\"token operator\">&amp;&amp;</span> height <span class=\"token operator\">==</span> h <span class=\"token operator\">&amp;&amp;</span> newType <span class=\"token operator\">==</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TARGET_ANDROID)</span>\n\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>unloadTexture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\tpixels<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">,</span> newType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// take care of texture allocation --</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">.</span><span class=\"token function\">isAllocated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> bUseTexture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\ttex<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\twidth\t<span class=\"token operator\">=</span> pixels<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\theight\t<span class=\"token operator\">=</span> pixels<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbpp\t\t<span class=\"token operator\">=</span> pixels<span class=\"token punctuation\">.</span><span class=\"token function\">getBitsPerPixel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttype\t<span class=\"token operator\">=</span> pixels<span class=\"token punctuation\">.</span><span class=\"token function\">getImageType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">bool</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">bAllocated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> pixels<span class=\"token punctuation\">.</span><span class=\"token function\">isAllocated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TARGET_ANDROID)</span>\n\t<span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>unloadTexture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\tpixels<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bUseTexture<span class=\"token punctuation\">)</span>\ttex<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\twidth\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\theight\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tbpp\t\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\ttype \t\t\t\t\t<span class=\"token operator\">=</span> OF_IMAGE_UNDEFINED<span class=\"token punctuation\">;</span>\n\tbUseTexture \t\t\t<span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">// the default is, yes, use a texture</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\nofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>  ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pixels<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pixels<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\nofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getPixelsRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pixels<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getPixelsRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pixels<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\nofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pixels<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\nofTexture <span class=\"token operator\">&amp;</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> tex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> ofTexture <span class=\"token operator\">&amp;</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> tex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// for getting a reference to the texture</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\nofTexture <span class=\"token operator\">&amp;</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getTextureReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> ofTexture <span class=\"token operator\">&amp;</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getTextureReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> textureLocation<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bUseTexture <span class=\"token operator\">&amp;&amp;</span> tex<span class=\"token punctuation\">.</span><span class=\"token function\">isAllocated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\ttex<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>textureLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">unbind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> textureLocation<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bUseTexture <span class=\"token operator\">&amp;&amp;</span> tex<span class=\"token punctuation\">.</span><span class=\"token function\">isAllocated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\ttex<span class=\"token punctuation\">.</span><span class=\"token function\">unbind</span><span class=\"token punctuation\">(</span>textureLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\nofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pixels<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\nofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pixels<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tpixels<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tpixels<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tpixels<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span>  ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">setFromPixels</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> newPixels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span> ofImageType newType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bOrderIsRGB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">,</span> newType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpixels<span class=\"token punctuation\">.</span><span class=\"token function\">setFromPixels</span><span class=\"token punctuation\">(</span>newPixels<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span>newType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bOrderIsRGB <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PixelType<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tpixels<span class=\"token punctuation\">.</span><span class=\"token function\">swapRgb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">setFromPixels</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> pixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setFromPixels</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>pixels<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>pixels<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>pixels<span class=\"token punctuation\">.</span><span class=\"token function\">getImageType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\nofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> pixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setFromPixels</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\twidth <span class=\"token operator\">=</span> pixels<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\theight <span class=\"token operator\">=</span> pixels<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbpp <span class=\"token operator\">=</span> pixels<span class=\"token punctuation\">.</span><span class=\"token function\">getBitsPerPixel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttype <span class=\"token operator\">=</span> pixels<span class=\"token punctuation\">.</span><span class=\"token function\">getImageType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">.</span><span class=\"token function\">isAllocated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> bUseTexture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> glInternalFormat <span class=\"token operator\">=</span> <span class=\"token function\">ofGetGLInternalFormat</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tex<span class=\"token punctuation\">.</span><span class=\"token function\">isAllocated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> tex<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> width <span class=\"token operator\">||</span> tex<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> height <span class=\"token operator\">||</span> tex<span class=\"token punctuation\">.</span><span class=\"token function\">getTextureData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>glInternalFormat <span class=\"token operator\">!=</span> glInternalFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\ttex<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\ttex<span class=\"token punctuation\">.</span><span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">setUseTexture</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> bUse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tbUseTexture <span class=\"token operator\">=</span> bUse<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">bool</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">isUsingTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> bUseTexture<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">grabScreen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofBaseGLRenderer<span class=\"token operator\">></span> renderer <span class=\"token operator\">=</span> <span class=\"token function\">ofGetGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>renderer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\trenderer<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">saveScreen</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span>pixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofGrabScreen</span><span class=\"token punctuation\">(</span>ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> pixels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tofPixels p<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofBaseGLRenderer<span class=\"token operator\">></span> renderer <span class=\"token operator\">=</span> <span class=\"token function\">ofGetGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>renderer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\trenderer<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">saveScreen</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tpixels <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofGrabScreen</span><span class=\"token punctuation\">(</span>ofPixels <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofBaseGLRenderer<span class=\"token operator\">></span> renderer <span class=\"token operator\">=</span> <span class=\"token function\">ofGetGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>renderer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\trenderer<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">saveScreen</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">grabScreen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">ofGrabScreen</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">setImageType</span><span class=\"token punctuation\">(</span>ofImageType newType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">changeTypeOfPixels</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">,</span> newType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\nofImageType ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getImageType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> type<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> newWidth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> newHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>newWidth <span class=\"token operator\">==</span> width <span class=\"token operator\">&amp;&amp;</span> newHeight <span class=\"token operator\">==</span> height<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">resizePixels</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">,</span> newWidth<span class=\"token punctuation\">,</span> newHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">crop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tw <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">clamp</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\th <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">clamp</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tpixels<span class=\"token punctuation\">.</span><span class=\"token function\">crop</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">cropFrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> otherImage<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tw <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">clamp</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>otherImage<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\th <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">clamp</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>otherImage<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\totherImage<span class=\"token punctuation\">.</span>pixels<span class=\"token punctuation\">.</span><span class=\"token function\">cropTo</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">rotate90</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nRotations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tpixels<span class=\"token punctuation\">.</span><span class=\"token function\">rotate90</span><span class=\"token punctuation\">(</span>nRotations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">mirror</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> vertical<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> horizontal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tpixels<span class=\"token punctuation\">.</span><span class=\"token function\">mirror</span><span class=\"token punctuation\">(</span>vertical<span class=\"token punctuation\">,</span> horizontal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// freeImage based code &amp; utilities:</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">resizePixels</span><span class=\"token punctuation\">(</span>ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>pix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> newWidth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> newHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\tFIBITMAP <span class=\"token operator\">*</span> bmp\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token function\">getBmpFromPixels</span><span class=\"token punctuation\">(</span>pix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tFIBITMAP <span class=\"token operator\">*</span> convertedBmp\t\t\t<span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\n\tconvertedBmp <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_Rescale</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">,</span> newWidth<span class=\"token punctuation\">,</span> newHeight<span class=\"token punctuation\">,</span> FILTER_BICUBIC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">putBmpIntoPixels</span><span class=\"token punctuation\">(</span>convertedBmp<span class=\"token punctuation\">,</span> pix<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bmp <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\t\t\t\t<span class=\"token function\">FreeImage_Unload</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>convertedBmp <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token function\">FreeImage_Unload</span><span class=\"token punctuation\">(</span>convertedBmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">changeTypeOfPixels</span><span class=\"token punctuation\">(</span>ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>pix<span class=\"token punctuation\">,</span> ofImageType newType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> oldType <span class=\"token operator\">=</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getImageType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldType <span class=\"token operator\">==</span> newType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// no need to reallocate</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tFIBITMAP <span class=\"token operator\">*</span> bmp <span class=\"token operator\">=</span> <span class=\"token function\">getBmpFromPixels</span><span class=\"token punctuation\">(</span>pix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tFIBITMAP <span class=\"token operator\">*</span> convertedBmp <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>newType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> OF_IMAGE_GRAYSCALE<span class=\"token operator\">:</span>\n\t\t\tconvertedBmp <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_ConvertToGreyscale</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OF_IMAGE_COLOR<span class=\"token operator\">:</span>\n\t\t\tconvertedBmp <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_ConvertTo24Bits</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OF_IMAGE_COLOR_ALPHA<span class=\"token operator\">:</span>\n\t\t\tconvertedBmp <span class=\"token operator\">=</span> <span class=\"token function\">FreeImage_ConvertTo32Bits</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofImage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"changeTypeOfPixels(): unknown image type: \"</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>newType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">putBmpIntoPixels</span><span class=\"token punctuation\">(</span>convertedBmp<span class=\"token punctuation\">,</span> pix<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bmp <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">FreeImage_Unload</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>convertedBmp <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">FreeImage_Unload</span><span class=\"token punctuation\">(</span>convertedBmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">unloadTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\ttex<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">float</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> height<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">float</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> width<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// Sosolimited: texture compression</span>\n<span class=\"token comment\" spellcheck=\"true\">// call this function before you call loadImage()</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofImage_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">setCompression</span><span class=\"token punctuation\">(</span>ofTexCompression compression<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bUseTexture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\ttex<span class=\"token punctuation\">.</span><span class=\"token function\">setCompression</span><span class=\"token punctuation\">(</span> compression <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ofImage_</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">template</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ofImage_</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">template</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ofImage_</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\nstd<span class=\"token operator\">::</span>string <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofImageType <span class=\"token operator\">&amp;</span> imgType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>imgType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> OF_IMAGE_GRAYSCALE<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"OF_IMAGE_GRAYSCALE\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OF_IMAGE_COLOR<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"OF_IMAGE_COLOR\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span>  OF_IMAGE_COLOR_ALPHA<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"OF_IMAGE_COLOR_ALPHA\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OF_IMAGE_UNDEFINED<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"OF_IMAGE_UNDEFINED\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"OF_IMAGE_UNDEFINED\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n","type":"source","static":true}}],"fetch":[]}