{"data":[{"page":{"entry":{"name":"ofMath.h","filename":"ofMath.h","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/math/ofMath.h","path":"/openframeworks/math/ofMath_h","route":"/openframeworks/math/ofMath.h","dir":"../libs/openFrameworks/math","ext":"h","type":"source","id":286,"parent":284,"breadcrumbs":[284,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;glm/gtc/constants.hpp></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;glm/fwd.hpp></span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\file</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofMath provides a collection of mathematical utilities and functions.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\warning Many ofRandom-style functions wrap `rand()` which is not reentrant</span>\n<span class=\"token comment\" spellcheck=\"true\">/// or thread safe.  To generate random numbers simultaneously in multiple</span>\n<span class=\"token comment\" spellcheck=\"true\">/// threads, consider using c++11 uniform_real_distribution.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa http://en.cppreference.com/w/cpp/numeric/random/uniform_real_distribution</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\name Random Numbers</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get a random floating point number between 0 and max.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// A random number in the range [0, max) will be returned.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Example:</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t~~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // Return a random floating point number between 0 and 20.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// float randomNumber = ofRandom(20);</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\warning ofRandom wraps C++'s `rand()` which is not reentrant or thread safe.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param max The maximum value of the random number.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get a random number between two values.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// A random number in the range [min, max) will be returned.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Example:</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t~~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // Return a random floating point number between -30 and 20.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// float randomNumber = ofRandom(-30, 20);</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\warning ofRandom wraps `rand()` which is not reentrant or thread safe.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param val0 the minimum value of the random number.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param val1 The maximum value of the random number.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns A random floating point number between val0 and val1.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> val0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> val1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get a random floating point number.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\warning ofRandom wraps `rand()` which is not reentrant or thread safe.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns A random floating point number between -1 and 1.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofRandomf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get a random unsigned floating point number.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\warning ofRandom wraps `rand()` which is not reentrant or thread safe.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns A random floating point number between 0 and 1.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofRandomuf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get a random floating point number between 0 and the screen width.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// A random number in the range [0, ofGetWidth()) will be returned.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\warning ofRandom wraps `rand()` which is not reentrant or thread safe.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns a random number between 0 and ofGetWidth().</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofRandomWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get a random floating point number between 0 and the screen height.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// A random number in the range [0, ofGetHeight()) will be returned.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\warning ofRandom wraps `rand()` which is not reentrant or thread safe.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns a random number between 0 and ofGetHeight().</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofRandomHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Seed the seeds the random number generator with a unique value.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// This seeds the random number generator with an acceptably random value, </span>\n<span class=\"token comment\" spellcheck=\"true\">/// generated from clock time and the PID.</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofSeedRandom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Seed the random number generator.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// If the user would like to repeat the same random sequence, a known random</span>\n<span class=\"token comment\" spellcheck=\"true\">/// seed can be used to initialize the random number generator during app</span>\n<span class=\"token comment\" spellcheck=\"true\">/// setup.  This can be useful for debugging and testing.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param val The value with which to seed the generator.</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofSeedRandom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\name Number Ranges</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Given a value and an input range, map the value to be within 0 and 1.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Often, you'll need to work with percentages or other methods that expect a</span>\n<span class=\"token comment\" spellcheck=\"true\">/// value between 0 and 1.  This function will take a minimum and maximum and</span>\n<span class=\"token comment\" spellcheck=\"true\">/// then finds where within that range a value sits.  If the value is outside</span>\n<span class=\"token comment\" spellcheck=\"true\">/// the range, it will be mapped to 0 or 1.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param value The number to be normalized.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param min The lower bound of the range.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param max The upper bound of the range.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns A float between 0 and 1.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofNormalize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Given a value and an input range, map the value to an output range.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofMap linearly maps the given value to a new value given an input and output</span>\n<span class=\"token comment\" spellcheck=\"true\">/// range.  Thus if value is 50% of the way between inputMin and inputMax, the</span>\n<span class=\"token comment\" spellcheck=\"true\">/// output value will be 50% of the way between outpuMin and outputMax. For</span>\n<span class=\"token comment\" spellcheck=\"true\">/// an input value _outside_ of the intputMin and inputMax range, negative</span>\n<span class=\"token comment\" spellcheck=\"true\">/// percentages and percentages greater than 100% will be used.  For example, if</span>\n<span class=\"token comment\" spellcheck=\"true\">/// the input value is 150 and the input range is 0 - 100 and the output range</span>\n<span class=\"token comment\" spellcheck=\"true\">/// 0 - 1000, the output value will be 1500 or 150% of the total range.  The</span>\n<span class=\"token comment\" spellcheck=\"true\">/// user can avoid mapping outside of the input range by clamping the output</span>\n<span class=\"token comment\" spellcheck=\"true\">/// value.  Clamping is disabled by default and ensures that the output value</span>\n<span class=\"token comment\" spellcheck=\"true\">/// always stays in the range [outputMin, outputMax).</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Example:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\tfloat x = 5;</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\tfloat newx = 0;</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\t// 0 &lt;= x &lt; 10</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\tnewx = ofMap(x, 0, 10, 21, 22); // newx = 21.5 a value [21, 22).</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param value The number to be mapped.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param inputMin The lower bound of the input range.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param inputMax The upper bound of the input range.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param outputMin The lower bound of the output range.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param outputMax The upper bound of the output range.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param clamp True if the value should be clamped to [outputMin, outputMax).</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\note If the absolute difference between inputMin and inputMax is less than</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\t  FLT_EPSILON, outputMin will be returned to prevent divide by zero</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\t  errors.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns a mapped floating point number.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> inputMin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> inputMax<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> outputMin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> outputMax<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> clamp <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Clamp a value between min and max.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// Restricts a value to be within a specified range defined by values min and</span>\n<span class=\"token comment\" spellcheck=\"true\">/// max. If the value is min &lt;= value &lt;= max, returns value.  If the value is</span>\n<span class=\"token comment\" spellcheck=\"true\">/// greater than max, return max; if the value is less than min, return min.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Otherwise, return the value unchanged.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\tfloat val = 10;</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\tfloat newVal = 0;</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\tnewval = ofClamp(val, 30, 40); // newval = 30</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\tnewval = ofClamp(val, 0, 5);   // newval = 5</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\tnewval = ofClamp(val, 0, 20);  // newval = 10</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param value The number to be clamped.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param min The lower bound of the range.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param max The upper bound of the range.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns a floating point number in the range [min, max].</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofClamp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Determine if a number is inside of a giv(float)(en range.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param t The value to test.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param min The lower bound of the range.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param max The upper bound of the range.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the number t is the range of [min, max].</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofInRange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Linearly interpolate a value within a range.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// Calculates a number between two numbers [start, stop] at a specific increment</span>\n<span class=\"token comment\" spellcheck=\"true\">/// (amt).  If we want the new number to be between start and stop numbers, amt</span>\n<span class=\"token comment\" spellcheck=\"true\">/// needs to be a number between 0 and 1, inclusive.  ofLerp() does not clamp</span>\n<span class=\"token comment\" spellcheck=\"true\">/// the values.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\tfloat init = 1;</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\tfloat end = 2;</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\tfloat increment = 0.2;</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\tfloat result = ofLerp(init, end, increment); // result = 1.2</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\t// Values outside 0...1 work as well.</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\tincrement = 2;</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\tresult = ofLerp(init, end, increment); // result = 3</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa float ofClamp(float value, float min, float max)</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param start The lower bound of the range.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param stop The upper bound of the range.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param amt The normalized [0, 1] value within the range to return.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns A float between start and stop.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofLerp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> stop<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> amt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\name Distance</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculates the 2D distance between two points.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Uses the [Pythagorean theorem](http://en.wikipedia.org/wiki/Pythagorean_theorem).</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param x1 X position of first point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param y1 Y position of first point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param x2 X position of second point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param y2 Y position of second point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns float Distance between points.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofDist</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculates the 3D distance between two points.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Uses the [Pythagorean theorem](http://en.wikipedia.org/wiki/Pythagorean_theorem).</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param x1 X position of first point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param y1 Y position of first point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param z1 Z position of first point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param x2 X position of second point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param y2 Y position of second point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param z2 Z position of second point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns float Distance between points.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofDist</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculates the squared 2D distance between two points.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Same as ofDist() but doesn't take the square root sqrt() of the result,</span>\n<span class=\"token comment\" spellcheck=\"true\">/// which is a faster operation if you need to calculate and compare multiple</span>\n<span class=\"token comment\" spellcheck=\"true\">/// distances.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param x1 X position of first point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param y1 Y position of first point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param x2 X position of second point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param y2 Y position of second point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns distance-squared between two points.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofDistSquared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculates the squared 3D distance between two points.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Same as ofDist() but doesn't take the square root sqrt() of the result,</span>\n<span class=\"token comment\" spellcheck=\"true\">/// which is a faster operation if you need to calculate and compare multiple</span>\n<span class=\"token comment\" spellcheck=\"true\">/// distances.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param x1 X position of first point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param y1 Y position of first point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param z1 Z position of first point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param x2 X position of second point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param y2 Y position of second point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param z2 Z position of second point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns distance-squared between two points.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofDistSquared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\name Angles</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Convert radians to degrees.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Example:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\tfloat result = ofRadToDeg(PI/2); // The result will be 90.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param radians An angle in radians.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns the angle in degrees.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofRadToDeg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> radians<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Convert degrees to radians.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Example:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\tfloat result = ofDegToRad(90); // The result will be PI/2.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param degrees An angle in degrees.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns the angle in radians.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofDegToRad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Linearly interpolate a value between two angles in degrees.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// Calculates a number between two numbers [start, stop) at a specific</span>\n<span class=\"token comment\" spellcheck=\"true\">/// increment (amt). This does constrain the result into a single rotation,</span>\n<span class=\"token comment\" spellcheck=\"true\">/// but does not clamp the values</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param currentAngle The lower bound of the range in degrees.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param targetAngle The upper bound of the range in degrees.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param pct An amount between [0.0, 1.0] within the range to return.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns An angle in degrees between currentAngle and targetAngle.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofLerpDegrees</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> currentAngle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> targetAngle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Linearly interpolate a value between two angles in radians.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// Calculates a number between two numbers (start, stop) at a specific</span>\n<span class=\"token comment\" spellcheck=\"true\">/// increment (amt).  This does constrain the result into a single rotation, but</span>\n<span class=\"token comment\" spellcheck=\"true\">/// does not clamp the values</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param currentAngle The lower bound of the range in radians.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param targetAngle The upper bound of the range in radians.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param pct An amount between [0.0, 1.0] within the range to return.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns An angle in radians between currentAngle and targetAngle.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofLerpRadians</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> currentAngle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> targetAngle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculates the difference between two angles in degrees.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// This will calculate the actual difference, taking into account multiple</span>\n<span class=\"token comment\" spellcheck=\"true\">/// revolutions. For example:</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\tofAngleDifferenceDegrees(0, 90); // Returns 90.</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\tofAngleDifferenceDegrees(0, 450); // Also returns 90.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param currentAngle The current angle in degrees.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param targetAngle the angle to be compared to in degrees.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns The difference between two angles in degrees.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofAngleDifferenceDegrees</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> currentAngle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> targetAngle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculates the difference between two angles in radians.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// This will calculate the actual difference, taking into account multiple</span>\n<span class=\"token comment\" spellcheck=\"true\">/// revolutions. For example:</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\tofAngleDifferenceRadians(0, PI); // Returns -PI.</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\tofAngleDifferenceRadians(0, 3*PI); // Also returns -PI.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param currentAngle The current angle in radians.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param targetAngle the angle to be compared to in radians.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns The difference between two angles in radians.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofAngleDifferenceRadians</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> currentAngle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> targetAngle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\name Number wrapping</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Find a value within a given range, wrapping the value if it overflows.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// If a value is between from and to, return that value.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// If a value is NOT within that range, wrap it.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Example:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\tofWrap(5, 0, 10); // Returns 5.</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\tofWrap(15, 0, 10); // Also returns 5.</span>\n<span class=\"token comment\" spellcheck=\"true\">///\t\tofWrap(-5, 0, 10); // Also returns 5.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param value The value to map.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param from The lower bound of the range.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns to The upper bound of the range.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofWrap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// \\brief Convenience function for ofWrap(), constrained between -PI...PI</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofWrapRadians</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> from <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>glm<span class=\"token operator\">::</span>pi<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> to<span class=\"token operator\">=</span>glm<span class=\"token operator\">::</span>pi<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// \\brief Convenience function for ofWrap(), constrained between -180...180</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofWrapDegrees</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> from <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">180</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> to<span class=\"token operator\">=</span><span class=\"token operator\">+</span><span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\name Noise</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculates a one dimensional Perlin noise value between 0.0...1.0.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofNoise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculates a two dimensional Perlin noise value between 0.0...1.0.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofNoise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculates a two dimensional Perlin noise value between 0.0...1.0.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofNoise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculates a three dimensional Perlin noise value between 0.0...1.0.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofNoise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculates a three dimensional Perlin noise value between 0.0...1.0.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofNoise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculates a four dimensional Perlin noise value between 0.0...1.0.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofNoise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculates a four dimensional Perlin noise value between 0.0...1.0.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofNoise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec4<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculates a one dimensional Perlin noise value between -1.0...1.0.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofSignedNoise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculates a two dimensional Perlin noise value between -1.0...1.0.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofSignedNoise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculates a two dimensional Perlin noise value between -1.0...1.0.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofSignedNoise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculates a three dimensional Perlin noise value between -1.0...1.0.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofSignedNoise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculates a three dimensional Perlin noise value between -1.0...1.0.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofSignedNoise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculates a four dimensional Perlin noise value between -1.0...1.0.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofSignedNoise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculates a four dimensional Perlin noise value between -1.0...1.0.</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">ofSignedNoise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec4 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\name Geometry</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Determine the intersection between two lines.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param line1Start Starting point for first line.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param line1End End point for first line.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param line2Start Starting point for second line.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param line2End End point for second line.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param intersection glm::vec3 reference in which to store the computed intersection point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns True if the lines intersect.</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">vectype</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofLineSegmentIntersection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vectype<span class=\"token operator\">&amp;</span> line1Start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vectype<span class=\"token operator\">&amp;</span> line1End<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vectype<span class=\"token operator\">&amp;</span> line2Start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vectype<span class=\"token operator\">&amp;</span> line2End<span class=\"token punctuation\">,</span> vectype<span class=\"token operator\">&amp;</span> intersection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tvectype diffLA<span class=\"token punctuation\">,</span> diffLB<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> compareA<span class=\"token punctuation\">,</span> compareB<span class=\"token punctuation\">;</span>\n\tdiffLA <span class=\"token operator\">=</span> line1End <span class=\"token operator\">-</span> line1Start<span class=\"token punctuation\">;</span>\n\tdiffLB <span class=\"token operator\">=</span> line2End <span class=\"token operator\">-</span> line2Start<span class=\"token punctuation\">;</span>\n\tcompareA <span class=\"token operator\">=</span> diffLA<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>line1Start<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> diffLA<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>line1Start<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\tcompareB <span class=\"token operator\">=</span> diffLB<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>line2Start<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> diffLB<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>line2Start<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> diffLA<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>line2Start<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> diffLA<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>line2Start<span class=\"token punctuation\">.</span>x <span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> compareA <span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span>\n\t\t\t<span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> diffLA<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>line2End<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> diffLA<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>line2End<span class=\"token punctuation\">.</span>x <span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> compareA <span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">&amp;&amp;</span>\n\t\t<span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> diffLB<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>line1Start<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> diffLB<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>line1Start<span class=\"token punctuation\">.</span>x <span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> compareB <span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span>\n\t\t\t<span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> diffLB<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>line1End<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> diffLB<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>line1End<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> compareB <span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">float</span> lDetDivInv <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>diffLA<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>diffLB<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>diffLA<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>diffLB<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tintersection<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span>  <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>diffLA<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>compareB<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>compareA<span class=\"token operator\">*</span>diffLB<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> lDetDivInv <span class=\"token punctuation\">;</span>\n\t\tintersection<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span>  <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>diffLA<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>compareB<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>compareA<span class=\"token operator\">*</span>diffLB<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> lDetDivInv <span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Given the four points that determine a bezier curve, return an interpolated point on the curve.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param a The beginning point of the curve.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param b The first control point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param c The second control point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param d The end point of the curve.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param t an offset along the curve, normalized between 0 and 1.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns A glm::vec3 on the curve.</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">vectype</span><span class=\"token operator\">></span>\nvectype <span class=\"token function\">ofBezierPoint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vectype<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vectype<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vectype<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vectype<span class=\"token operator\">&amp;</span> d<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> tp <span class=\"token operator\">=</span> <span class=\"token number\">1.0f</span> <span class=\"token operator\">-</span> t<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token operator\">*</span>tp<span class=\"token operator\">*</span>tp<span class=\"token operator\">*</span>tp <span class=\"token operator\">+</span> b<span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>t<span class=\"token operator\">*</span>tp<span class=\"token operator\">*</span>tp <span class=\"token operator\">+</span> c<span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>t<span class=\"token operator\">*</span>t<span class=\"token operator\">*</span>tp <span class=\"token operator\">+</span> d<span class=\"token operator\">*</span>t<span class=\"token operator\">*</span>t<span class=\"token operator\">*</span>t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Given the four points that determine a Catmull Rom curve, return an interpolated point on the curve.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param a The first control point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param b The beginning point of the curve.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param c The end point of the curve.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param d The second control point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param t an offset along the curve, normalized between 0 and 1.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns A glm::vec3 on the curve.</span>\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">vectype</span><span class=\"token operator\">></span>\nvectype <span class=\"token function\">ofCurvePoint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vectype<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vectype<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vectype<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vectype<span class=\"token operator\">&amp;</span> d<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tvectype pt<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> t2 <span class=\"token operator\">=</span> t <span class=\"token operator\">*</span> t<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> t3 <span class=\"token operator\">=</span> t2 <span class=\"token operator\">*</span> t<span class=\"token punctuation\">;</span>\n\tpt<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0.5f</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">2.0f</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span>x <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n\t\t\t\t   <span class=\"token punctuation\">(</span> <span class=\"token operator\">-</span>a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> c<span class=\"token punctuation\">.</span>x <span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> t <span class=\"token operator\">+</span>\n\t\t\t\t   <span class=\"token punctuation\">(</span> <span class=\"token number\">2.0f</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> <span class=\"token number\">5.0f</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> c<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> d<span class=\"token punctuation\">.</span>x <span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> t2 <span class=\"token operator\">+</span>\n\t\t\t\t   <span class=\"token punctuation\">(</span> <span class=\"token operator\">-</span>a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token number\">3.0f</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> <span class=\"token number\">3.0f</span> <span class=\"token operator\">*</span> c<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> d<span class=\"token punctuation\">.</span>x <span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> t3 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpt<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0.5f</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">2.0f</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n\t\t\t\t   <span class=\"token punctuation\">(</span> <span class=\"token operator\">-</span>a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> c<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> t <span class=\"token operator\">+</span>\n\t\t\t\t   <span class=\"token punctuation\">(</span> <span class=\"token number\">2.0f</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token number\">5.0f</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> c<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> d<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> t2 <span class=\"token operator\">+</span>\n\t\t\t\t   <span class=\"token punctuation\">(</span> <span class=\"token operator\">-</span>a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> <span class=\"token number\">3.0f</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token number\">3.0f</span> <span class=\"token operator\">*</span> c<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> d<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> t3 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> pt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// Given the four points that determine a bezier curve and an offset along the curve, return an tangent vector to a point on the curve.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Currently this is not a normalized point, and will need to be normalized.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param a The beginning point of the curve.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param b The first control point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param c The second control point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param d The end point of the curve.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param t an offset along the curve, normalized between 0 and 1.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns A glm::vec3 on the curve.</span>\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">vectype</span><span class=\"token operator\">></span>\nvectype <span class=\"token function\">ofBezierTangent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vectype<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vectype<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vectype<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vectype<span class=\"token operator\">&amp;</span> d<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-</span>a<span class=\"token operator\">-</span>c<span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>b<span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>c<span class=\"token operator\">-</span>b<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>t<span class=\"token operator\">*</span><span class=\"token number\">6</span> <span class=\"token operator\">-</span> a<span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>b<span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Return a tangent point for an offset along a Catmull Rom curve.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param a The first control point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param b The beginning point of the curve.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param c The end point of the curve.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param d The second control point.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param t an offset along the curve, normalized between 0 and 1.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns A glm::vec3 on the curve.</span>\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">vectype</span><span class=\"token operator\">></span>\nvectype <span class=\"token function\">ofCurveTangent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vectype<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vectype<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vectype<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vectype<span class=\"token operator\">&amp;</span> d<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> v0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> c <span class=\"token operator\">-</span> a <span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> v1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> d <span class=\"token operator\">-</span> b <span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> b<span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token operator\">-</span>c<span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> v0 <span class=\"token operator\">+</span> v1<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>t<span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span> c<span class=\"token operator\">*</span><span class=\"token number\">3</span> <span class=\"token operator\">-</span> b<span class=\"token operator\">*</span><span class=\"token number\">3</span> <span class=\"token operator\">-</span> v1 <span class=\"token operator\">-</span> v0<span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> v0<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Type<span class=\"token operator\">></span>\nType <span class=\"token function\">ofInterpolateCosine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Type<span class=\"token operator\">></span>\nType <span class=\"token function\">ofInterpolateCubic</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Type<span class=\"token operator\">></span>\nType <span class=\"token function\">ofInterpolateCatmullRom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Type<span class=\"token operator\">></span>\nType <span class=\"token function\">ofInterpolateHermite</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Type<span class=\"token operator\">></span>\nType <span class=\"token function\">ofInterpolateHermite</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> pct<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tension<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> bias<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\name Others</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculates the next larger power of 2.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// If the input is already a power of 2, it will return itself.  </span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Example:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofNextPow2(50); // returns 64</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofNextPow2(64); // returns 64</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofNextPow2(401); // returns 512</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param a The starting point for finding the next power of 2.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns value^2.</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ofNextPow2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns the sign of a number.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns int -1 if n is negative, 1 if n is positive, and 0 is n == 0;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ofSign</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Compare two floating point types for equality.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// From C++ FAQ:</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Floating point arithmetic is different from real number arithmetic.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Never use `==` to compare two floating point numbers.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// This solution is not completely symmetric, meaning it is possible for</span>\n<span class=\"token comment\" spellcheck=\"true\">/// `ofIsFloatEqual(x, y) != ofIsFloatEqual(y, x)`. From a practical</span>\n<span class=\"token comment\" spellcheck=\"true\">/// standpoint, this does not usually occur when the magnitudes of x and y are</span>\n<span class=\"token comment\" spellcheck=\"true\">/// significantly larger than epsilon, but your mileage may vary.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa https://isocpp.org/wiki/faq/newbie#floating-point-arith</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\tparam The floating point data type.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param a The first floating point type variable to compare.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param b The second floating point type variable to compare.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns True if `std::abs(x - y) &lt;= std::numeric_limits&lt;Type>::epsilon() * std::abs(x)`.</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Type<span class=\"token operator\">></span>\n<span class=\"token keyword\">typename</span> std<span class=\"token operator\">::</span>enable_if<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>is_floating_point<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span><span class=\"token operator\">::</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>type <span class=\"token function\">ofIsFloatEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> std<span class=\"token operator\">::</span>numeric_limits<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">epsilon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> std<span class=\"token operator\">::</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">// from http://paulbourke.net/miscellaneous/interpolation/</span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Type<span class=\"token operator\">></span>\nType <span class=\"token function\">ofInterpolateCosine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> pct2<span class=\"token punctuation\">;</span>\n\n\tpct2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>pct<span class=\"token operator\">*</span>glm<span class=\"token operator\">::</span>pi<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>y1<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>pct2<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>y2<span class=\"token operator\">*</span>pct2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// from http://paulbourke.net/miscellaneous/interpolation/</span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Type<span class=\"token operator\">></span>\nType <span class=\"token function\">ofInterpolateCubic</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tType a0<span class=\"token punctuation\">,</span>a1<span class=\"token punctuation\">,</span>a2<span class=\"token punctuation\">,</span>a3<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> pct2<span class=\"token punctuation\">;</span>\n\n\tpct2 <span class=\"token operator\">=</span> pct<span class=\"token operator\">*</span>pct<span class=\"token punctuation\">;</span>\n\ta0 <span class=\"token operator\">=</span> y3 <span class=\"token operator\">-</span> y2 <span class=\"token operator\">-</span> y0 <span class=\"token operator\">+</span> y1<span class=\"token punctuation\">;</span>\n\ta1 <span class=\"token operator\">=</span> y0 <span class=\"token operator\">-</span> y1 <span class=\"token operator\">-</span> a0<span class=\"token punctuation\">;</span>\n\ta2 <span class=\"token operator\">=</span> y2 <span class=\"token operator\">-</span> y0<span class=\"token punctuation\">;</span>\n\ta3 <span class=\"token operator\">=</span> y1<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>a0<span class=\"token operator\">*</span>pct<span class=\"token operator\">*</span>pct2<span class=\"token operator\">+</span>a1<span class=\"token operator\">*</span>pct2<span class=\"token operator\">+</span>a2<span class=\"token operator\">*</span>pct<span class=\"token operator\">+</span>a3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// from http://paulbourke.net/miscellaneous/interpolation/</span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Type<span class=\"token operator\">></span>\nType <span class=\"token function\">ofInterpolateCatmullRom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tType a0<span class=\"token punctuation\">,</span>a1<span class=\"token punctuation\">,</span>a2<span class=\"token punctuation\">,</span>a3<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> pct2 <span class=\"token operator\">=</span> pct<span class=\"token operator\">*</span>pct<span class=\"token punctuation\">;</span>\n\ta0 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">0.5</span><span class=\"token operator\">*</span>y0 <span class=\"token operator\">+</span> <span class=\"token number\">1.5</span><span class=\"token operator\">*</span>y1 <span class=\"token operator\">-</span> <span class=\"token number\">1.5</span><span class=\"token operator\">*</span>y2 <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span><span class=\"token operator\">*</span>y3<span class=\"token punctuation\">;</span>\n\ta1 <span class=\"token operator\">=</span> y0 <span class=\"token operator\">-</span> <span class=\"token number\">2.5</span><span class=\"token operator\">*</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>y2 <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span><span class=\"token operator\">*</span>y3<span class=\"token punctuation\">;</span>\n\ta2 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">0.5</span><span class=\"token operator\">*</span>y0 <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span><span class=\"token operator\">*</span>y2<span class=\"token punctuation\">;</span>\n\ta3 <span class=\"token operator\">=</span> y1<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>a0<span class=\"token operator\">*</span>pct<span class=\"token operator\">*</span>pct2 <span class=\"token operator\">+</span> a1<span class=\"token operator\">*</span>pct2 <span class=\"token operator\">+</span> a2<span class=\"token operator\">*</span>pct <span class=\"token operator\">+</span>a3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// from http://musicdsp.org/showArchiveComment.php?ArchiveID=93</span>\n<span class=\"token comment\" spellcheck=\"true\">// laurent de soras</span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Type<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> Type <span class=\"token function\">ofInterpolateHermite</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> Type c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y2 <span class=\"token operator\">-</span> y0<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.5f</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> Type v <span class=\"token operator\">=</span> y1 <span class=\"token operator\">-</span> y2<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> Type w <span class=\"token operator\">=</span> c <span class=\"token operator\">+</span> v<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> Type a <span class=\"token operator\">=</span> w <span class=\"token operator\">+</span> v <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>y3 <span class=\"token operator\">-</span> y1<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.5f</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> Type b_neg <span class=\"token operator\">=</span> w <span class=\"token operator\">+</span> a<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> pct<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> b_neg<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> pct <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> pct <span class=\"token operator\">+</span> y1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// from http://paulbourke.net/miscellaneous/interpolation/</span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Type<span class=\"token operator\">></span>\nType <span class=\"token function\">ofInterpolateHermite</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Type<span class=\"token operator\">&amp;</span> y3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> pct<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tension<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> bias<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> pct2<span class=\"token punctuation\">,</span>pct3<span class=\"token punctuation\">;</span>\n\tType m0<span class=\"token punctuation\">,</span>m1<span class=\"token punctuation\">;</span>\n\tType a0<span class=\"token punctuation\">,</span>a1<span class=\"token punctuation\">,</span>a2<span class=\"token punctuation\">,</span>a3<span class=\"token punctuation\">;</span>\n\n\tpct2 <span class=\"token operator\">=</span> pct <span class=\"token operator\">*</span> pct<span class=\"token punctuation\">;</span>\n\tpct3 <span class=\"token operator\">=</span> pct2 <span class=\"token operator\">*</span> pct<span class=\"token punctuation\">;</span>\n\tm0  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y1<span class=\"token operator\">-</span>y0<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span>bias<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>tension<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\tm0 <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y2<span class=\"token operator\">-</span>y1<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>bias<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>tension<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\tm1  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y2<span class=\"token operator\">-</span>y1<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span>bias<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>tension<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\tm1 <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y3<span class=\"token operator\">-</span>y2<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>bias<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>tension<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\ta0 <span class=\"token operator\">=</span>  <span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>pct3 <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token operator\">*</span>pct2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ta1 <span class=\"token operator\">=</span>  <span class=\"token function\">Type</span><span class=\"token punctuation\">(</span>pct3 <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>pct2 <span class=\"token operator\">+</span> pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ta2 <span class=\"token operator\">=</span>  <span class=\"token function\">Type</span><span class=\"token punctuation\">(</span>pct3 <span class=\"token operator\">-</span>   pct2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ta3 <span class=\"token operator\">=</span>  <span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>pct3 <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token operator\">*</span>pct2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>a0<span class=\"token operator\">*</span>y1<span class=\"token operator\">+</span>a1<span class=\"token operator\">*</span>m0<span class=\"token operator\">+</span>a2<span class=\"token operator\">*</span>m1<span class=\"token operator\">+</span>a3<span class=\"token operator\">*</span>y2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n","type":"source","static":true}}],"fetch":[]}