{"data":[{"page":{"entry":{"name":"ofMesh.h","filename":"ofMesh.h","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/3d/ofMesh.h","path":"/openframeworks/3d/ofMesh_h","route":"/openframeworks/3d/ofMesh.h","dir":"../libs/openFrameworks/3d","ext":"h","type":"source","id":204,"parent":194,"breadcrumbs":[194,195],"siblings":[],"translations":{}},"document":"<span class=\"token comment\" spellcheck=\"true\">// This include guard is not a pragma once on purpose</span>\n<span class=\"token comment\" spellcheck=\"true\">// so some IDEs are happy include this file back form the corresponding inl</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> OF_MESH_H</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_MESH_H</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofGLUtils.h\"</span></span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofMeshFace_</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Represents a set of vertices in 3D spaces with normals, colors,</span>\n<span class=\"token comment\" spellcheck=\"true\">/// and texture coordinates at those points.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Each of these different properties is stored in a vector.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Vertices are passed to your graphics card and your graphics card fill in</span>\n<span class=\"token comment\" spellcheck=\"true\">/// the spaces in between them in a processing usually called the rendering</span>\n<span class=\"token comment\" spellcheck=\"true\">/// pipeline. The rendering pipeline goes more or less like this:</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// 1. Say how you're going to connect all the points.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// 2. Make some points.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// 3. Say that you're done making points.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// You may be thinking: I'll just make eight vertices and voila: a cube.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Not so quick. There's a hitch and that hitch is that the OpenGL renderer</span>\n<span class=\"token comment\" spellcheck=\"true\">/// has different ways of connecting the vertices that you pass to it and none</span>\n<span class=\"token comment\" spellcheck=\"true\">/// are as efficient as to only need eight vertices to create a cube.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// You've probably seen a version of the following image somewhere before.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ![PRIMATIVES](3d/primitives_new-640x269.gif)</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Generally you have to create your points to fit the drawing mode that</span>\n<span class=\"token comment\" spellcheck=\"true\">/// you've selected because of whats called winding.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// A vertex gets connected to another vertex in the order that the mode does</span>\n<span class=\"token comment\" spellcheck=\"true\">/// its winding and this means that you might need multiple vertices in a given</span>\n<span class=\"token comment\" spellcheck=\"true\">/// location to create the shape you want. The cube, for example, requires</span>\n<span class=\"token comment\" spellcheck=\"true\">/// eighteen vertices, not the eight that you would expect.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// If you note the order of vertices in the GL chart above you'll see that all</span>\n<span class=\"token comment\" spellcheck=\"true\">/// of them use their vertices slightly differently (in particular you should</span>\n<span class=\"token comment\" spellcheck=\"true\">/// make note of the GL_TRIANGLE_STRIP example). Drawing a shape requires that</span>\n<span class=\"token comment\" spellcheck=\"true\">/// you keep track of which drawing mode is being used and which order</span>\n<span class=\"token comment\" spellcheck=\"true\">/// your vertices are declared in.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// If you're thinking: it would be nice if there were an abstraction layer</span>\n<span class=\"token comment\" spellcheck=\"true\">/// for this you're thinking right. Enter the mesh, which is really just</span>\n<span class=\"token comment\" spellcheck=\"true\">/// an abstraction of the vertex and drawing mode that we started with</span>\n<span class=\"token comment\" spellcheck=\"true\">/// but which has the added bonus of managing the draw order for you.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// That may seem insignificant at first, but it provides some real benefits</span>\n<span class=\"token comment\" spellcheck=\"true\">/// when working with complex geometry.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// A very typical usage is something like the following:</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofMesh mesh;</span>\n<span class=\"token comment\" spellcheck=\"true\">/// for (int y = 0; y &lt; height; y++){</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \tfor (int x = 0; x&lt;width; x++){</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \t\tmesh.addVertex(glm::vec3(x,y,0)); // make a new vertex</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \t\tmesh.addColor(ofFloatColor(0,0,0));  // add a color at that vertex</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \t}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Now it's important to make sure that each vertex is correctly connected</span>\n<span class=\"token comment\" spellcheck=\"true\">/// with the other vertices around it. This is done using indices, which you</span>\n<span class=\"token comment\" spellcheck=\"true\">/// can set up like so:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// for (int y = 0; y&lt;height-1; y++){</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \tfor (int x=0; x&lt;width-1; x++){</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \t\tmesh.addIndex(x+y*width);\t\t\t\t// 0</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \t\tmesh.addIndex((x+1)+y*width);\t\t\t// 1</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \t\tmesh.addIndex(x+(y+1)*width);\t\t\t// 10</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \t\tmesh.addIndex((x+1)+y*width);\t\t\t// 1</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \t\tmesh.addIndex((x+1)+(y+1)*width);\t\t// 11</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \t\tmesh.addIndex(x+(y+1)*width);\t\t\t// 10</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \t}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofMesh_</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Construction</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief This creates the mesh,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// using OF_PRIMITIVE_TRIANGLES without any initial vertices.</span>\n\t<span class=\"token function\">ofMesh_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief This allows to you to use one of the other ofPrimitiveModes:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// OF_PRIMITIVE_TRIANGLES, OF_PRIMITIVE_TRIANGLE_STRIP,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// OF_PRIMITIVE_TRIANGLE_FAN, OF_PRIMITIVE_LINES, OF_PRIMITIVE_LINE_STRIP,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// OF_PRIMITIVE_LINE_LOOP, OF_PRIMITIVE_POINTS.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// See [ofGLUtils](../gl/ofGLUtils.htm) for more information on these types.</span>\n\t<span class=\"token function\">ofMesh_</span><span class=\"token punctuation\">(</span>ofPrimitiveMode mode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>V<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> verts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ofMesh_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setFromTriangles</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofMeshFace_<span class=\"token operator\">&lt;</span>V<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">,</span>T<span class=\"token operator\">>></span><span class=\"token operator\">&amp;</span> tris<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bUseFaceNormal<span class=\"token operator\">=</span><span class=\"token boolean\">false</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Mesh Mode</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Allows you to set the ofPrimitiveMode.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The available modes are OF_PRIMITIVE_TRIANGLES,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// OF_PRIMITIVE_TRIANGLE_STRIP, OF_PRIMITIVE_TRIANGLE_FAN,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// OF_PRIMITIVE_LINES, OF_PRIMITIVE_LINE_STRIP,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// OF_PRIMITIVE_LINE_LOOP, OF_PRIMITIVE_POINTS</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setMode</span><span class=\"token punctuation\">(</span>ofPrimitiveMode mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\\\returns the primitive mode that the mesh is using.</span>\n\tofPrimitiveMode <span class=\"token function\">getMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Primitive constructor helper methods</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t<span class=\"token keyword\">static</span> ofMesh_ <span class=\"token function\">plane</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> columns<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rows<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n\t\tofPrimitiveMode mode<span class=\"token operator\">=</span>OF_PRIMITIVE_TRIANGLE_STRIP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> ofMesh_ <span class=\"token function\">sphere</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> res<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span>\n\t\tofPrimitiveMode mode<span class=\"token operator\">=</span>OF_PRIMITIVE_TRIANGLE_STRIP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> ofMesh_ <span class=\"token function\">icosahedron</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> ofMesh_ <span class=\"token function\">icosphere</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t iterations<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\\brief A helper method that returns a cylinder made of triangles.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The resolution settings for the radius, height, and cap are optional</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// (they are set at a default of 12 segments around the radius, 6 segments</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// in the height, and 2 on the cap). You have the option to cap the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// cylinder or not. The only valid modes are the default</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// OF_PRIMITIVE_TRIANGLE_STRIP and OF_PRIMITIVE_TRIANGLES.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\tofMesh mesh;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\tmesh = ofMesh::cylinder(100.0, 200.0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t![image of a simple cylinder](3d/cylinder.jpg)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token keyword\">static</span> ofMesh_ <span class=\"token function\">cylinder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> radiusSegments<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token keyword\">int</span> heightSegments<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numCapSegments<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bCapped <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\tofPrimitiveMode mode<span class=\"token operator\">=</span>OF_PRIMITIVE_TRIANGLE_STRIP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A helper method that returns a cone made of triangles.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The resolution settings for the radius, height, and cap are optional</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// (they are set at a default of 12 segments around the radius, 6 segments</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// in the height, and 2 on the cap). The only valid modes are the default</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// OF_PRIMITIVE_TRIANGLE_STRIP and OF_PRIMITIVE_TRIANGLES.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofMesh mesh;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// mesh = ofMesh::cone(100.0, 200.0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ![image of a simple cone](3d/cone.jpg)</span>\n\t<span class=\"token keyword\">static</span> ofMesh_ <span class=\"token function\">cone</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> radiusSegments<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token keyword\">int</span> heightSegments<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> capSegments<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n\t\tofPrimitiveMode mode<span class=\"token operator\">=</span>OF_PRIMITIVE_TRIANGLE_STRIP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A helper method that returns a box made of triangles.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The resolution settings for the width and height are optional</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// (they are both set at a default of 2 triangles per side).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofMesh mesh;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// mesh = ofMesh::box(200.0, 200.0, 200.0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ![image of a simple box](3d/box.jpg)</span>\n\t<span class=\"token keyword\">static</span> ofMesh_ <span class=\"token function\">box</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> depth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> resX<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token keyword\">int</span> resY<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> resZ<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns an ofMesh representing an XYZ coordinate system.</span>\n\t<span class=\"token keyword\">static</span> ofMesh_ <span class=\"token function\">axis</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> size<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Vertices</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Add a new vertex at the end of the current list of vertices.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// It is important to remember that the order the vertices are added to</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the list determines how they link they form the polygons and strips</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// (assuming you do not change their indeces). See the ofMesh class</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// description for details.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> V<span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Add a vector of vertices to a mesh, allowing you to push out</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// many at once rather than adding one at a time. The vector of vertices</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// is added after the end of the current vertices list.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addVertices</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>V<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> verts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Add an array of vertices to the mesh.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Because you are using a pointer to the array you also have to define</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the length of the array as an int (amt). The vertices are added at the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// end of the current vertices list.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addVertices</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> V<span class=\"token operator\">*</span> verts<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t amt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Removes the vertex at the index in the vector.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">removeVertex</span><span class=\"token punctuation\">(</span>ofIndexType index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setVertex</span><span class=\"token punctuation\">(</span>ofIndexType index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> V<span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Removes all the vertices.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">clearVertices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Removes all the vertices, colors, and indices from the mesh.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the size of the vertices vector for the mesh.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This will tell you how many vertices are contained in the mesh.</span>\n\tstd<span class=\"token operator\">::</span>size_t <span class=\"token function\">getNumVertices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns a pointer to the vertices that the mesh contains.</span>\n\tV<span class=\"token operator\">*</span> <span class=\"token function\">getVerticesPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns a pointer to the vertices that the mesh contains.</span>\n\t<span class=\"token keyword\">const</span> V<span class=\"token operator\">*</span> <span class=\"token function\">getVerticesPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the vertex at the index.</span>\n\tV <span class=\"token function\">getVertex</span><span class=\"token punctuation\">(</span>ofIndexType i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the vector that contains all of the vertices of the mesh.</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>V<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getVertices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the vector that contains all of the vertices of the mesh.</span>\n\t<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>V<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getVertices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns Whether the mesh has any vertices.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">hasVertices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Add the vertices, normals, texture coordinates and indices of one mesh onto another mesh.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Everything from the referenced mesh is simply added at the end</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// of the current mesh's lists.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofMesh_ <span class=\"token operator\">&amp;</span> mesh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">mergeDuplicateVertices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns a ofVec3f defining the centroid of all the vetices in the mesh.</span>\n\tV <span class=\"token function\">getCentroid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Normals</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\\\returns the normal at the index in the normals vector.</span>\n\tN <span class=\"token function\">getNormal</span><span class=\"token punctuation\">(</span>ofIndexType i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Add a normal to the mesh as a 3D vector,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// typically perpendicular to the plane of the face. A normal is a vector</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// that defines how a surface responds to lighting, i.e. how it is lit.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The amount of light reflected by a surface is proportional to the angle</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// between the light's direction and the normal. The smaller the angle the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// brighter the surface will look. See the normalsExample for advice on</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// computing the normals.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// addNormal adds the 3D vector to the end of the list, so you need to</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// make sure you add normals at the same index of the matching vertex.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addNormal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> N<span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Add a vector of normals to a mesh,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// allowing you to push out many normals at once rather than</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// adding one at a time. The vector of normals is added after the end of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the current normals list.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addNormals</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>N<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> norms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Add an array of normals to the mesh.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Because you are using a pointer to the array you also have to define</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the length of the array as an std::size_t (amt). The normals are added at the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// end of the current normals list.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addNormals</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> N<span class=\"token operator\">*</span> norms<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t amt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Remove a normal.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">removeNormal</span><span class=\"token punctuation\">(</span>ofIndexType index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\todo Documentation.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setNormal</span><span class=\"token punctuation\">(</span>ofIndexType index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> N<span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Remove all the normals.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">clearNormals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief This will tell you how many normals are contained in the mesh.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the size of the normals vector for the mesh.</span>\n\tstd<span class=\"token operator\">::</span>size_t <span class=\"token function\">getNumNormals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns a pointer to the normals that the mesh contains.</span>\n\tN<span class=\"token operator\">*</span> <span class=\"token function\">getNormalsPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns a pointer to the normals that the mesh contains.</span>\n\t<span class=\"token keyword\">const</span> N<span class=\"token operator\">*</span> <span class=\"token function\">getNormalsPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Use this if you plan to change the normals as part of this call as it</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// will force a reset of the cache.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the vector that contains all of the normals of the mesh,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// if it has any.</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>N<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getNormals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the vector that contains all of the normals of the mesh, if</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// it has any. (read only)</span>\n\t<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>N<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getNormals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// /returnsWhether the mesh has any normals.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">hasNormals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Enable mesh normals.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Use disableNormals() to turn normals off.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Normals are enabled by default when they are added to the mesh.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">enableNormals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Disable mesh normals.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Use enableNormals() to turn normals back on.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">disableNormals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">usingNormals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">smoothNormals</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\" spellcheck=\"true\">/// \\brief Duplicates vertices and updates normals to get a low-poly look.</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">flatNormals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Faces</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the vector that contains all of the faces of the mesh. This isn't currently implemented.</span>\n\tofMeshFace_<span class=\"token operator\">&lt;</span>V<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">,</span>T<span class=\"token operator\">></span> <span class=\"token function\">getFace</span><span class=\"token punctuation\">(</span>ofIndexType faceId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get normals for each face</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// As a default it only calculates the normal for the face as a whole but</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// by setting (perVertex = true) it will return the same normal value for</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// each of the three vertices making up a face.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns a vector containing the calculated normals of each face in the mesh.</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>N<span class=\"token operator\">></span> <span class=\"token function\">getFaceNormals</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">bool</span> perVetex<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the mesh as a vector of unique ofMeshFace_s</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// a list of triangles that do not share vertices or indices</span>\n\t<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofMeshFace_<span class=\"token operator\">&lt;</span>V<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">,</span>T<span class=\"token operator\">>></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getUniqueFaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Colors</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the color at the index in the colors vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the color at the index in the colors vector.</span>\n\tC <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>ofIndexType i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief This adds a color to the mesh,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the color will be associated with the vertex in the same position.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> C<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief This adds colors using a reference to a vector of ofColors.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// For each color in the vector, this will put the colors at the corresponding vertex.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addColors</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>C<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> cols<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief This adds a pointer of colors to the ofMesh instance with the amount passed as the second parameter.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addColors</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> C<span class=\"token operator\">*</span> cols<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t amt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Remove a color at the index in the colors vector.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">removeColor</span><span class=\"token punctuation\">(</span>ofIndexType index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the color at the index in the colors vector.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>ofIndexType index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> C<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Clear all the colors.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">clearColors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the size of the colors vector for the mesh.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This will tell you how many colors are contained in the mesh.</span>\n\tstd<span class=\"token operator\">::</span>size_t <span class=\"token function\">getNumColors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Use this if you plan to change the colors as part of this call as it will force a reset of the cache.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns a pointer that contains all of the colors of the mesh, if it has any.</span>\n\tC<span class=\"token operator\">*</span> <span class=\"token function\">getColorsPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns a pointer that contains all of the colors of the mesh, if it has any. (read only)</span>\n\t<span class=\"token keyword\">const</span> C<span class=\"token operator\">*</span> <span class=\"token function\">getColorsPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Use this if you plan to change the colors as part of this call as it will force a reset of the cache.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the vector that contains all of the colors of the mesh, if it has any.</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>C<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getColors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the vector that contains all of the colors of the mesh, if it has any. (read only)</span>\n\t<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>C<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getColors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// /returns Whether the mesh has any colors.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">hasColors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Enable mesh colors.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Use disableColors() to turn colors off.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Colors are enabled by default when they are added to the mesh.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">enableColors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Disable mesh colors.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Use enableColors() to turn colors back on.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">disableColors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">usingColors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Texture Coordinates</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the Vec2f representing the texture coordinate.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Because OF uses ARB textures these are in pixels rather than</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// 0-1 normalized coordinates.</span>\n\tT <span class=\"token function\">getTexCoord</span><span class=\"token punctuation\">(</span>ofIndexType i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Add a Vec2f representing the texture coordinate.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Because OF uses ARB textures these are in pixels rather than</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// 0-1 normalized coordinates.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addTexCoord</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Add a vector of texture coordinates to a mesh,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// allowing you to push out many at once rather than adding one at a time.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The vector of texture coordinates is added after the end of the current</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// texture coordinates list.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addTexCoords</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> tCoords<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief  Add an array of texture coordinates to the mesh.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Because you are using a pointer to the array you also have to define</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the length of the array as an std::size_t (amt).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The texture coordinates are added at the end of the current texture</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// coordinates list.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addTexCoords</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">*</span> tCoords<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t amt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief  Remove a Vec2f representing the texture coordinate.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">removeTexCoord</span><span class=\"token punctuation\">(</span>ofIndexType index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setTexCoord</span><span class=\"token punctuation\">(</span>ofIndexType index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief  Clear all the texture coordinates.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">clearTexCoords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief This will tell you how many texture coordinates are contained in the mesh.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the size of the texture coordinates vector for the mesh.</span>\n\tstd<span class=\"token operator\">::</span>size_t <span class=\"token function\">getNumTexCoords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns a pointer to the texture coords that the mesh contains.</span>\n\tT<span class=\"token operator\">*</span> <span class=\"token function\">getTexCoordsPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get a pointer to the ofVec2f texture coordinates that the mesh contains.</span>\n\t<span class=\"token keyword\">const</span> T<span class=\"token operator\">*</span> <span class=\"token function\">getTexCoordsPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get a vector representing the texture coordinates of the mesh</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Because OF uses ARB textures these are in pixels rather than 0-1 normalized coordinates.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Use this if you plan to change the texture coordinates as part of this</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// call as it will force a reset of the cache.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns a vector of Vec2f representing the texture coordinates for the whole mesh.</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getTexCoords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Because OF uses ARB textures these are in pixels rather than 0-1 normalized coordinates.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns a vector of Vec2f representing the texture coordinates for the whole mesh. (read only)</span>\n\t<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getTexCoords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// /returns Whether the mesh has any textures assigned to it.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">hasTexCoords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Enable mesh textures.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Use disableTextures() to turn textures off.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Textures are enabled by default when they are added to the mesh.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">enableTextures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Disable mesh textures.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Use enableTextures() to turn textures back on.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">disableTextures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">usingTextures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Indices</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Allow you to set up the indices automatically when you add a vertex.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setupIndicesAuto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Use this if you plan to change the indices as part of this call as it</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// will force a reset of the cache.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the vector that contains all of the indices of the mesh, if it has any.</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofIndexType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getIndices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the index from the index vector. Each index represents the index of the vertex in the vertices vector. This determines the way that the vertices are connected into the polgoynon type set in the primitiveMode.</span>\n\tofIndexType <span class=\"token function\">getIndex</span><span class=\"token punctuation\">(</span>ofIndexType i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Add an index to the index vector. Each index represents the order of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// connection for  vertices. This determines the way that the vertices are</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// connected according to the polygon type set in the primitiveMode.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// It important to note that a particular vertex might be used for several</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// faces and so would be referenced several times in the index vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofMesh mesh;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// mesh.setMode(OF_PRIMITIVE_TRIANGLES);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// mesh.addVertex(glm::vec3(0,-200,0));</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// mesh.addVertex(glm::vec3(200, 0, 0 ));</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// mesh.addVertex(glm::vec3(-200, 0, 0 ));</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// mesh.addVertex(glm::vec3(0, 200, 0 ));</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// mesh.addIndex(0); //connect the first vertex we made, v0</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// mesh.addIndex(1); //to v1</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// mesh.addIndex(2); //to v2 to complete the face</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// mesh.addIndex(1); //now start a new face beginning with v1</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// mesh.addIndex(2); //that is connected to v2</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// mesh.addIndex(3); //and we complete the face with v3</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Will give you this shape:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ![image of basic use of indices](3d/index.jpg)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span>ofIndexType i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief This adds a vector of indices.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addIndices</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofIndexType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> inds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief This adds indices to the ofMesh by pointing to an array of indices.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The \"amt\" defines the length of the array.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addIndices</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofIndexType<span class=\"token operator\">*</span> inds<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t amt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Removes an index.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">removeIndex</span><span class=\"token punctuation\">(</span>ofIndexType index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief This sets the index at i.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setIndex</span><span class=\"token punctuation\">(</span>ofIndexType index<span class=\"token punctuation\">,</span> ofIndexType val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Remove all the indices of the mesh.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This means that your mesh will be a point cloud.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">clearIndices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief This will tell you how many indices are contained in the mesh.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the size of the indices vector for the mesh.</span>\n\tstd<span class=\"token operator\">::</span>size_t <span class=\"token function\">getNumIndices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns a pointer to the indices that the mesh contains.</span>\n\tofIndexType<span class=\"token operator\">*</span> <span class=\"token function\">getIndexPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns a pointer to the indices that the mesh contains.</span>\n\t<span class=\"token keyword\">const</span> ofIndexType<span class=\"token operator\">*</span> <span class=\"token function\">getIndexPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the vector that contains all of the indices of the mesh, if it has any. (read only)</span>\n\t<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofIndexType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getIndices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// /returns Whether the mesh has any indices assigned to it.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">hasIndices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Adding a triangle means using three of the vertices that have already been added to create a triangle.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This is an easy way to create triangles in the mesh. The indices refer to the index of the vertex in the vector of vertices.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addTriangle</span><span class=\"token punctuation\">(</span>ofIndexType index1<span class=\"token punctuation\">,</span> ofIndexType index2<span class=\"token punctuation\">,</span> ofIndexType index3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Enable mesh indices.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Use disableIndices() to turn indices off.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Indices are enabled by default when they are added to the mesh.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">enableIndices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Disable mesh indices.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Use enableIndices() to turn indices back on.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">disableIndices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">usingIndices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setColorForIndices</span><span class=\"token punctuation\">(</span> ofIndexType startIndex<span class=\"token punctuation\">,</span> ofIndexType endIndex<span class=\"token punctuation\">,</span> C color <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// The new mesh includes the mesh mode, colors, textures, and normals of the original mesh (assuming any were added).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns a mesh made up of a range of indices from startIndex to the endIndex.</span>\n\tofMesh_<span class=\"token operator\">&lt;</span>V<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">,</span>T<span class=\"token operator\">></span> <span class=\"token function\">getMeshForIndices</span><span class=\"token punctuation\">(</span> ofIndexType startIndex<span class=\"token punctuation\">,</span> ofIndexType endIndex <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tofMesh_<span class=\"token operator\">&lt;</span>V<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">,</span>T<span class=\"token operator\">></span> <span class=\"token function\">getMeshForIndices</span><span class=\"token punctuation\">(</span> ofIndexType startIndex<span class=\"token punctuation\">,</span> ofIndexType endIndex<span class=\"token punctuation\">,</span> ofIndexType startVertIndex<span class=\"token punctuation\">,</span> ofIndexType endVertIndex <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Drawing</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief This allows you draw just the vertices, meaning that you'll have a point cloud.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">drawVertices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief This draws the mesh as GL_LINES, meaning that you'll have a wireframe.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">drawWireframe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief This draws the mesh as faces, meaning that you'll have a collection of faces.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">drawFaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief This draws the mesh using its primitive type, meaning that if</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// you set them up to be triangles, this will draw the triangles.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief This draws the mesh using a defined renderType,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// overriding the renderType defined with setMode().</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>ofPolyRenderMode renderType<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Saving and loading</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Loads a mesh from a file located at the provided path into the mesh.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This will replace any existing data within the mesh.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// It expects that the file will be in the [PLY Format](http://en.wikipedia.org/wiki/PLY_(file_format)).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// It will only load meshes saved in the PLY ASCII format; the binary format is not supported.</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">///  \\brief Saves the mesh at the passed path in the [PLY Format](http://en.wikipedia.org/wiki/PLY_(file_format)).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///  There are two format options for PLY: a binary format and an ASCII format.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///  By default, it will save using the ASCII format.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///  Passing ``true`` into the ``useBinary`` parameter will save it in the binary format.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///  If you're planning on reloading the mesh into ofMesh, ofMesh currently only supports loading the ASCII format.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///  For more information, see the [PLY format specification](http://paulbourke.net/dataformats/ply/).</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> useBinary <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns If the vertices of the mesh have changed, been added or removed.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">haveVertsChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns If the normals of the mesh have changed, been added or removed.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">haveNormalsChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns If the colors of the mesh have changed, been added or removed.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">haveColorsChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns If the texture coords of the mesh have changed, been added or removed.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">haveTexCoordsChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns If the indices of the mesh have changed, been added or removed.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">haveIndicesChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>V<span class=\"token operator\">></span> vertices<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>C<span class=\"token operator\">></span> colors<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>N<span class=\"token operator\">></span> normals<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> texCoords<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofIndexType<span class=\"token operator\">></span> indices<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// this variables are only caches and returned always as const</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// mutable allows to change them from const methods</span>\n\t<span class=\"token keyword\">mutable</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofMeshFace_<span class=\"token operator\">&lt;</span>V<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">,</span>T<span class=\"token operator\">>></span> faces<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">mutable</span> <span class=\"token keyword\">bool</span> bFacesDirty<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">bool</span> bVertsChanged<span class=\"token punctuation\">,</span> bColorsChanged<span class=\"token punctuation\">,</span> bNormalsChanged<span class=\"token punctuation\">,</span> bTexCoordsChanged<span class=\"token punctuation\">,</span>\n\t\tbIndicesChanged<span class=\"token punctuation\">;</span>\n\tofPrimitiveMode mode<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">bool</span> useColors<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> useTextures<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> useNormals<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> useIndices<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//\tofMaterial *mat;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief An ofMeshFace_ is a face on one of the ofPrimitive instances.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// In the ofPrimitive a face consists of 3 points connected together.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// You can get a vector of ofMeshFace_ instances from any ofPrimitive like so:</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// vector&lt;ofMeshFace_> triangles = box.getMesh().getUniqueFaces();</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// They're very handy for manipulating individual vertices or doing strange/fun</span>\n<span class=\"token comment\" spellcheck=\"true\">/// things with intersection and boundary testing, among many many other things.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// this is always a triangle</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofMeshFace_</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">ofMeshFace_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> N <span class=\"token operator\">&amp;</span> <span class=\"token function\">getFaceNormal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setVertex</span><span class=\"token punctuation\">(</span> ofIndexType index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> V<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> V<span class=\"token operator\">&amp;</span> <span class=\"token function\">getVertex</span><span class=\"token punctuation\">(</span> ofIndexType index <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setNormal</span><span class=\"token punctuation\">(</span> ofIndexType index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> N<span class=\"token operator\">&amp;</span> n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> N<span class=\"token operator\">&amp;</span> <span class=\"token function\">getNormal</span><span class=\"token punctuation\">(</span> ofIndexType  index <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span> ofIndexType index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> C<span class=\"token operator\">&amp;</span> color <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> C<span class=\"token operator\">&amp;</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>ofIndexType  index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setTexCoord</span><span class=\"token punctuation\">(</span> ofIndexType index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> tCoord <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> <span class=\"token function\">getTexCoord</span><span class=\"token punctuation\">(</span> ofIndexType index <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setHasColors</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">bool</span> bColors <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setHasNormals</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">bool</span> bNormals <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setHasTexcoords</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">bool</span> bTexcoords <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">hasColors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">hasNormals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">hasTexcoords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">calculateFaceNormal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> bHasNormals<span class=\"token punctuation\">,</span> bHasColors<span class=\"token punctuation\">,</span> bHasTexcoords<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// this variables are only caches and returned always as const</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// mutable allows to change them from const methods</span>\n\t<span class=\"token keyword\">mutable</span> <span class=\"token keyword\">bool</span> bFaceNormalDirty<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">mutable</span> N faceNormal<span class=\"token punctuation\">;</span>\n\tV vertices<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tN normals<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tC colors<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tT texCoords<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofMesh.inl\"</span></span>\n\n<span class=\"token keyword\">using</span> ofMesh <span class=\"token operator\">=</span> ofMesh_<span class=\"token operator\">&lt;</span>ofDefaultVertexType<span class=\"token punctuation\">,</span> ofDefaultNormalType<span class=\"token punctuation\">,</span> ofDefaultColorType<span class=\"token punctuation\">,</span> ofDefaultTexCoordType<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ofMeshFace <span class=\"token operator\">=</span> ofMeshFace_<span class=\"token operator\">&lt;</span>ofDefaultVertexType<span class=\"token punctuation\">,</span> ofDefaultNormalType<span class=\"token punctuation\">,</span> ofDefaultColorType<span class=\"token punctuation\">,</span> ofDefaultTexCoordType<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n","type":"source","static":true}}],"fetch":[]}