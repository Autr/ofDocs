{"data":[{"page":{"entry":{"name":"ofEvent.h","filename":"ofEvent.h","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/events/ofEvent.h","path":"/openframeworks/events/ofEvent_h","route":"/openframeworks/events/ofEvent.h","dir":"../libs/openFrameworks/events","ext":"h","type":"source","id":231,"parent":230,"breadcrumbs":[230,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mutex></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iterator></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;atomic></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stddef.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque></span></span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/*! \\cond PRIVATE */</span>\n<span class=\"token keyword\">namespace</span> of<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">namespace</span> priv<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// Helper classes and methods, only for internal use of ofEvent</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// -------------------------------------</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">NoopMutex</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// -------------------------------------</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractEventToken</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">AbstractEventToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">// -------------------------------------</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseFunctionId</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">BaseFunctionId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">BaseFunctionId</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BaseFunctionId <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n\t\tBaseFunctionId <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BaseFunctionId <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">BaseFunctionId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BaseFunctionId <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">virtual</span> BaseFunctionId <span class=\"token operator\">*</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// -------------------------------------</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">StdFunctionId</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> BaseFunctionId<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>atomic<span class=\"token operator\">&lt;</span>uint_fast64_t<span class=\"token operator\">></span> nextId<span class=\"token punctuation\">;</span>\n\t\tuint64_t id<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token function\">StdFunctionId</span><span class=\"token punctuation\">(</span>uint64_t id<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">StdFunctionId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tid <span class=\"token operator\">=</span> nextId<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">StdFunctionId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BaseFunctionId <span class=\"token operator\">&amp;</span> otherid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">*</span> other <span class=\"token operator\">=</span> <span class=\"token keyword\">dynamic_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> StdFunctionId<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>otherid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> other <span class=\"token operator\">&amp;&amp;</span> id <span class=\"token operator\">==</span> other<span class=\"token operator\">-</span><span class=\"token operator\">></span>id<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tBaseFunctionId <span class=\"token operator\">*</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">StdFunctionId</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">// -------------------------------------</span>\n\t<span class=\"token keyword\">inline</span> std<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>StdFunctionId<span class=\"token operator\">></span> <span class=\"token function\">make_function_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>make_unique<span class=\"token operator\">&lt;</span>StdFunctionId<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// -------------------------------------</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Mutex</span><span class=\"token operator\">></span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">Function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>T<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> function<span class=\"token punctuation\">,</span>  std<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>BaseFunctionId<span class=\"token operator\">></span><span class=\"token operator\">&amp;&amp;</span> id <span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">function</span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Function<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> f<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> f<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">==</span> priority <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>id <span class=\"token operator\">==</span> <span class=\"token operator\">*</span>f<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span>T<span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>Mutex<span class=\"token operator\">></span> <span class=\"token function\">lck</span><span class=\"token punctuation\">(</span>mtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>bad_function_call <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>Mutex<span class=\"token operator\">></span> <span class=\"token function\">lck</span><span class=\"token punctuation\">(</span>mtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tfunction <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>BaseFunctionId<span class=\"token operator\">></span> id<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tstd<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>T<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> function<span class=\"token punctuation\">;</span>\n\t\tMutex mtx<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// -------------------------------------</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mutex</span><span class=\"token operator\">></span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Function</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">Function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> function<span class=\"token punctuation\">,</span>  std<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>BaseFunctionId<span class=\"token operator\">></span> <span class=\"token operator\">&amp;&amp;</span> id <span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">function</span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> f<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> f<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">==</span> priority <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>id <span class=\"token operator\">==</span> <span class=\"token operator\">*</span>f<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>Mutex<span class=\"token operator\">></span> <span class=\"token function\">lck</span><span class=\"token punctuation\">(</span>mtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>bad_function_call <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>Mutex<span class=\"token operator\">></span> <span class=\"token function\">lck</span><span class=\"token punctuation\">(</span>mtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tfunction <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>BaseFunctionId<span class=\"token operator\">></span> id<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tstd<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> function<span class=\"token punctuation\">;</span>\n\t\tMutex mtx<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">// -------------------------------------</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Function<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> Mutex<span class=\"token operator\">=</span>std<span class=\"token operator\">::</span>recursive_mutex<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseEvent</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">BaseEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token function\">BaseEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BaseEvent <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>Mutex<span class=\"token operator\">></span> <span class=\"token function\">lck</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const_cast</span><span class=\"token operator\">&lt;</span>BaseEvent<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>mtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tself<span class=\"token operator\">-</span><span class=\"token operator\">></span>functions <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>functions<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tBaseEvent <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BaseEvent <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mom<span class=\"token operator\">==</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>Mutex<span class=\"token operator\">></span> <span class=\"token function\">lck</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const_cast</span><span class=\"token operator\">&lt;</span>BaseEvent<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>mtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>Mutex<span class=\"token operator\">></span> <span class=\"token function\">lck2</span><span class=\"token punctuation\">(</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>mtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tself<span class=\"token operator\">-</span><span class=\"token operator\">></span>functions <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>functions<span class=\"token punctuation\">;</span>\n\t\t\tself<span class=\"token operator\">-</span><span class=\"token operator\">></span>enabled <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>enabled<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token function\">BaseEvent</span><span class=\"token punctuation\">(</span>BaseEvent <span class=\"token operator\">&amp;&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>Mutex<span class=\"token operator\">></span> <span class=\"token function\">lck</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const_cast</span><span class=\"token operator\">&lt;</span>BaseEvent<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>mtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tself<span class=\"token operator\">-</span><span class=\"token operator\">></span>functions <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>functions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tself<span class=\"token operator\">-</span><span class=\"token operator\">></span>enabled <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>enabled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tBaseEvent <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>BaseEvent <span class=\"token operator\">&amp;&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mom<span class=\"token operator\">==</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>Mutex<span class=\"token operator\">></span> <span class=\"token function\">lck</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const_cast</span><span class=\"token operator\">&lt;</span>BaseEvent<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>mtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>Mutex<span class=\"token operator\">></span> <span class=\"token function\">lck2</span><span class=\"token punctuation\">(</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>mtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tself<span class=\"token operator\">-</span><span class=\"token operator\">></span>functions <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>functions<span class=\"token punctuation\">;</span>\n\t\t\tself<span class=\"token operator\">-</span><span class=\"token operator\">></span>enabled <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>enabled<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">enable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tself<span class=\"token operator\">-</span><span class=\"token operator\">></span>enabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tself<span class=\"token operator\">-</span><span class=\"token operator\">></span>enabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> self<span class=\"token operator\">-</span><span class=\"token operator\">></span>enabled<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tstd<span class=\"token operator\">::</span>size_t <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> self<span class=\"token operator\">-</span><span class=\"token operator\">></span>functions<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\n\t\t<span class=\"token keyword\">struct</span> Data<span class=\"token punctuation\">{</span>\n\t\t\tMutex mtx<span class=\"token punctuation\">;</span>\n\t\t\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">>></span> functions<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">bool</span> enabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BaseFunctionId <span class=\"token operator\">&amp;</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>Mutex<span class=\"token operator\">></span> <span class=\"token function\">lck</span><span class=\"token punctuation\">(</span>mtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> functions<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">!=</span>functions<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">auto</span> f <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>it<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>f<span class=\"token operator\">-</span><span class=\"token operator\">></span>id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\tf<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tfunctions<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Data<span class=\"token operator\">></span> self<span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> Data<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">EventToken</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> AbstractEventToken<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token function\">EventToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Id<span class=\"token operator\">></span>\n\t\t\t\t<span class=\"token function\">EventToken</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Data<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Id <span class=\"token operator\">&amp;</span> id<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">:</span><span class=\"token function\">event</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t\t<span class=\"token operator\">~</span><span class=\"token function\">EventToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">auto</span> event <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>event<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\tevent<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\t\t\tstd<span class=\"token operator\">::</span>weak_ptr<span class=\"token operator\">&lt;</span>Data<span class=\"token operator\">></span> event<span class=\"token punctuation\">;</span>\n\t\t\t\tstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>BaseFunctionId<span class=\"token operator\">></span> id<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\tstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>EventToken<span class=\"token operator\">></span> <span class=\"token function\">make_token</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Function <span class=\"token operator\">&amp;</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>make_unique<span class=\"token operator\">&lt;</span>EventToken<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>f<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> TFunction<span class=\"token operator\">></span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">addNoToken</span><span class=\"token punctuation\">(</span>TFunction <span class=\"token operator\">&amp;&amp;</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>Mutex<span class=\"token operator\">></span> <span class=\"token function\">lck</span><span class=\"token punctuation\">(</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>mtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> self<span class=\"token operator\">-</span><span class=\"token operator\">></span>functions<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">!=</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>functions<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>priority<span class=\"token operator\">></span>f<span class=\"token operator\">-</span><span class=\"token operator\">></span>priority<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tself<span class=\"token operator\">-</span><span class=\"token operator\">></span>functions<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> TFunction<span class=\"token operator\">></span>\n\t\tstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>EventToken<span class=\"token operator\">></span> <span class=\"token function\">addFunction</span><span class=\"token punctuation\">(</span>TFunction <span class=\"token operator\">&amp;&amp;</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>Mutex<span class=\"token operator\">></span> <span class=\"token function\">lck</span><span class=\"token punctuation\">(</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>mtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> self<span class=\"token operator\">-</span><span class=\"token operator\">></span>functions<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">!=</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>functions<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>priority<span class=\"token operator\">></span>f<span class=\"token operator\">-</span><span class=\"token operator\">></span>priority<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tself<span class=\"token operator\">-</span><span class=\"token operator\">></span>functions<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">make_token</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">// -------------------------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// Helper functions to disambiguate parameters</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// https://github.com/sth/callable.hpp</span>\n\t<span class=\"token keyword\">namespace</span> detail <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/** Count the number of types given to the template */</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Types<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> tva_count<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> tva_count<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> size_t value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Types<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> tva_count<span class=\"token operator\">&lt;</span>Type<span class=\"token punctuation\">,</span> Types<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> size_t value <span class=\"token operator\">=</span> tva_count<span class=\"token operator\">&lt;</span>Types<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/** Get the nth type given to the template */</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span>size_t n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Types<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> tva_n<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span>size_t N<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> Type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Types<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> tva_n<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">,</span> Type<span class=\"token punctuation\">,</span> Types<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> tva_n<span class=\"token operator\">&lt;</span>N<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> Types<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Types<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> tva_n<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Type<span class=\"token punctuation\">,</span> Types<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">typedef</span> Type type<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/** Define traits for a function type */</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Fun<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> callable_traits_fn<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Ret<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> callable_traits_fn<span class=\"token operator\">&lt;</span><span class=\"token function\">Ret</span> <span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">typedef</span> <span class=\"token function\">Ret</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>function_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">typedef</span> Ret <span class=\"token function\">function_type</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">typedef</span> Ret return_type<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> size_t argc<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span>size_t N<span class=\"token operator\">></span>\n\t\t<span class=\"token keyword\">using</span> argument_type <span class=\"token operator\">=</span> <span class=\"token keyword\">typename</span> tva_n<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">,</span> Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>type<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Ret<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">const</span> size_t callable_traits_fn<span class=\"token operator\">&lt;</span><span class=\"token function\">Ret</span> <span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>argc <span class=\"token operator\">=</span> tva_count<span class=\"token operator\">&lt;</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>value<span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/** Define traits for a operator() member function pointer type */</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> MemFun<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> callable_traits_memfn<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Class<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> Ret<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> callable_traits_memfn<span class=\"token operator\">&lt;</span><span class=\"token function\">Ret</span> <span class=\"token punctuation\">(</span>Class<span class=\"token operator\">::</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> callable_traits_fn<span class=\"token operator\">&lt;</span><span class=\"token function\">Ret</span> <span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Class<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> Ret<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> callable_traits_memfn<span class=\"token operator\">&lt;</span><span class=\"token function\">Ret</span> <span class=\"token punctuation\">(</span>Class<span class=\"token operator\">::</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> callable_traits_fn<span class=\"token operator\">&lt;</span><span class=\"token function\">Ret</span> <span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">// classes with operator()</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Callable<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> callable_traits_d <span class=\"token operator\">:</span> detail<span class=\"token operator\">::</span>callable_traits_memfn<span class=\"token operator\">&lt;</span><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Callable<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// functions</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Ret<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> callable_traits_d<span class=\"token operator\">&lt;</span><span class=\"token function\">Ret</span> <span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> detail<span class=\"token operator\">::</span>callable_traits_fn<span class=\"token operator\">&lt;</span><span class=\"token function\">Ret</span> <span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// function pointers</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Ret<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> callable_traits_d<span class=\"token operator\">&lt;</span><span class=\"token function\">Ret</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> detail<span class=\"token operator\">::</span>callable_traits_fn<span class=\"token operator\">&lt;</span><span class=\"token function\">Ret</span> <span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// std::function specializations</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Ret<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> callable_traits_d<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token function\">Ret</span> <span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>></span> <span class=\"token operator\">:</span> detail<span class=\"token operator\">::</span>callable_traits_fn<span class=\"token operator\">&lt;</span><span class=\"token function\">Ret</span> <span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">}</span> <span class=\"token comment\" spellcheck=\"true\">// namespace detail</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">// Main template</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Callable<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> callable_traits <span class=\"token operator\">:</span> detail<span class=\"token operator\">::</span>callable_traits_d<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> std<span class=\"token operator\">::</span>remove_reference<span class=\"token operator\">&lt;</span>Callable<span class=\"token operator\">></span><span class=\"token operator\">::</span>type<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">/*! \\endcond */</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// -------------------------------------</span>\n<span class=\"token keyword\">enum</span> ofEventOrder<span class=\"token punctuation\">{</span>\n\tOF_EVENT_ORDER_BEFORE_APP<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\tOF_EVENT_ORDER_APP<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n\tOF_EVENT_ORDER_AFTER_APP<span class=\"token operator\">=</span><span class=\"token number\">200</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// -------------------------------------</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofEventListener</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">ofEventListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">ofEventListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofEventListener <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofEventListener</span><span class=\"token punctuation\">(</span>ofEventListener <span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n\tofEventListener <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofEventListener<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n\tofEventListener <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ofEventListener<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">ofEventListener</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>AbstractEventToken<span class=\"token operator\">></span> <span class=\"token operator\">&amp;&amp;</span> token<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">token</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\tofEventListener <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>AbstractEventToken<span class=\"token operator\">></span> <span class=\"token operator\">&amp;&amp;</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tstd<span class=\"token operator\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>token<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\ttoken<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>AbstractEventToken<span class=\"token operator\">></span> token<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">// -------------------------------------</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofEventListeners</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">ofEventListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofEventListeners</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofEventListeners <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofEventListeners</span><span class=\"token punctuation\">(</span>ofEventListeners <span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n\tofEventListeners <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofEventListeners<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n\tofEventListeners <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ofEventListeners<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>AbstractEventToken<span class=\"token operator\">></span> <span class=\"token operator\">&amp;&amp;</span> listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tlisteners<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Don't use this method. If you need granular control over each listener, then use individual ofEventListener instances for each.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">unsubscribeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tlisteners<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> listeners<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tstd<span class=\"token operator\">::</span>deque<span class=\"token operator\">&lt;</span>ofEventListener<span class=\"token operator\">></span> listeners<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofEventListeners<span class=\"token operator\">::</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tlisteners<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// -------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// ofEvent main implementation</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> Mutex<span class=\"token operator\">=</span>std<span class=\"token operator\">::</span>recursive_mutex<span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofEvent</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>BaseEvent<span class=\"token operator\">&lt;</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>Function<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">typedef</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>Function<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span> Function<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typedef</span> std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span> FunctionPtr<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">TObj</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> TMethod<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">FunctionId</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>BaseFunctionId<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\tTObj <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">;</span>\n\t\tTMethod method<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token function\">FunctionId</span><span class=\"token punctuation\">(</span>TObj <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> TMethod method<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">listener</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tBaseFunctionId <span class=\"token operator\">*</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> FunctionId<span class=\"token operator\">&lt;</span>TObj<span class=\"token punctuation\">,</span>TMethod<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> F<span class=\"token operator\">></span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F <span class=\"token operator\">&amp;</span> f1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> f1<span class=\"token punctuation\">.</span>listener <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>listener <span class=\"token operator\">&amp;&amp;</span> f1<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>method<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BaseFunctionId <span class=\"token operator\">&amp;</span> f<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">*</span> other <span class=\"token operator\">=</span> <span class=\"token keyword\">dynamic_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> FunctionId<span class=\"token operator\">&lt;</span>TObj<span class=\"token punctuation\">,</span>TMethod<span class=\"token operator\">></span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> other <span class=\"token operator\">&amp;&amp;</span> other<span class=\"token operator\">-</span><span class=\"token operator\">></span>listener <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>listener <span class=\"token operator\">&amp;&amp;</span> other<span class=\"token operator\">-</span><span class=\"token operator\">></span>method <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>method<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">TObj</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> TMethod<span class=\"token operator\">></span>\n\tstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>FunctionId<span class=\"token operator\">&lt;</span>TObj<span class=\"token punctuation\">,</span>TMethod<span class=\"token operator\">>></span> <span class=\"token function\">make_function_id</span><span class=\"token punctuation\">(</span>TObj <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> TMethod method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>make_unique<span class=\"token operator\">&lt;</span>FunctionId<span class=\"token operator\">&lt;</span>TObj<span class=\"token punctuation\">,</span>TMethod<span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">TObj</span><span class=\"token operator\">></span>\n\tFunctionPtr <span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>TObj <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span>TObj<span class=\"token operator\">::</span><span class=\"token operator\">*</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span>listener<span class=\"token punctuation\">,</span>std<span class=\"token operator\">::</span>placeholders<span class=\"token operator\">::</span>_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">make_function_id</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">TObj</span><span class=\"token operator\">></span>\n\tFunctionPtr <span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>TObj <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>TObj<span class=\"token operator\">::</span><span class=\"token operator\">*</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>listener<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token function\">make_function_id</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">TObj</span><span class=\"token operator\">></span>\n\tFunctionPtr <span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>TObj <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span>TObj<span class=\"token operator\">::</span><span class=\"token operator\">*</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span>listener<span class=\"token punctuation\">,</span>std<span class=\"token operator\">::</span>placeholders<span class=\"token operator\">::</span>_1<span class=\"token punctuation\">,</span>std<span class=\"token operator\">::</span>placeholders<span class=\"token operator\">::</span>_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">make_function_id</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">TObj</span><span class=\"token operator\">></span>\n\tFunctionPtr <span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>TObj <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>TObj<span class=\"token operator\">::</span><span class=\"token operator\">*</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>listener<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span>listener<span class=\"token punctuation\">,</span>std<span class=\"token operator\">::</span>placeholders<span class=\"token operator\">::</span>_1<span class=\"token punctuation\">,</span>std<span class=\"token operator\">::</span>placeholders<span class=\"token operator\">::</span>_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token function\">make_function_id</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> F<span class=\"token operator\">></span>\n\tstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>BaseFunctionId<span class=\"token operator\">></span> <span class=\"token function\">make_std_function_id</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F <span class=\"token operator\">&amp;</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">auto</span> function <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token keyword\">template</span> target<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>callable_traits<span class=\"token operator\">&lt;</span>F<span class=\"token operator\">></span><span class=\"token operator\">::</span>function_ptr<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">make_function_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span><span class=\"token function\">make_function_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tFunctionPtr <span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token function\">make_std_function_id</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tFunctionPtr <span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> <span class=\"token function\">make_std_function_id</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tFunctionPtr <span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token function\">make_std_function_id</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tFunctionPtr <span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token function\">make_std_function_id</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\n\t<span class=\"token keyword\">using</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>BaseEvent<span class=\"token operator\">&lt;</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>Function<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token operator\">::</span>addFunction<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">using</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>BaseEvent<span class=\"token operator\">&lt;</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>Function<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token operator\">::</span>addNoToken<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">TObj</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> TMethod<span class=\"token operator\">></span>\n\tstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>AbstractEventToken<span class=\"token operator\">></span> <span class=\"token function\">newListener</span><span class=\"token punctuation\">(</span>TObj <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> TMethod method<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority <span class=\"token operator\">=</span> OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">addFunction</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">,</span>priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">TObj</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> TMethod<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>TObj <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> TMethod method<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">addNoToken</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">,</span>priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">TObj</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> TMethod<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>TObj <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> TMethod method<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t ofEvent<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token operator\">::</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token function\">make_function_id</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> TFunction<span class=\"token operator\">></span>\n\tstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>AbstractEventToken<span class=\"token operator\">></span> <span class=\"token function\">newListener</span><span class=\"token punctuation\">(</span>TFunction function<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority <span class=\"token operator\">=</span> OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">addFunction</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>callable_traits<span class=\"token operator\">&lt;</span>TFunction<span class=\"token operator\">></span><span class=\"token operator\">::</span>function_type<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> TFunction<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>TFunction function<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">addNoToken</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>callable_traits<span class=\"token operator\">&lt;</span>TFunction<span class=\"token operator\">></span><span class=\"token operator\">::</span>function_type<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> TFunction<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>TFunction function<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t ofEvent<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token operator\">::</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>callable_traits<span class=\"token operator\">&lt;</span>TFunction<span class=\"token operator\">></span><span class=\"token operator\">::</span>function_type<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> priority<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> sender<span class=\"token punctuation\">,</span> T <span class=\"token operator\">&amp;</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token operator\">::</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>enabled <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>ofEvent<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token operator\">::</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>functions<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>Mutex<span class=\"token operator\">></span> <span class=\"token function\">lck</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token operator\">::</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>mtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">auto</span> functions_copy <span class=\"token operator\">=</span> ofEvent<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token operator\">::</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>functions<span class=\"token punctuation\">;</span>\n\t\t\tlck<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> f<span class=\"token operator\">:</span> functions_copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">&amp;</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token operator\">::</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>enabled <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>ofEvent<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token operator\">::</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>functions<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>Mutex<span class=\"token operator\">></span> <span class=\"token function\">lck</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token operator\">::</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>mtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">auto</span> functions_copy <span class=\"token operator\">=</span> ofEvent<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token operator\">::</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>functions<span class=\"token punctuation\">;</span>\n\t\t\tlck<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> f<span class=\"token operator\">:</span> functions_copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">// -------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// void event template specialization,</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Mutex<span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofEvent</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>BaseEvent<span class=\"token operator\">&lt;</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>Function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">typedef</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>Function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span> Function<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typedef</span> std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span> FunctionPtr<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">TObj</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> TMethod<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">FunctionId</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>BaseFunctionId<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\tTObj <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">;</span>\n\t\tTMethod method<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token function\">FunctionId</span><span class=\"token punctuation\">(</span>TObj <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> TMethod method<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">listener</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tBaseFunctionId <span class=\"token operator\">*</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> FunctionId<span class=\"token operator\">&lt;</span>TObj<span class=\"token punctuation\">,</span>TMethod<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> F<span class=\"token operator\">></span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F <span class=\"token operator\">&amp;</span> f1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> f1<span class=\"token punctuation\">.</span>listener <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>listener <span class=\"token operator\">&amp;&amp;</span> f1<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>method<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BaseFunctionId <span class=\"token operator\">&amp;</span> f<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">*</span> other <span class=\"token operator\">=</span> <span class=\"token keyword\">dynamic_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> FunctionId<span class=\"token operator\">&lt;</span>TObj<span class=\"token punctuation\">,</span>TMethod<span class=\"token operator\">></span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> other <span class=\"token operator\">&amp;&amp;</span> other<span class=\"token operator\">-</span><span class=\"token operator\">></span>listener <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>listener <span class=\"token operator\">&amp;&amp;</span> other<span class=\"token operator\">-</span><span class=\"token operator\">></span>method <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>method<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">TObj</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> TMethod<span class=\"token operator\">></span>\n\tstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>FunctionId<span class=\"token operator\">&lt;</span>TObj<span class=\"token punctuation\">,</span>TMethod<span class=\"token operator\">>></span> <span class=\"token function\">make_function_id</span><span class=\"token punctuation\">(</span>TObj <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> TMethod method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>FunctionId<span class=\"token operator\">&lt;</span>TObj<span class=\"token punctuation\">,</span>TMethod<span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> FunctionId<span class=\"token operator\">&lt;</span>TObj<span class=\"token punctuation\">,</span>TMethod<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">TObj</span><span class=\"token operator\">></span>\n\tFunctionPtr <span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>TObj <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span>TObj<span class=\"token operator\">::</span><span class=\"token operator\">*</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span>listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">make_function_id</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">TObj</span><span class=\"token operator\">></span>\n\tFunctionPtr <span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>TObj <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>TObj<span class=\"token operator\">::</span><span class=\"token operator\">*</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>listener<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span>listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token function\">make_function_id</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">TObj</span><span class=\"token operator\">></span>\n\tFunctionPtr <span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>TObj <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span>TObj<span class=\"token operator\">::</span><span class=\"token operator\">*</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">,</span>std<span class=\"token operator\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span>listener<span class=\"token punctuation\">,</span>std<span class=\"token operator\">::</span>placeholders<span class=\"token operator\">::</span>_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">make_function_id</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">TObj</span><span class=\"token operator\">></span>\n\tFunctionPtr <span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>TObj <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>TObj<span class=\"token operator\">::</span><span class=\"token operator\">*</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>listener<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span>listener<span class=\"token punctuation\">,</span>std<span class=\"token operator\">::</span>placeholders<span class=\"token operator\">::</span>_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token function\">make_function_id</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> F<span class=\"token operator\">></span>\n\tstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>BaseFunctionId<span class=\"token operator\">></span> <span class=\"token function\">make_std_function_id</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F <span class=\"token operator\">&amp;</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">auto</span> function <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token keyword\">template</span> target<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>callable_traits<span class=\"token operator\">&lt;</span>F<span class=\"token operator\">></span><span class=\"token operator\">::</span>function_ptr<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">make_function_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span><span class=\"token function\">make_function_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tFunctionPtr <span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token function\">make_std_function_id</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tFunctionPtr <span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> <span class=\"token function\">make_std_function_id</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tFunctionPtr <span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token function\">make_std_function_id</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tFunctionPtr <span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token function\">make_std_function_id</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">using</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>BaseEvent<span class=\"token operator\">&lt;</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>Function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token operator\">::</span>addFunction<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">using</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>BaseEvent<span class=\"token operator\">&lt;</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>Function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token operator\">::</span>addNoToken<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">TObj</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> TMethod<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>TObj <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> TMethod method<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">addNoToken</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">,</span>priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">TObj</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> TMethod<span class=\"token operator\">></span>\n\tstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>AbstractEventToken<span class=\"token operator\">></span> <span class=\"token function\">newListener</span><span class=\"token punctuation\">(</span>TObj <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> TMethod method<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority <span class=\"token operator\">=</span> OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">addFunction</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">,</span>priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">TObj</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> TMethod<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>TObj <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> TMethod method<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token operator\">::</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token function\">make_function_id</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> TFunction<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>TFunction function<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">addNoToken</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>callable_traits<span class=\"token operator\">&lt;</span>TFunction<span class=\"token operator\">></span><span class=\"token operator\">::</span>function_type<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> TFunction<span class=\"token operator\">></span>\n\tstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>AbstractEventToken<span class=\"token operator\">></span> <span class=\"token function\">newListener</span><span class=\"token punctuation\">(</span>TFunction function<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority <span class=\"token operator\">=</span> OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">addFunction</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>callable_traits<span class=\"token operator\">&lt;</span>TFunction<span class=\"token operator\">></span><span class=\"token operator\">::</span>function_type<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> TFunction<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>TFunction function<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token operator\">::</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token function\">make_function</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>callable_traits<span class=\"token operator\">&lt;</span>TFunction<span class=\"token operator\">></span><span class=\"token operator\">::</span>function_type<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>priority<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token operator\">::</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>enabled <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token operator\">::</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>functions<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>Mutex<span class=\"token operator\">></span> <span class=\"token function\">lck</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token operator\">::</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>mtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">auto</span> functions_copy <span class=\"token operator\">=</span> ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token operator\">::</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>functions<span class=\"token punctuation\">;</span>\n\t\t\tlck<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> f<span class=\"token operator\">:</span> functions_copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token operator\">::</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>enabled <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token operator\">::</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>functions<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>Mutex<span class=\"token operator\">></span> <span class=\"token function\">lck</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token operator\">::</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>mtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">auto</span> functions_copy <span class=\"token operator\">=</span> ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>Mutex<span class=\"token operator\">></span><span class=\"token operator\">::</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>functions<span class=\"token punctuation\">;</span>\n\t\t\tlck<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> f<span class=\"token operator\">:</span> functions_copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// -------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Non thread safe event that avoids locks and copies of the listeners</span>\n<span class=\"token comment\" spellcheck=\"true\">/// making it faster than a plain ofEvent</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofFastEvent</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofEvent<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>NoopMutex<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> sender<span class=\"token punctuation\">,</span> T <span class=\"token operator\">&amp;</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> f<span class=\"token operator\">:</span> ofFastEvent<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span>self<span class=\"token operator\">-</span><span class=\"token operator\">></span>functions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n","type":"source","static":true}}],"fetch":[]}