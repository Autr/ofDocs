{"data":[{"page":{"entry":{"name":"ofVideoPlayer.h","filename":"ofVideoPlayer.h","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/video/ofVideoPlayer.h","path":"/openframeworks/video/ofVideoPlayer_h","route":"/openframeworks/video/ofVideoPlayer.h","dir":"../libs/openFrameworks/video","ext":"h","type":"source","id":381,"parent":354,"breadcrumbs":[354,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofTexture.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofVideoBaseTypes.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> OF_VIDEO_PLAYER_GSTREAMER</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofGstVideoPlayer.h\"</span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_VID_PLAYER_TYPE ofGstVideoPlayer</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> OF_VIDEO_PLAYER_QUICKTIME</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofQuickTimePlayer.h\"</span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_VID_PLAYER_TYPE ofQuickTimePlayer</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> OF_VIDEO_PLAYER_QTKIT</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofQTKitPlayer.h\"</span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_VID_PLAYER_TYPE ofQTKitPlayer</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> OF_VIDEO_PLAYER_AVFOUNDATION</span>\n    <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofAVFoundationPlayer.h\"</span></span>\n    <span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_VID_PLAYER_TYPE ofAVFoundationPlayer</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> OF_VIDEO_PLAYER_DIRECTSHOW</span>\n    <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofDirectShowPlayer.h\"</span></span>\n    <span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_VID_PLAYER_TYPE ofDirectShowPlayer</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> OF_VIDEO_PLAYER_IOS</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxiOSVideoPlayer.h\"</span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_VID_PLAYER_TYPE ofxiOSVideoPlayer</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> OF_VIDEO_PLAYER_ANDROID</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxAndroidVideoPlayer.h\"</span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_VID_PLAYER_TYPE ofxAndroidVideoPlayer</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> OF_VIDEO_PLAYER_EMSCRIPTEN</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxEmscriptenVideoPlayer.h\"</span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_VID_PLAYER_TYPE ofxEmscriptenVideoPlayer</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofVideoPlayer</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofBaseVideoPlayer<span class=\"token punctuation\">,</span><span class=\"token keyword\">public</span> ofBaseVideoDraws<span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t\t<span class=\"token function\">ofVideoPlayer</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t\t<span class=\"token keyword\">bool</span> \t\t\t\t<span class=\"token function\">load</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span>\t\t\t\t<span class=\"token function\">loadAsync</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use load instead\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span> <span class=\"token function\">loadMovie</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the path to the loaded video file.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// If no video file is loaded this returns an empty string.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns A path to the loaded video or an empty string if not loaded.</span>\n\t\tstd<span class=\"token operator\">::</span>string\t\t\t\t<span class=\"token function\">getMoviePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">bool</span>\t\t\t\t<span class=\"token function\">setPixelFormat</span><span class=\"token punctuation\">(</span>ofPixelFormat pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tofPixelFormat\t\t<span class=\"token function\">getPixelFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Closes the movie file and releases its resources.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// This is an alias for close().</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa close()</span>\n\t\t<span class=\"token keyword\">void</span> \t\t\t\t<span class=\"token function\">closeMovie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Closes the movie file releases its resources.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// This is an alias for closeMovie().</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa closeMovie()</span>\n\t\t<span class=\"token keyword\">void</span> \t\t\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Update the video player's internal state to continue playback.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// If normal video playback is desired, this method is usually called</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// once per animation frame inside of ofApp::update().</span>\n\t\t<span class=\"token keyword\">void</span>\t\t\t\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span> \t\t\t\t<span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span> \t\t\t\t<span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">bool</span> \t\t\t\t<span class=\"token function\">isFrameNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\tofPixels<span class=\"token operator\">&amp;</span> \t\t\t<span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> ofPixels<span class=\"token operator\">&amp;</span>\t\t<span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use getPixels() instead\"</span><span class=\"token punctuation\">,</span> ofPixels<span class=\"token operator\">&amp;</span>\t<span class=\"token function\">getPixelsRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use getPixels() instead\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofPixels<span class=\"token operator\">&amp;</span>  <span class=\"token function\">getPixelsRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">float</span> \t\t\t\t<span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">float</span> \t\t\t\t<span class=\"token function\">getSpeed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">float</span> \t\t\t\t<span class=\"token function\">getDuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span>\t\t\t\t<span class=\"token function\">getIsMovieDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">void</span> \t\t\t\t<span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span> \t\t\t\t<span class=\"token function\">setVolume</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> volume<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span> \t\t\t\t<span class=\"token function\">setLoopState</span><span class=\"token punctuation\">(</span>ofLoopType state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tofLoopType\t\t\t<span class=\"token function\">getLoopState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span>   \t\t\t\t<span class=\"token function\">setSpeed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span>\t\t\t\t<span class=\"token function\">setFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> frame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">void</span> \t\t\t\t<span class=\"token function\">setUseTexture</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> bUse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> \t\t\t\t<span class=\"token function\">isUsingTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\tofTexture <span class=\"token operator\">&amp;</span>\t\t\t<span class=\"token function\">getTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> ofTexture <span class=\"token operator\">&amp;</span>\t<span class=\"token function\">getTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use getTexture\"</span><span class=\"token punctuation\">,</span>ofTexture <span class=\"token operator\">&amp;</span>\t\t\t<span class=\"token function\">getTextureReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use getTexture\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> ofTexture <span class=\"token operator\">&amp;</span>\t<span class=\"token function\">getTextureReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofTexture<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getTexturePlanes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofTexture<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getTexturePlanes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span> \t\t\t\t<span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span> \t\t\t\t<span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">using</span> ofBaseDraws<span class=\"token operator\">::</span>draw<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Binds the video texture to the current rendering context.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// For advanced users who need to manually manage texture drawing</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// without calling draw(). Only binds the texture if one exists.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofTexture::bind()</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa http://www.opengl.org/sdk/docs/man4/html/glBindTexture.xhtml</span>\n\t\t<span class=\"token keyword\">void</span> \t\t\t\t<span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Unbinds the video texture from the current rendering context.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// For advanced users who need to manually manage texture drawing</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// without calling draw(). Only binds the texture if one exists.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofTexture::unbind()</span>\n\t\t<span class=\"token keyword\">void</span> \t\t\t\t<span class=\"token function\">unbind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">void</span>\t\t\t\t<span class=\"token function\">setAnchorPercent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> xPct<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> yPct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">void</span>\t\t\t\t<span class=\"token function\">setAnchorPoint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">void</span>\t\t\t\t<span class=\"token function\">resetAnchor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">void</span> \t\t\t\t<span class=\"token function\">setPaused</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> bPause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">int</span>\t\t\t\t\t<span class=\"token function\">getCurrentFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span>\t\t\t\t\t<span class=\"token function\">getTotalNumFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">void</span>\t\t\t\t<span class=\"token function\">firstFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span>\t\t\t\t<span class=\"token function\">nextFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span>\t\t\t\t<span class=\"token function\">previousFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">float</span> \t\t\t\t<span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">float</span> \t\t\t\t<span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">bool</span>\t\t\t\t<span class=\"token function\">isPaused</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span>\t\t\t\t<span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span>\t\t\t\t<span class=\"token function\">isPlaying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> \t\t\t\t<span class=\"token function\">isInitialized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the internal video player implementation.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// Advanced users may find it useful to set a custom internal video</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// player implementation. The custom video player must implment the</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// ofBaseVideoPlayer interface.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param newPlayer Shared pointer to the new video player that extends</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// from ofBaseVideoPlayer.</span>\n\t\t<span class=\"token keyword\">void</span>\t\t\t\t<span class=\"token function\">setPlayer</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofBaseVideoPlayer<span class=\"token operator\">></span> newPlayer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get a pointer to the internal video player implementation.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// This returns a pointer to the ofBaseVideoPlayer interface. For</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// implementation-specfic features, this can be cast to the subtype</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// using dynamic_cast&lt;MyVideoPlayerImplementation>(getPlayer()) or the</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// templated getPlayer&lt;MyVideoPlayerImplementation>() method.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns A pointer to the internal video player implementation.</span>\n\t\tstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofBaseVideoPlayer<span class=\"token operator\">></span>\t<span class=\"token function\">getPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get a const pointer to the internal video player implementation.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// This returns a pointer to the ofBaseVideoPlayer interface. For</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// implementation-specfic features, this can be cast to the subtype</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// using dynamic_pointer_cast&lt;MyVideoPlayerImplementation>(getPlayer())</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// or the templated getPlayer&lt;MyVideoPlayerImplementation>() method.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns A const pointer to the internal video player implementation.</span>\n\t\t<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofBaseVideoPlayer<span class=\"token operator\">></span>\t<span class=\"token function\">getPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get a pointer to the internal video player implementation.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// Calling getPlayer&lt;MyVideoPlayerImplementation>() is equivalent to</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// dynamic_pointer_cast&lt;MyVideoPlayerImplementation>(getPlayer()).</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns A pointer to the internal video player implementation or</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///\t\t\t nullptr if the cast fails.</span>\n\t\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PlayerType<span class=\"token operator\">></span>\n\t\tstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>PlayerType<span class=\"token operator\">></span> <span class=\"token function\">getPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>dynamic_pointer_cast<span class=\"token operator\">&lt;</span>PlayerType<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">getPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get a const pointer to the internal video player implementation.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// Calling getPlayer&lt;MyVideoPlayerImplementation>() is equivalent to</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// dynamic_pointer_cast&lt;MyVideoPlayerImplementation>(getPlayer()).</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns A const pointer to the internal video player implementation</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///\t\t\t or nullptr if the cast fails.</span>\n\t\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PlayerType<span class=\"token operator\">></span>\n\t\t<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>PlayerType<span class=\"token operator\">></span> <span class=\"token function\">getPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>dynamic_pointer_cast<span class=\"token operator\">&lt;</span>PlayerType<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">getPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Initialize the default player implementations.</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">initDefaultPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A pointer to the internal video player implementation.</span>\n\t\tstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofBaseVideoPlayer<span class=\"token operator\">></span>\t\tplayer<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A collection of texture planes used by the video player.</span>\n\t\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofTexture<span class=\"token operator\">></span> tex<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A pointer to the internal player's texture if available.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// Video players that implement ofBaseVideoPlayer::getTexturePtr()</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// can provide a pointer to an internal texture. When possible,</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// ofVideoPlayer will use the internal texture to avoid extra pixel</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// copies.</span>\n\t\tofTexture <span class=\"token operator\">*</span> playerTex<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief True if the video player is using a texture.</span>\n\t\t<span class=\"token keyword\">bool</span> bUseTexture<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief The internal pixel format.</span>\n\t\t<span class=\"token keyword\">mutable</span> ofPixelFormat internalPixelFormat<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief The stored path to the video's path.</span>\n\t\tstd<span class=\"token operator\">::</span>string moviePath<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n","type":"source","static":true}}],"fetch":[]}