{"data":[{"page":{"entry":{"name":"README","filename":"README.md","absolute":"/Users/Gilbert/Code/openFrameworks/examples/gl/computeShaderParticlesExample/README.md","path":"/examples/gl/computeShaderParticlesExample/README","route":"/examples/gl/computeShaderParticlesExample/README.md","dir":"../examples/gl/computeShaderParticlesExample","ext":"md","type":"page","id":813,"parent":811,"breadcrumbs":[811,783,436],"translations":{},"siblings":[]},"description":{},"document":"<h1>computeShaderParticlesExample</h1>\n<p><img src=\"computeShaderParticlesExample.png\" alt=\"Screenshot of computeShaderParticlesExample\"></p>\n<h3>Learning Objectives</h3>\n<p>This example demonstrates how to use a compute shader to set up an animated point cloud with editable parameters. Compute shaders are rather used to do generic computation in contrast to graphics-oriented shaders. In this case the shader computes the movement of particles using a <a href=\"https://en.wikipedia.org/wiki/Flocking%20%28behavior%29#Flocking_rules\">flocking algorithm</a> based on three parameters: attraction, cohesion and repulsion. It additionally includes different forces in order to separate the particles into groups.</p>\n<p>You will learn how to..</p>\n<ul>\n<li>write a shader that animates particles according to their attraction, cohesion or repulsion</li>\n<li>create lively animations using <a href=\"http://openframeworks.cc/documentation/math/ofMath/#show_ofNoise\"><code><span class=\"token function\">ofNoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></a></li>\n<li>use <code>ofParameter</code> objects and <code>ofxGui</code> to create editable variables</li>\n<li>connect parameters to a shader</li>\n<li>set a blend mode</li>\n<li>easily navigate in 3D with <code>ofEasyCam</code></li>\n</ul>\n<p>In the code, pay attention to:</p>\n<ul>\n<li>the separation of two particle groups by their <code>gl_GlobalInvocationID</code></li>\n<li>the double buffer (<code>ofBufferObject</code>) for faster computation that allows to draw from one buffer while the other one is being updated</li>\n<li>the definition of working groups by setting <code><span class=\"token function\">dispatchCompute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code> from the C++ shader object and <code><span class=\"token function\">layout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code> from within the shader</li>\n</ul>\n<h3>Expected Behavior</h3>\n<p>When launching this app, you should see a cloud of particles floating in the center of a white cube. In the top left corner there is a panel to manipulate the particle cloud. The panel also includes a display of the current framerate.</p>\n<p>Instructions for use:</p>\n<ul>\n<li>Use the mouse to adjust the interactive camera\n<ul>\n<li>Left click drag = orbit the target</li>\n<li>Right click drag = dolly in and out</li>\n<li>Double click = reset camera position</li>\n</ul>\n</li>\n<li>Change the parameters in the panel to manipulate the particle cloud, for example..\n<ul>\n<li>check &quot;dir as color&quot; to show each particle in a color according to the direction it is heading</li>\n<li>change <code>attr1_force</code> to adjust the force applied to all particles with an odd index</li>\n<li>change <code>attr2_force</code> to adjust the force applied to all particles with an even index</li>\n</ul>\n</li>\n</ul>\n<h3>Other classes used in this file</h3>\n<p>This Example uses the following classes:</p>\n<ul>\n<li><a href=\"http://openframeworks.cc/documentation/gl/ofShader/\">ofShader</a></li>\n<li><a href=\"http://openframeworks.cc/documentation/gl/ofVbo/\">ofVbo</a></li>\n<li><a href=\"http://openframeworks.cc/documentation/gl/ofBufferObject/\">ofBufferObject</a></li>\n<li><a href=\"http://openframeworks.cc/documentation/3d/ofEasyCam/\">ofEasyCam</a></li>\n<li><a href=\"http://openframeworks.cc/documentation/types/ofParameter/\">ofParameter</a></li>\n<li><a href=\"http://openframeworks.cc/documentation/types/ofParameterGroup/\">ofParameterGroup</a></li>\n<li><a href=\"http://openframeworks.cc/documentation/ofxGui/ofxPanel/\">ofxPanel</a></li>\n</ul>\n","raw":"# computeShaderParticlesExample\n\n![Screenshot of computeShaderParticlesExample](computeShaderParticlesExample.png)\n\n### Learning Objectives\n\nThis example demonstrates how to use a compute shader to set up an animated point cloud with editable parameters. Compute shaders are rather used to do generic computation in contrast to graphics-oriented shaders. In this case the shader computes the movement of particles using a [flocking algorithm](https://en.wikipedia.org/wiki/Flocking%20%28behavior%29#Flocking_rules) based on three parameters: attraction, cohesion and repulsion. It additionally includes different forces in order to separate the particles into groups.\n\nYou will learn how to..\n* write a shader that animates particles according to their attraction, cohesion or repulsion\n* create lively animations using [`ofNoise()`](http://openframeworks.cc/documentation/math/ofMath/#show_ofNoise)\n* use `ofParameter` objects and `ofxGui` to create editable variables\n* connect parameters to a shader\n* set a blend mode\n* easily navigate in 3D with `ofEasyCam`\n\nIn the code, pay attention to:\n* the separation of two particle groups by their `gl_GlobalInvocationID`\n* the double buffer (`ofBufferObject`) for faster computation that allows to draw from one buffer while the other one is being updated\n* the definition of working groups by setting `dispatchCompute()` from the C++ shader object and `layout()` from within the shader\n\n### Expected Behavior\n\nWhen launching this app, you should see a cloud of particles floating in the center of a white cube. In the top left corner there is a panel to manipulate the particle cloud. The panel also includes a display of the current framerate.\n\nInstructions for use:\n\n* Use the mouse to adjust the interactive camera\n    * Left click drag = orbit the target\n    * Right click drag = dolly in and out\n\t* Double click = reset camera position\n* Change the parameters in the panel to manipulate the particle cloud, for example..\n\t* check \"dir as color\" to show each particle in a color according to the direction it is heading\n\t* change `attr1_force` to adjust the force applied to all particles with an odd index\n\t* change `attr2_force` to adjust the force applied to all particles with an even index\n\n### Other classes used in this file\n\nThis Example uses the following classes:\n\n* [ofShader](http://openframeworks.cc/documentation/gl/ofShader/)\n* [ofVbo](http://openframeworks.cc/documentation/gl/ofVbo/)\n* [ofBufferObject](http://openframeworks.cc/documentation/gl/ofBufferObject/)\n* [ofEasyCam](http://openframeworks.cc/documentation/3d/ofEasyCam/)\n* [ofParameter](http://openframeworks.cc/documentation/types/ofParameter/)\n* [ofParameterGroup](http://openframeworks.cc/documentation/types/ofParameterGroup/)\n* [ofxPanel](http://openframeworks.cc/documentation/ofxGui/ofxPanel/)\n","type":"page"}}],"fetch":[]}