{"data":[{"page":{"entry":{"name":"Circle.h","filename":"Circle.h","absolute":"/Users/Gilbert/Code/openFrameworks/examples/events/simpleEventsExample/src/Circle.h","path":"/examples/events/simpleEventsExample/src/Circle_h","route":"/examples/events/simpleEventsExample/src/Circle.h","dir":"../examples/events/simpleEventsExample/src","ext":"h","type":"source","id":771,"parent":769,"breadcrumbs":[769,766,740,436],"siblings":[],"translations":{}},"document":"<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//  circle.h</span>\n<span class=\"token comment\" spellcheck=\"true\">//  simpleEventsExample</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//  Created by Roy Macdonald on 12/23/12.</span>\n<span class=\"token comment\" spellcheck=\"true\">//  Copyright (c) 2012 micasa. All rights reserved.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> simpleEventsExample_circle_h</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> simpleEventsExample_circle_h</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofMain.h\"</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n    <span class=\"token function\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// to be able to broadcast events from a class we must declare the ofEvent object that will be broadcasted.</span>\n    <span class=\"token comment\" spellcheck=\"true\">// this object can be declared as class variable so events are broadcasted and listened for each specific class instance.</span>\n    <span class=\"token comment\" spellcheck=\"true\">// the data type of the event, what's declared between the &lt; > can be whatever you want, event a custom class. </span>\n    ofEvent<span class=\"token operator\">&lt;</span>glm<span class=\"token operator\">::</span>vec2<span class=\"token operator\">></span> clickedInside<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//this is a shared event for all the instances of this class, so any instance of this class will broadcast to the same event,</span>\n    <span class=\"token comment\" spellcheck=\"true\">//this way you'll have to register only one listener to listen to any class instance broadcasting to this event.</span>\n    <span class=\"token comment\" spellcheck=\"true\">// \"static\" tells the compiler that all of this class instances will share a single variable</span>\n    <span class=\"token keyword\">static</span> ofEvent<span class=\"token operator\">&lt;</span>glm<span class=\"token operator\">::</span>vec2<span class=\"token operator\">></span> clickedInsideGlobal<span class=\"token punctuation\">;</span>\n   \n    <span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> ofColor color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">//We need to declare all this mouse events methods to be able to listen to mouse events.</span>\n    <span class=\"token comment\" spellcheck=\"true\">//All this must be declared even if we are just going to use only one of this methods.</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">mouseMoved</span><span class=\"token punctuation\">(</span>ofMouseEventArgs <span class=\"token operator\">&amp;</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">mouseDragged</span><span class=\"token punctuation\">(</span>ofMouseEventArgs <span class=\"token operator\">&amp;</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">mousePressed</span><span class=\"token punctuation\">(</span>ofMouseEventArgs <span class=\"token operator\">&amp;</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">mouseReleased</span><span class=\"token punctuation\">(</span>ofMouseEventArgs <span class=\"token operator\">&amp;</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">mouseScrolled</span><span class=\"token punctuation\">(</span>ofMouseEventArgs <span class=\"token operator\">&amp;</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">mouseEntered</span><span class=\"token punctuation\">(</span>ofMouseEventArgs <span class=\"token operator\">&amp;</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">mouseExited</span><span class=\"token punctuation\">(</span>ofMouseEventArgs <span class=\"token operator\">&amp;</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">//this function checks if the passed arguments are inside the circle.</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">inside</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> _x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> radius<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span>\n    ofColor color<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">bool</span> bRegisteredEvents<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n","type":"source"}}],"fetch":[]}