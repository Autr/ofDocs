{"data":[{"page":{"entry":{"name":"ofApp.cpp","filename":"ofApp.cpp","absolute":"/Users/Gilbert/Code/openFrameworks/examples/math/noise1dOctaveExample/src/ofApp.cpp","path":"/examples/math/noise1dOctaveExample/src/ofApp_cpp","route":"/examples/math/noise1dOctaveExample/src/ofApp.cpp","dir":"../examples/math/noise1dOctaveExample/src","ext":"cpp","type":"source","id":1456,"parent":1454,"breadcrumbs":[1454,1451,1442,436],"siblings":[],"translations":{}},"document":"<span class=\"token comment\" spellcheck=\"true\">/*\n This example demonstrates how more \"organic\" noise signals\n can be generated by summing multiple \"octaves\" of noise.\n*/</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofApp.h\"</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token function\">ofSetWindowTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Multiband Noise Example\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofSetVerticalSync</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token function\">setupMultibandNoiseDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">updateMultibandNoiseDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">ofBackgroundGradient</span><span class=\"token punctuation\">(</span> <span class=\"token function\">ofColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> OF_GRADIENT_CIRCULAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">renderMultibandNoiseDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setupMultibandNoiseDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// setup and allocate resources used in the multi-noise strip demo.</span>\n\t\n\tnNoiseStrips <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n\tsliderGroup<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>nNoiseStrips<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\tnoiseDataStripGroup<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>nNoiseStrips<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\n\toriginX <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> \n\toriginY <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">float</span> stripWidth\t<span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> stripHeight\t<span class=\"token operator\">=</span> <span class=\"token number\">35</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> yMargin\t\t<span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> stripXPos\t\t<span class=\"token operator\">=</span> originX<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> stripYPos\t\t<span class=\"token operator\">=</span> originY<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> noiseStep\t\t<span class=\"token operator\">=</span> <span class=\"token number\">0.001</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">// These are the initial weights of the sliders, which </span>\n\t<span class=\"token comment\" spellcheck=\"true\">// multiply against their respective noise channels. </span>\n\t<span class=\"token keyword\">float</span> noiseAmounts<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.82</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.59</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.06</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.17</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// fer example</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">// I'm using a simple struct (\"NoiseDataStrip\", in ofApp.h) to store the </span>\n\t<span class=\"token comment\" spellcheck=\"true\">// data contained by one of these noise recordings. Each struct contains</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// the bounding coordinates (x,y,w,h), and some other parameters, plus</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// the float array (data) containing the noise recordings. </span>\n\t<span class=\"token comment\" spellcheck=\"true\">//</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>nNoiseStrips<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tnoiseDataStripGroup<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> stripXPos<span class=\"token punctuation\">;</span>\n\t\tnoiseDataStripGroup<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> stripYPos<span class=\"token punctuation\">;</span>\n\t\tnoiseDataStripGroup<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> stripWidth<span class=\"token punctuation\">;</span>\n\t\tnoiseDataStripGroup<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> stripHeight<span class=\"token punctuation\">;</span>\n\t\tnoiseDataStripGroup<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>noiseStep <span class=\"token operator\">=</span> noiseStep<span class=\"token punctuation\">;</span> \n\t\tnoiseStep <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span> \n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span> NOISE_DATA_STRIP_LENGTH<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tnoiseDataStripGroup<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span> \n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\t<span class=\"token keyword\">float</span> sliderX <span class=\"token operator\">=</span> stripXPos<span class=\"token operator\">+</span>stripWidth<span class=\"token operator\">+</span>yMargin<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">float</span> sliderAmount <span class=\"token operator\">=</span> noiseAmounts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//1.0 / (powf(2.0, i));</span>\n\t\tsliderGroup<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>sliderX<span class=\"token punctuation\">,</span> stripYPos<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span>stripHeight<span class=\"token punctuation\">,</span> <span class=\"token number\">0.00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> sliderAmount<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstripYPos <span class=\"token operator\">+</span><span class=\"token operator\">=</span> stripHeight <span class=\"token operator\">+</span> yMargin<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">updateMultibandNoiseDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">// For each noise strip</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>nNoiseStrips<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Push the older data to the end of the array</span>\n\t\t<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>noiseDataStripGroup<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>NOISE_DATA_STRIP_LENGTH<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tdata<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>j<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Add the most recent data, the noise value. </span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Here's where we actually fetch the noise, using ofNoise().</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Note how ofNoise() requires an argument ('t'); this is</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// the coordinate (on a one-dimensional axis) whose</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// corresponding noise value we wish to obtain. </span>\n\t\t<span class=\"token keyword\">float</span> noiseStep <span class=\"token operator\">=</span> noiseDataStripGroup<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>noiseStep<span class=\"token punctuation\">;</span> \n\t\t<span class=\"token keyword\">float</span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ofGetElapsedTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">10.0</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> noiseStep<span class=\"token punctuation\">;</span>\n\t\tdata<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofNoise</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">// Compute the normalization factor: the total sum of the weights</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// for all of the contributing noise channels. This number is the largest</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// value which the sum of noise streams could possibly achieve.</span>\n\t<span class=\"token keyword\">float</span> normalizationFactor <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>nNoiseStrips<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">float</span> weight <span class=\"token operator\">=</span> sliderGroup<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tnormalizationFactor <span class=\"token operator\">+</span><span class=\"token operator\">=</span> weight<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>normalizationFactor <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tnormalizationFactor <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">// For every sample in the recording history,</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>NOISE_DATA_STRIP_LENGTH<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">float</span> sumj <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n\t\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Sum the weighted contribution from each of the noise strips. </span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>nNoiseStrips<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">float</span> val <span class=\"token operator\">=</span> noiseDataStripGroup<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">float</span> weight <span class=\"token operator\">=</span> sliderGroup<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tsumj <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>weight <span class=\"token operator\">*</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Normalize it to the range 0...1 by dividing it</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// by normalizationFactor, as we discussed above. </span>\n\t\tsummedNoiseData<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sumj <span class=\"token operator\">/</span> normalizationFactor<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">renderMultibandNoiseDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">// draw the individual strips</span>\n\t<span class=\"token keyword\">float</span> stackBottom <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>nNoiseStrips<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> noiseDataStripGroup<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> noiseDataStripGroup<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">float</span> w <span class=\"token operator\">=</span> noiseDataStripGroup<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">float</span> h <span class=\"token operator\">=</span> noiseDataStripGroup<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n\t\tstackBottom <span class=\"token operator\">=</span> y<span class=\"token operator\">+</span>h<span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">float</span> noiseStep <span class=\"token operator\">=</span> noiseDataStripGroup<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>noiseStep<span class=\"token punctuation\">;</span> \n\t\t<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>noiseDataStripGroup<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">render1DNoiseStrip</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span> noiseStep<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">// draw the strip containing the summed data. </span>\n\t<span class=\"token function\">render1DNoiseStrip</span><span class=\"token punctuation\">(</span>originX<span class=\"token punctuation\">,</span> stackBottom<span class=\"token operator\">+</span><span class=\"token number\">125</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>summedNoiseData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\tstring multiBandText   <span class=\"token operator\">=</span> <span class=\"token string\">\"ofNoise() creates a signal that varies \\n\"</span><span class=\"token punctuation\">;</span>\n\tmultiBandText         <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">\"smoothly between 0 and 1. More 'organic' \\n\"</span><span class=\"token punctuation\">;</span>\n\tmultiBandText         <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">\"noise can be made by adding multiple \\n\"</span><span class=\"token punctuation\">;</span>\n\tmultiBandText         <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">\"'octaves' of noise. The strip below shows \\n\"</span><span class=\"token punctuation\">;</span>\n\tmultiBandText         <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">\"the sum of the above streams, weighted by \\n\"</span><span class=\"token punctuation\">;</span>\n\tmultiBandText         <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">\"the values in their corresponding sliders. \\n\"</span><span class=\"token punctuation\">;</span>\t\n\t\n\t<span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span>multiBandText<span class=\"token punctuation\">,</span> originX<span class=\"token punctuation\">,</span>   stackBottom<span class=\"token operator\">+</span><span class=\"token number\">33</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofNoise()\"</span><span class=\"token punctuation\">,</span>   originX<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> stackBottom<span class=\"token operator\">+</span><span class=\"token number\">33</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//bold it</span>\n\t\n\t<span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Noise Step\"</span><span class=\"token punctuation\">,</span> originX<span class=\"token number\">-46</span><span class=\"token punctuation\">,</span> originY<span class=\"token number\">-5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Weights\"</span><span class=\"token punctuation\">,</span> originX<span class=\"token operator\">+</span><span class=\"token number\">300</span><span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> originY<span class=\"token number\">-5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">render1DNoiseStrip</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> dt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token function\">ofPushMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofDisableSmoothing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofEnableAlphaBlending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\n\t<span class=\"token comment\" spellcheck=\"true\">// Yes, this is a drop shadow</span>\n\t<span class=\"token function\">ofFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\n\t<span class=\"token comment\" spellcheck=\"true\">// Draw a white box underneath the strip</span>\n\t<span class=\"token function\">ofFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\n\t<span class=\"token comment\" spellcheck=\"true\">// Draw a filled gray noise terrain.</span>\n\t<span class=\"token function\">ofEnableSmoothing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">190</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token function\">ofBeginShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofVertex</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>NOISE_DATA_STRIP_LENGTH<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">float</span> px <span class=\"token operator\">=</span> <span class=\"token function\">ofMap</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>NOISE_DATA_STRIP_LENGTH<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t<span class=\"token keyword\">float</span> py <span class=\"token operator\">=</span> height <span class=\"token operator\">*</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofVertex</span><span class=\"token punctuation\">(</span>px<span class=\"token punctuation\">,</span>py<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">ofVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token function\">ofEndShape</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">// Draw the black line of the noise waveform</span>\n\t<span class=\"token function\">ofNoFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofBeginShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>NOISE_DATA_STRIP_LENGTH<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">float</span> px <span class=\"token operator\">=</span> <span class=\"token function\">ofMap</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>NOISE_DATA_STRIP_LENGTH<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t<span class=\"token keyword\">float</span> py <span class=\"token operator\">=</span> height <span class=\"token operator\">*</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofVertex</span><span class=\"token punctuation\">(</span>px<span class=\"token punctuation\">,</span>py<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">ofEndShape</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">// Draw a box outline on top, around everything</span>\n\t<span class=\"token function\">ofDisableSmoothing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofNoFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">// Draw the dt noise-step factor</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dt <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\tstring label <span class=\"token operator\">=</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">46</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">ofPopMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// In case you're wondering, the simpleSliders get their mouse info through event handlers. </span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">keyPressed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">keyReleased</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">mouseMoved</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">mouseDragged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">mousePressed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">mouseReleased</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">mouseEntered</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">mouseExited</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">windowResized</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">gotMessage</span><span class=\"token punctuation\">(</span>ofMessage msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">dragEvent</span><span class=\"token punctuation\">(</span>ofDragInfo dragInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n\n<span class=\"token punctuation\">}</span>\n","type":"source"}}],"fetch":[]}