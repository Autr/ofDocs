{"data":[{"page":{"entry":{"name":"ofCamera","filename":"ofCamera.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/3d/ofCamera.markdown","path":"/documentation/3d/ofCamera","route":"/documentation/3d/ofCamera.markdown","dir":"../ofSite/documentation/3d","ext":"markdown","type":"page","id":1731,"parent":1717,"breadcrumbs":[1717,1718],"siblings":[],"translations":{}},"description":{"short":"<p>A basic camera object for interacting with objects in 3D space.</p>\n<p>By: Memo Akten, MSA Visuals Ltd. 2011</p>\n","full":"<p>ofCamera provides a camera onto a 3D scene. Some of the different properties of the camera are shown in the picture below:&lt;br/</p>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":"ofNode"},"methods":[{"syntax":"begin(&viewport)","name":"begin","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>viewport","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"begin()","name":"begin","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Begins rendering with the camera.</p>\n<pre><code><span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Begin rendering from the camera's perspective.</span>\n    camera<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofLine</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Additional rendering ...</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// End rendering form the camera's perspective.</span>\n    camera<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>viewport The camera's rendering viewport.</p>\n","desc":"<p>This function pushes the cameras view and projection matrix to a stack of transformations so that draw calls done within begin() and end() will appear to be viewed from the cameras perspective.</p>\n"},{"syntax":"calcClipPlanes(&viewport)","name":"calcClipPlanes","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>viewport","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"cameraToWorld(CameraXYZ)","name":"cameraToWorld","returns":"glm::vec3","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>vec3 CameraXYZ","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>When you have a position in camera coordinates you can get what it would be in world coordinates, transforming it using the ofCamera.</p>\n"},{"syntax":"cameraToWorld(CameraXYZ, &viewport)","name":"cameraToWorld","returns":"glm::vec3","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>vec3 CameraXYZ<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>viewport","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\todo cameraToWorld()</p>\n","desc":"<p>When you have a position in camera coordinates you can get what it would be in world coordinates, transforming it using the ofCamera.</p>\n"},{"syntax":"disableOrtho()","name":"disableOrtho","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Calling disableOrtho() turns off the orthographic mode.</p>\n"},{"syntax":"drawFrustum(&viewport)","name":"drawFrustum","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>viewport","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a visual representation of the camera's frustum\n\\note  This will only be visible when the camera drawing its\nfrustum is viewed through another camera.</p>\n","desc":""},{"syntax":"drawFrustum()","name":"drawFrustum","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"enableOrtho()","name":"enableOrtho","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Orthographic, or parallel, projections consist of those that involve no perspective correction. There is no adjustment for distance from the camera made in these projections, meaning objects on the screen will appear the same size no matter how close or far away they are. Calling enableOrtho() sets the ofCamera to orthographic mode.</p>\n"},{"syntax":"end()","name":"end","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Ends rendering with the camera.</p>\n","desc":"<p>This removes the cameras view and projection matrix transformations from the stack so that draw calls performed afterward will not be viewed from the perspective of the camera. This is equivalent to performing an openGL PopMatrix call.</p>\n"},{"syntax":"getAspectRatio()","name":"getAspectRatio","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the aspect ratio of this camera's viewport.</p>\n<p>Returns the aspect ratio of this camera's viewport. Usually this will be\nthe ratio of the width to height of your display. Intended for\nperspective cameras.</p>\n<p><strong>Returns</strong>: The aspect ratio of this camera's viewport.</p>\n","desc":""},{"syntax":"getFarClip()","name":"getFarClip","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getForceAspectRatio()","name":"getForceAspectRatio","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the boolean state which indicates whether the aspect ratio of this camera is forced to a non-default setting.</p>\n<p><strong>Returns</strong>: A boolean: whether or not this camera's aspect ratio is set to a non-default value.</p>\n","desc":""},{"syntax":"getFov()","name":"getFov","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the camera's field of view, in degrees.</p>\n<p>Get the camera's vertical field of view, in degrees.  This is only\nmeaningful for perspective cameras.</p>\n<p><strong>Returns</strong>: The camera's field of view, in degrees.</p>\n","desc":""},{"syntax":"getImagePlaneDistance(&viewport)","name":"getImagePlaneDistance","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>viewport","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This allows you to get the image plane distance from any viewport passed in. By default this is the current viewport, but it can be whatever you find useful.</p>\n"},{"syntax":"getLensOffset()","name":"getLensOffset","returns":"glm::vec2","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the &quot;lens offset&quot; applied to this camera, encoded as an ofVec2f.</p>\n<p>Ordinarily, the camera is pointed straight down the center of its view\nfrustum.  However, it is possible to orient the camera towards a\nlocation offset from the center of its frustum.  This is called an\n&quot;asymetric frustum&quot; and is used (for example) in stereo views.  It is\nacheived by applying an offset to the center of projection.  This\nfunction returns the offset that has been applied, as an ofVec2f.  For\nmore information see http://www.orthostereo.com/geometryopengl.html.</p>\n<p><strong>Returns</strong>: The &quot;lens offset&quot; applied to this camera, encoded in an ofVec2f.</p>\n","desc":""},{"syntax":"getModelViewMatrix()","name":"getModelViewMatrix","returns":"glm::mat4","returns_description":null,"parameters":null,"access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Access the model view matrix.</p>\n<p><strong>Returns</strong>: the current 4x4 model view matrix.</p>\n","desc":"<p>Access to the projection matrix.</p>\n"},{"syntax":"getModelViewProjectionMatrix(&viewport)","name":"getModelViewProjectionMatrix","returns":"glm::mat4","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>viewport","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\todo getModelViewProjectionMatrix()</p>\n","desc":"<p>Access to the projection ModelViewProjectionMatrix.</p>\n"},{"syntax":"getModelViewProjectionMatrix()","name":"getModelViewProjectionMatrix","returns":"glm::mat4","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Access to the projection ModelViewProjectionMatrix.</p>\n"},{"syntax":"getNearClip()","name":"getNearClip","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getOrtho()","name":"getOrtho","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Get whether the camera is in orthographic mode.</p>\n"},{"syntax":"getProjectionMatrix(&viewport)","name":"getProjectionMatrix","returns":"glm::mat4","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>viewport","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Access to the projection matrix.</p>\n"},{"syntax":"getProjectionMatrix()","name":"getProjectionMatrix","returns":"glm::mat4","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Access the projection matrix.</p>\n<p><strong>Returns</strong>: the current 4x4 projection matrix.</p>\n","desc":"<p>Access to the projection matrix.</p>\n"},{"short":"","desc":""},{"syntax":"getViewport()","name":"getViewport","returns":"ofRectangle","returns_description":null,"parameters":null,"access":"protected","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"isVFlipped()","name":"isVFlipped","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofCamera()","name":"ofCamera","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Construct a default camera.</p>\n","desc":"<p>The default camera is positioned at (0, 0, 0) with a 60 degree field of view.  Its up vector is the positive y-axis, and it is looking down the negative z-axis.  Near and far planes are determined by the current viewport size.</p>\n"},{"syntax":"screenToWorld(ScreenXYZ)","name":"screenToWorld","returns":"glm::vec3","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>vec3 ScreenXYZ","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>When you have a position in screen coordinates you can get what it would be in world coordinates, transforming it using the ofCamera.</p>\n"},{"syntax":"screenToWorld(ScreenXYZ, &viewport)","name":"screenToWorld","returns":"glm::vec3","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>vec3 ScreenXYZ<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>viewport","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Obtain the coordinates, in the 3D world, of a 2D point presumed to be on your screen.</p>\n<p>Takes a pixel location on your screen, encoded in an ofVec3f,\nand returns (also as an ofVec3f) the 3D world coordinates of that point.\nYou'll also need to specify a Z value when providing your screen point.\nThis Z value is interpreted as a distance into or away from the screen.</p>\n<p><strong>Parameters:</strong></p>\n<p>ScreenXYZ A point on your screen, whose 3D world coordinates you wish to know.</p>\n","desc":"<p>When you have a position in screen coordinates you can get what it would be in world coordinates, transforming it using the ofCamera.</p>\n"},{"syntax":"setAspectRatio(aspectRatio)","name":"setAspectRatio","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> aspectRatio","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the recommended aspect ratio for a perspective camera.</p>\n<p>Sets the aspect ratio of the camera to the desired float, and forces the\nuse of aspect ratio calculations.  Currently only used with perspective\ncameras. The default value (and the value used with orthographic\ncameras) is the ratio of the viewport's width to the viewport's height.</p>\n<p><strong>Parameters:</strong></p>\n<p>aspectRatio The desired aspect ratio, e.g. 1.3333, 1.6, etc.</p>\n","desc":""},{"syntax":"setFarClip(f)","name":"setFarClip","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> f","access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Sets the far clip plane</p>\n"},{"syntax":"setForceAspectRatio(forceAspectRatio)","name":"setForceAspectRatio","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> forceAspectRatio","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set whether or not the aspect ratio of this camera is forced to a non-default setting.</p>\n<p>The camera's aspect ratio, by default, is the aspect ratio of your\nviewport.  If you have set a non-default value (with\nofCamera::setAspectRatio()), you can toggle whether or not this value is\napplied.</p>\n<p><strong>Parameters:</strong></p>\n<p>forceAspectRatio Whether or not this camera should use an aspect ratio you have set yourself.</p>\n","desc":""},{"syntax":"setFov(f)","name":"setFov","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> f","access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the field of view for a perspective camera.</p>\n<p>This sets the vertical field of view for the camera, in degrees.\nThis only operates with perspective cameras, and will have no effect\nwith cameras in orthographic mode.</p>\n<p><strong>Parameters:</strong></p>\n<p>f The desired field of view for the camera, in degrees.</p>\n","desc":"<p>Here you can set the field of view of the camera.</p>\n"},{"syntax":"setLensOffset(&lensOffset)","name":"setLensOffset","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>lensOffset","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"setNearClip(f)","name":"setNearClip","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> f","access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This sets the near clip plane.</p>\n"},{"short":"<p>}\n\\name Renderer\n{</p>\n","desc":""},{"syntax":"setVFlip(vflip)","name":"setVFlip","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> vflip","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setupOffAxisViewPortal(&topLeft, &bottomLeft, &bottomRight)","name":"setupOffAxisViewPortal","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>topLeft<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>bottomLeft<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>bottomRight","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setupPerspective(vFlip = true, fov, nearDist, farDist, &lensOffset)","name":"setupPerspective","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> vFlip<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> fov<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> nearDist<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> farDist<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>lensOffset","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>}\n\\name OpenGL Setup\n{</p>\n","desc":""},{"syntax":"worldToCamera(WorldXYZ)","name":"worldToCamera","returns":"glm::vec3","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>vec3 WorldXYZ","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>When you have a position in world coordinates you can get what it would be in camera coordinates, transforming it using the ofCamera.</p>\n"},{"syntax":"worldToCamera(WorldXYZ, &viewport)","name":"worldToCamera","returns":"glm::vec3","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>vec3 WorldXYZ<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>viewport","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\todo worldToCamera()</p>\n","desc":"<p>When you have a position in world coordinates you can get what it would be in camera coordinates, transforming it using the ofCamera.</p>\n"},{"syntax":"worldToScreen(WorldXYZ)","name":"worldToScreen","returns":"glm::vec3","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>vec3 WorldXYZ","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>When you have a position in world coordinates you can get what it would be in screen coordinates, transforming it using the ofCamera.</p>\n"},{"syntax":"worldToScreen(WorldXYZ, &viewport)","name":"worldToScreen","returns":"glm::vec3","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>vec3 WorldXYZ<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>viewport","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Obtain the screen coordinates of a point in the 3D world.</p>\n<p>Takes an (X,Y,Z) point in your 3D world, encoded as an ofVec3f,\nand returns the location (also as an ofVec3f) where this point would\nappear on your (two-dimensional) display. The screen position's &quot;Z\ncoordinate&quot; is set to be the same as your camera's.</p>\n<p><strong>Parameters:</strong></p>\n<p>WorldXYZ A 3D point in the world, whose screen coordinates you wish to know.</p>\n<p>viewport (Optional) A viewport. The default is ofGetCurrentViewport().</p>\n<p><strong>Returns</strong>: An ofVec3f containing the screen coordinates of your 3D point of interest.</p>\n","desc":"<p>When you have a position in world coordinates you can get what it would be in screen coordinates, transforming it using the ofCamera.</p>\n"},{"syntax":"~ofCamera()","name":"~ofCamera","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Destroy the camera.</p>\n","desc":""},{"name":"aspectRatio","type":"float","access":"protected","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"farClip","type":"float","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"forceAspectRatio","type":"bool","access":"protected","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"fov","type":"float","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"isOrtho","type":"bool","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"lensOffset","type":"ofVec2f","access":"protected","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"nearClip","type":"float","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"short":"","desc":""},{"name":"vFlip","type":"bool","access":"protected","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofCamera</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n<em>extends: ofNode</em>\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>A basic camera object for interacting with objects in 3D space.</p>\n<p>By: Memo Akten, MSA Visuals Ltd. 2011</p>\n<p>##Description</p>\n<p>ofCamera provides a camera onto a 3D scene. Some of the different properties of the camera are shown in the picture below:&lt;br/&gt;\n<img src=\"fov.png\" alt=\"FOV\">&lt;br/&gt;\nThe far and near clip planes are the boundaries of what's visible in the camera. If you need more information on these, check <a href=\"http://www.falloutsoftware.com/tutorials/gl/gl0.htm\">http://www.falloutsoftware.com/tutorials/gl/gl0.htm</a></p>\n<p>##Methods</p>\n<p>###void begin(&amp;viewport)</p>\n<p>&lt;!--\n<em>syntax: begin(&amp;viewport)</em>\n<em>name: begin</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;viewport</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void begin()</p>\n<p>&lt;!--\n<em>syntax: begin()</em>\n<em>name: begin</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Begins rendering with the camera.</p>\n<pre><code><span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Begin rendering from the camera's perspective.</span>\n    camera<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofLine</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Additional rendering ...</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// End rendering form the camera's perspective.</span>\n    camera<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>viewport The camera's rendering viewport.</p>\n<p>_description: _</p>\n<p>This function pushes the cameras view and projection matrix to a stack of transformations so that draw calls done within begin() and end() will appear to be viewed from the cameras perspective.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void calcClipPlanes(&amp;viewport)</p>\n<p>&lt;!--\n<em>syntax: calcClipPlanes(&amp;viewport)</em>\n<em>name: calcClipPlanes</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;viewport</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 cameraToWorld(CameraXYZ)</p>\n<p>&lt;!--\n<em>syntax: cameraToWorld(CameraXYZ)</em>\n<em>name: cameraToWorld</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n<em>parameters: glm::vec3 CameraXYZ</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>When you have a position in camera coordinates you can get what it would be in world coordinates, transforming it using the ofCamera.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 cameraToWorld(CameraXYZ, &amp;viewport)</p>\n<p>&lt;!--\n<em>syntax: cameraToWorld(CameraXYZ, &amp;viewport)</em>\n<em>name: cameraToWorld</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n<em>parameters: glm::vec3 CameraXYZ, const ofRectangle &amp;viewport</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\todo cameraToWorld()</p>\n<p>_description: _</p>\n<p>When you have a position in camera coordinates you can get what it would be in world coordinates, transforming it using the ofCamera.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void disableOrtho()</p>\n<p>&lt;!--\n<em>syntax: disableOrtho()</em>\n<em>name: disableOrtho</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Calling disableOrtho() turns off the orthographic mode.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawFrustum(&amp;viewport)</p>\n<p>&lt;!--\n<em>syntax: drawFrustum(&amp;viewport)</em>\n<em>name: drawFrustum</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;viewport</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a visual representation of the camera's frustum\n\\note  This will only be visible when the camera drawing its\nfrustum is viewed through another camera.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawFrustum()</p>\n<p>&lt;!--\n<em>syntax: drawFrustum()</em>\n<em>name: drawFrustum</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void enableOrtho()</p>\n<p>&lt;!--\n<em>syntax: enableOrtho()</em>\n<em>name: enableOrtho</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Orthographic, or parallel, projections consist of those that involve no perspective correction. There is no adjustment for distance from the camera made in these projections, meaning objects on the screen will appear the same size no matter how close or far away they are. Calling enableOrtho() sets the ofCamera to orthographic mode.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void end()</p>\n<p>&lt;!--\n<em>syntax: end()</em>\n<em>name: end</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Ends rendering with the camera.</p>\n<p>_description: _</p>\n<p>This removes the cameras view and projection matrix transformations from the stack so that draw calls performed afterward will not be viewed from the perspective of the camera. This is equivalent to performing an openGL PopMatrix call.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getAspectRatio()</p>\n<p>&lt;!--\n<em>syntax: getAspectRatio()</em>\n<em>name: getAspectRatio</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the aspect ratio of this camera's viewport.</p>\n<p>Returns the aspect ratio of this camera's viewport. Usually this will be\nthe ratio of the width to height of your display. Intended for\nperspective cameras.</p>\n<p><strong>Returns</strong>: The aspect ratio of this camera's viewport.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getFarClip()</p>\n<p>&lt;!--\n<em>syntax: getFarClip()</em>\n<em>name: getFarClip</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool getForceAspectRatio()</p>\n<p>&lt;!--\n<em>syntax: getForceAspectRatio()</em>\n<em>name: getForceAspectRatio</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the boolean state which indicates whether the aspect ratio of this camera is forced to a non-default setting.</p>\n<p><strong>Returns</strong>: A boolean: whether or not this camera's aspect ratio is set to a non-default value.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getFov()</p>\n<p>&lt;!--\n<em>syntax: getFov()</em>\n<em>name: getFov</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the camera's field of view, in degrees.</p>\n<p>Get the camera's vertical field of view, in degrees.  This is only\nmeaningful for perspective cameras.</p>\n<p><strong>Returns</strong>: The camera's field of view, in degrees.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getImagePlaneDistance(&amp;viewport)</p>\n<p>&lt;!--\n<em>syntax: getImagePlaneDistance(&amp;viewport)</em>\n<em>name: getImagePlaneDistance</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;viewport</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This allows you to get the image plane distance from any viewport passed in. By default this is the current viewport, but it can be whatever you find useful.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec2 getLensOffset()</p>\n<p>&lt;!--\n<em>syntax: getLensOffset()</em>\n<em>name: getLensOffset</em>\n<em>returns: glm::vec2</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the &quot;lens offset&quot; applied to this camera, encoded as an ofVec2f.</p>\n<p>Ordinarily, the camera is pointed straight down the center of its view\nfrustum.  However, it is possible to orient the camera towards a\nlocation offset from the center of its frustum.  This is called an\n&quot;asymetric frustum&quot; and is used (for example) in stereo views.  It is\nacheived by applying an offset to the center of projection.  This\nfunction returns the offset that has been applied, as an ofVec2f.  For\nmore information see http://www.orthostereo.com/geometryopengl.html.</p>\n<p><strong>Returns</strong>: The &quot;lens offset&quot; applied to this camera, encoded in an ofVec2f.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::mat4 getModelViewMatrix()</p>\n<p>&lt;!--\n<em>syntax: getModelViewMatrix()</em>\n<em>name: getModelViewMatrix</em>\n<em>returns: glm::mat4</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Access the model view matrix.</p>\n<p><strong>Returns</strong>: the current 4x4 model view matrix.</p>\n<p>_description: _</p>\n<p>Access to the projection matrix.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::mat4 getModelViewProjectionMatrix(&amp;viewport)</p>\n<p>&lt;!--\n<em>syntax: getModelViewProjectionMatrix(&amp;viewport)</em>\n<em>name: getModelViewProjectionMatrix</em>\n<em>returns: glm::mat4</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;viewport</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\todo getModelViewProjectionMatrix()</p>\n<p>_description: _</p>\n<p>Access to the projection ModelViewProjectionMatrix.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::mat4 getModelViewProjectionMatrix()</p>\n<p>&lt;!--\n<em>syntax: getModelViewProjectionMatrix()</em>\n<em>name: getModelViewProjectionMatrix</em>\n<em>returns: glm::mat4</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Access to the projection ModelViewProjectionMatrix.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getNearClip()</p>\n<p>&lt;!--\n<em>syntax: getNearClip()</em>\n<em>name: getNearClip</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool getOrtho()</p>\n<p>&lt;!--\n<em>syntax: getOrtho()</em>\n<em>name: getOrtho</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Get whether the camera is in orthographic mode.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::mat4 getProjectionMatrix(&amp;viewport)</p>\n<p>&lt;!--\n<em>syntax: getProjectionMatrix(&amp;viewport)</em>\n<em>name: getProjectionMatrix</em>\n<em>returns: glm::mat4</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;viewport</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Access to the projection matrix.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::mat4 getProjectionMatrix()</p>\n<p>&lt;!--\n<em>syntax: getProjectionMatrix()</em>\n<em>name: getProjectionMatrix</em>\n<em>returns: glm::mat4</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Access the projection matrix.</p>\n<p><strong>Returns</strong>: the current 4x4 projection matrix.</p>\n<p>_description: _</p>\n<p>Access to the projection matrix.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###shared_ptr&lt; ofBaseRenderer &gt; getRenderer()</p>\n<p>&lt;!--\n<em>syntax: getRenderer()</em>\n<em>name: getRenderer</em>\n<em>returns: shared_ptr&lt; ofBaseRenderer &gt;</em>\n_returns_description: _\n_parameters: _\n<em>access: protected</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofRectangle getViewport()</p>\n<p>&lt;!--\n<em>syntax: getViewport()</em>\n<em>name: getViewport</em>\n<em>returns: ofRectangle</em>\n_returns_description: _\n_parameters: _\n<em>access: protected</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isVFlipped()</p>\n<p>&lt;!--\n<em>syntax: isVFlipped()</em>\n<em>name: isVFlipped</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofCamera()</h3>\n<p>&lt;!--\n<em>syntax: ofCamera()</em>\n<em>name: ofCamera</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Construct a default camera.</p>\n<p>_description: _</p>\n<p>The default camera is positioned at (0, 0, 0) with a 60 degree field of view.  Its up vector is the positive y-axis, and it is looking down the negative z-axis.  Near and far planes are determined by the current viewport size.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 screenToWorld(ScreenXYZ)</p>\n<p>&lt;!--\n<em>syntax: screenToWorld(ScreenXYZ)</em>\n<em>name: screenToWorld</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n<em>parameters: glm::vec3 ScreenXYZ</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>When you have a position in screen coordinates you can get what it would be in world coordinates, transforming it using the ofCamera.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 screenToWorld(ScreenXYZ, &amp;viewport)</p>\n<p>&lt;!--\n<em>syntax: screenToWorld(ScreenXYZ, &amp;viewport)</em>\n<em>name: screenToWorld</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n<em>parameters: glm::vec3 ScreenXYZ, const ofRectangle &amp;viewport</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Obtain the coordinates, in the 3D world, of a 2D point presumed to be on your screen.</p>\n<p>Takes a pixel location on your screen, encoded in an ofVec3f,\nand returns (also as an ofVec3f) the 3D world coordinates of that point.\nYou'll also need to specify a Z value when providing your screen point.\nThis Z value is interpreted as a distance into or away from the screen.</p>\n<p><strong>Parameters:</strong></p>\n<p>ScreenXYZ A point on your screen, whose 3D world coordinates you wish to know.</p>\n<p>_description: _</p>\n<p>When you have a position in screen coordinates you can get what it would be in world coordinates, transforming it using the ofCamera.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setAspectRatio(aspectRatio)</p>\n<p>&lt;!--\n<em>syntax: setAspectRatio(aspectRatio)</em>\n<em>name: setAspectRatio</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float aspectRatio</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the recommended aspect ratio for a perspective camera.</p>\n<p>Sets the aspect ratio of the camera to the desired float, and forces the\nuse of aspect ratio calculations.  Currently only used with perspective\ncameras. The default value (and the value used with orthographic\ncameras) is the ratio of the viewport's width to the viewport's height.</p>\n<p><strong>Parameters:</strong></p>\n<p>aspectRatio The desired aspect ratio, e.g. 1.3333, 1.6, etc.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setFarClip(f)</p>\n<p>&lt;!--\n<em>syntax: setFarClip(f)</em>\n<em>name: setFarClip</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float f</em>\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Sets the far clip plane</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setForceAspectRatio(forceAspectRatio)</p>\n<p>&lt;!--\n<em>syntax: setForceAspectRatio(forceAspectRatio)</em>\n<em>name: setForceAspectRatio</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool forceAspectRatio</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set whether or not the aspect ratio of this camera is forced to a non-default setting.</p>\n<p>The camera's aspect ratio, by default, is the aspect ratio of your\nviewport.  If you have set a non-default value (with\nofCamera::setAspectRatio()), you can toggle whether or not this value is\napplied.</p>\n<p><strong>Parameters:</strong></p>\n<p>forceAspectRatio Whether or not this camera should use an aspect ratio you have set yourself.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setFov(f)</p>\n<p>&lt;!--\n<em>syntax: setFov(f)</em>\n<em>name: setFov</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float f</em>\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the field of view for a perspective camera.</p>\n<p>This sets the vertical field of view for the camera, in degrees.\nThis only operates with perspective cameras, and will have no effect\nwith cameras in orthographic mode.</p>\n<p><strong>Parameters:</strong></p>\n<p>f The desired field of view for the camera, in degrees.</p>\n<p>_description: _</p>\n<p>Here you can set the field of view of the camera.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setLensOffset(&amp;lensOffset)</p>\n<p>&lt;!--\n<em>syntax: setLensOffset(&amp;lensOffset)</em>\n<em>name: setLensOffset</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;lensOffset</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the &quot;lens offset&quot; applied to this camera.</p>\n<p>Ordinarily, the camera is pointed straight down the center of its view\nfrustum. However, it is possible to orient the camera towards a location\noffset from the center of its frustum. This is called an &quot;assymetric\nfrustum&quot; and is used (for example) in stereo views.  It is acheived by\napplying an offset to the center of projection.  This function sets this\noffset from an ofVec2f argument.  For more information see\n<a href=\"http://www.orthostereo.com/geometryopengl.html\">http://www.orthostereo.com/geometryopengl.html</a>.</p>\n<p><strong>Parameters:</strong></p>\n<p>lensOffset The &quot;lens offset&quot; to apply to this camera, encoded in\nan ofVec2f.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setNearClip(f)</p>\n<p>&lt;!--\n<em>syntax: setNearClip(f)</em>\n<em>name: setNearClip</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float f</em>\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This sets the near clip plane.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setRenderer(renderer)</p>\n<p>&lt;!--\n<em>syntax: setRenderer(renderer)</em>\n<em>name: setRenderer</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: shared_ptr&lt; ofBaseRenderer &gt; renderer</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>}\n\\name Renderer\n{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setVFlip(vflip)</p>\n<p>&lt;!--\n<em>syntax: setVFlip(vflip)</em>\n<em>name: setVFlip</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool vflip</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setupOffAxisViewPortal(&amp;topLeft, &amp;bottomLeft, &amp;bottomRight)</p>\n<p>&lt;!--\n<em>syntax: setupOffAxisViewPortal(&amp;topLeft, &amp;bottomLeft, &amp;bottomRight)</em>\n<em>name: setupOffAxisViewPortal</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;topLeft, const glm::vec3 &amp;bottomLeft, const glm::vec3 &amp;bottomRight</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setupPerspective(vFlip = true, fov, nearDist, farDist, &amp;lensOffset)</p>\n<p>&lt;!--\n<em>syntax: setupPerspective(vFlip = true, fov, nearDist, farDist, &amp;lensOffset)</em>\n<em>name: setupPerspective</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool vFlip=true, float fov, float nearDist, float farDist, const glm::vec2 &amp;lensOffset</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>}\n\\name OpenGL Setup\n{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 worldToCamera(WorldXYZ)</p>\n<p>&lt;!--\n<em>syntax: worldToCamera(WorldXYZ)</em>\n<em>name: worldToCamera</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n<em>parameters: glm::vec3 WorldXYZ</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>When you have a position in world coordinates you can get what it would be in camera coordinates, transforming it using the ofCamera.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 worldToCamera(WorldXYZ, &amp;viewport)</p>\n<p>&lt;!--\n<em>syntax: worldToCamera(WorldXYZ, &amp;viewport)</em>\n<em>name: worldToCamera</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n<em>parameters: glm::vec3 WorldXYZ, const ofRectangle &amp;viewport</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\todo worldToCamera()</p>\n<p>_description: _</p>\n<p>When you have a position in world coordinates you can get what it would be in camera coordinates, transforming it using the ofCamera.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 worldToScreen(WorldXYZ)</p>\n<p>&lt;!--\n<em>syntax: worldToScreen(WorldXYZ)</em>\n<em>name: worldToScreen</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n<em>parameters: glm::vec3 WorldXYZ</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>When you have a position in world coordinates you can get what it would be in screen coordinates, transforming it using the ofCamera.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 worldToScreen(WorldXYZ, &amp;viewport)</p>\n<p>&lt;!--\n<em>syntax: worldToScreen(WorldXYZ, &amp;viewport)</em>\n<em>name: worldToScreen</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n<em>parameters: glm::vec3 WorldXYZ, const ofRectangle &amp;viewport</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Obtain the screen coordinates of a point in the 3D world.</p>\n<p>Takes an (X,Y,Z) point in your 3D world, encoded as an ofVec3f,\nand returns the location (also as an ofVec3f) where this point would\nappear on your (two-dimensional) display. The screen position's &quot;Z\ncoordinate&quot; is set to be the same as your camera's.</p>\n<p><strong>Parameters:</strong></p>\n<p>WorldXYZ A 3D point in the world, whose screen coordinates you wish to know.</p>\n<p>viewport (Optional) A viewport. The default is ofGetCurrentViewport().</p>\n<p><strong>Returns</strong>: An ofVec3f containing the screen coordinates of your 3D point of interest.</p>\n<p>_description: _</p>\n<p>When you have a position in world coordinates you can get what it would be in screen coordinates, transforming it using the ofCamera.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>~ofCamera()</h3>\n<p>&lt;!--\n<em>syntax: ~ofCamera()</em>\n<em>name: ~ofCamera</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Destroy the camera.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###float aspectRatio</p>\n<p>&lt;!--\n<em>name: aspectRatio</em>\n<em>type: float</em>\n<em>access: protected</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float farClip</p>\n<p>&lt;!--\n<em>name: farClip</em>\n<em>type: float</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool forceAspectRatio</p>\n<p>&lt;!--\n<em>name: forceAspectRatio</em>\n<em>type: bool</em>\n<em>access: protected</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float fov</p>\n<p>&lt;!--\n<em>name: fov</em>\n<em>type: float</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isOrtho</p>\n<p>&lt;!--\n<em>name: isOrtho</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f lensOffset</p>\n<p>&lt;!--\n<em>name: lensOffset</em>\n<em>type: ofVec2f</em>\n<em>access: protected</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float nearClip</p>\n<p>&lt;!--\n<em>name: nearClip</em>\n<em>type: float</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###shared_ptr&lt; ofBaseRenderer &gt; renderer</p>\n<p>&lt;!--\n<em>name: renderer</em>\n<em>type: shared_ptr&lt; ofBaseRenderer &gt;</em>\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool vFlip</p>\n<p>&lt;!--\n<em>name: vFlip</em>\n<em>type: bool</em>\n<em>access: protected</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofCamera\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: ofNode_\n-->\n\n##InlineDescription\n\nA basic camera object for interacting with objects in 3D space.\n\nBy: Memo Akten, MSA Visuals Ltd. 2011\n\n\n\n\n\n##Description\n\nofCamera provides a camera onto a 3D scene. Some of the different properties of the camera are shown in the picture below:<br/>\n![FOV](fov.png)<br/>\nThe far and near clip planes are the boundaries of what's visible in the camera. If you need more information on these, check [http://www.falloutsoftware.com/tutorials/gl/gl0.htm](http://www.falloutsoftware.com/tutorials/gl/gl0.htm)\n\n\n\n\n\n##Methods\n\n\n\n###void begin(&viewport)\n\n<!--\n_syntax: begin(&viewport)_\n_name: begin_\n_returns: void_\n_returns_description: _\n_parameters: const ofRectangle &viewport_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void begin()\n\n<!--\n_syntax: begin()_\n_name: begin_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nBegins rendering with the camera.\n\n~~~~{.cpp}\nvoid draw() {\n    // Begin rendering from the camera's perspective.\n    camera.begin();\n\n    ofLine(0, 0, ofGetWidth(), ofGetHeight());\n    // Additional rendering ...\n\n    // End rendering form the camera's perspective.\n    camera.end();\n}\n~~~~\n\n**Parameters:**\n\nviewport The camera's rendering viewport.\n\n\n\n\n\n_description: _\n\nThis function pushes the cameras view and projection matrix to a stack of transformations so that draw calls done within begin() and end() will appear to be viewed from the cameras perspective.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void calcClipPlanes(&viewport)\n\n<!--\n_syntax: calcClipPlanes(&viewport)_\n_name: calcClipPlanes_\n_returns: void_\n_returns_description: _\n_parameters: const ofRectangle &viewport_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 cameraToWorld(CameraXYZ)\n\n<!--\n_syntax: cameraToWorld(CameraXYZ)_\n_name: cameraToWorld_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: glm::vec3 CameraXYZ_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nWhen you have a position in camera coordinates you can get what it would be in world coordinates, transforming it using the ofCamera.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 cameraToWorld(CameraXYZ, &viewport)\n\n<!--\n_syntax: cameraToWorld(CameraXYZ, &viewport)_\n_name: cameraToWorld_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: glm::vec3 CameraXYZ, const ofRectangle &viewport_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\todo cameraToWorld()\n\n\n\n\n\n_description: _\n\nWhen you have a position in camera coordinates you can get what it would be in world coordinates, transforming it using the ofCamera.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void disableOrtho()\n\n<!--\n_syntax: disableOrtho()_\n_name: disableOrtho_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCalling disableOrtho() turns off the orthographic mode.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawFrustum(&viewport)\n\n<!--\n_syntax: drawFrustum(&viewport)_\n_name: drawFrustum_\n_returns: void_\n_returns_description: _\n_parameters: const ofRectangle &viewport_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a visual representation of the camera's frustum\n\\note  This will only be visible when the camera drawing its\n       frustum is viewed through another camera.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawFrustum()\n\n<!--\n_syntax: drawFrustum()_\n_name: drawFrustum_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void enableOrtho()\n\n<!--\n_syntax: enableOrtho()_\n_name: enableOrtho_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nOrthographic, or parallel, projections consist of those that involve no perspective correction. There is no adjustment for distance from the camera made in these projections, meaning objects on the screen will appear the same size no matter how close or far away they are. Calling enableOrtho() sets the ofCamera to orthographic mode.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void end()\n\n<!--\n_syntax: end()_\n_name: end_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nEnds rendering with the camera.\n\n\n\n\n\n_description: _\n\nThis removes the cameras view and projection matrix transformations from the stack so that draw calls performed afterward will not be viewed from the perspective of the camera. This is equivalent to performing an openGL PopMatrix call.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getAspectRatio()\n\n<!--\n_syntax: getAspectRatio()_\n_name: getAspectRatio_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the aspect ratio of this camera's viewport.\n\nReturns the aspect ratio of this camera's viewport. Usually this will be\nthe ratio of the width to height of your display. Intended for\nperspective cameras.\n\n\n**Returns**: The aspect ratio of this camera's viewport.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getFarClip()\n\n<!--\n_syntax: getFarClip()_\n_name: getFarClip_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool getForceAspectRatio()\n\n<!--\n_syntax: getForceAspectRatio()_\n_name: getForceAspectRatio_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the boolean state which indicates whether the aspect ratio of this camera is forced to a non-default setting.\n\n\n**Returns**: A boolean: whether or not this camera's aspect ratio is set to a non-default value.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getFov()\n\n<!--\n_syntax: getFov()_\n_name: getFov_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the camera's field of view, in degrees.\n\nGet the camera's vertical field of view, in degrees.  This is only\nmeaningful for perspective cameras.\n\n\n**Returns**: The camera's field of view, in degrees.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getImagePlaneDistance(&viewport)\n\n<!--\n_syntax: getImagePlaneDistance(&viewport)_\n_name: getImagePlaneDistance_\n_returns: float_\n_returns_description: _\n_parameters: const ofRectangle &viewport_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis allows you to get the image plane distance from any viewport passed in. By default this is the current viewport, but it can be whatever you find useful.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec2 getLensOffset()\n\n<!--\n_syntax: getLensOffset()_\n_name: getLensOffset_\n_returns: glm::vec2_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the \"lens offset\" applied to this camera, encoded as an ofVec2f.\n\nOrdinarily, the camera is pointed straight down the center of its view\nfrustum.  However, it is possible to orient the camera towards a\nlocation offset from the center of its frustum.  This is called an\n\"asymetric frustum\" and is used (for example) in stereo views.  It is\nacheived by applying an offset to the center of projection.  This\nfunction returns the offset that has been applied, as an ofVec2f.  For\nmore information see http://www.orthostereo.com/geometryopengl.html.\n\n\n**Returns**: The \"lens offset\" applied to this camera, encoded in an ofVec2f.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat4 getModelViewMatrix()\n\n<!--\n_syntax: getModelViewMatrix()_\n_name: getModelViewMatrix_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAccess the model view matrix.\n\n**Returns**: the current 4x4 model view matrix.\n\n\n\n\n\n_description: _\n\nAccess to the projection matrix.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat4 getModelViewProjectionMatrix(&viewport)\n\n<!--\n_syntax: getModelViewProjectionMatrix(&viewport)_\n_name: getModelViewProjectionMatrix_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: const ofRectangle &viewport_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\todo getModelViewProjectionMatrix()\n\n\n\n\n\n_description: _\n\nAccess to the projection ModelViewProjectionMatrix.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat4 getModelViewProjectionMatrix()\n\n<!--\n_syntax: getModelViewProjectionMatrix()_\n_name: getModelViewProjectionMatrix_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nAccess to the projection ModelViewProjectionMatrix.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getNearClip()\n\n<!--\n_syntax: getNearClip()_\n_name: getNearClip_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool getOrtho()\n\n<!--\n_syntax: getOrtho()_\n_name: getOrtho_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nGet whether the camera is in orthographic mode.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat4 getProjectionMatrix(&viewport)\n\n<!--\n_syntax: getProjectionMatrix(&viewport)_\n_name: getProjectionMatrix_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: const ofRectangle &viewport_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nAccess to the projection matrix.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat4 getProjectionMatrix()\n\n<!--\n_syntax: getProjectionMatrix()_\n_name: getProjectionMatrix_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAccess the projection matrix.\n\n**Returns**: the current 4x4 projection matrix.\n\n\n\n\n\n_description: _\n\nAccess to the projection matrix.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###shared_ptr< ofBaseRenderer > getRenderer()\n\n<!--\n_syntax: getRenderer()_\n_name: getRenderer_\n_returns: shared_ptr< ofBaseRenderer >_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofRectangle getViewport()\n\n<!--\n_syntax: getViewport()_\n_name: getViewport_\n_returns: ofRectangle_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isVFlipped()\n\n<!--\n_syntax: isVFlipped()_\n_name: isVFlipped_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofCamera()\n\n<!--\n_syntax: ofCamera()_\n_name: ofCamera_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConstruct a default camera.\n\n\n\n\n\n_description: _\n\nThe default camera is positioned at (0, 0, 0) with a 60 degree field of view.  Its up vector is the positive y-axis, and it is looking down the negative z-axis.  Near and far planes are determined by the current viewport size.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 screenToWorld(ScreenXYZ)\n\n<!--\n_syntax: screenToWorld(ScreenXYZ)_\n_name: screenToWorld_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: glm::vec3 ScreenXYZ_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nWhen you have a position in screen coordinates you can get what it would be in world coordinates, transforming it using the ofCamera.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 screenToWorld(ScreenXYZ, &viewport)\n\n<!--\n_syntax: screenToWorld(ScreenXYZ, &viewport)_\n_name: screenToWorld_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: glm::vec3 ScreenXYZ, const ofRectangle &viewport_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nObtain the coordinates, in the 3D world, of a 2D point presumed to be on your screen.\n\nTakes a pixel location on your screen, encoded in an ofVec3f,\nand returns (also as an ofVec3f) the 3D world coordinates of that point.\nYou'll also need to specify a Z value when providing your screen point.\nThis Z value is interpreted as a distance into or away from the screen.\n\n\n**Parameters:**\n\nScreenXYZ A point on your screen, whose 3D world coordinates you wish to know.\n\n\n\n\n\n_description: _\n\nWhen you have a position in screen coordinates you can get what it would be in world coordinates, transforming it using the ofCamera.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setAspectRatio(aspectRatio)\n\n<!--\n_syntax: setAspectRatio(aspectRatio)_\n_name: setAspectRatio_\n_returns: void_\n_returns_description: _\n_parameters: float aspectRatio_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the recommended aspect ratio for a perspective camera.\n\nSets the aspect ratio of the camera to the desired float, and forces the\nuse of aspect ratio calculations.  Currently only used with perspective\ncameras. The default value (and the value used with orthographic\ncameras) is the ratio of the viewport's width to the viewport's height.\n\n\n**Parameters:**\n\naspectRatio The desired aspect ratio, e.g. 1.3333, 1.6, etc.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFarClip(f)\n\n<!--\n_syntax: setFarClip(f)_\n_name: setFarClip_\n_returns: void_\n_returns_description: _\n_parameters: float f_\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSets the far clip plane\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setForceAspectRatio(forceAspectRatio)\n\n<!--\n_syntax: setForceAspectRatio(forceAspectRatio)_\n_name: setForceAspectRatio_\n_returns: void_\n_returns_description: _\n_parameters: bool forceAspectRatio_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet whether or not the aspect ratio of this camera is forced to a non-default setting.\n\nThe camera's aspect ratio, by default, is the aspect ratio of your\nviewport.  If you have set a non-default value (with\nofCamera::setAspectRatio()), you can toggle whether or not this value is\napplied.\n\n\n**Parameters:**\n\nforceAspectRatio Whether or not this camera should use an aspect ratio you have set yourself.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFov(f)\n\n<!--\n_syntax: setFov(f)_\n_name: setFov_\n_returns: void_\n_returns_description: _\n_parameters: float f_\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the field of view for a perspective camera.\n\nThis sets the vertical field of view for the camera, in degrees.\nThis only operates with perspective cameras, and will have no effect\nwith cameras in orthographic mode.\n\n\n**Parameters:**\n\nf The desired field of view for the camera, in degrees.\n\n\n\n\n\n_description: _\n\nHere you can set the field of view of the camera.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setLensOffset(&lensOffset)\n\n<!--\n_syntax: setLensOffset(&lensOffset)_\n_name: setLensOffset_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &lensOffset_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the \"lens offset\" applied to this camera.\n\nOrdinarily, the camera is pointed straight down the center of its view\nfrustum. However, it is possible to orient the camera towards a location\noffset from the center of its frustum. This is called an \"assymetric\nfrustum\" and is used (for example) in stereo views.  It is acheived by\napplying an offset to the center of projection.  This function sets this\noffset from an ofVec2f argument.  For more information see\n<http://www.orthostereo.com/geometryopengl.html>.\n\n\n**Parameters:**\n\nlensOffset The \"lens offset\" to apply to this camera, encoded in\n    an ofVec2f.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setNearClip(f)\n\n<!--\n_syntax: setNearClip(f)_\n_name: setNearClip_\n_returns: void_\n_returns_description: _\n_parameters: float f_\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis sets the near clip plane.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setRenderer(renderer)\n\n<!--\n_syntax: setRenderer(renderer)_\n_name: setRenderer_\n_returns: void_\n_returns_description: _\n_parameters: shared_ptr< ofBaseRenderer > renderer_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\}\n\\name Renderer\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setVFlip(vflip)\n\n<!--\n_syntax: setVFlip(vflip)_\n_name: setVFlip_\n_returns: void_\n_returns_description: _\n_parameters: bool vflip_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setupOffAxisViewPortal(&topLeft, &bottomLeft, &bottomRight)\n\n<!--\n_syntax: setupOffAxisViewPortal(&topLeft, &bottomLeft, &bottomRight)_\n_name: setupOffAxisViewPortal_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &topLeft, const glm::vec3 &bottomLeft, const glm::vec3 &bottomRight_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setupPerspective(vFlip = true, fov, nearDist, farDist, &lensOffset)\n\n<!--\n_syntax: setupPerspective(vFlip = true, fov, nearDist, farDist, &lensOffset)_\n_name: setupPerspective_\n_returns: void_\n_returns_description: _\n_parameters: bool vFlip=true, float fov, float nearDist, float farDist, const glm::vec2 &lensOffset_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\}\n\\name OpenGL Setup\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 worldToCamera(WorldXYZ)\n\n<!--\n_syntax: worldToCamera(WorldXYZ)_\n_name: worldToCamera_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: glm::vec3 WorldXYZ_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nWhen you have a position in world coordinates you can get what it would be in camera coordinates, transforming it using the ofCamera.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 worldToCamera(WorldXYZ, &viewport)\n\n<!--\n_syntax: worldToCamera(WorldXYZ, &viewport)_\n_name: worldToCamera_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: glm::vec3 WorldXYZ, const ofRectangle &viewport_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\todo worldToCamera()\n\n\n\n\n\n_description: _\n\nWhen you have a position in world coordinates you can get what it would be in camera coordinates, transforming it using the ofCamera.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 worldToScreen(WorldXYZ)\n\n<!--\n_syntax: worldToScreen(WorldXYZ)_\n_name: worldToScreen_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: glm::vec3 WorldXYZ_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nWhen you have a position in world coordinates you can get what it would be in screen coordinates, transforming it using the ofCamera.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 worldToScreen(WorldXYZ, &viewport)\n\n<!--\n_syntax: worldToScreen(WorldXYZ, &viewport)_\n_name: worldToScreen_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: glm::vec3 WorldXYZ, const ofRectangle &viewport_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nObtain the screen coordinates of a point in the 3D world.\n\nTakes an (X,Y,Z) point in your 3D world, encoded as an ofVec3f,\nand returns the location (also as an ofVec3f) where this point would\nappear on your (two-dimensional) display. The screen position's \"Z\ncoordinate\" is set to be the same as your camera's.\n\n\n**Parameters:**\n\nWorldXYZ A 3D point in the world, whose screen coordinates you wish to know.\n\nviewport (Optional) A viewport. The default is ofGetCurrentViewport().\n\n**Returns**: An ofVec3f containing the screen coordinates of your 3D point of interest.\n\n\n\n\n\n_description: _\n\nWhen you have a position in world coordinates you can get what it would be in screen coordinates, transforming it using the ofCamera.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofCamera()\n\n<!--\n_syntax: ~ofCamera()_\n_name: ~ofCamera_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDestroy the camera.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###float aspectRatio\n\n<!--\n_name: aspectRatio_\n_type: float_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float farClip\n\n<!--\n_name: farClip_\n_type: float_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool forceAspectRatio\n\n<!--\n_name: forceAspectRatio_\n_type: bool_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float fov\n\n<!--\n_name: fov_\n_type: float_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isOrtho\n\n<!--\n_name: isOrtho_\n_type: bool_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f lensOffset\n\n<!--\n_name: lensOffset_\n_type: ofVec2f_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float nearClip\n\n<!--\n_name: nearClip_\n_type: float_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###shared_ptr< ofBaseRenderer > renderer\n\n<!--\n_name: renderer_\n_type: shared_ptr< ofBaseRenderer >_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool vFlip\n\n<!--\n_name: vFlip_\n_type: bool_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}}],"fetch":[]}