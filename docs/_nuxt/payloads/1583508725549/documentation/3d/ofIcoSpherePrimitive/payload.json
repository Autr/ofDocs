{"data":[{"page":{"entry":{"name":"ofIcoSpherePrimitive","filename":"ofIcoSpherePrimitive.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/3d/ofIcoSpherePrimitive.markdown","path":"/documentation/3d/ofIcoSpherePrimitive","route":"/documentation/3d/ofIcoSpherePrimitive.markdown","dir":"../ofSite/documentation/3d","ext":"markdown","type":"page","id":1735,"parent":1717,"breadcrumbs":[1717,1718],"siblings":[],"translations":{}},"description":{"short":null,"full":"<p>The ofIcoSpherePrimitive allows you to create an icosphere, which is a sphere not based on UV slices like the ofSpherePrimitive, but rather faces. Like this:</p>\n<p>Like all primitives it allows you to set the radius, draw it, set positions, etc.</p>\n<pre><code>\n<span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n\ticoSphere<span class=\"token punctuation\">.</span><span class=\"token function\">setRadius</span><span class=\"token punctuation\">(</span> width <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n\ticoSphere<span class=\"token punctuation\">.</span><span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ticoSphere<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>spinX<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ticoSphere<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>spinY<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// get all the faces from the icoSphere, handy when you want to copy</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// individual vertices or tweak them a little ;)</span>\n\tvector<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>ofMeshFace</code></pre>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":"of3dPrimitive"},"methods":[{"syntax":"getRadius()","name":"getRadius","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getResolution()","name":"getResolution","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofIcoSpherePrimitive()","name":"ofIcoSpherePrimitive","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofIcoSpherePrimitive(radius, iterations)","name":"ofIcoSpherePrimitive","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> iterations","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"set(radius, res)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> res","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setMode(mode)","name":"setMode","returns":"void","returns_description":null,"parameters":"ofPrimitiveMode mode","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setRadius(radius)","name":"setRadius","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radius","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setResolution(iterations)","name":"setResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> iterations","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"~ofIcoSpherePrimitive()","name":"~ofIcoSpherePrimitive","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"name":"radius","type":"float","access":"protected","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"resolution","type":"int","access":"protected","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofIcoSpherePrimitive</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n<em>extends: of3dPrimitive</em>\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>The ofIcoSpherePrimitive allows you to create an icosphere.\nAn icosphere is a sphere not based on UV slices like the ofSpherePrimitive,\nbut rather faces. Like this:</p>\n<p>Like all primitives it allows you to set the radius,\ndraw it, set positions, etc.</p>\n<pre><code>\n<span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n    icoSphere<span class=\"token punctuation\">.</span><span class=\"token function\">setRadius</span><span class=\"token punctuation\">(</span> width <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n    icoSphere<span class=\"token punctuation\">.</span><span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    icoSphere<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>spinX<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    icoSphere<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>spinY<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// get all the faces from the icoSphere, handy when you want to copy</span>\n    <span class=\"token comment\" spellcheck=\"true\">// individual vertices or tweak them a little ;)</span>\n    vector<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>ofMeshFace<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> triangles <span class=\"token operator\">=</span> icoSphere<span class=\"token punctuation\">.</span><span class=\"token function\">getMesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUniqueFaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// now draw</span>\n    icoSphere<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>##Description</p>\n<p>The ofIcoSpherePrimitive allows you to create an icosphere, which is a sphere not based on UV slices like the ofSpherePrimitive, but rather faces. Like this:</p>\n<p>Like all primitives it allows you to set the radius, draw it, set positions, etc.</p>\n<pre><code>\n<span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n\ticoSphere<span class=\"token punctuation\">.</span><span class=\"token function\">setRadius</span><span class=\"token punctuation\">(</span> width <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n\ticoSphere<span class=\"token punctuation\">.</span><span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ticoSphere<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>spinX<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ticoSphere<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>spinY<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// get all the faces from the icoSphere, handy when you want to copy</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// individual vertices or tweak them a little ;)</span>\n\tvector<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>ofMeshFace<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> triangles <span class=\"token operator\">=</span> icoSphere<span class=\"token punctuation\">.</span><span class=\"token function\">getMesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUniqueFaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// now draw</span>\n\ticoSphere<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>##Methods</p>\n<p>###float getRadius()</p>\n<p>&lt;!--\n<em>syntax: getRadius()</em>\n<em>name: getRadius</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getResolution()</p>\n<p>&lt;!--\n<em>syntax: getResolution()</em>\n<em>name: getResolution</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofIcoSpherePrimitive()</h3>\n<p>&lt;!--\n<em>syntax: ofIcoSpherePrimitive()</em>\n<em>name: ofIcoSpherePrimitive</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofIcoSpherePrimitive(radius, iterations)</h3>\n<p>&lt;!--\n<em>syntax: ofIcoSpherePrimitive(radius, iterations)</em>\n<em>name: ofIcoSpherePrimitive</em>\n_returns: _\n_returns_description: _\n<em>parameters: float radius, int iterations</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(radius, res)</p>\n<p>&lt;!--\n<em>syntax: set(radius, res)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float radius, int res</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setMode(mode)</p>\n<p>&lt;!--\n<em>syntax: setMode(mode)</em>\n<em>name: setMode</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofPrimitiveMode mode</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setRadius(radius)</p>\n<p>&lt;!--\n<em>syntax: setRadius(radius)</em>\n<em>name: setRadius</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float radius</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setResolution(iterations)</p>\n<p>&lt;!--\n<em>syntax: setResolution(iterations)</em>\n<em>name: setResolution</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int iterations</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>~ofIcoSpherePrimitive()</h3>\n<p>&lt;!--\n<em>syntax: ~ofIcoSpherePrimitive()</em>\n<em>name: ~ofIcoSpherePrimitive</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###float radius</p>\n<p>&lt;!--\n<em>name: radius</em>\n<em>type: float</em>\n<em>access: protected</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int resolution</p>\n<p>&lt;!--\n<em>name: resolution</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofIcoSpherePrimitive\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: of3dPrimitive_\n-->\n\n##InlineDescription\n\nThe ofIcoSpherePrimitive allows you to create an icosphere.\nAn icosphere is a sphere not based on UV slices like the ofSpherePrimitive,\nbut rather faces. Like this:\n\nLike all primitives it allows you to set the radius,\ndraw it, set positions, etc.\n\n~~~~{.cpp}\n\nvoid setup()\n{\n\n    icoSphere.setRadius( width );\n}\n\nvoid draw()\n{\n\n    icoSphere.setPosition(ofGetWidth()*.2, ofGetHeight()*.75, 0);\n    icoSphere.rotate(spinX, 1.0, 0.0, 0.0);\n    icoSphere.rotate(spinY, 0, 1.0, 0.0);\n\n    // get all the faces from the icoSphere, handy when you want to copy\n    // individual vertices or tweak them a little ;)\n    vector<ofMeshFace> triangles = icoSphere.getMesh().getUniqueFaces();\n\n    // now draw\n    icoSphere.draw();\n}\n~~~~\n\n\n\n\n\n##Description\n\nThe ofIcoSpherePrimitive allows you to create an icosphere, which is a sphere not based on UV slices like the ofSpherePrimitive, but rather faces. Like this:\n\nLike all primitives it allows you to set the radius, draw it, set positions, etc.\n\n~~~~{.cpp}\n\nvoid setup()\n{\n\n\ticoSphere.setRadius( width );\n}\n\nvoid draw()\n{\n\n\ticoSphere.setPosition(ofGetWidth()*.2, ofGetHeight()*.75, 0);\n\ticoSphere.rotate(spinX, 1.0, 0.0, 0.0);\n\ticoSphere.rotate(spinY, 0, 1.0, 0.0);\n\n\t// get all the faces from the icoSphere, handy when you want to copy\n\t// individual vertices or tweak them a little ;)\n\tvector<ofMeshFace> triangles = icoSphere.getMesh().getUniqueFaces();\n\n\t// now draw\n\ticoSphere.draw();\n}\n~~~~\n\n\n\n\n\n##Methods\n\n\n\n###float getRadius()\n\n<!--\n_syntax: getRadius()_\n_name: getRadius_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getResolution()\n\n<!--\n_syntax: getResolution()_\n_name: getResolution_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofIcoSpherePrimitive()\n\n<!--\n_syntax: ofIcoSpherePrimitive()_\n_name: ofIcoSpherePrimitive_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofIcoSpherePrimitive(radius, iterations)\n\n<!--\n_syntax: ofIcoSpherePrimitive(radius, iterations)_\n_name: ofIcoSpherePrimitive_\n_returns: _\n_returns_description: _\n_parameters: float radius, int iterations_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(radius, res)\n\n<!--\n_syntax: set(radius, res)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float radius, int res_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setMode(mode)\n\n<!--\n_syntax: setMode(mode)_\n_name: setMode_\n_returns: void_\n_returns_description: _\n_parameters: ofPrimitiveMode mode_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setRadius(radius)\n\n<!--\n_syntax: setRadius(radius)_\n_name: setRadius_\n_returns: void_\n_returns_description: _\n_parameters: float radius_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setResolution(iterations)\n\n<!--\n_syntax: setResolution(iterations)_\n_name: setResolution_\n_returns: void_\n_returns_description: _\n_parameters: int iterations_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofIcoSpherePrimitive()\n\n<!--\n_syntax: ~ofIcoSpherePrimitive()_\n_name: ~ofIcoSpherePrimitive_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###float radius\n\n<!--\n_name: radius_\n_type: float_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int resolution\n\n<!--\n_name: resolution_\n_type: int_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}}],"fetch":[]}