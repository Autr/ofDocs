{"data":[{"page":{"entry":{"name":"glm::quat","filename":"glm::quat.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/glm/glm::quat.markdown","path":"/documentation/glm/glm::quat","route":"/documentation/glm/glm::quat.markdown","dir":"../ofSite/documentation/glm","ext":"markdown","type":"page","id":2005,"parent":1985,"breadcrumbs":[1985,1718],"siblings":[],"translations":{}},"description":{"short":"<p>@addtogroup gtc_quaternion\n@{</p>\n","full":"<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"length()","name":"length","returns":"glm::tquat::length_type","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p>Return the count of components of a quaternion</p>\n","desc":""},{"short":"","desc":""},{"syntax":"operator*=(s)","name":"operator*=","returns":"glm::quat &","returns_description":null,"parameters":"U s","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"short":"","desc":""},{"short":"","desc":""},{"syntax":"operator/=(s)","name":"operator/=","returns":"glm::quat &","returns_description":null,"parameters":"U s","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator=(&m = P)","name":"operator=","returns":"glm::quat &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>m<span class=\"token operator\">=</span>P","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"short":"<p>GLM_HAS_DEFAULTED_FUNCTIONS</p>\n","desc":""},{"syntax":"operator[](i)","name":"operator[]","returns":"T &","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>tquat<span class=\"token operator\">::</span>length_type i","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator[](i)","name":"operator[]","returns":"const T &","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>tquat<span class=\"token operator\">::</span>length_type i","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"tquat(&eulerAngles = P)","name":"tquat","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>eulerAngles<span class=\"token operator\">=</span>P","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Build a quaternion from euler angles (pitch, yaw, roll), in radians.</p>\n","desc":""},{"syntax":"tquat(&m = P)","name":"tquat","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat3 <span class=\"token operator\">&amp;</span>m<span class=\"token operator\">=</span>P","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"tquat(&m = P)","name":"tquat","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat4 <span class=\"token operator\">&amp;</span>m<span class=\"token operator\">=</span>P","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"tquat(&q = P)","name":"tquat","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>q<span class=\"token operator\">=</span>P","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"tquat(&s, &v = P)","name":"tquat","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>v<span class=\"token operator\">=</span>P","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"tquat(&u = P, &v = P)","name":"tquat","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>u<span class=\"token operator\">=</span>P<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>v<span class=\"token operator\">=</span>P","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Create a quaternion from two normalized axis</p>\n<p><strong>Parameters:</strong></p>\n<p>u A first normalized axis</p>\n<p>v A second normalized axis</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n<p><strong>See also</strong>: http://lolengine.net/blog/2013/09/18/beautiful-maths-quaternion-from-vectors</p>\n","desc":""},{"syntax":"tquat(&w, &x, &y, &z)","name":"tquat","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>z","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"tquat()","name":"tquat","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"short":"","desc":""},{"short":"","desc":""},{"syntax":"tquat(glm::ctor)","name":"tquat","returns":null,"returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>ctor ","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"short":"","desc":""},{"name":"w","type":"T","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"x","type":"T","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"y","type":"T","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"z","type":"T","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{}],"document":"<p>#class glm::quat</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n_extends: _\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>@addtogroup gtc_quaternion\n@{</p>\n<p>##Description</p>\n<p>##Methods</p>\n<p>###glm::tquat::length_type length()</p>\n<p>&lt;!--\n<em>syntax: length()</em>\n<em>name: length</em>\n<em>returns: glm::tquat::length_type</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return the count of components of a quaternion</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::quat &amp; operator*=(U, &amp;q = P)</p>\n<p>&lt;!--\n<em>syntax: operator*=(U, &amp;q = P)</em>\n<em>name: operator*=</em>\n<em>returns: glm::quat &amp;</em>\n_returns_description: _\n<em>parameters: const tquat&lt; U, P &gt; &amp;q=P</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::quat &amp; operator*=(s)</p>\n<p>&lt;!--\n<em>syntax: operator*=(s)</em>\n<em>name: operator*=</em>\n<em>returns: glm::quat &amp;</em>\n_returns_description: _\n<em>parameters: U s</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::quat &amp; operator+=(U, &amp;q = P)</p>\n<p>&lt;!--\n<em>syntax: operator+=(U, &amp;q = P)</em>\n<em>name: operator+=</em>\n<em>returns: glm::quat &amp;</em>\n_returns_description: _\n<em>parameters: const tquat&lt; U, P &gt; &amp;q=P</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::quat &amp; operator-=(U, &amp;q = P)</p>\n<p>&lt;!--\n<em>syntax: operator-=(U, &amp;q = P)</em>\n<em>name: operator-=</em>\n<em>returns: glm::quat &amp;</em>\n_returns_description: _\n<em>parameters: const tquat&lt; U, P &gt; &amp;q=P</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::quat &amp; operator/=(s)</p>\n<p>&lt;!--\n<em>syntax: operator/=(s)</em>\n<em>name: operator/=</em>\n<em>returns: glm::quat &amp;</em>\n_returns_description: _\n<em>parameters: U s</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::quat &amp; operator=(&amp;m = P)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;m = P)</em>\n<em>name: operator=</em>\n<em>returns: glm::quat &amp;</em>\n_returns_description: _\n<em>parameters: const glm::quat &amp;m=P</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::quat &amp; operator=(U, &amp;m = P)</p>\n<p>&lt;!--\n<em>syntax: operator=(U, &amp;m = P)</em>\n<em>name: operator=</em>\n<em>returns: glm::quat &amp;</em>\n_returns_description: _\n<em>parameters: const tquat&lt; U, P &gt; &amp;m=P</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>GLM_HAS_DEFAULTED_FUNCTIONS</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###T &amp; operator<a href=\"i\"></a></p>\n<p>&lt;!--\n<em>syntax: operator<a href=\"i\"></a></em>\n<em>name: operator[]</em>\n<em>returns: T &amp;</em>\n_returns_description: _\n<em>parameters: glm::tquat::length_type i</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const T &amp; operator<a href=\"i\"></a></p>\n<p>&lt;!--\n<em>syntax: operator<a href=\"i\"></a></em>\n<em>name: operator[]</em>\n<em>returns: const T &amp;</em>\n_returns_description: _\n<em>parameters: glm::tquat::length_type i</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>tquat(&amp;eulerAngles = P)</h3>\n<p>&lt;!--\n<em>syntax: tquat(&amp;eulerAngles = P)</em>\n<em>name: tquat</em>\n_returns: _\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;eulerAngles=P</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Build a quaternion from euler angles (pitch, yaw, roll), in radians.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>tquat(&amp;m = P)</h3>\n<p>&lt;!--\n<em>syntax: tquat(&amp;m = P)</em>\n<em>name: tquat</em>\n_returns: _\n_returns_description: _\n<em>parameters: const glm::mat3 &amp;m=P</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>tquat(&amp;m = P)</h3>\n<p>&lt;!--\n<em>syntax: tquat(&amp;m = P)</em>\n<em>name: tquat</em>\n_returns: _\n_returns_description: _\n<em>parameters: const glm::mat4 &amp;m=P</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>tquat(&amp;q = P)</h3>\n<p>&lt;!--\n<em>syntax: tquat(&amp;q = P)</em>\n<em>name: tquat</em>\n_returns: _\n_returns_description: _\n<em>parameters: const glm::quat &amp;q=P</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>tquat(&amp;s, &amp;v = P)</h3>\n<p>&lt;!--\n<em>syntax: tquat(&amp;s, &amp;v = P)</em>\n<em>name: tquat</em>\n_returns: _\n_returns_description: _\n<em>parameters: const T &amp;s, const glm::vec3 &amp;v=P</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>tquat(&amp;u = P, &amp;v = P)</h3>\n<p>&lt;!--\n<em>syntax: tquat(&amp;u = P, &amp;v = P)</em>\n<em>name: tquat</em>\n_returns: _\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;u=P, const glm::vec3 &amp;v=P</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Create a quaternion from two normalized axis</p>\n<p><strong>Parameters:</strong></p>\n<p>u A first normalized axis</p>\n<p>v A second normalized axis</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n<p><strong>See also</strong>: http://lolengine.net/blog/2013/09/18/beautiful-maths-quaternion-from-vectors</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>tquat(&amp;w, &amp;x, &amp;y, &amp;z)</h3>\n<p>&lt;!--\n<em>syntax: tquat(&amp;w, &amp;x, &amp;y, &amp;z)</em>\n<em>name: tquat</em>\n_returns: _\n_returns_description: _\n<em>parameters: const T &amp;w, const T &amp;x, const T &amp;y, const T &amp;z</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>tquat()</h3>\n<p>&lt;!--\n<em>syntax: tquat()</em>\n<em>name: tquat</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>tquat(U, &amp;q = Q)</h3>\n<p>&lt;!--\n<em>syntax: tquat(U, &amp;q = Q)</em>\n<em>name: tquat</em>\n_returns: _\n_returns_description: _\n<em>parameters: const tquat&lt; U, Q &gt; &amp;q=Q</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>tquat(U, &amp;q = Q)</h3>\n<p>&lt;!--\n<em>syntax: tquat(U, &amp;q = Q)</em>\n<em>name: tquat</em>\n_returns: _\n_returns_description: _\n<em>parameters: const tquat&lt; U, Q &gt; &amp;q=Q</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>tquat(glm::ctor)</h3>\n<p>&lt;!--\n<em>syntax: tquat(glm::ctor)</em>\n<em>name: tquat</em>\n_returns: _\n_returns_description: _\n_parameters: glm::ctor _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###typename detail::storage&lt;T, sizeof(T) * 4, detail::is_aligned&lt; P&gt;::value &gt;::type data</p>\n<p>&lt;!--\n<em>name: data</em>\n<em>type: typename detail::storage&lt;T, sizeof(T) * 4, detail::is_aligned&lt; P&gt;::value &gt;::type</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###T w</p>\n<p>&lt;!--\n<em>name: w</em>\n<em>type: T</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###T x</p>\n<p>&lt;!--\n<em>name: x</em>\n<em>type: T</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###T y</p>\n<p>&lt;!--\n<em>name: y</em>\n<em>type: T</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###T z</p>\n<p>&lt;!--\n<em>name: z</em>\n<em>type: T</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class glm::quat\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\n@addtogroup gtc_quaternion\n@{\n\n\n\n\n\n##Description\n\n\n\n\n\n##Methods\n\n\n\n###glm::tquat::length_type length()\n\n<!--\n_syntax: length()_\n_name: length_\n_returns: glm::tquat::length_type_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn the count of components of a quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::quat & operator*=(U, &q = P)\n\n<!--\n_syntax: operator*=(U, &q = P)_\n_name: operator*=_\n_returns: glm::quat &_\n_returns_description: _\n_parameters: const tquat< U, P > &q=P_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::quat & operator*=(s)\n\n<!--\n_syntax: operator*=(s)_\n_name: operator*=_\n_returns: glm::quat &_\n_returns_description: _\n_parameters: U s_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::quat & operator+=(U, &q = P)\n\n<!--\n_syntax: operator+=(U, &q = P)_\n_name: operator+=_\n_returns: glm::quat &_\n_returns_description: _\n_parameters: const tquat< U, P > &q=P_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::quat & operator-=(U, &q = P)\n\n<!--\n_syntax: operator-=(U, &q = P)_\n_name: operator-=_\n_returns: glm::quat &_\n_returns_description: _\n_parameters: const tquat< U, P > &q=P_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::quat & operator/=(s)\n\n<!--\n_syntax: operator/=(s)_\n_name: operator/=_\n_returns: glm::quat &_\n_returns_description: _\n_parameters: U s_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::quat & operator=(&m = P)\n\n<!--\n_syntax: operator=(&m = P)_\n_name: operator=_\n_returns: glm::quat &_\n_returns_description: _\n_parameters: const glm::quat &m=P_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::quat & operator=(U, &m = P)\n\n<!--\n_syntax: operator=(U, &m = P)_\n_name: operator=_\n_returns: glm::quat &_\n_returns_description: _\n_parameters: const tquat< U, P > &m=P_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGLM_HAS_DEFAULTED_FUNCTIONS\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T & operator[](i)\n\n<!--\n_syntax: operator[](i)_\n_name: operator[]_\n_returns: T &_\n_returns_description: _\n_parameters: glm::tquat::length_type i_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const T & operator[](i)\n\n<!--\n_syntax: operator[](i)_\n_name: operator[]_\n_returns: const T &_\n_returns_description: _\n_parameters: glm::tquat::length_type i_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### tquat(&eulerAngles = P)\n\n<!--\n_syntax: tquat(&eulerAngles = P)_\n_name: tquat_\n_returns: _\n_returns_description: _\n_parameters: const glm::vec3 &eulerAngles=P_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nBuild a quaternion from euler angles (pitch, yaw, roll), in radians.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### tquat(&m = P)\n\n<!--\n_syntax: tquat(&m = P)_\n_name: tquat_\n_returns: _\n_returns_description: _\n_parameters: const glm::mat3 &m=P_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### tquat(&m = P)\n\n<!--\n_syntax: tquat(&m = P)_\n_name: tquat_\n_returns: _\n_returns_description: _\n_parameters: const glm::mat4 &m=P_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### tquat(&q = P)\n\n<!--\n_syntax: tquat(&q = P)_\n_name: tquat_\n_returns: _\n_returns_description: _\n_parameters: const glm::quat &q=P_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### tquat(&s, &v = P)\n\n<!--\n_syntax: tquat(&s, &v = P)_\n_name: tquat_\n_returns: _\n_returns_description: _\n_parameters: const T &s, const glm::vec3 &v=P_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### tquat(&u = P, &v = P)\n\n<!--\n_syntax: tquat(&u = P, &v = P)_\n_name: tquat_\n_returns: _\n_returns_description: _\n_parameters: const glm::vec3 &u=P, const glm::vec3 &v=P_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreate a quaternion from two normalized axis\n\n\n**Parameters:**\n\nu A first normalized axis\n\nv A second normalized axis\n\n**See also**: gtc_quaternion\n\n**See also**: http://lolengine.net/blog/2013/09/18/beautiful-maths-quaternion-from-vectors\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### tquat(&w, &x, &y, &z)\n\n<!--\n_syntax: tquat(&w, &x, &y, &z)_\n_name: tquat_\n_returns: _\n_returns_description: _\n_parameters: const T &w, const T &x, const T &y, const T &z_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### tquat()\n\n<!--\n_syntax: tquat()_\n_name: tquat_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### tquat(U, &q = Q)\n\n<!--\n_syntax: tquat(U, &q = Q)_\n_name: tquat_\n_returns: _\n_returns_description: _\n_parameters: const tquat< U, Q > &q=Q_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### tquat(U, &q = Q)\n\n<!--\n_syntax: tquat(U, &q = Q)_\n_name: tquat_\n_returns: _\n_returns_description: _\n_parameters: const tquat< U, Q > &q=Q_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### tquat(glm::ctor)\n\n<!--\n_syntax: tquat(glm::ctor)_\n_name: tquat_\n_returns: _\n_returns_description: _\n_parameters: glm::ctor _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###typename detail::storage<T, sizeof(T) * 4, detail::is_aligned< P>::value >::type data\n\n<!--\n_name: data_\n_type: typename detail::storage<T, sizeof(T) * 4, detail::is_aligned< P>::value >::type_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T w\n\n<!--\n_name: w_\n_type: T_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T x\n\n<!--\n_name: x_\n_type: T_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T y\n\n<!--\n_name: y_\n_type: T_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T z\n\n<!--\n_name: z_\n_type: T_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}}],"fetch":[]}