{"data":[{"page":{"entry":{"name":"ofxTCPServer","filename":"ofxTCPServer.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/addons/ofxNetwork/ofxTCPServer.markdown","path":"/documentation/addons/ofxNetwork/ofxTCPServer","route":"/documentation/addons/ofxNetwork/ofxTCPServer.markdown","dir":"../ofSite/documentation/addons/ofxNetwork","ext":"markdown","type":"page","id":1830,"parent":1824,"breadcrumbs":[1824,1743,1718],"siblings":[],"translations":{}},"description":{"short":"","full":"<p>The ofxTCPServer creates a TCP server that will serve up TCP data to any client that can reach it. To set it up you create an instance of an ofxTCPServer and call setup() passing the port number that you want your server to listen on:</p>\n<pre><code>TCP<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Clients connect to the server and get assigned a unique ID that allows you to send or receive data from them.</p>\n<p>That unique ID is important because when a client disconnects, its ID isn't recycled, the 100th client to connect will be 100, even if there are only currently 2 clients connected.</p>\n<p>You can check to see how many clients are connected to your server using the getNumClients() method, but to loop through the clients, you'll want to do something like the following:</p>\n<pre><code>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> TCP<span class=\"token punctuation\">.</span><span class=\"token function\">getLastID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// getLastID is UID of all clients</span>\n<span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> TCP<span class=\"token punctuation\">.</span><span class=\"token function\">isClientConnected</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// check and see if it's still around</span>\n\t\t  <span class=\"token comment\" spellcheck=\"true\">// maybe the client is sending something</span>\n\t\t  string str <span class=\"token operator\">=</span> TCP<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t  TCP<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>You sent<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">+</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>There are two send() methods for ASCII string data that both get a message delimiter attached to them (by default [/TCP]):</p>\n<p>send(int clientID, string message) - to send to a specific client\nsendToAll(string message) - to send to all clients</p>\n<p>and there are two methods for sending raw ASCII data, i.e. without the message delimiter attached to them:</p>\n<p>sendRawMsg(int clientID, const char * rawMsg, const int numBytes) - to send to a specific client\nsendRawMsgToAll(const char * rawMsg, const int numBytes) - to send to a specific client</p>\n<p>And finally two methods for sending raw non-ASCII data like bitmaps, sounds, or other binary data formats:</p>\n<p>sendRawBytes(int clientID, const char * rawBytes, const int numBytes) - to send to a specific client\nsendRawBytesToAll(const char * rawBytes, const int numBytes) - to send to a specific client</p>\n<p>There are a few things to note:</p>\n<ol>\n<li>TCP is connection based which means it can be slower for things like video streams or lots of blobs of data, but more reliable than UDP. <a href=\"http://www.diffen.com/difference/TCP_vs_UDP\">A not too technical description of the differences</a></li>\n<li>TCP is not HTTP. You'll probably find that tools like browsers send a lot more information that you're initially expecting, but you can easily pull out the parts of their request that you might need from the strings.</li>\n<li>Just because your ofxTCPServer is up and running does not mean that those ports on your computer will be open or that your IP will be visible. That's all configuration work to be done before your server can talk to the outside world.</li>\n</ol>\n<p>The ofxTCPServer is threaded by default,</p>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":"ofThread"},"methods":[{"syntax":"close()","name":"close","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Close the server down and disconnect all clients.</p>\n"},{"syntax":"disconnectAllClients()","name":"disconnectAllClients","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"disconnectClient(clientID)","name":"disconnectClient","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> clientID","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Disconnect a particular client.</p>\n"},{"syntax":"getClient(clientID)","name":"getClient","returns":"ofxTCPClient &","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> clientID","access":"private","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getClientIP(clientID)","name":"getClientIP","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> clientID","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the ID that the client is connected from. This is useful for tracking clients that connect and disconnect.</p>\n"},{"syntax":"getClientPort(clientID)","name":"getClientPort","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> clientID","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Gets the port that the client is currently connected on.</p>\n"},{"syntax":"getLastID()","name":"getLastID","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the last UID assigned to a client. As this counts upwards, it's the best way to loop through all clients:</p>\n<pre><code>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> TCP<span class=\"token punctuation\">.</span><span class=\"token function\">getLastID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// getLastID is UID of all clients</span>\n<span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> TCP<span class=\"token punctuation\">.</span><span class=\"token function\">isClientConnected</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// check and see if it's still around</span>\n\t\t  <span class=\"token comment\" spellcheck=\"true\">// maybe the client is sending something</span>\n\t\t  string str <span class=\"token operator\">=</span> TCP<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t  TCP<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>You sent<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">+</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"getNumClients()","name":"getNumClients","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the number of connected clients, helpful for monitoring loads on a server but not for sending messages.</p>\n"},{"syntax":"getNumReceivedBytes(clientID)","name":"getNumReceivedBytes","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> clientID","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the total bytes sent by a client.</p>\n"},{"syntax":"getPort()","name":"getPort","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the port that the server is currently serving on.</p>\n"},{"syntax":"isClientConnected(clientID)","name":"isClientConnected","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> clientID","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns whether a client ID correlates to a connected client:</p>\n<pre><code>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> TCP<span class=\"token punctuation\">.</span><span class=\"token function\">getLastID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// getLastID is UID of all clients</span>\n<span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> TCP<span class=\"token punctuation\">.</span><span class=\"token function\">isClientConnected</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// check and see if it's still around</span>\n\t\t  <span class=\"token comment\" spellcheck=\"true\">// maybe the client is sending something</span>\n\t\t  string str <span class=\"token operator\">=</span> TCP<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t  TCP<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>You sent<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">+</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"isClientSetup(clientID)","name":"isClientSetup","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> clientID","access":"private","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"isConnected()","name":"isConnected","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofxTCPServer(&mom)","name":"ofxTCPServer","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxTCPServer <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofxTCPServer()","name":"ofxTCPServer","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Constructor. You need to call setup() before your server itself is ready to receive connections.</p>\n"},{"syntax":"operator=(&mom)","name":"operator=","returns":"ofxTCPServer &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxTCPServer <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"peekReceiveRawBytes(clientID, *receiveBytes, numBytes)","name":"peekReceiveRawBytes","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> clientID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>receiveBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numBytes","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"receive(clientID)","name":"receive","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> clientID","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Receives raw bytes, such as an bitmap or audio data from a client indicated with the clientID:</p>\n<pre><code>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">getLastID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">isClientConnected</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    string received <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>clientID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// will end with delimiter, so make sure client is sending it</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"receiveRawBytes(clientID, *receiveBytes, numBytes)","name":"receiveRawBytes","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> clientID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>receiveBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numBytes","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Receives raw bytes, such as an bitmap or audio data from a client indicated with the clientID:</p>\n<pre><code>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">getLastID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">isClientConnected</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> received <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">receiveRawBytes</span><span class=\"token punctuation\">(</span>clientID<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>receiveBytes<span class=\"token punctuation\">,</span> numBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"receiveRawMsg(clientID, *receiveBytes, numBytes)","name":"receiveRawMsg","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> clientID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>receiveBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numBytes","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"send(clientID, message)","name":"send","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> clientID<span class=\"token punctuation\">,</span> string message","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Sends a string delimited with the delimiter value to a selected client.</p>\n"},{"syntax":"sendRawBytes(clientID, *rawBytes, numBytes)","name":"sendRawBytes","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> clientID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>rawBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> numBytes","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Sends raw bytes to a selected client. See sendRawBytesToAll()</p>\n"},{"syntax":"sendRawBytesToAll(*rawBytes, numBytes)","name":"sendRawBytesToAll","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>rawBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> numBytes","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Sends raw bytes to all connected clients, handy for sending an image or other binary data to a client. For instance:</p>\n<pre><code>        ofImage img<span class=\"token punctuation\">;</span>\n        img<span class=\"token punctuation\">.</span><span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>tmp<span class=\"token punctuation\">.</span>jpg<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> imageBytesToSend <span class=\"token operator\">=</span> <span class=\"token number\">7800</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> totalBytesSent <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> messageSize <span class=\"token operator\">=</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> imageBytesToSend </code></pre>\n"},{"syntax":"sendRawMsg(clientID, *rawMsg, numBytes)","name":"sendRawMsg","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> clientID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>rawMsg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> numBytes","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"sendRawMsgToAll(*rawMsg, numBytes)","name":"sendRawMsgToAll","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>rawMsg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> numBytes","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"sendToAll(message)","name":"sendToAll","returns":"bool","returns_description":null,"parameters":"string message","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Sends a string delimited with the delimiter value to all connected clients.</p>\n"},{"syntax":"setMessageDelimiter(delim)","name":"setMessageDelimiter","returns":"void","returns_description":null,"parameters":"string delim","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This sets the message delimiter that your server will use when sending and receiving messages from clients. By default it's [\\TCP] though you can have it be any value as long as it's consistent on both the client and server sides.</p>\n"},{"syntax":"setVerbose(_verbose)","name":"setVerbose","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> _verbose","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setup(&settings)","name":"setup","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxTCPSettings <span class=\"token operator\">&amp;</span>settings","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setup(_port, blocking = false)","name":"setup","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> _port<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> blocking<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>The port is the port that your server will serve up data on. It shouldn't be a commonly used port like 22 or 80, go with a higher number less likely to be used.\nThe blocking parameter signals whether the client connections will be allowed to block on the servers thread as they send a message. This becomes important when you're dealing with very large messages coming from clients.</p>\n"},{"syntax":"threadedFunction()","name":"threadedFunction","returns":"void","returns_description":null,"parameters":null,"access":"private","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"waitConnectedClient()","name":"waitConnectedClient","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"waitConnectedClient(ms)","name":"waitConnectedClient","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> ms","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"~ofxTCPServer()","name":"~ofxTCPServer","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"name":"TCPConnections","type":"ofxTCPClient","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"TCPServer","type":"ofxTCPManager","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"bClientBlocking","type":"bool","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"connected","type":"bool","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"idCount","type":"int","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"mConnectionsLock","type":"ofMutex ","access":"private","version_started":"0.8.0","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"messageDelimiter","type":"string","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"port","type":"int","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"serverReady","type":"condition_variable","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"str","type":"string","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofxTCPServer</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n<em>extends: ofThread</em>\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>##Description</p>\n<p>The ofxTCPServer creates a TCP server that will serve up TCP data to any client that can reach it. To set it up you create an instance of an ofxTCPServer and call setup() passing the port number that you want your server to listen on:</p>\n<pre><code>TCP<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Clients connect to the server and get assigned a unique ID that allows you to send or receive data from them.</p>\n<p>That unique ID is important because when a client disconnects, its ID isn't recycled, the 100th client to connect will be 100, even if there are only currently 2 clients connected.</p>\n<p>You can check to see how many clients are connected to your server using the getNumClients() method, but to loop through the clients, you'll want to do something like the following:</p>\n<pre><code>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> TCP<span class=\"token punctuation\">.</span><span class=\"token function\">getLastID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// getLastID is UID of all clients</span>\n<span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> TCP<span class=\"token punctuation\">.</span><span class=\"token function\">isClientConnected</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// check and see if it's still around</span>\n\t\t  <span class=\"token comment\" spellcheck=\"true\">// maybe the client is sending something</span>\n\t\t  string str <span class=\"token operator\">=</span> TCP<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t  TCP<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>You sent<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">+</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>There are two send() methods for ASCII string data that both get a message delimiter attached to them (by default [/TCP]):</p>\n<p>send(int clientID, string message) - to send to a specific client\nsendToAll(string message) - to send to all clients</p>\n<p>and there are two methods for sending raw ASCII data, i.e. without the message delimiter attached to them:</p>\n<p>sendRawMsg(int clientID, const char * rawMsg, const int numBytes) - to send to a specific client\nsendRawMsgToAll(const char * rawMsg, const int numBytes) - to send to a specific client</p>\n<p>And finally two methods for sending raw non-ASCII data like bitmaps, sounds, or other binary data formats:</p>\n<p>sendRawBytes(int clientID, const char * rawBytes, const int numBytes) - to send to a specific client\nsendRawBytesToAll(const char * rawBytes, const int numBytes) - to send to a specific client</p>\n<p>There are a few things to note:</p>\n<ol>\n<li>TCP is connection based which means it can be slower for things like video streams or lots of blobs of data, but more reliable than UDP. <a href=\"http://www.diffen.com/difference/TCP_vs_UDP\">A not too technical description of the differences</a></li>\n<li>TCP is not HTTP. You'll probably find that tools like browsers send a lot more information that you're initially expecting, but you can easily pull out the parts of their request that you might need from the strings.</li>\n<li>Just because your ofxTCPServer is up and running does not mean that those ports on your computer will be open or that your IP will be visible. That's all configuration work to be done before your server can talk to the outside world.</li>\n</ol>\n<p>The ofxTCPServer is threaded by default,</p>\n<p>##Methods</p>\n<p>###bool close()</p>\n<p>&lt;!--\n<em>syntax: close()</em>\n<em>name: close</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Close the server down and disconnect all clients.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool disconnectAllClients()</p>\n<p>&lt;!--\n<em>syntax: disconnectAllClients()</em>\n<em>name: disconnectAllClients</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool disconnectClient(clientID)</p>\n<p>&lt;!--\n<em>syntax: disconnectClient(clientID)</em>\n<em>name: disconnectClient</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: int clientID</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Disconnect a particular client.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofxTCPClient &amp; getClient(clientID)</p>\n<p>&lt;!--\n<em>syntax: getClient(clientID)</em>\n<em>name: getClient</em>\n<em>returns: ofxTCPClient &amp;</em>\n_returns_description: _\n<em>parameters: int clientID</em>\n<em>access: private</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string getClientIP(clientID)</p>\n<p>&lt;!--\n<em>syntax: getClientIP(clientID)</em>\n<em>name: getClientIP</em>\n<em>returns: string</em>\n_returns_description: _\n<em>parameters: int clientID</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the ID that the client is connected from. This is useful for tracking clients that connect and disconnect.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getClientPort(clientID)</p>\n<p>&lt;!--\n<em>syntax: getClientPort(clientID)</em>\n<em>name: getClientPort</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: int clientID</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Gets the port that the client is currently connected on.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getLastID()</p>\n<p>&lt;!--\n<em>syntax: getLastID()</em>\n<em>name: getLastID</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the last UID assigned to a client. As this counts upwards, it's the best way to loop through all clients:</p>\n<pre><code>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> TCP<span class=\"token punctuation\">.</span><span class=\"token function\">getLastID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// getLastID is UID of all clients</span>\n<span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> TCP<span class=\"token punctuation\">.</span><span class=\"token function\">isClientConnected</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// check and see if it's still around</span>\n\t\t  <span class=\"token comment\" spellcheck=\"true\">// maybe the client is sending something</span>\n\t\t  string str <span class=\"token operator\">=</span> TCP<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t  TCP<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>You sent<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">+</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getNumClients()</p>\n<p>&lt;!--\n<em>syntax: getNumClients()</em>\n<em>name: getNumClients</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the number of connected clients, helpful for monitoring loads on a server but not for sending messages.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getNumReceivedBytes(clientID)</p>\n<p>&lt;!--\n<em>syntax: getNumReceivedBytes(clientID)</em>\n<em>name: getNumReceivedBytes</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: int clientID</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the total bytes sent by a client.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getPort()</p>\n<p>&lt;!--\n<em>syntax: getPort()</em>\n<em>name: getPort</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the port that the server is currently serving on.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isClientConnected(clientID)</p>\n<p>&lt;!--\n<em>syntax: isClientConnected(clientID)</em>\n<em>name: isClientConnected</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: int clientID</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns whether a client ID correlates to a connected client:</p>\n<pre><code>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> TCP<span class=\"token punctuation\">.</span><span class=\"token function\">getLastID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// getLastID is UID of all clients</span>\n<span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> TCP<span class=\"token punctuation\">.</span><span class=\"token function\">isClientConnected</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// check and see if it's still around</span>\n\t\t  <span class=\"token comment\" spellcheck=\"true\">// maybe the client is sending something</span>\n\t\t  string str <span class=\"token operator\">=</span> TCP<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t  TCP<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>You sent<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">+</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isClientSetup(clientID)</p>\n<p>&lt;!--\n<em>syntax: isClientSetup(clientID)</em>\n<em>name: isClientSetup</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: int clientID</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isConnected()</p>\n<p>&lt;!--\n<em>syntax: isConnected()</em>\n<em>name: isConnected</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofxTCPServer(&amp;mom)</h3>\n<p>&lt;!--\n<em>syntax: ofxTCPServer(&amp;mom)</em>\n<em>name: ofxTCPServer</em>\n_returns: _\n_returns_description: _\n<em>parameters: const ofxTCPServer &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofxTCPServer()</h3>\n<p>&lt;!--\n<em>syntax: ofxTCPServer()</em>\n<em>name: ofxTCPServer</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Constructor. You need to call setup() before your server itself is ready to receive connections.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofxTCPServer &amp; operator=(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;mom)</em>\n<em>name: operator=</em>\n<em>returns: ofxTCPServer &amp;</em>\n_returns_description: _\n<em>parameters: const ofxTCPServer &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int peekReceiveRawBytes(clientID, *receiveBytes, numBytes)</p>\n<p>&lt;!--\n<em>syntax: peekReceiveRawBytes(clientID, *receiveBytes, numBytes)</em>\n<em>name: peekReceiveRawBytes</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: int clientID, char *receiveBytes, int numBytes</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string receive(clientID)</p>\n<p>&lt;!--\n<em>syntax: receive(clientID)</em>\n<em>name: receive</em>\n<em>returns: string</em>\n_returns_description: _\n<em>parameters: int clientID</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Receives raw bytes, such as an bitmap or audio data from a client indicated with the clientID:</p>\n<pre><code>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">getLastID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">isClientConnected</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    string received <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>clientID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// will end with delimiter, so make sure client is sending it</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int receiveRawBytes(clientID, *receiveBytes, numBytes)</p>\n<p>&lt;!--\n<em>syntax: receiveRawBytes(clientID, *receiveBytes, numBytes)</em>\n<em>name: receiveRawBytes</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: int clientID, char *receiveBytes, int numBytes</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Receives raw bytes, such as an bitmap or audio data from a client indicated with the clientID:</p>\n<pre><code>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">getLastID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">isClientConnected</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> received <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">receiveRawBytes</span><span class=\"token punctuation\">(</span>clientID<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>receiveBytes<span class=\"token punctuation\">,</span> numBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int receiveRawMsg(clientID, *receiveBytes, numBytes)</p>\n<p>&lt;!--\n<em>syntax: receiveRawMsg(clientID, *receiveBytes, numBytes)</em>\n<em>name: receiveRawMsg</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: int clientID, char *receiveBytes, int numBytes</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool send(clientID, message)</p>\n<p>&lt;!--\n<em>syntax: send(clientID, message)</em>\n<em>name: send</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: int clientID, string message</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Sends a string delimited with the delimiter value to a selected client.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool sendRawBytes(clientID, *rawBytes, numBytes)</p>\n<p>&lt;!--\n<em>syntax: sendRawBytes(clientID, *rawBytes, numBytes)</em>\n<em>name: sendRawBytes</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: int clientID, const char *rawBytes, const int numBytes</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Sends raw bytes to a selected client. See sendRawBytesToAll()</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool sendRawBytesToAll(*rawBytes, numBytes)</p>\n<p>&lt;!--\n<em>syntax: sendRawBytesToAll(*rawBytes, numBytes)</em>\n<em>name: sendRawBytesToAll</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const char *rawBytes, const int numBytes</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Sends raw bytes to all connected clients, handy for sending an image or other binary data to a client. For instance:</p>\n<pre><code>        ofImage img<span class=\"token punctuation\">;</span>\n        img<span class=\"token punctuation\">.</span><span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>tmp<span class=\"token punctuation\">.</span>jpg<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> imageBytesToSend <span class=\"token operator\">=</span> <span class=\"token number\">7800</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> totalBytesSent <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> messageSize <span class=\"token operator\">=</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> imageBytesToSend <span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>imageBytesToSend <span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> messageSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                TCP<span class=\"token punctuation\">.</span><span class=\"token function\">sendRawBytesToAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>img<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>totalBytesSent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> messageSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                imageBytesToSend <span class=\"token operator\">-</span><span class=\"token operator\">=</span> messageSize<span class=\"token punctuation\">;</span>\n                totalBytesSent <span class=\"token operator\">+</span><span class=\"token operator\">=</span> messageSize<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                TCP<span class=\"token punctuation\">.</span><span class=\"token function\">sendRawBytesToAll</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>img<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>totalBytesSent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> imageBytesToSend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                totalBytesSent <span class=\"token operator\">+</span><span class=\"token operator\">=</span> imageBytesToSend<span class=\"token punctuation\">;</span>\n                imageBytesToSend <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>On the ofxTCPClient side this would look like:</p>\n<pre><code>\n        <span class=\"token keyword\">bool</span> dataRecd <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span><span class=\"token number\">7800</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> recd <span class=\"token operator\">=</span> <span class=\"token number\">7800</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> totalReceived <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> messageSize <span class=\"token operator\">=</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>recd <span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>recd <span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> messageSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                tcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">receiveRawBytes</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>buffer<span class=\"token punctuation\">[</span>totalReceived<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> messageSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                recd <span class=\"token operator\">-</span><span class=\"token operator\">=</span> messageSize<span class=\"token punctuation\">;</span>\n                totalReceived <span class=\"token operator\">+</span><span class=\"token operator\">=</span> messageSize<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                tcpClient<span class=\"token punctuation\">.</span><span class=\"token function\">receiveRawBytes</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>buffer<span class=\"token punctuation\">[</span>totalReceived<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> recd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                totalReceived <span class=\"token operator\">+</span><span class=\"token operator\">=</span> recd<span class=\"token punctuation\">;</span>\n                recd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                dataRecd <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dataRecd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            img<span class=\"token punctuation\">.</span><span class=\"token function\">setFromPixels</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>buffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">52</span><span class=\"token punctuation\">,</span> OF_IMAGE_COLOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>This example is a bit silly because it assumes that you know the exact size of an image, but extending this with different messages to send sizes and types beforehand isn't too difficult.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool sendRawMsg(clientID, *rawMsg, numBytes)</p>\n<p>&lt;!--\n<em>syntax: sendRawMsg(clientID, *rawMsg, numBytes)</em>\n<em>name: sendRawMsg</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: int clientID, const char *rawMsg, const int numBytes</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool sendRawMsgToAll(*rawMsg, numBytes)</p>\n<p>&lt;!--\n<em>syntax: sendRawMsgToAll(*rawMsg, numBytes)</em>\n<em>name: sendRawMsgToAll</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const char *rawMsg, const int numBytes</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool sendToAll(message)</p>\n<p>&lt;!--\n<em>syntax: sendToAll(message)</em>\n<em>name: sendToAll</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: string message</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Sends a string delimited with the delimiter value to all connected clients.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setMessageDelimiter(delim)</p>\n<p>&lt;!--\n<em>syntax: setMessageDelimiter(delim)</em>\n<em>name: setMessageDelimiter</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: string delim</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This sets the message delimiter that your server will use when sending and receiving messages from clients. By default it's [\\TCP] though you can have it be any value as long as it's consistent on both the client and server sides.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setVerbose(_verbose)</p>\n<p>&lt;!--\n_syntax: setVerbose(<em>verbose)</em>\n<em>name: setVerbose</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: bool <em>verbose</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool setup(&amp;settings)</p>\n<p>&lt;!--\n<em>syntax: setup(&amp;settings)</em>\n<em>name: setup</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofxTCPSettings &amp;settings</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool setup(_port, blocking = false)</p>\n<p>&lt;!--\n_syntax: setup(<em>port, blocking = false)</em>\n<em>name: setup</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: int <em>port, bool blocking=false</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>The port is the port that your server will serve up data on. It shouldn't be a commonly used port like 22 or 80, go with a higher number less likely to be used.\nThe blocking parameter signals whether the client connections will be allowed to block on the servers thread as they send a message. This becomes important when you're dealing with very large messages coming from clients.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void threadedFunction()</p>\n<p>&lt;!--\n<em>syntax: threadedFunction()</em>\n<em>name: threadedFunction</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void waitConnectedClient()</p>\n<p>&lt;!--\n<em>syntax: waitConnectedClient()</em>\n<em>name: waitConnectedClient</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void waitConnectedClient(ms)</p>\n<p>&lt;!--\n<em>syntax: waitConnectedClient(ms)</em>\n<em>name: waitConnectedClient</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int ms</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>~ofxTCPServer()</h3>\n<p>&lt;!--\n<em>syntax: ~ofxTCPServer()</em>\n<em>name: ~ofxTCPServer</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###ofxTCPClient TCPConnections</p>\n<p>&lt;!--\n<em>name: TCPConnections</em>\n<em>type: ofxTCPClient</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofxTCPManager TCPServer</p>\n<p>&lt;!--\n<em>name: TCPServer</em>\n<em>type: ofxTCPManager</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool bClientBlocking</p>\n<p>&lt;!--\n<em>name: bClientBlocking</em>\n<em>type: bool</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool connected</p>\n<p>&lt;!--\n<em>name: connected</em>\n<em>type: bool</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int idCount</p>\n<p>&lt;!--\n<em>name: idCount</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofMutex  mConnectionsLock</p>\n<p>&lt;!--\n<em>name: mConnectionsLock</em>\n_type: ofMutex _\n<em>access: private</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string messageDelimiter</p>\n<p>&lt;!--\n<em>name: messageDelimiter</em>\n<em>type: string</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int port</p>\n<p>&lt;!--\n<em>name: port</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###condition_variable serverReady</p>\n<p>&lt;!--\n<em>name: serverReady</em>\n<em>type: condition_variable</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string str</p>\n<p>&lt;!--\n<em>name: str</em>\n<em>type: string</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofxTCPServer\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: ofThread_\n-->\n\n##InlineDescription\n\n\n\n\n\n\n##Description\n\nThe ofxTCPServer creates a TCP server that will serve up TCP data to any client that can reach it. To set it up you create an instance of an ofxTCPServer and call setup() passing the port number that you want your server to listen on:\n\n~~~~{.cpp}\nTCP.setup(8080);\n~~~~\n\nClients connect to the server and get assigned a unique ID that allows you to send or receive data from them.\n\nThat unique ID is important because when a client disconnects, its ID isn't recycled, the 100th client to connect will be 100, even if there are only currently 2 clients connected.\n\nYou can check to see how many clients are connected to your server using the getNumClients() method, but to loop through the clients, you'll want to do something like the following:\n\n~~~~{.cpp}\n\nfor(int i = 0; i < TCP.getLastID(); i++) // getLastID is UID of all clients\n{\n\n\t\tif( TCP.isClientConnected(i) ) { // check and see if it's still around\n\t\t  // maybe the client is sending something\n\t\t  string str = TCP.receive(i);\n\t\t  TCP.send(i, \"You sent: \"+str);\n\t\t}\n}\n~~~~\n\nThere are two send() methods for ASCII string data that both get a message delimiter attached to them (by default [/TCP]):\n\nsend(int clientID, string message) - to send to a specific client\nsendToAll(string message) - to send to all clients\n\nand there are two methods for sending raw ASCII data, i.e. without the message delimiter attached to them:\n\nsendRawMsg(int clientID, const char * rawMsg, const int numBytes) - to send to a specific client\nsendRawMsgToAll(const char * rawMsg, const int numBytes) - to send to a specific client\n\nAnd finally two methods for sending raw non-ASCII data like bitmaps, sounds, or other binary data formats:\n\nsendRawBytes(int clientID, const char * rawBytes, const int numBytes) - to send to a specific client\nsendRawBytesToAll(const char * rawBytes, const int numBytes) - to send to a specific client\n\nThere are a few things to note: \n1) TCP is connection based which means it can be slower for things like video streams or lots of blobs of data, but more reliable than UDP. [A not too technical description of the differences](http://www.diffen.com/difference/TCP_vs_UDP)\n2) TCP is not HTTP. You'll probably find that tools like browsers send a lot more information that you're initially expecting, but you can easily pull out the parts of their request that you might need from the strings.\n3) Just because your ofxTCPServer is up and running does not mean that those ports on your computer will be open or that your IP will be visible. That's all configuration work to be done before your server can talk to the outside world.\n\nThe ofxTCPServer is threaded by default, \n\n\n\n\n\n##Methods\n\n\n\n###bool close()\n\n<!--\n_syntax: close()_\n_name: close_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nClose the server down and disconnect all clients.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool disconnectAllClients()\n\n<!--\n_syntax: disconnectAllClients()_\n_name: disconnectAllClients_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool disconnectClient(clientID)\n\n<!--\n_syntax: disconnectClient(clientID)_\n_name: disconnectClient_\n_returns: bool_\n_returns_description: _\n_parameters: int clientID_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nDisconnect a particular client.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofxTCPClient & getClient(clientID)\n\n<!--\n_syntax: getClient(clientID)_\n_name: getClient_\n_returns: ofxTCPClient &_\n_returns_description: _\n_parameters: int clientID_\n_access: private_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string getClientIP(clientID)\n\n<!--\n_syntax: getClientIP(clientID)_\n_name: getClientIP_\n_returns: string_\n_returns_description: _\n_parameters: int clientID_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the ID that the client is connected from. This is useful for tracking clients that connect and disconnect.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getClientPort(clientID)\n\n<!--\n_syntax: getClientPort(clientID)_\n_name: getClientPort_\n_returns: int_\n_returns_description: _\n_parameters: int clientID_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nGets the port that the client is currently connected on.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getLastID()\n\n<!--\n_syntax: getLastID()_\n_name: getLastID_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the last UID assigned to a client. As this counts upwards, it's the best way to loop through all clients:\n\n~~~~{.cpp}\n\nfor(int i = 0; i < TCP.getLastID(); i++) // getLastID is UID of all clients\n{\n\n\t\tif( TCP.isClientConnected(i) ) { // check and see if it's still around\n\t\t  // maybe the client is sending something\n\t\t  string str = TCP.receive(i);\n\t\t  TCP.send(i, \"You sent: \"+str);\n\t\t}\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getNumClients()\n\n<!--\n_syntax: getNumClients()_\n_name: getNumClients_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the number of connected clients, helpful for monitoring loads on a server but not for sending messages.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getNumReceivedBytes(clientID)\n\n<!--\n_syntax: getNumReceivedBytes(clientID)_\n_name: getNumReceivedBytes_\n_returns: int_\n_returns_description: _\n_parameters: int clientID_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the total bytes sent by a client.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getPort()\n\n<!--\n_syntax: getPort()_\n_name: getPort_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the port that the server is currently serving on.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isClientConnected(clientID)\n\n<!--\n_syntax: isClientConnected(clientID)_\n_name: isClientConnected_\n_returns: bool_\n_returns_description: _\n_parameters: int clientID_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns whether a client ID correlates to a connected client:\n\n~~~~{.cpp}\n\nfor(int i = 0; i < TCP.getLastID(); i++) // getLastID is UID of all clients\n{\n\n\t\tif( TCP.isClientConnected(i) ) { // check and see if it's still around\n\t\t  // maybe the client is sending something\n\t\t  string str = TCP.receive(i);\n\t\t  TCP.send(i, \"You sent: \"+str);\n\t\t}\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isClientSetup(clientID)\n\n<!--\n_syntax: isClientSetup(clientID)_\n_name: isClientSetup_\n_returns: bool_\n_returns_description: _\n_parameters: int clientID_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isConnected()\n\n<!--\n_syntax: isConnected()_\n_name: isConnected_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofxTCPServer(&mom)\n\n<!--\n_syntax: ofxTCPServer(&mom)_\n_name: ofxTCPServer_\n_returns: _\n_returns_description: _\n_parameters: const ofxTCPServer &mom_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofxTCPServer()\n\n<!--\n_syntax: ofxTCPServer()_\n_name: ofxTCPServer_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nConstructor. You need to call setup() before your server itself is ready to receive connections.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofxTCPServer & operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: ofxTCPServer &_\n_returns_description: _\n_parameters: const ofxTCPServer &mom_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int peekReceiveRawBytes(clientID, *receiveBytes, numBytes)\n\n<!--\n_syntax: peekReceiveRawBytes(clientID, *receiveBytes, numBytes)_\n_name: peekReceiveRawBytes_\n_returns: int_\n_returns_description: _\n_parameters: int clientID, char *receiveBytes, int numBytes_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string receive(clientID)\n\n<!--\n_syntax: receive(clientID)_\n_name: receive_\n_returns: string_\n_returns_description: _\n_parameters: int clientID_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReceives raw bytes, such as an bitmap or audio data from a client indicated with the clientID:\n\n~~~~{.cpp}\n\nfor ( int i = 0; i < server.getLastID(); i++ ) {\n  if(server.isClientConnected(i)) {\n    string received = server.receive(clientID); // will end with delimiter, so make sure client is sending it\n    }\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int receiveRawBytes(clientID, *receiveBytes, numBytes)\n\n<!--\n_syntax: receiveRawBytes(clientID, *receiveBytes, numBytes)_\n_name: receiveRawBytes_\n_returns: int_\n_returns_description: _\n_parameters: int clientID, char *receiveBytes, int numBytes_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReceives raw bytes, such as an bitmap or audio data from a client indicated with the clientID:\n\n~~~~{.cpp}\n\nfor ( int i = 0; i < server.getLastID(); i++ ) {\n  if(server.isClientConnected(i)) {\n    int received = server.receiveRawBytes(clientID, *receiveBytes, numBytes);\n    }\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int receiveRawMsg(clientID, *receiveBytes, numBytes)\n\n<!--\n_syntax: receiveRawMsg(clientID, *receiveBytes, numBytes)_\n_name: receiveRawMsg_\n_returns: int_\n_returns_description: _\n_parameters: int clientID, char *receiveBytes, int numBytes_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool send(clientID, message)\n\n<!--\n_syntax: send(clientID, message)_\n_name: send_\n_returns: bool_\n_returns_description: _\n_parameters: int clientID, string message_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSends a string delimited with the delimiter value to a selected client.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool sendRawBytes(clientID, *rawBytes, numBytes)\n\n<!--\n_syntax: sendRawBytes(clientID, *rawBytes, numBytes)_\n_name: sendRawBytes_\n_returns: bool_\n_returns_description: _\n_parameters: int clientID, const char *rawBytes, const int numBytes_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSends raw bytes to a selected client. See sendRawBytesToAll()\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool sendRawBytesToAll(*rawBytes, numBytes)\n\n<!--\n_syntax: sendRawBytesToAll(*rawBytes, numBytes)_\n_name: sendRawBytesToAll_\n_returns: bool_\n_returns_description: _\n_parameters: const char *rawBytes, const int numBytes_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSends raw bytes to all connected clients, handy for sending an image or other binary data to a client. For instance:\n\n~~~~{.cpp}\n        ofImage img;\n        img.loadImage(\"tmp.jpg\");\n        int imageBytesToSend = 7800;\n        int totalBytesSent = 0;\n        int messageSize = 256;\n        while( imageBytesToSend > 1 )\n        {\n            \n            if(imageBytesToSend > messageSize) {\n                TCP.sendRawBytesToAll((char*) &img.getPixels()[totalBytesSent], messageSize);\n                imageBytesToSend -= messageSize;\n                totalBytesSent += messageSize;\n            } else {\n                TCP.sendRawBytesToAll( (char*) &img.getPixels()[totalBytesSent], imageBytesToSend);\n                totalBytesSent += imageBytesToSend;\n                imageBytesToSend = 0;\n            }\n        }\n~~~~\n\nOn the ofxTCPClient side this would look like:\n\n~~~~{.cpp}\n\n        bool dataRecd = false;\n        unsigned char buffer[7800];\n        int recd = 7800;\n        int totalReceived = 0;\n        int messageSize = 256;\n        while(recd > 0) {\n            \n            if(recd > messageSize) {\n                tcpClient.receiveRawBytes( (char*) &buffer[totalReceived], messageSize);\n                recd -= messageSize;\n                totalReceived += messageSize;\n            } else {\n                tcpClient.receiveRawBytes( (char*) &buffer[totalReceived], recd);\n                totalReceived += recd;\n                recd = 0;\n                dataRecd = true;\n            }\n        }\n        \n        if(dataRecd) {\n            img.setFromPixels( &buffer[0], 50, 52, OF_IMAGE_COLOR);\n        }\n\n~~~~\n\nThis example is a bit silly because it assumes that you know the exact size of an image, but extending this with different messages to send sizes and types beforehand isn't too difficult. \n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool sendRawMsg(clientID, *rawMsg, numBytes)\n\n<!--\n_syntax: sendRawMsg(clientID, *rawMsg, numBytes)_\n_name: sendRawMsg_\n_returns: bool_\n_returns_description: _\n_parameters: int clientID, const char *rawMsg, const int numBytes_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool sendRawMsgToAll(*rawMsg, numBytes)\n\n<!--\n_syntax: sendRawMsgToAll(*rawMsg, numBytes)_\n_name: sendRawMsgToAll_\n_returns: bool_\n_returns_description: _\n_parameters: const char *rawMsg, const int numBytes_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool sendToAll(message)\n\n<!--\n_syntax: sendToAll(message)_\n_name: sendToAll_\n_returns: bool_\n_returns_description: _\n_parameters: string message_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSends a string delimited with the delimiter value to all connected clients.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setMessageDelimiter(delim)\n\n<!--\n_syntax: setMessageDelimiter(delim)_\n_name: setMessageDelimiter_\n_returns: void_\n_returns_description: _\n_parameters: string delim_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis sets the message delimiter that your server will use when sending and receiving messages from clients. By default it's [\\TCP] though you can have it be any value as long as it's consistent on both the client and server sides.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setVerbose(_verbose)\n\n<!--\n_syntax: setVerbose(_verbose)_\n_name: setVerbose_\n_returns: void_\n_returns_description: _\n_parameters: bool _verbose_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool setup(&settings)\n\n<!--\n_syntax: setup(&settings)_\n_name: setup_\n_returns: bool_\n_returns_description: _\n_parameters: const ofxTCPSettings &settings_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool setup(_port, blocking = false)\n\n<!--\n_syntax: setup(_port, blocking = false)_\n_name: setup_\n_returns: bool_\n_returns_description: _\n_parameters: int _port, bool blocking=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThe port is the port that your server will serve up data on. It shouldn't be a commonly used port like 22 or 80, go with a higher number less likely to be used.\nThe blocking parameter signals whether the client connections will be allowed to block on the servers thread as they send a message. This becomes important when you're dealing with very large messages coming from clients.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void threadedFunction()\n\n<!--\n_syntax: threadedFunction()_\n_name: threadedFunction_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void waitConnectedClient()\n\n<!--\n_syntax: waitConnectedClient()_\n_name: waitConnectedClient_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void waitConnectedClient(ms)\n\n<!--\n_syntax: waitConnectedClient(ms)_\n_name: waitConnectedClient_\n_returns: void_\n_returns_description: _\n_parameters: int ms_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofxTCPServer()\n\n<!--\n_syntax: ~ofxTCPServer()_\n_name: ~ofxTCPServer_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###ofxTCPClient TCPConnections\n\n<!--\n_name: TCPConnections_\n_type: ofxTCPClient_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofxTCPManager TCPServer\n\n<!--\n_name: TCPServer_\n_type: ofxTCPManager_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bClientBlocking\n\n<!--\n_name: bClientBlocking_\n_type: bool_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool connected\n\n<!--\n_name: connected_\n_type: bool_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int idCount\n\n<!--\n_name: idCount_\n_type: int_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMutex  mConnectionsLock\n\n<!--\n_name: mConnectionsLock_\n_type: ofMutex _\n_access: private_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string messageDelimiter\n\n<!--\n_name: messageDelimiter_\n_type: string_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int port\n\n<!--\n_name: port_\n_type: int_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###condition_variable serverReady\n\n<!--\n_name: serverReady_\n_type: condition_variable_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string str\n\n<!--\n_name: str_\n_type: string_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}}],"fetch":[]}