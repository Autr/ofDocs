{"data":[{"page":{"entry":{"name":"ofTimer","filename":"ofTimer.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/utils/ofTimer.markdown","path":"/documentation/utils/ofTimer","route":"/documentation/utils/ofTimer.markdown","dir":"../ofSite/documentation/utils","ext":"markdown","type":"page","id":2225,"parent":2195,"breadcrumbs":[2195,1718],"siblings":[],"translations":{}},"description":{"short":"","full":"<p>ofTimer lets you run code periodically with the specified frequency. Use it on a class that extends ofThread.</p>\n<pre><code>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Scheduler</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofThread <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Scheduler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        timer<span class=\"token punctuation\">.</span><span class=\"token function\">setPeriodicEvent</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// this is 1 second in nanoseconds</span>\n        <span class=\"token function\">startThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    ofTimer timer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">threadedFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isThreadRunning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             timer<span class=\"token punctuation\">.</span><span class=\"token function\">waitNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token comment\" spellcheck=\"true\">// Do your thing here. It will run once per second.</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>The timer above will wake up at 1 second intervals no matter how long the rest of the task takes. If the last execution took more than 1 second, it'll wake up right away and execute the next. It uses the most accurate timing functions in every OS.</p>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"calculateNextPeriod()","name":"calculateNextPeriod","returns":"void","returns_description":null,"parameters":null,"access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofTimer()","name":"ofTimer","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Constructs the default ofTimer().</p>\n","desc":""},{"syntax":"reset()","name":"reset","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Reset the starting instant of the periodic event to now.</p>\n","desc":""},{"syntax":"setPeriodicEvent(nanoseconds)","name":"setPeriodicEvent","returns":"void","returns_description":null,"parameters":"uint64_t nanoseconds","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets the frequency in \\p nanoseconds that events happen.</p>\n<p>The timer will begin calculating the events beginning the moment\nthe function is called.</p>\n<p><strong>Parameters:</strong></p>\n<p>nanoseconds The number of nanoseconds between events.</p>\n","desc":""},{"syntax":"waitNext()","name":"waitNext","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sleep this thread until the next periodic event.</p>\n","desc":""},{"name":"nanosPerPeriod","type":"uint64_t","access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"nextWakeTime","type":"timespec","access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofTimer</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n_extends: _\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>##Description</p>\n<p>ofTimer lets you run code periodically with the specified frequency. Use it on a class that extends ofThread.</p>\n<pre><code>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Scheduler</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofThread <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Scheduler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        timer<span class=\"token punctuation\">.</span><span class=\"token function\">setPeriodicEvent</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// this is 1 second in nanoseconds</span>\n        <span class=\"token function\">startThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    ofTimer timer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">threadedFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isThreadRunning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             timer<span class=\"token punctuation\">.</span><span class=\"token function\">waitNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token comment\" spellcheck=\"true\">// Do your thing here. It will run once per second.</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>The timer above will wake up at 1 second intervals no matter how long the rest of the task takes. If the last execution took more than 1 second, it'll wake up right away and execute the next. It uses the most accurate timing functions in every OS.</p>\n<p>##Methods</p>\n<p>###void calculateNextPeriod()</p>\n<p>&lt;!--\n<em>syntax: calculateNextPeriod()</em>\n<em>name: calculateNextPeriod</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofTimer()</h3>\n<p>&lt;!--\n<em>syntax: ofTimer()</em>\n<em>name: ofTimer</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Constructs the default ofTimer().</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void reset()</p>\n<p>&lt;!--\n<em>syntax: reset()</em>\n<em>name: reset</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Reset the starting instant of the periodic event to now.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setPeriodicEvent(nanoseconds)</p>\n<p>&lt;!--\n<em>syntax: setPeriodicEvent(nanoseconds)</em>\n<em>name: setPeriodicEvent</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: uint64_t nanoseconds</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets the frequency in \\p nanoseconds that events happen.</p>\n<p>The timer will begin calculating the events beginning the moment\nthe function is called.</p>\n<p><strong>Parameters:</strong></p>\n<p>nanoseconds The number of nanoseconds between events.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void waitNext()</p>\n<p>&lt;!--\n<em>syntax: waitNext()</em>\n<em>name: waitNext</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sleep this thread until the next periodic event.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###uint64_t nanosPerPeriod</p>\n<p>&lt;!--\n<em>name: nanosPerPeriod</em>\n<em>type: uint64_t</em>\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###timespec nextWakeTime</p>\n<p>&lt;!--\n<em>name: nextWakeTime</em>\n<em>type: timespec</em>\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofTimer\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\n\n\n\n\n\n##Description\n\nofTimer lets you run code periodically with the specified frequency. Use it on a class that extends ofThread.\n\n~~~~{.cpp}\n\nclass Scheduler: public ofThread {\npublic:\n    Scheduler() {\n        timer.setPeriodicEvent(1000000000); // this is 1 second in nanoseconds\n        startThread();\n    }\n\nprivate:\n    ofTimer timer;\n    void threadedFunction() {\n        while(isThreadRunning()) {\n             timer.waitNext();\n             // Do your thing here. It will run once per second.\n        }\n    }\n}\n\n~~~~\n\nThe timer above will wake up at 1 second intervals no matter how long the rest of the task takes. If the last execution took more than 1 second, it'll wake up right away and execute the next. It uses the most accurate timing functions in every OS.\n\n\n\n\n\n##Methods\n\n\n\n###void calculateNextPeriod()\n\n<!--\n_syntax: calculateNextPeriod()_\n_name: calculateNextPeriod_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofTimer()\n\n<!--\n_syntax: ofTimer()_\n_name: ofTimer_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConstructs the default ofTimer().\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void reset()\n\n<!--\n_syntax: reset()_\n_name: reset_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Reset the starting instant of the periodic event to now.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setPeriodicEvent(nanoseconds)\n\n<!--\n_syntax: setPeriodicEvent(nanoseconds)_\n_name: setPeriodicEvent_\n_returns: void_\n_returns_description: _\n_parameters: uint64_t nanoseconds_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets the frequency in \\p nanoseconds that events happen.\n\nThe timer will begin calculating the events beginning the moment\nthe function is called.\n\n**Parameters:**\n\nnanoseconds The number of nanoseconds between events.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void waitNext()\n\n<!--\n_syntax: waitNext()_\n_name: waitNext_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSleep this thread until the next periodic event.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###uint64_t nanosPerPeriod\n\n<!--\n_name: nanosPerPeriod_\n_type: uint64_t_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###timespec nextWakeTime\n\n<!--\n_name: nextWakeTime_\n_type: timespec_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}}],"fetch":[]}