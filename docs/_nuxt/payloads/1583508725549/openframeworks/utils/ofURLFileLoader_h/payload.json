{"data":[{"page":{"entry":{"name":"ofURLFileLoader.h","filename":"ofURLFileLoader.h","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/utils/ofURLFileLoader.h","path":"/openframeworks/utils/ofURLFileLoader_h","route":"/openframeworks/utils/ofURLFileLoader.h","dir":"../libs/openFrameworks/utils","ext":"h","type":"source","id":349,"parent":329,"breadcrumbs":[329,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofEvents.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofFileUtils.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofHttpResponse</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\class ofHttpRequest</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief an HTTP GET or POST request</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofHttpRequest</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">ofHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span> saveTo<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tstd<span class=\"token operator\">::</span>string\t\t\t\turl<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; request url</span>\n\tstd<span class=\"token operator\">::</span>string\t\t\t\tname<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; optional name key for sorting</span>\n\t<span class=\"token keyword\">bool</span>\t\t\t\tsaveTo<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; save to a file once the request is finised?</span>\n\tstd<span class=\"token operator\">::</span>map<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token punctuation\">,</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">></span>\theaders<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; HTTP header keys &amp; values</span>\n\tstd<span class=\"token operator\">::</span>string\t\t\t\tbody<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; POST body data</span>\n\tstd<span class=\"token operator\">::</span>string\t\t\t\tcontentType<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; POST data mime type</span>\n\tstd<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofHttpResponse<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> done<span class=\"token punctuation\">;</span>\n    size_t              timeoutSeconds <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return the unique id for this request</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use getId().\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// HTTP request type</span>\n\t<span class=\"token keyword\">enum</span> Method<span class=\"token punctuation\">{</span>\n\t\tGET<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; request data from a specified resource (via url)</span>\n\t\tPOST <span class=\"token comment\" spellcheck=\"true\">///&lt; submit data to be processed to a specified resource (via url)</span>\n\t<span class=\"token punctuation\">}</span> method<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span>\t\t\t\t\tid<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; unique id for this request</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\t\t\tnextID<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; global for computing next unique id</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\class ofHttpResponse</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief an HTTP response to a GET or POST request</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofHttpResponse</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">ofHttpResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofHttpResponse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofHttpRequest<span class=\"token operator\">&amp;</span> request<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofBuffer<span class=\"token operator\">&amp;</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> status<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofHttpResponse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofHttpRequest<span class=\"token operator\">&amp;</span> request<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> status<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">operator</span> ofBuffer<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tofHttpRequest\t    request<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; matching HTTP request for this response</span>\n\tofBuffer\t\t    data<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; response raw data</span>\n\t<span class=\"token keyword\">int</span>\t\t\t\t\tstatus<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; HTTP response status (200: OK, 404: Not Found, etc)</span>\n\tstd<span class=\"token operator\">::</span>string\t\t\t\terror<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; HTTP error string, if any (OK, Not Found, etc)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief make an HTTP GET request</span>\n<span class=\"token comment\" spellcheck=\"true\">/// blocks until a response is returned or the request times out</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param url HTTP url to request, ie. \"http://somewebsite.com/someapi/someimage.jpg\"</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns HTTP response</span>\nofHttpResponse <span class=\"token function\">ofLoadURL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief make an asynchronous HTTP GET request</span>\n<span class=\"token comment\" spellcheck=\"true\">/// will not block, placed in a queue and run using a background thread</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param url HTTP url to request, ie. \"http://somewebsite.com/someapi/someimage.jpg\"</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param name optional key to use when sorting requests</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\return unique id for the active HTTP request</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ofLoadURLAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// returns id</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief make an HTTP GET request and save the response data to a file</span>\n<span class=\"token comment\" spellcheck=\"true\">/// blocks until a response is returned or the request times out</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param url HTTP url to request, ie. \"http://somewebsite.com/someapi/someimage.jpg\"</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param path file path to save to</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\return HTTP response on success or failure</span>\nofHttpResponse <span class=\"token function\">ofSaveURLTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// make an asynchronous HTTP request for a url and save the response to a file at path</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns unique request id for the active HTTP request</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief make an asynchronous HTTP request and save the response data to a file</span>\n<span class=\"token comment\" spellcheck=\"true\">/// will not block, placed in a queue and run using a background thread</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param url HTTP url to request, ie. \"http://somewebsite.com/someapi/someimage.jpg\"</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param path file path to save to</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns unique id for the active HTTP request</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ofSaveURLAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief remove an active HTTP request from the queue</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param id HTTP request id</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofRemoveURLRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief remove all active HTTP requests from the queue</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofRemoveAllURLRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief stop &amp; remove all active and waiting HTTP requests</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofStopURLLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nofEvent<span class=\"token operator\">&lt;</span>ofHttpResponse<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">ofURLResponseEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofRegisterURLNotification</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">*</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofURLResponseEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>obj<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>T<span class=\"token operator\">::</span>urlResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofUnregisterURLNotification</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">*</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofURLResponseEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>obj<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>T<span class=\"token operator\">::</span>urlResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofBaseURLFileLoader</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\class ofURLFileLoader</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief loads a file from a URL using an HTTP request</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofURLFileLoader</span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\n        <span class=\"token function\">ofURLFileLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief make an HTTP request</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// blocks until a response is returned or the request times out</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param url HTTP url to request, ie. \"http://somewebsite.com/someapi/someimage.jpg\"</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\return HTTP response on success or failure</span>\n\t\tofHttpResponse <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief make an asynchronous HTTP request</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// will not block, placed in a queue and run using a background thread</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param url HTTP url to request, ie. \"http://somewebsite.com/someapi/someimage.jpg\"</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param name optional key to use when sorting requests</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\return unique id for the active HTTP request</span>\n        <span class=\"token keyword\">int</span> <span class=\"token function\">getAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief make an HTTP request and save the response data to a file</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// blocks until a response is returned or the request times out</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param url HTTP url to request, ie. \"http://somewebsite.com/someapi/someimage.jpg\"</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path file path to save to</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\return HTTP response on success or failure</span>\n        ofHttpResponse <span class=\"token function\">saveTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief make an asynchronous HTTP request and save the response data to a file</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// will not block, placed in a queue and run using a background thread</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param url HTTP url to request, ie. \"http://somewebsite.com/someapi/someimage.jpg\"</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path file path to save to</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns unique id for the active HTTP request</span>\n        <span class=\"token keyword\">int</span> <span class=\"token function\">saveAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief remove an active HTTP request from the queue</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param id HTTP request id</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief clear all active HTTP requests from the queue</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief stop &amp; remove all active and waiting HTTP requests</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">// \\brief low level HTTP request implementation</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// blocks until a response is returned or the request times out</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\return HTTP response on success or failure</span>\n        ofHttpResponse <span class=\"token function\">handleRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofHttpRequest <span class=\"token operator\">&amp;</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">// \\brief low level HTTP request implementation</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// this is a non-blocking version of handleRequest that will return a response in the urlResponse callback</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\return unique id of the active HTTP request</span>\n        <span class=\"token keyword\">int</span> <span class=\"token function\">handleRequestAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofHttpRequest<span class=\"token operator\">&amp;</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofBaseURLFileLoader<span class=\"token operator\">></span> impl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\class ofBaseURLFileLoader</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief loads a file from a URL using an HTTP request</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofBaseURLFileLoader</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ofBaseURLFileLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief make an HTTP request</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// blocks until a response is returned or the request times out</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param url HTTP url to request, ie. \"http://somewebsite.com/someapi/someimage.jpg\"</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return HTTP response on success or failure</span>\n\t<span class=\"token keyword\">virtual</span> ofHttpResponse <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> url<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief make an asynchronous HTTP request</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// will not block, placed in a queue and run using a background thread</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param url HTTP url to request, ie. \"http://somewebsite.com/someapi/someimage.jpg\"</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param name optional key to use when sorting requests</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return unique id for the active HTTP request</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief make an HTTP request and save the response data to a file</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// blocks until a response is returned or the request times out</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param url HTTP url to request, ie. \"http://somewebsite.com/someapi/someimage.jpg\"</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path file path to save to</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return HTTP response on success or failure</span>\n\t<span class=\"token keyword\">virtual</span> ofHttpResponse <span class=\"token function\">saveTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief make an asynchronous HTTP request and save the response data to a file</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// will not block, placed in a queue and run using a background thread</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param url HTTP url to request, ie. \"http://somewebsite.com/someapi/someimage.jpg\"</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path file path to save to</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns unique id for the active HTTP request</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">int</span> <span class=\"token function\">saveAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief remove an active HTTP request from the queue</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param unique HTTP request id</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief clear all active HTTP requests from the queue</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief stop &amp; remove all active and waiting HTTP requests</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief low level HTTP request implementation</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// blocks until a response is returned or the request times out</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return HTTP response on success or failure</span>\n\t<span class=\"token keyword\">virtual</span> ofHttpResponse <span class=\"token function\">handleRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofHttpRequest <span class=\"token operator\">&amp;</span> request<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">int</span> <span class=\"token function\">handleRequestAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofHttpRequest<span class=\"token operator\">&amp;</span> request<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// returns id</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n","type":"source"}}],"fetch":[]}