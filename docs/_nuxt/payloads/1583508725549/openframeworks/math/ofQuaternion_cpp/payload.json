{"data":[{"page":{"entry":{"name":"ofQuaternion.cpp","filename":"ofQuaternion.cpp","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/math/ofQuaternion.cpp","path":"/openframeworks/math/ofQuaternion_cpp","route":"/openframeworks/math/ofQuaternion.cpp","dir":"../libs/openFrameworks/math","ext":"cpp","type":"source","id":292,"parent":284,"breadcrumbs":[284,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofQuaternion.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofMatrix4x4.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofMath.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofMathConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"glm/gtc/quaternion.hpp\"</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\nofQuaternion<span class=\"token operator\">::</span><span class=\"token function\">ofQuaternion</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span> q<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">_v</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\nofQuaternion<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span> glm<span class=\"token operator\">::</span><span class=\"token function\">quat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> glm<span class=\"token operator\">::</span><span class=\"token function\">quat</span><span class=\"token punctuation\">(</span>_v<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span>_v<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> _v<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> _v<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofQuaternion<span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">.</span><span class=\"token function\">getRotate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofQuaternion<span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ofMatrix4x4<span class=\"token operator\">&amp;</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\tmatrix<span class=\"token punctuation\">.</span><span class=\"token function\">makeRotationMatrix</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// Set the elements of the Quat to represent a rotation of angle</span>\n<span class=\"token comment\" spellcheck=\"true\">/// (degrees) around the axis (x,y,z)</span>\n<span class=\"token keyword\">void</span> ofQuaternion<span class=\"token operator\">::</span><span class=\"token function\">makeRotate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tangle <span class=\"token operator\">=</span> <span class=\"token function\">ofDegToRad</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> epsilon <span class=\"token operator\">=</span> <span class=\"token number\">0.0000001f</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">float</span> length <span class=\"token operator\">=</span> <span class=\"token function\">sqrtf</span><span class=\"token punctuation\">(</span> x <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">*</span> y <span class=\"token operator\">+</span> z <span class=\"token operator\">*</span> z <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">&lt;</span> epsilon<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// ~zero length axis, so reset rotation to zero.</span>\n\t\t<span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofQuaternion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">float</span> inversenorm  <span class=\"token operator\">=</span> <span class=\"token number\">1.0f</span> <span class=\"token operator\">/</span> length<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> coshalfangle <span class=\"token operator\">=</span> <span class=\"token function\">cosf</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0.5f</span> <span class=\"token operator\">*</span> angle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> sinhalfangle <span class=\"token operator\">=</span> <span class=\"token function\">sinf</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0.5f</span> <span class=\"token operator\">*</span> angle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t_v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> sinhalfangle <span class=\"token operator\">*</span> inversenorm<span class=\"token punctuation\">;</span>\n\t_v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y <span class=\"token operator\">*</span> sinhalfangle <span class=\"token operator\">*</span> inversenorm<span class=\"token punctuation\">;</span>\n\t_v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> z <span class=\"token operator\">*</span> sinhalfangle <span class=\"token operator\">*</span> inversenorm<span class=\"token punctuation\">;</span>\n\t_v<span class=\"token punctuation\">.</span>w <span class=\"token operator\">=</span> coshalfangle<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> ofQuaternion<span class=\"token operator\">::</span><span class=\"token function\">makeRotate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">makeRotate</span><span class=\"token punctuation\">(</span> angle<span class=\"token punctuation\">,</span> vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> vec<span class=\"token punctuation\">.</span>z <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> ofQuaternion<span class=\"token operator\">::</span><span class=\"token function\">makeRotate</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis1<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">float</span> angle2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis2<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">float</span> angle3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       ofQuaternion q1<span class=\"token punctuation\">;</span> q1<span class=\"token punctuation\">.</span><span class=\"token function\">makeRotate</span><span class=\"token punctuation\">(</span>angle1<span class=\"token punctuation\">,</span>axis1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       ofQuaternion q2<span class=\"token punctuation\">;</span> q2<span class=\"token punctuation\">.</span><span class=\"token function\">makeRotate</span><span class=\"token punctuation\">(</span>angle2<span class=\"token punctuation\">,</span>axis2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       ofQuaternion q3<span class=\"token punctuation\">;</span> q3<span class=\"token punctuation\">.</span><span class=\"token function\">makeRotate</span><span class=\"token punctuation\">(</span>angle3<span class=\"token punctuation\">,</span>axis3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n       <span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> q1<span class=\"token operator\">*</span>q2<span class=\"token operator\">*</span>q3<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/** Make a rotation Quat which will rotate vec1 to vec2\n\n This routine uses only fast geometric transforms, without costly acos/sin computations.\n It's exact, fast, and with less degenerate cases than the acos/sin method.\n\n For an explanation of the math used, you may see for example:\n http://logiciels.cnes.fr/MARMOTTES/marmottes-mathematique.pdf\n\n @note This is the rotation with shortest angle, which is the one equivalent to the\n acos/sin transform method. Other rotations exists, for example to additionally keep\n a local horizontal attitude.\n\n @author Nicolas Brodu\n */</span>\n<span class=\"token keyword\">void</span> ofQuaternion<span class=\"token operator\">::</span><span class=\"token function\">makeRotate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> to <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// This routine takes any vector as argument but normalized</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// vectors are necessary, if only for computing the dot product.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// Too bad the API is that generic, it leads to performance loss.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// Even in the case the 2 vectors are not normalized but same length,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// the sqrt could be shared, but we have no way to know beforehand</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// at this point, while the caller may know.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// So, we have to test... in the hope of saving at least a sqrt</span>\n\tofVec3f sourceVector <span class=\"token operator\">=</span> from<span class=\"token punctuation\">;</span>\n\tofVec3f targetVector <span class=\"token operator\">=</span> to<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">float</span> fromLen2 <span class=\"token operator\">=</span> from<span class=\"token punctuation\">.</span><span class=\"token function\">lengthSquared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> fromLen<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// normalize only when necessary, epsilon test</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fromLen2 <span class=\"token operator\">&lt;</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> <span class=\"token number\">1e-7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>fromLen2 <span class=\"token operator\">></span> <span class=\"token number\">1.0</span> <span class=\"token operator\">+</span> <span class=\"token number\">1e-7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tfromLen <span class=\"token operator\">=</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>fromLen2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsourceVector <span class=\"token operator\">/</span><span class=\"token operator\">=</span> fromLen<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> fromLen <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">float</span> toLen2 <span class=\"token operator\">=</span> to<span class=\"token punctuation\">.</span><span class=\"token function\">lengthSquared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// normalize only when necessary, epsilon test</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>toLen2 <span class=\"token operator\">&lt;</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> <span class=\"token number\">1e-7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>toLen2 <span class=\"token operator\">></span> <span class=\"token number\">1.0</span> <span class=\"token operator\">+</span> <span class=\"token number\">1e-7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">float</span> toLen<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// re-use fromLen for case of mapping 2 vectors of the same length</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>toLen2 <span class=\"token operator\">></span> fromLen2 <span class=\"token operator\">-</span> <span class=\"token number\">1e-7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>toLen2 <span class=\"token operator\">&lt;</span> fromLen2 <span class=\"token operator\">+</span> <span class=\"token number\">1e-7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\ttoLen <span class=\"token operator\">=</span> fromLen<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> toLen <span class=\"token operator\">=</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>toLen2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ttargetVector <span class=\"token operator\">/</span><span class=\"token operator\">=</span> toLen<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">// Now let's get into the real stuff</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// Use \"dot product plus one\" as test as it can be re-used later on</span>\n\t<span class=\"token keyword\">double</span> dotProdPlus1 <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">+</span> sourceVector<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>targetVector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// Check for degenerate case of full u-turn. Use epsilon for detection</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dotProdPlus1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">1e-7</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Get an orthogonal vector of the given vector</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// in a plane with maximum vector coordinates.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Then use it as quaternion axis with pi angle</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Trick is to realize one value at least is >0.6 for a normalized vector.</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>sourceVector<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.6</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> norm <span class=\"token operator\">=</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> sourceVector<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> sourceVector<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t_v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n\t\t\t_v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> sourceVector<span class=\"token punctuation\">.</span>z <span class=\"token operator\">/</span> norm<span class=\"token punctuation\">;</span>\n\t\t\t_v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>sourceVector<span class=\"token punctuation\">.</span>y <span class=\"token operator\">/</span> norm<span class=\"token punctuation\">;</span>\n\t\t\t_v<span class=\"token punctuation\">.</span>w <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>sourceVector<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.6</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> norm <span class=\"token operator\">=</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> sourceVector<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> sourceVector<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t_v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>sourceVector<span class=\"token punctuation\">.</span>z <span class=\"token operator\">/</span> norm<span class=\"token punctuation\">;</span>\n\t\t\t_v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n\t\t\t_v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> sourceVector<span class=\"token punctuation\">.</span>x <span class=\"token operator\">/</span> norm<span class=\"token punctuation\">;</span>\n\t\t\t_v<span class=\"token punctuation\">.</span>w <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> norm <span class=\"token operator\">=</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> sourceVector<span class=\"token punctuation\">.</span>z <span class=\"token operator\">*</span> sourceVector<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t_v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> sourceVector<span class=\"token punctuation\">.</span>y <span class=\"token operator\">/</span> norm<span class=\"token punctuation\">;</span>\n\t\t\t_v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>sourceVector<span class=\"token punctuation\">.</span>x <span class=\"token operator\">/</span> norm<span class=\"token punctuation\">;</span>\n\t\t\t_v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n\t\t\t_v<span class=\"token punctuation\">.</span>w <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Find the shortest angle quaternion that transforms normalized vectors</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// into one other. Formula is still valid when vectors are colinear</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> s <span class=\"token operator\">=</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> dotProdPlus1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> ofVec3f tmp <span class=\"token operator\">=</span> sourceVector<span class=\"token punctuation\">.</span><span class=\"token function\">getCrossed</span><span class=\"token punctuation\">(</span>targetVector<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span> <span class=\"token operator\">*</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t_v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\t\t_v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t\t_v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\t\t_v<span class=\"token punctuation\">.</span>w <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Make a rotation Quat which will rotate vec1 to vec2</span>\n<span class=\"token comment\" spellcheck=\"true\">// Generally take adot product to get the angle between these</span>\n<span class=\"token comment\" spellcheck=\"true\">// and then use a cross product to get the rotation axis</span>\n<span class=\"token comment\" spellcheck=\"true\">// Watch out for the two special cases of when the vectors</span>\n<span class=\"token comment\" spellcheck=\"true\">// are co-incident or opposite in direction.</span>\n<span class=\"token keyword\">void</span> ofQuaternion<span class=\"token operator\">::</span><span class=\"token function\">makeRotate_original</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> to <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> epsilon <span class=\"token operator\">=</span> <span class=\"token number\">0.0000001f</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">float</span> length1  <span class=\"token operator\">=</span> from<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> length2  <span class=\"token operator\">=</span> to<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// dot product vec1*vec2</span>\n\t<span class=\"token keyword\">float</span> cosangle <span class=\"token operator\">=</span> from<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>length1 <span class=\"token operator\">*</span> length2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>cosangle <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> epsilon <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//osg::notify(osg::INFO)&lt;&lt;\"*** Quat::makeRotate(from,to) with near co-linear vectors, epsilon= \"&lt;&lt;fabs(cosangle-1)&lt;&lt;std::endl;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// cosangle is close to 1, so the vectors are close to being coincident</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Need to generate an angle of zero with any vector we like</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// We'll choose (1,0,0)</span>\n\t\t<span class=\"token function\">makeRotate</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>cosangle <span class=\"token operator\">+</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> epsilon <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// vectors are close to being opposite, so will need to find a</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// vector orthongonal to from to rotate about.</span>\n\t\t\tofVec3f tmp<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> tmp<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// use x axis.</span>\n\t\t\t\t<span class=\"token keyword\">else</span> tmp<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> tmp<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> tmp<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\tofVec3f <span class=\"token function\">fromd</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// find orthogonal axis.</span>\n\t\t\tofVec3f <span class=\"token function\">axis</span><span class=\"token punctuation\">(</span>fromd<span class=\"token punctuation\">.</span><span class=\"token function\">getCrossed</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\taxis<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t_v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> axis<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// sine of half angle of PI is 1.0.</span>\n\t\t\t_v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> axis<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// sine of half angle of PI is 1.0.</span>\n\t\t\t_v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> axis<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// sine of half angle of PI is 1.0.</span>\n\t\t\t_v<span class=\"token punctuation\">.</span>w <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// cosine of half angle of PI is zero.</span>\n\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// This is the usual situation - take a cross-product of vec1 and vec2</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// and that is the axis around which to rotate.</span>\n\t\t\tofVec3f <span class=\"token function\">axis</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">.</span><span class=\"token function\">getCrossed</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> <span class=\"token function\">acos</span><span class=\"token punctuation\">(</span> cosangle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">makeRotate</span><span class=\"token punctuation\">(</span> angle<span class=\"token punctuation\">,</span> axis <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofQuaternion<span class=\"token operator\">::</span><span class=\"token function\">getRotate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span> angle<span class=\"token punctuation\">,</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">getRotate</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tvec<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\tvec<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n\tvec<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> z<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">// Get the angle of rotation and axis of this Quat object.</span>\n<span class=\"token comment\" spellcheck=\"true\">// Won't give very meaningful results if the Quat is not associated</span>\n<span class=\"token comment\" spellcheck=\"true\">// with a rotation!</span>\n<span class=\"token keyword\">void</span> ofQuaternion<span class=\"token operator\">::</span><span class=\"token function\">getRotate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span> z <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> sinhalfangle <span class=\"token operator\">=</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span> _v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> _v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> _v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> _v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> _v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">*</span> _v<span class=\"token punctuation\">.</span>z <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tangle <span class=\"token operator\">=</span> <span class=\"token number\">2.0</span> <span class=\"token operator\">*</span> <span class=\"token function\">atan2</span><span class=\"token punctuation\">(</span> sinhalfangle<span class=\"token punctuation\">,</span> _v<span class=\"token punctuation\">.</span>w <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sinhalfangle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tx <span class=\"token operator\">=</span> _v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">/</span> sinhalfangle<span class=\"token punctuation\">;</span>\n\t\ty <span class=\"token operator\">=</span> _v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">/</span> sinhalfangle<span class=\"token punctuation\">;</span>\n\t\tz <span class=\"token operator\">=</span> _v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">/</span> sinhalfangle<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tx <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n\t\ty <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n\t\tz <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\tangle <span class=\"token operator\">=</span> <span class=\"token function\">ofRadToDeg</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// Spherical Linear Interpolation</span>\n<span class=\"token comment\" spellcheck=\"true\">/// As t goes from 0 to 1, the Quat object goes from \"from\" to \"to\"</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Reference: Shoemake at SIGGRAPH 89</span>\n<span class=\"token comment\" spellcheck=\"true\">/// See also</span>\n<span class=\"token comment\" spellcheck=\"true\">/// http://www.gamasutra.com/features/programming/19980703/quaternions_01.htm</span>\n<span class=\"token keyword\">void</span> ofQuaternion<span class=\"token operator\">::</span><span class=\"token function\">slerp</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofQuaternion<span class=\"token operator\">&amp;</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofQuaternion<span class=\"token operator\">&amp;</span> to <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> epsilon <span class=\"token operator\">=</span> <span class=\"token number\">0.00001</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> omega<span class=\"token punctuation\">,</span> cosomega<span class=\"token punctuation\">,</span> sinomega<span class=\"token punctuation\">,</span> scale_from<span class=\"token punctuation\">,</span> scale_to <span class=\"token punctuation\">;</span>\n\n\tofQuaternion <span class=\"token function\">quatTo</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// this is a dot product</span>\n\n\tcosomega <span class=\"token operator\">=</span> from<span class=\"token punctuation\">.</span><span class=\"token function\">asVec4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">asVec4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> cosomega <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tcosomega <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>cosomega<span class=\"token punctuation\">;</span>\n\t\tquatTo <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>to<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> cosomega<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> epsilon <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tomega <span class=\"token operator\">=</span> <span class=\"token function\">acos</span><span class=\"token punctuation\">(</span>cosomega<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 0 &lt;= omega &lt;= Pi (see man acos)</span>\n\t\tsinomega <span class=\"token operator\">=</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>omega<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// this sinomega should always be +ve so</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// could try sinomega=sqrt(1-cosomega*cosomega) to avoid a sin()?</span>\n\t\tscale_from <span class=\"token operator\">=</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> omega<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> sinomega <span class=\"token punctuation\">;</span>\n\t\tscale_to <span class=\"token operator\">=</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span> omega<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> sinomega <span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/* --------------------------------------------------\n\t\tThe ends of the vectors are very close\n\t\twe can use simple linear interpolation - no need\n\t\tto worry about the \"spherical\" interpolation\n\t\t-------------------------------------------------- */</span>\n\t\tscale_from <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> t <span class=\"token punctuation\">;</span>\n\t\tscale_to <span class=\"token operator\">=</span> t <span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>from <span class=\"token operator\">*</span> scale_from<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>quatTo <span class=\"token operator\">*</span> scale_to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// so that we get a Vec4</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">// ref at http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/index.htm</span>\nofVec3f ofQuaternion<span class=\"token operator\">::</span><span class=\"token function\">getEuler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> test <span class=\"token operator\">=</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">z</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">w</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> heading<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> attitude<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> bank<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>test <span class=\"token operator\">></span> <span class=\"token number\">0.499</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// singularity at north pole</span>\n\t\theading <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token function\">atan2</span><span class=\"token punctuation\">(</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">w</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tattitude <span class=\"token operator\">=</span> PI<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\tbank <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>test <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">0.499</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// singularity at south pole</span>\n\t\theading <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token function\">atan2</span><span class=\"token punctuation\">(</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">w</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tattitude <span class=\"token operator\">=</span> <span class=\"token operator\">-</span> PI<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\tbank <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">float</span> sqx <span class=\"token operator\">=</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">float</span> sqy <span class=\"token operator\">=</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">float</span> sqz <span class=\"token operator\">=</span> <span class=\"token function\">z</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">z</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\theading <span class=\"token operator\">=</span> <span class=\"token function\">atan2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.0f</span> <span class=\"token operator\">*</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">w</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">2.0f</span> <span class=\"token operator\">*</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">z</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0f</span> <span class=\"token operator\">-</span> <span class=\"token number\">2.0f</span><span class=\"token operator\">*</span>sqy <span class=\"token operator\">-</span> <span class=\"token number\">2.0f</span><span class=\"token operator\">*</span>sqz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tattitude <span class=\"token operator\">=</span> <span class=\"token function\">asin</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbank <span class=\"token operator\">=</span> <span class=\"token function\">atan2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.0f</span><span class=\"token operator\">*</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">w</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">2.0f</span> <span class=\"token operator\">*</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">z</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0f</span> <span class=\"token operator\">-</span> <span class=\"token number\">2.0f</span><span class=\"token operator\">*</span>sqx <span class=\"token operator\">-</span> <span class=\"token number\">2.0f</span><span class=\"token operator\">*</span>sqz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofRadToDeg</span><span class=\"token punctuation\">(</span>bank<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofRadToDeg</span><span class=\"token punctuation\">(</span>heading<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofRadToDeg</span><span class=\"token punctuation\">(</span>attitude<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> QX  _v.x</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> QY  _v.y</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> QZ  _v.z</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> QW  _v.w</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\nstd<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofQuaternion <span class=\"token operator\">&amp;</span>q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    os <span class=\"token operator\">&lt;&lt;</span> q<span class=\"token punctuation\">.</span>_v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> q<span class=\"token punctuation\">.</span>_v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> q<span class=\"token punctuation\">.</span>_v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> q<span class=\"token punctuation\">.</span>_v<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> os<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------</span>\nstd<span class=\"token operator\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> ofQuaternion <span class=\"token operator\">&amp;</span>q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    is <span class=\"token operator\">>></span> q<span class=\"token punctuation\">.</span>_v<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n    is<span class=\"token punctuation\">.</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    is <span class=\"token operator\">>></span> q<span class=\"token punctuation\">.</span>_v<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n    is<span class=\"token punctuation\">.</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    is <span class=\"token operator\">>></span> q<span class=\"token punctuation\">.</span>_v<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n    is<span class=\"token punctuation\">.</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    is <span class=\"token operator\">>></span> q<span class=\"token punctuation\">.</span>_v<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> is<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n","type":"source"}}],"fetch":[]}