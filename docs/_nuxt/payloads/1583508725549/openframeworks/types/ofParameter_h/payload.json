{"data":[{"page":{"entry":{"name":"ofParameter.h","filename":"ofParameter.h","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/types/ofParameter.h","path":"/openframeworks/types/ofParameter_h","route":"/openframeworks/types/ofParameter.h","dir":"../libs/openFrameworks/types","ext":"h","type":"source","id":322,"parent":316,"breadcrumbs":[316,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofEvents.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofPoint.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofRectangle.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofColor.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofLog.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofParameter</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofReadOnlyParameter</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofParameterGroup</span><span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Base class for ofParameter, ofReadOnlyParameter and ofParameterGroup</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofAbstractParameter</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ofAbstractParameter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">virtual</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">virtual</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fromString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">virtual</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">virtual</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">getEscapedName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">virtual</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">valueType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span>ofParameterGroup <span class=\"token operator\">&amp;</span> _parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">></span> <span class=\"token function\">getGroupHierarchyNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n\tofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">cast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span>ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">cast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n\tofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span> Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">castReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span>ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span> Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">const</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span> Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">castReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span> Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tofParameterGroup <span class=\"token operator\">&amp;</span> <span class=\"token function\">castGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameterGroup <span class=\"token operator\">&amp;</span> <span class=\"token function\">castGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">friend</span> std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofAbstractParameter<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">friend</span> std<span class=\"token operator\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> ofAbstractParameter<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">isSerializable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">isReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">virtual</span> std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofAbstractParameter<span class=\"token operator\">></span> <span class=\"token function\">newReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">isReferenceTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofAbstractParameter<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">const</span> ofParameterGroup <span class=\"token function\">getFirstParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSerializable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> serializable<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">virtual</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">escape</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">getInternalObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">/// A collection of parameters with events to notify if a parameter changed</span>\n<span class=\"token comment\" spellcheck=\"true\">/// and serialization facilities</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofParameterGroup</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofAbstractParameter <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">ofParameterGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>Args<span class=\"token operator\">></span>\n\t<span class=\"token function\">ofParameterGroup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">:</span><span class=\"token function\">obj</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>Value<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>Args<span class=\"token operator\">></span>\n\t<span class=\"token function\">ofParameterGroup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> Args<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> p<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">:</span><span class=\"token function\">obj</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>Value<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>Args<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ofAbstractParameter <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">,</span> Args<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> parameters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ofAbstractParameter <span class=\"token operator\">&amp;</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">valueType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>ofAbstractParameter <span class=\"token operator\">&amp;</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getVoid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getBool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getFloat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getChar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ofPoint<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ofDefaultVec2<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getVec2f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ofDefaultVec3<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getVec3f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ofDefaultVec4<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getVec4f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ofColor<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ofShortColor<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getShortColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ofFloatColor<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getFloatColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ofRectangle<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getRectangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameterGroup <span class=\"token operator\">&amp;</span> <span class=\"token function\">getGroup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getVoid</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getBool</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getFloat</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getChar</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getString</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ofPoint<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ofDefaultVec2<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getVec2f</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ofDefaultVec3<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getVec3f</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ofDefaultVec4<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getVec4f</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ofColor<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pose<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ofShortColor<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getShortColor</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ofFloatColor<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getFloatColor</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ofRectangle<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getRectangle</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofParameterGroup <span class=\"token operator\">&amp;</span> <span class=\"token function\">getGroup</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\tofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getVoid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getBool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getFloat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getChar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span>ofPoint<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span>ofDefaultVec2<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getVec2f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span>ofDefaultVec3<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getVec3f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span>ofDefaultVec4<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getVec4f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span>ofColor<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span>ofShortColor<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getShortColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span>ofFloatColor<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getFloatColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span>ofRectangle<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getRectangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameterGroup <span class=\"token operator\">&amp;</span> <span class=\"token function\">getGroup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\tofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getVoid</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getBool</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getFloat</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getChar</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getString</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span>ofPoint<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span>ofDefaultVec2<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getVec2f</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span>ofDefaultVec3<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getVec3f</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span>ofDefaultVec4<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getVec4f</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span>ofColor<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pose<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span>ofShortColor<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getShortColor</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span>ofFloatColor<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getFloatColor</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span>ofRectangle<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getRectangle</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameterGroup <span class=\"token operator\">&amp;</span> <span class=\"token function\">getGroup</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> ofAbstractParameter <span class=\"token operator\">&amp;</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofAbstractParameter <span class=\"token operator\">&amp;</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> ofAbstractParameter <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofAbstractParameter <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\tofAbstractParameter <span class=\"token operator\">&amp;</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofAbstractParameter <span class=\"token operator\">&amp;</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tofAbstractParameter <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofAbstractParameter <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n\tofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n\tofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">const</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span> Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">const</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span> Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getReadOnly</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n\tofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span> Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n\tofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span> Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getReadOnly</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tstd<span class=\"token operator\">::</span>size_t <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t position<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t position<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">getIsReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> position<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">friend</span> std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofParameterGroup<span class=\"token operator\">&amp;</span> group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getEscapedName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">fromString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\tofAbstractParameter <span class=\"token operator\">&amp;</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofAbstractParameter <span class=\"token operator\">&amp;</span> <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofAbstractParameter <span class=\"token operator\">&amp;</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofAbstractParameter <span class=\"token operator\">&amp;</span> <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setSerializable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> serializable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isSerializable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofAbstractParameter<span class=\"token operator\">></span> <span class=\"token function\">newReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span>ofParameterGroup <span class=\"token operator\">&amp;</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">operator</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\tofEvent<span class=\"token operator\">&lt;</span>ofAbstractParameter<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">parameterChangedE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofAbstractParameter<span class=\"token operator\">></span> <span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofAbstractParameter<span class=\"token operator\">></span> <span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofAbstractParameter<span class=\"token operator\">></span> <span class=\"token operator\">></span><span class=\"token operator\">::</span>const_iterator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofAbstractParameter<span class=\"token operator\">></span> <span class=\"token operator\">></span><span class=\"token operator\">::</span>const_iterator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofAbstractParameter<span class=\"token operator\">></span> <span class=\"token operator\">></span><span class=\"token operator\">::</span>reverse_iterator <span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofAbstractParameter<span class=\"token operator\">></span> <span class=\"token operator\">></span><span class=\"token operator\">::</span>reverse_iterator <span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofAbstractParameter<span class=\"token operator\">></span> <span class=\"token operator\">></span><span class=\"token operator\">::</span>const_reverse_iterator <span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofAbstractParameter<span class=\"token operator\">></span> <span class=\"token operator\">></span><span class=\"token operator\">::</span>const_reverse_iterator <span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">getInternalObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Value</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">Value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">serializable</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">notifyParameterChanged</span><span class=\"token punctuation\">(</span>ofAbstractParameter <span class=\"token operator\">&amp;</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tstd<span class=\"token operator\">::</span>map<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token punctuation\">,</span>std<span class=\"token operator\">::</span>size_t<span class=\"token operator\">></span> parametersIndex<span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofAbstractParameter<span class=\"token operator\">></span> <span class=\"token operator\">></span> parameters<span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span>string name<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> serializable<span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>weak_ptr<span class=\"token operator\">&lt;</span>Value<span class=\"token operator\">>></span> parents<span class=\"token punctuation\">;</span>\n\t\tofEvent<span class=\"token operator\">&lt;</span>ofAbstractParameter<span class=\"token operator\">></span> parameterChangedE<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Value<span class=\"token operator\">></span> obj<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofParameterGroup</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Value<span class=\"token operator\">></span> obj<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">:</span><span class=\"token function\">obj</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ofParameter</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> F<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ofReadOnlyParameter</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> ofParameterGroup <span class=\"token function\">getFirstParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofParameterGroup<span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofParameterGroup<span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\nofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofParameterGroup<span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span>ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\nofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofParameterGroup<span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span>ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span> Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofParameterGroup<span class=\"token operator\">::</span><span class=\"token function\">getReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span> Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofParameterGroup<span class=\"token operator\">::</span><span class=\"token function\">getReadOnly</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\nofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span> Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofParameterGroup<span class=\"token operator\">::</span><span class=\"token function\">getReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\nofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span> Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofParameterGroup<span class=\"token operator\">::</span><span class=\"token function\">getReadOnly</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/*! \\cond PRIVATE */</span>\n<span class=\"token keyword\">namespace</span> of<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">namespace</span> priv<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// Mechanism to provide min and max default values for types where it makes sense</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> B<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> TypeInfo_ <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// Types with numeric_limits resolve to this template specialization:</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> TypeInfo_<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">static</span> T <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>numeric_limits<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">lowest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">static</span> T <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>numeric_limits<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> TypeInfo_<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">float</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">float</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> TypeInfo_<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">float</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">float</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// Types without numeric_limits resolve to this template specialization:</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> TypeInfo_<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">static</span> T <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">static</span> T <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> TypeInfo <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>TypeInfo_<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>numeric_limits<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span>is_specialized<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// Here we provide some of our own specializations:</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> TypeInfo <span class=\"token operator\">&lt;</span>ofVec2f<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">static</span> ofVec2f <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">static</span> ofVec2f <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> TypeInfo <span class=\"token operator\">&lt;</span>glm<span class=\"token operator\">::</span>vec2<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">static</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">static</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> TypeInfo <span class=\"token operator\">&lt;</span>ofVec3f<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">static</span> ofVec3f <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">static</span> ofVec3f <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> TypeInfo <span class=\"token operator\">&lt;</span>glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">static</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">static</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> TypeInfo <span class=\"token operator\">&lt;</span>ofVec4f<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">static</span> ofVec4f <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">static</span> ofVec4f <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> TypeInfo <span class=\"token operator\">&lt;</span>glm<span class=\"token operator\">::</span>vec4<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">static</span> glm<span class=\"token operator\">::</span>vec4 <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">static</span> glm<span class=\"token operator\">::</span>vec4 <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> TypeInfo <span class=\"token operator\">&lt;</span>ofColor_<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">static</span> ofColor_<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> ofColor_<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">static</span> ofColor_<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> ofColor_<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>ofColor_<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>ofColor_<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> TypeInfo <span class=\"token operator\">&lt;</span>ofRectangle<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//Not really sure what would make sense here!!!</span>\n\t\t<span class=\"token keyword\">static</span> ofRectangle <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">ofRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">static</span> ofRectangle <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">ofRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">// detection of stream operators</span>\n\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> yes<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">struct</span> anyx <span class=\"token punctuation\">{</span> <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token function\">anyx</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\tno <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> anyx <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> anyx <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tno <span class=\"token keyword\">operator</span> <span class=\"token operator\">>></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> anyx <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> anyx <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\n\t<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> yes <span class=\"token function\">check_op</span><span class=\"token punctuation\">(</span>T <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tno <span class=\"token function\">check_op</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> has_loading_support <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>istream <span class=\"token operator\">&amp;</span> stream<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">static</span> T <span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">bool</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">check_op</span><span class=\"token punctuation\">(</span>stream <span class=\"token operator\">>></span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>yes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> has_saving_support <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>ostream <span class=\"token operator\">&amp;</span> stream<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">static</span> T <span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">bool</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">check_op</span><span class=\"token punctuation\">(</span>stream <span class=\"token operator\">&lt;&lt;</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>yes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">struct</span> has_stream_operators <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">bool</span> can_load <span class=\"token operator\">=</span> has_loading_support<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span>value<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">bool</span> can_save <span class=\"token operator\">=</span> has_saving_support<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span>value<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">bool</span> value <span class=\"token operator\">=</span> can_load <span class=\"token operator\">&amp;&amp;</span> can_save<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">typename</span> std<span class=\"token operator\">::</span>enable_if<span class=\"token operator\">&lt;</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>has_saving_support<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span>value<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">></span><span class=\"token operator\">::</span>type <span class=\"token function\">toStringImpl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">typename</span> std<span class=\"token operator\">::</span>enable_if<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>has_saving_support<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span>value<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">></span><span class=\"token operator\">::</span>type <span class=\"token function\">toStringImpl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">throw</span> std<span class=\"token operator\">::</span><span class=\"token function\">exception</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">typename</span> std<span class=\"token operator\">::</span>enable_if<span class=\"token operator\">&lt;</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>has_loading_support<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span>value<span class=\"token punctuation\">,</span> ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span>type <span class=\"token function\">fromStringImpl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> ofFromString<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">typename</span> std<span class=\"token operator\">::</span>enable_if<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>has_loading_support<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span>value<span class=\"token punctuation\">,</span> ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span>type <span class=\"token function\">fromStringImpl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">throw</span> std<span class=\"token operator\">::</span><span class=\"token function\">exception</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">/*! \\endcond */</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief ofParameter holds a value and notifies its listeners when it changes.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofParameter can be used as the value itself. For example an `ofParameter&lt;int>`</span>\n<span class=\"token comment\" spellcheck=\"true\">/// can be added, multiplied, substracted, etc with another number.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// For an ofParameter with a custom object such as `ofParameter&lt;MyObject> myObject`,</span>\n<span class=\"token comment\" spellcheck=\"true\">/// `MyObject`'s methods can be accessed using pointer syntax,</span>\n<span class=\"token comment\" spellcheck=\"true\">/// e.g. `myObject->myMethod();`.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\tparam ParameterType The data wrapped by the ofParameter.</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofParameter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofAbstractParameter<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">ofParameter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofParameter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofParameter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofParameter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofParameter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">operator</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\tParameterType <span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\tParameterType <span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">fromString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerClass</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> ListenerMethod<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span>ListenerClass <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> ListenerMethod method<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>changedE<span class=\"token punctuation\">,</span>listener<span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">,</span>prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerClass</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> ListenerMethod<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">removeListener</span><span class=\"token punctuation\">(</span>ListenerClass <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> ListenerMethod method<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>changedE<span class=\"token punctuation\">,</span>listener<span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">,</span>prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span>\n\tstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>AbstractEventToken<span class=\"token operator\">></span> <span class=\"token function\">newListener</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>changedE<span class=\"token punctuation\">.</span><span class=\"token function\">newListener</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">enableEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">disableEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isSerializable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">valueType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">makeReferenceTo</span><span class=\"token punctuation\">(</span>ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tParameterType <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tParameterType <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n\tofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n\tofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n\tofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n\tofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n\tofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">%</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n\tofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n\tofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">|</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n\tofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">^</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n\tofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n\tofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>>=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\tofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">setWithoutEventNotifications</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setMin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setMax</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setSerializable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> serializable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofAbstractParameter<span class=\"token operator\">></span> <span class=\"token function\">newReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span>ofParameterGroup <span class=\"token operator\">&amp;</span> _parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> ofParameterGroup <span class=\"token function\">getFirstParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\tobj<span class=\"token operator\">-</span><span class=\"token operator\">></span>parents<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">remove_if</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>parents<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>parents<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t   <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>weak_ptr<span class=\"token operator\">&lt;</span>ofParameterGroup<span class=\"token operator\">::</span>Value<span class=\"token operator\">></span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\tobj<span class=\"token operator\">-</span><span class=\"token operator\">></span>parents<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>parents<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>parents<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofParameterGroup<span class=\"token operator\">::</span>Value<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tsize_t <span class=\"token function\">getNumListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">getInternalObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Value</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">Value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>TypeInfo<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>TypeInfo<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">bInNotify</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">serializable</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>ParameterType v<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>TypeInfo<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>TypeInfo<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">bInNotify</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">serializable</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string name<span class=\"token punctuation\">,</span> ParameterType v<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>TypeInfo<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>TypeInfo<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">bInNotify</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">serializable</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string name<span class=\"token punctuation\">,</span> ParameterType v<span class=\"token punctuation\">,</span> ParameterType min<span class=\"token punctuation\">,</span> ParameterType max<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">bInNotify</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">serializable</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t\tstd<span class=\"token operator\">::</span>string name<span class=\"token punctuation\">;</span>\n\t\tParameterType value<span class=\"token punctuation\">;</span>\n\t\tParameterType min<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">;</span>\n\t\tofEvent<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> changedE<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> bInNotify<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> serializable<span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>weak_ptr<span class=\"token operator\">&lt;</span>ofParameterGroup<span class=\"token operator\">::</span>Value<span class=\"token operator\">>></span> parents<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\tstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Value<span class=\"token operator\">></span> obj<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> setMethod<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">eventsSetValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">noEventsSetValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> F<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ofReadOnlyParameter</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\nofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">ofParameter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">obj</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>Value<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">setMethod</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span>eventsSetValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>placeholders<span class=\"token operator\">::</span>_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\nofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">ofParameter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">obj</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">setMethod</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span>eventsSetValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>placeholders<span class=\"token operator\">::</span>_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\nofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">ofParameter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">obj</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>Value<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">setMethod</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span>eventsSetValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>placeholders<span class=\"token operator\">::</span>_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\nofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">ofParameter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">obj</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>Value<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">setMethod</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span>eventsSetValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>placeholders<span class=\"token operator\">::</span>_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\nofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">ofParameter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> max<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">obj</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>Value<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">setMethod</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span>eventsSetValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>placeholders<span class=\"token operator\">::</span>_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setMethod</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\nofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">setMin</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">setMax</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\nofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">setWithoutEventNotifications</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">noEventsSetValue</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">*</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">eventsSetValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// If the object is notifying its parents, just set the value without triggering an event.</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>bInNotify<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">noEventsSetValue</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Mark the object as in its notification loop.</span>\n\t\tobj<span class=\"token operator\">-</span><span class=\"token operator\">></span>bInNotify <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Set the value.</span>\n\t\tobj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Notify any local subscribers.</span>\n\t\t<span class=\"token function\">ofNotifyEvent</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>changedE<span class=\"token punctuation\">,</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Notify all parents, if there are any.</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>parents<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// Erase each invalid parent</span>\n\t\t\tobj<span class=\"token operator\">-</span><span class=\"token operator\">></span>parents<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">remove_if</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>parents<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t\t\t  obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>parents<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t\t\t  <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>weak_ptr<span class=\"token operator\">&lt;</span>ofParameterGroup<span class=\"token operator\">::</span>Value<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">expired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t   obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>parents<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// notify all leftover (valid) parents of this object's changed value.</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// this can't happen in the same iterator as above, because a notified listener</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// might perform similar cleanups that would corrupt our iterator</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// (which appens for example if the listener calls getFirstParent on us)</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> parent<span class=\"token operator\">:</span> obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>parents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\tp<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">notifyParameterChanged</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tobj<span class=\"token operator\">-</span><span class=\"token operator\">></span>bInNotify <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">noEventsSetValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tobj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">setSerializable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> serializable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tobj<span class=\"token operator\">-</span><span class=\"token operator\">></span>serializable <span class=\"token operator\">=</span> serializable<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">bool</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">isSerializable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>has_stream_operators<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span>value <span class=\"token operator\">&amp;&amp;</span> obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>serializable<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">bool</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">isReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\nstd<span class=\"token operator\">::</span>string ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">valueType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>ParameterType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">setMin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tobj<span class=\"token operator\">-</span><span class=\"token operator\">></span>min <span class=\"token operator\">=</span> min<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\nParameterType ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>min<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">setMax</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tobj<span class=\"token operator\">-</span><span class=\"token operator\">></span>max <span class=\"token operator\">=</span> max<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\nParameterType ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>max<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tobj<span class=\"token operator\">-</span><span class=\"token operator\">></span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\nstd<span class=\"token operator\">::</span>string ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> std<span class=\"token operator\">::</span>string ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span><span class=\"token function\">toStringImpl</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofParameter\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Trying to serialize non-serializable parameter\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">fromString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>fromStringImpl<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofParameter\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Trying to de-serialize non-serializable parameter\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">enableEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tsetMethod <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span>eventsSetValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>placeholders<span class=\"token operator\">::</span>_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">disableEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tsetMethod <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span>noEventsSetValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>placeholders<span class=\"token operator\">::</span>_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ParameterType ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tParameterType r <span class=\"token operator\">=</span> obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">;</span>\n\tobj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">++</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ParameterType ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tParameterType r <span class=\"token operator\">=</span> obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">;</span>\n\tobj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">--</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tobj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token operator\">+</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tobj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token operator\">-</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tobj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token operator\">*</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tobj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token operator\">/</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">%</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tobj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token operator\">%</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tobj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\nofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">|</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tobj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token operator\">|</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">^</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tobj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token operator\">^</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tobj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token operator\">&lt;&lt;=</span>v<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">>>=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tobj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token operator\">>>=</span>v<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">makeReferenceTo</span><span class=\"token punctuation\">(</span>ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tobj <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\nstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofAbstractParameter<span class=\"token operator\">></span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">newReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span>ofParameterGroup <span class=\"token operator\">&amp;</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tobj<span class=\"token operator\">-</span><span class=\"token operator\">></span>parents<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\nsize_t ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getNumListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>changedE<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getInternalObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofParameter</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofAbstractParameter<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">ofParameter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofParameter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">fromString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerClass</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> ListenerMethod<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span>ListenerClass <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> ListenerMethod method<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>changedE<span class=\"token punctuation\">,</span>listener<span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">,</span>prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerClass</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> ListenerMethod<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">removeListener</span><span class=\"token punctuation\">(</span>ListenerClass <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> ListenerMethod method<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>changedE<span class=\"token punctuation\">,</span>listener<span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">,</span>prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span>\n\tstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>AbstractEventToken<span class=\"token operator\">></span> <span class=\"token function\">newListener</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>changedE<span class=\"token punctuation\">.</span><span class=\"token function\">newListener</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">enableEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">disableEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isSerializable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">valueType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">makeReferenceTo</span><span class=\"token punctuation\">(</span>ofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setSerializable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> serializable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofAbstractParameter<span class=\"token operator\">></span> <span class=\"token function\">newReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span>ofParameterGroup <span class=\"token operator\">&amp;</span> _parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> ofParameterGroup <span class=\"token function\">getFirstParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">auto</span> first <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">find_if</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>parents<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>parents<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>weak_ptr<span class=\"token operator\">&lt;</span>ofParameterGroup<span class=\"token operator\">::</span>Value<span class=\"token operator\">></span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>first<span class=\"token operator\">!=</span>obj<span class=\"token operator\">-</span><span class=\"token operator\">></span>parents<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> first<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofParameterGroup<span class=\"token operator\">::</span>Value<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\tsize_t <span class=\"token function\">getNumListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">getInternalObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Value</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">Value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">serializable</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string name<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">,</span><span class=\"token function\">serializable</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t\tstd<span class=\"token operator\">::</span>string name<span class=\"token punctuation\">;</span>\n\t\tofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> changedE<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> serializable<span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>weak_ptr<span class=\"token operator\">&lt;</span>ofParameterGroup<span class=\"token operator\">::</span>Value<span class=\"token operator\">>></span> parents<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Value<span class=\"token operator\">></span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief ofReadOnlyParameter holds a value and notifies its listeners when it changes.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofReadOnlyParameter is a \"read only\" version of `ofPareameter`.  \"Friend\"</span>\n<span class=\"token comment\" spellcheck=\"true\">/// classes specified in the template arguments allow other classes</span>\n<span class=\"token comment\" spellcheck=\"true\">/// write-access to the internal data.  Otherwise, all other access is</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \"read only\".</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofParameter</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\tparam ParameterType The data wrapped by the ofParameter.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\tparam Friend The type of the \"friend\" class with write access.</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofReadOnlyParameter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofAbstractParameter<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">ofReadOnlyParameter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//\tofReadOnlyParameter(ofParameter&lt;ParameterType> &amp; p);</span>\n<span class=\"token comment\" spellcheck=\"true\">//\tofReadOnlyParameter(ofReadOnlyParameter&lt;ParameterType,Friend> &amp; p);</span>\n\t<span class=\"token function\">ofReadOnlyParameter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofReadOnlyParameter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofReadOnlyParameter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">operator</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\tParameterType <span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\tParameterType <span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerClass</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> ListenerMethod<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span>ListenerClass <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> ListenerMethod method<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerClass</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> ListenerMethod<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">removeListener</span><span class=\"token punctuation\">(</span>ListenerClass <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> ListenerMethod method<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofAbstractParameter<span class=\"token operator\">></span> <span class=\"token function\">newReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span>\n\tstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>AbstractEventToken<span class=\"token operator\">></span> <span class=\"token function\">newListener</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isSerializable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">valueType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">enableEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">disableEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setSerializable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherFriend<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">makeReferenceTo</span><span class=\"token punctuation\">(</span>ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>OtherFriend<span class=\"token operator\">></span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">makeReferenceTo</span><span class=\"token punctuation\">(</span>ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tParameterType <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tParameterType <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n\tofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n\tofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n\tofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n\tofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n\tofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">%</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n\tofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n\tofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">|</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n\tofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">^</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n\tofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n\tofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>>=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\tofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\tofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setMin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setMax</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">fromString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span>ofParameterGroup <span class=\"token operator\">&amp;</span> _parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> ofParameterGroup <span class=\"token function\">getFirstParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">getFirstParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">getInternalObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">getInternalObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> parameter<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ofParameter</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ofParameterGroup</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">friend</span> Friend<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> OtherFriend<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ofReadOnlyParameter</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">ofReadOnlyParameter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//template&lt;typename ParameterType,typename Friend></span>\n<span class=\"token comment\" spellcheck=\"true\">//inline ofReadOnlyParameter&lt;ParameterType,Friend>::ofReadOnlyParameter(ofParameter&lt;ParameterType> &amp; p)</span>\n<span class=\"token comment\" spellcheck=\"true\">//:parameter(p){}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//template&lt;typename ParameterType,typename Friend></span>\n<span class=\"token comment\" spellcheck=\"true\">//inline ofReadOnlyParameter&lt;ParameterType,Friend>::ofReadOnlyParameter(ofReadOnlyParameter&lt;ParameterType,Friend> &amp; p)</span>\n<span class=\"token comment\" spellcheck=\"true\">//:parameter(p){}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">ofReadOnlyParameter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">parameter</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">ofReadOnlyParameter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">parameter</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">ofReadOnlyParameter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> max<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">parameter</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">,</span>min<span class=\"token punctuation\">,</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">*</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>parameter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> std<span class=\"token operator\">::</span>string ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ParameterType ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ParameterType ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> std<span class=\"token operator\">::</span>string ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\nstd<span class=\"token operator\">::</span>string ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">valueType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>ParameterType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerClass</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> ListenerMethod<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span>ListenerClass <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> ListenerMethod method<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter<span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">,</span>prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerClass</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> ListenerMethod<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">removeListener</span><span class=\"token punctuation\">(</span>ListenerClass <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> ListenerMethod method<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter<span class=\"token punctuation\">.</span><span class=\"token function\">removeListener</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">,</span>prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> std<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>of<span class=\"token operator\">::</span>priv<span class=\"token operator\">::</span>AbstractEventToken<span class=\"token operator\">></span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">newListener</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">newListener</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">enableEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter<span class=\"token punctuation\">.</span><span class=\"token function\">enableEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">disableEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter<span class=\"token punctuation\">.</span><span class=\"token function\">disableEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">isSerializable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">isSerializable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">isReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">setSerializable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter<span class=\"token punctuation\">.</span><span class=\"token function\">setSerializable</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherFriend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">makeReferenceTo</span><span class=\"token punctuation\">(</span>ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>OtherFriend<span class=\"token operator\">></span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter<span class=\"token punctuation\">.</span><span class=\"token function\">makeReferenceTo</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">makeReferenceTo</span><span class=\"token punctuation\">(</span>ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter<span class=\"token punctuation\">.</span><span class=\"token function\">makeReferenceTo</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>parameter<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> v<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ParameterType ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> parameter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">++</span>parameter<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ParameterType ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> parameter<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">--</span>parameter<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter<span class=\"token operator\">+</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter<span class=\"token operator\">-</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter<span class=\"token operator\">*</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter<span class=\"token operator\">/</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">%</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter<span class=\"token operator\">%</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter<span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">|</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter<span class=\"token operator\">|</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">^</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter<span class=\"token operator\">^</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter<span class=\"token operator\">&lt;&lt;=</span>v<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> OtherType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">>>=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> OtherType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter<span class=\"token operator\">>>=</span>v<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">,</span>min<span class=\"token punctuation\">,</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">setMin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter<span class=\"token punctuation\">.</span><span class=\"token function\">setMin</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">setMax</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ParameterType <span class=\"token operator\">&amp;</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter<span class=\"token punctuation\">.</span><span class=\"token function\">setMax</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">fromString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter<span class=\"token punctuation\">.</span><span class=\"token function\">fromString</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\nstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofAbstractParameter<span class=\"token operator\">></span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">newReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> ParameterType<span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> Friend<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofReadOnlyParameter<span class=\"token operator\">&lt;</span>ParameterType<span class=\"token punctuation\">,</span>Friend<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span>ofParameterGroup <span class=\"token operator\">&amp;</span> _parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tparameter<span class=\"token punctuation\">.</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span>_parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n","type":"source"}}],"fetch":[]}