{"data":[{"page":{"entry":{"name":"qtcreator-ja","filename":"qtcreator.ja.md","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/content/setup/qtcreator.ja.md","path":"/guides/qtcreator-ja","route":"/guides/qtcreator.ja.md","dir":"../ofSite/content/setup","ext":"md","type":"page","id":23,"parent":3,"breadcrumbs":[3],"siblings":[],"translations":{}},"description":{},"document":"<h2>-<em>- coding: utf-8 -</em>-</h2>\n<p>.. title: Qt creator</p>\n<h1>Qt Creator</h1>\n<p>openFrameworks 0.10.0は、Qt Creatorの4.6.0と4.6.1でテスト済みです。4.6.1の使用をお勧めしますが、それ以降のバージョンは以降で説明するやり方とは別の手順が必要かもしれませんし、想定通りに動かない可能性もあります。</p>\n<p>Qt Creatorの全バージョンは下記から閲覧可能です。</p>\n<p><a href=\"http://download.qt.io/official_releases/qtcreator/\">http://download.qt.io/official_releases/qtcreator/</a></p>\n<h2>Linux</h2>\n<p>LinuxでOFを使うためにはいくらか準備が必要です。まだセットアップが済んでいない場合は<a href=\"https://openframeworks.cc/ja/setup/linux-install\">こちらのガイド</a>を参照しながらおこなってください。</p>\n<p>LinuxでQt Creatorを使用する場合、ディストリビューションのリポジトリに存在するものよりもWebページで配布されているものをインストールすることをおすすめします。ディストリビューションから手に入るバージョン（少なくともUbuntu版）は古くなっている可能性がありますが、Webページからダウンロードできるバージョンでは、デフォルトの静的解析ツールに比べてより正確にエラー箇所を教えてくれるclangプラグインのサポートが得られます。</p>\n<p>いったんインストールが済めば、openFrameworks向けのQt Creatorプラグインのインストールができます。<code>scripts<span class=\"token operator\">/</span>qtcreator</code> 内にある <code>install_template<span class=\"token punctuation\">.</span>sh</code> を実行すれば必要なものがすべてインストールされるでしょう。</p>\n<h2>Windows</h2>\n<p>まずはじめにmsys2をインストールする必要があります。<a href=\"https://openframeworks.cc/ja/setup/msys2\">セットアップガイド</a>を参照してください。</p>\n<p>セットアップが完了したら、Qt Creatorを試す前にコンピューターの再起動をお勧めします。</p>\n<p>ビルドシステムはmsys2がデフォルトのディレクトリ（c:\\msys64）にあることを想定しています。もし他の場所にインストールされている場合はプロジェクトファイルの修正が必要になるかもしれません。</p>\n<p>msys2とともにQt Creatorを使うには、「ツール &gt; オプション &gt; ビルドと実行 &gt; コンパイラ」に移動して、MinGWコンパイラーがインストールしたmsys2を参照しているか確認します。もしここに無い場合は、the install_dependenciesのスクリプトでPATHの環境変数が正しく設定されなかった場合が多いです。msys2のインストールに戻ってインストールガイドの手順に沿って修正します。もしうまくいった場合は、コンパイラーは c:\\msys64\\mingw32\\bin を参照するようになります。</p>\n<p>「ツール &gt; オプション &gt; ビルドと実行」に移動して、キットのタブにあるデスクトップキットを、インストールしたmsys2のmingwツールのcとc++のコンパイラーとデバッガー使用するように設定します。</p>\n<p>一度、Kitの設定が正しく設定されれば、Qt CreatorのopenFrameworksのプラグインがダウンロードの際にインストールできるようになります。以下のコマンドを使用します。</p>\n<ul>\n<li>msys2のコンソールから、openFrameworksをダウンロードしたフォルダーの script/qtcreator に移動して ./install_templates.sh を実行します。</li>\n</ul>\n<p>もしくは</p>\n<ul>\n<li>scripts/qtcreator/templates のテンプレートを c:\\Qt\\qtcreator-4.6.1\\share\\qtcreator\\templates にコピーします</li>\n</ul>\n<h2>macOS</h2>\n<p>Qt Creatorをインストールした後で、「クリエイター &gt; 環境設定 &gt; ビルドと実行」に移動して、gccの代わりにclangを利用するようにDesktop Kitを設定します。もしここから変更できない場合は、Manageもしくはコンパイラーのタブを置いて、clangが利用可能か確認します。もしかしたら、gccの代わりにclangを利用できるようにするために、さらにカスタムの設定が必要となるかもしれません。</p>\n<p>いったんインストールが済めば、openFrameworks向けのQt Creatorプラグインのインストールができます。ターミナルから、scripts/qtcreator 内にある install_template.sh を実行すれば必要なものがすべてインストールされるでしょう。</p>\n<h2>全てのプラットーム</h2>\n<p>必要に応じてClangの静的解析ツールを有効にすることができます。これはコーディング中に正確にエラーを発見してくれるものですが、速度の低下につながることもあります。Qtのページから、これを有効化する手順を紹介します。</p>\n<p>Clang コードモデル用プラグインの設定</p>\n<ul>\n<li>Help &gt; About Plugins &gt; C++ &gt; ClangCodeModel のメニューからプラグインを有効にします。</li>\n<li>プラグインを有効にするため、Qt Creatorを再起動します。</li>\n</ul>\n<p>openFrameworksプラグインをインストールすると、ウィザードに従って新規プロジェクトの作成と公式アドオンの追加がおこなえます。プロジェクトを作成したあとは .qbs ファイル内にある of.addons という配列にアドオンの名前を加えることでそのアドオンを追加することができます。</p>\n<p>また、既存のコードからプロジェクトを作成することも可能です。</p>\n<p>他のプラットフォームで作成されたプロジェクトも、使用しているアドオンが互換性があり、カスタムのc++のフラッグが使用されていない場合、もしくはきちんと使用されているプラットフォーム向けに動くように設定されている限りは、そのまま動かすことができるでしょう。</p>\n<p>&lt;iframe src=&quot;https://player.vimeo.com/video/142272907&quot; width=&quot;1000&quot; height=&quot;563&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;</p>\n","raw":"## -*- coding: utf-8 -*-\r\n.. title: Qt creator\r\n\r\nQt Creator\r\n==========\r\n\r\nopenFrameworks 0.10.0は、Qt Creatorの4.6.0と4.6.1でテスト済みです。4.6.1の使用をお勧めしますが、それ以降のバージョンは以降で説明するやり方とは別の手順が必要かもしれませんし、想定通りに動かない可能性もあります。\r\n\r\nQt Creatorの全バージョンは下記から閲覧可能です。\r\n\r\n[http://download.qt.io/official_releases/qtcreator/](http://download.qt.io/official_releases/qtcreator/)\r\n\r\n\r\nLinux\r\n-----\r\n\r\nLinuxでOFを使うためにはいくらか準備が必要です。まだセットアップが済んでいない場合は[こちらのガイド](https://openframeworks.cc/ja/setup/linux-install)を参照しながらおこなってください。\r\n\r\nLinuxでQt Creatorを使用する場合、ディストリビューションのリポジトリに存在するものよりもWebページで配布されているものをインストールすることをおすすめします。ディストリビューションから手に入るバージョン（少なくともUbuntu版）は古くなっている可能性がありますが、Webページからダウンロードできるバージョンでは、デフォルトの静的解析ツールに比べてより正確にエラー箇所を教えてくれるclangプラグインのサポートが得られます。\r\n\r\nいったんインストールが済めば、openFrameworks向けのQt Creatorプラグインのインストールができます。`scripts/qtcreator` 内にある `install_template.sh` を実行すれば必要なものがすべてインストールされるでしょう。\r\n\r\nWindows\r\n----\r\n\r\nまずはじめにmsys2をインストールする必要があります。[セットアップガイド](https://openframeworks.cc/ja/setup/msys2)を参照してください。\r\n\r\nセットアップが完了したら、Qt Creatorを試す前にコンピューターの再起動をお勧めします。\r\n\r\nビルドシステムはmsys2がデフォルトのディレクトリ（c:\\msys64）にあることを想定しています。もし他の場所にインストールされている場合はプロジェクトファイルの修正が必要になるかもしれません。\r\n\r\nmsys2とともにQt Creatorを使うには、「ツール > オプション > ビルドと実行 > コンパイラ」に移動して、MinGWコンパイラーがインストールしたmsys2を参照しているか確認します。もしここに無い場合は、the install_dependenciesのスクリプトでPATHの環境変数が正しく設定されなかった場合が多いです。msys2のインストールに戻ってインストールガイドの手順に沿って修正します。もしうまくいった場合は、コンパイラーは c:\\msys64\\mingw32\\bin を参照するようになります。\r\n\r\n「ツール > オプション > ビルドと実行」に移動して、キットのタブにあるデスクトップキットを、インストールしたmsys2のmingwツールのcとc++のコンパイラーとデバッガー使用するように設定します。\r\n\r\n一度、Kitの設定が正しく設定されれば、Qt CreatorのopenFrameworksのプラグインがダウンロードの際にインストールできるようになります。以下のコマンドを使用します。\r\n\r\n- msys2のコンソールから、openFrameworksをダウンロードしたフォルダーの script/qtcreator に移動して ./install_templates.sh を実行します。\r\n\r\nもしくは\r\n\r\n- scripts/qtcreator/templates のテンプレートを c:\\Qt\\qtcreator-4.6.1\\share\\qtcreator\\templates にコピーします\r\n\r\nmacOS\r\n----\r\n\r\nQt Creatorをインストールした後で、「クリエイター > 環境設定 > ビルドと実行」に移動して、gccの代わりにclangを利用するようにDesktop Kitを設定します。もしここから変更できない場合は、Manageもしくはコンパイラーのタブを置いて、clangが利用可能か確認します。もしかしたら、gccの代わりにclangを利用できるようにするために、さらにカスタムの設定が必要となるかもしれません。\r\n\r\nいったんインストールが済めば、openFrameworks向けのQt Creatorプラグインのインストールができます。ターミナルから、scripts/qtcreator 内にある install_template.sh を実行すれば必要なものがすべてインストールされるでしょう。\r\n\r\n全てのプラットーム\r\n-------------\r\n\r\n必要に応じてClangの静的解析ツールを有効にすることができます。これはコーディング中に正確にエラーを発見してくれるものですが、速度の低下につながることもあります。Qtのページから、これを有効化する手順を紹介します。\r\n\r\nClang コードモデル用プラグインの設定\r\n\r\n- Help > About Plugins > C++ > ClangCodeModel のメニューからプラグインを有効にします。\r\n- プラグインを有効にするため、Qt Creatorを再起動します。\r\n\r\nopenFrameworksプラグインをインストールすると、ウィザードに従って新規プロジェクトの作成と公式アドオンの追加がおこなえます。プロジェクトを作成したあとは .qbs ファイル内にある of.addons という配列にアドオンの名前を加えることでそのアドオンを追加することができます。\r\n\r\nまた、既存のコードからプロジェクトを作成することも可能です。\r\n\r\n他のプラットフォームで作成されたプロジェクトも、使用しているアドオンが互換性があり、カスタムのc++のフラッグが使用されていない場合、もしくはきちんと使用されているプラットフォーム向けに動くように設定されている限りは、そのまま動かすことができるでしょう。\r\n\r\n<iframe src=\"https://player.vimeo.com/video/142272907\" width=\"1000\" height=\"563\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\r\n","type":"page"}}],"fetch":[]}