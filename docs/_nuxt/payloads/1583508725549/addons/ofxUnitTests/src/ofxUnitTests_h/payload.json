{"data":[{"page":{"entry":{"name":"ofxUnitTests.h","filename":"ofxUnitTests.h","absolute":"/Users/Gilbert/Code/openFrameworks/addons/ofxUnitTests/src/ofxUnitTests.h","path":"/addons/ofxUnitTests/src/ofxUnitTests_h","route":"/addons/ofxUnitTests/src/ofxUnitTests.h","dir":"../addons/ofxUnitTests/src","ext":"h","type":"source","id":185,"parent":183,"breadcrumbs":[183,184,36],"siblings":[],"translations":{}},"document":"<span class=\"token comment\" spellcheck=\"true\">/*\n * ofxUnitTestsApp.h\n *\n *  Created on: Jul 8, 2015\n *      Author: arturo\n */</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofLog.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofBaseApp.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofAppRunner.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofURLFileLoader.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdarg></span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofColorsLoggerChannel</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofBaseLoggerChannel<span class=\"token punctuation\">{</span>\n\tstd<span class=\"token operator\">::</span>string CON_DEFAULT<span class=\"token operator\">=</span><span class=\"token string\">\"\\033[0m\"</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>string CON_BOLD<span class=\"token operator\">=</span><span class=\"token string\">\"\\033[1m\"</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>string CON_RED<span class=\"token operator\">=</span><span class=\"token string\">\"\\033[31m\"</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>string CON_YELLOW<span class=\"token operator\">=</span><span class=\"token string\">\"\\033[33m\"</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>string CON_GREEN<span class=\"token operator\">=</span><span class=\"token string\">\"\\033[32m\"</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> OF_LOG_FATAL_ERROR<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_LOG_ERROR<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> CON_RED<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OF_LOG_WARNING<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> CON_YELLOW<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OF_LOG_NOTICE<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> CON_GREEN<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> CON_DEFAULT<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    std<span class=\"token operator\">::</span>string stdOut<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>string stdErr<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tstd<span class=\"token operator\">::</span>stringstream str<span class=\"token punctuation\">;</span>\n\n\t\tstr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[ \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofGetLogLevelName</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] \"</span><span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[ \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofGetLogLevelName</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] \"</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>module <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            str <span class=\"token operator\">&lt;&lt;</span> module <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">;</span>\n\t\t\tstd<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> module <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tstr <span class=\"token operator\">&lt;&lt;</span> message <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> CON_BOLD <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> message <span class=\"token operator\">&lt;&lt;</span> CON_DEFAULT <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>level<span class=\"token operator\">></span>OF_LOG_WARNING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            stdErr <span class=\"token operator\">+</span><span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            stdOut <span class=\"token operator\">+</span><span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        va_list args<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> va_list args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">auto</span> msg <span class=\"token operator\">=</span> <span class=\"token function\">ofVAArgsToString</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    std<span class=\"token operator\">::</span>string <span class=\"token function\">getStdOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> stdOut<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    std<span class=\"token operator\">::</span>string <span class=\"token function\">getStdErr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> stdErr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofAppveyorSystemChannel</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofBaseLoggerChannel<span class=\"token punctuation\">{</span>\n\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">category</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tstd<span class=\"token operator\">::</span>string category<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">case</span> OF_LOG_VERBOSE<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">case</span> OF_LOG_NOTICE<span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"Information\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OF_LOG_WARNING<span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"Warning\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"Error\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n    std<span class=\"token operator\">::</span>string stdOut<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>string stdErr<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    std<span class=\"token operator\">::</span>string <span class=\"token function\">getStdOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> stdOut<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n    std<span class=\"token operator\">::</span>string <span class=\"token function\">getStdErr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> stdErr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">auto</span> msg <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>module<span class=\"token operator\">!=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tmsg <span class=\"token operator\">=</span> module <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> msg<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n        stdOut <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">\"[\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofGetLogLevelName</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"]\\t\\t\"</span> <span class=\"token operator\">+</span> msg <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofSystem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"appveyor AddMessage \\\"\"</span> <span class=\"token operator\">+</span> msg <span class=\"token operator\">+</span> <span class=\"token string\">\"\\\" -Category \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">category</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tva_list args<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> va_list args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">auto</span> msg <span class=\"token operator\">=</span> <span class=\"token function\">ofVAArgsToString</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofxUnitTestsApp</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofBaseApp<span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofSetLoggerChannel</span><span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">auto</span> then <span class=\"token operator\">=</span> <span class=\"token function\">ofGetElapsedTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">auto</span> now <span class=\"token operator\">=</span> <span class=\"token function\">ofGetElapsedTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">auto</span> durationMs <span class=\"token operator\">=</span> now <span class=\"token operator\">-</span> then<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> passed <span class=\"token operator\">=</span> numTestsFailed<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>passed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> numTestsPassed <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">&lt;&lt;</span> numTestsTotal <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" tests passed\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span>  numTestsFailed <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">&lt;&lt;</span> numTestsTotal <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" tests failed\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"took \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>durationMs<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ms\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TARGET_WIN32)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">reportAppVeyor</span><span class=\"token punctuation\">(</span>passed<span class=\"token punctuation\">,</span> durationMs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">++</span>numTestsFailed<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n        <span class=\"token function\">ofExit</span><span class=\"token punctuation\">(</span>numTestsFailed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">do_test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> test<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> testName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> file<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tnumTestsTotal<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> testName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" passed\"</span><span class=\"token punctuation\">;</span>\n\t\t\tnumTestsPassed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> testName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" failed \"</span> <span class=\"token operator\">&lt;&lt;</span> msg<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> file <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">&lt;&lt;</span> line<span class=\"token punctuation\">;</span>\n\t\t\tnumTestsFailed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">do_test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> test<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> testName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> file<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">do_test</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">,</span>testName<span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>file<span class=\"token punctuation\">,</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> T2<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">do_test_eq</span><span class=\"token punctuation\">(</span>T1 t1<span class=\"token punctuation\">,</span> T2 t2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> testName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> file<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tnumTestsTotal<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t1<span class=\"token operator\">==</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> testName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" passed\"</span><span class=\"token punctuation\">;</span>\n\t\t\tnumTestsPassed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> testName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" failed \"</span> <span class=\"token operator\">&lt;&lt;</span> msg<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"test_eq(\"</span> <span class=\"token operator\">&lt;&lt;</span> v1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> v2 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"value1: \"</span> <span class=\"token operator\">&lt;&lt;</span> v1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"value2: \"</span> <span class=\"token operator\">&lt;&lt;</span> v2 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> file <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">&lt;&lt;</span> line<span class=\"token punctuation\">;</span>\n\t\t\tnumTestsFailed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> T2<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">do_test_eq</span><span class=\"token punctuation\">(</span>T1 t1<span class=\"token punctuation\">,</span> T2 t2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> testName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> file<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">do_test_eq</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">,</span>t2<span class=\"token punctuation\">,</span>v1<span class=\"token punctuation\">,</span>v2<span class=\"token punctuation\">,</span>testName<span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>file<span class=\"token punctuation\">,</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> T2<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">do_test_gt</span><span class=\"token punctuation\">(</span>T1 t1<span class=\"token punctuation\">,</span> T2 t2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> testName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> file<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tnumTestsTotal<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t1<span class=\"token operator\">></span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> testName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" passed\"</span><span class=\"token punctuation\">;</span>\n\t\t\tnumTestsPassed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> testName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" failed \"</span> <span class=\"token operator\">&lt;&lt;</span> msg<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"test_gt(\"</span> <span class=\"token operator\">&lt;&lt;</span> v1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> v2 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"value1: \"</span> <span class=\"token operator\">&lt;&lt;</span> v1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"value2: \"</span> <span class=\"token operator\">&lt;&lt;</span> v2 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> file <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">&lt;&lt;</span> line<span class=\"token punctuation\">;</span>\n\t\t\tnumTestsFailed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> T2<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">do_test_gt</span><span class=\"token punctuation\">(</span>T1 t1<span class=\"token punctuation\">,</span> T2 t2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> testName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> file<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">do_test_gt</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">,</span>t2<span class=\"token punctuation\">,</span>v1<span class=\"token punctuation\">,</span>v2<span class=\"token punctuation\">,</span>testName<span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>file<span class=\"token punctuation\">,</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> T2<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">do_test_lt</span><span class=\"token punctuation\">(</span>T1 t1<span class=\"token punctuation\">,</span> T2 t2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> testName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> file<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tnumTestsTotal<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t1<span class=\"token operator\">&lt;</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> testName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" passed\"</span><span class=\"token punctuation\">;</span>\n\t\t\tnumTestsPassed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> testName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" failed \"</span> <span class=\"token operator\">&lt;&lt;</span> msg<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"test_lt(\"</span> <span class=\"token operator\">&lt;&lt;</span> v1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> v2 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"value1: \"</span> <span class=\"token operator\">&lt;&lt;</span> v1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"value2: \"</span> <span class=\"token operator\">&lt;&lt;</span> v2 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> file <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">&lt;&lt;</span> line<span class=\"token punctuation\">;</span>\n\t\t\tnumTestsFailed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> T2<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">do_test_lt</span><span class=\"token punctuation\">(</span>T1 t1<span class=\"token punctuation\">,</span> T2 t2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> testName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> file<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">do_test_lt</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">,</span>t2<span class=\"token punctuation\">,</span>v1<span class=\"token punctuation\">,</span>v2<span class=\"token punctuation\">,</span>testName<span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>file<span class=\"token punctuation\">,</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    std<span class=\"token operator\">::</span>string <span class=\"token function\">json_var_value</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> var<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\\\"\"</span> <span class=\"token operator\">+</span> var <span class=\"token operator\">+</span> <span class=\"token string\">\"\\\": \\\"\"</span> <span class=\"token operator\">+</span> value <span class=\"token operator\">+</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TARGET_WIN32)</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">reportAppVeyor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> passed<span class=\"token punctuation\">,</span> uint64_t durationMs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string APPVEYOR_API_URL <span class=\"token operator\">=</span> <span class=\"token string\">\"APPVEYOR_API_URL\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetEnv</span><span class=\"token punctuation\">(</span>APPVEYOR_API_URL<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//ofSystem(\"appveyor AddTest -Name \" + projectName.string() + \" -Framework ofxUnitTests -FileName \" + exeName.string() + \" -Outcome \" + (passed?\"Passed\":\"Failed\") + \" -Duration \" + ofToString(now-then));</span>\n            <span class=\"token keyword\">auto</span> projectDir <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">canonical</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span>ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getCurrentExeDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token string\">\"..\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">auto</span> projectName <span class=\"token operator\">=</span> projectDir<span class=\"token punctuation\">.</span><span class=\"token function\">stem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">auto</span> exeName <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span>ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getCurrentExePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filename</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">auto</span> stdOut <span class=\"token operator\">=</span> logger<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getStdOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">ofStringReplace</span><span class=\"token punctuation\">(</span>stdOut<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\\\\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\\\\\\\\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">ofStringReplace</span><span class=\"token punctuation\">(</span>stdOut<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\\\\\\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">auto</span> stdErr <span class=\"token operator\">=</span> logger<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getStdErr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">ofStringReplace</span><span class=\"token punctuation\">(</span>stdErr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\\\\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\\\\\\\\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">ofStringReplace</span><span class=\"token punctuation\">(</span>stdErr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\\\\\\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ofHttpRequest req<span class=\"token punctuation\">;</span>\n            req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"Accept\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">;</span>\n            req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"Content-type\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">;</span>\n            req<span class=\"token punctuation\">.</span>method <span class=\"token operator\">=</span> ofHttpRequest<span class=\"token operator\">::</span>POST<span class=\"token punctuation\">;</span>\n            req<span class=\"token punctuation\">.</span>url <span class=\"token operator\">=</span> <span class=\"token function\">ofGetEnv</span><span class=\"token punctuation\">(</span>APPVEYOR_API_URL<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"api/tests\"</span><span class=\"token punctuation\">;</span>\n            req<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span>\n                    <span class=\"token string\">\"{ \"</span> <span class=\"token operator\">+</span>\n                        <span class=\"token function\">json_var_value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testName\"</span><span class=\"token punctuation\">,</span> projectName<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span>\n                        <span class=\"token function\">json_var_value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testFramework\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ofxUnitTests\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span>\n                        <span class=\"token function\">json_var_value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fileName\"</span><span class=\"token punctuation\">,</span> exeName<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span>\n                        <span class=\"token function\">json_var_value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"outcome\"</span><span class=\"token punctuation\">,</span> passed<span class=\"token operator\">?</span><span class=\"token string\">\"Passed\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Failed\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span>\n                        <span class=\"token function\">json_var_value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"durationMilliseconds\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>durationMs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span>\n                        <span class=\"token function\">json_var_value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StdOut\"</span><span class=\"token punctuation\">,</span> stdOut<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span>\n                        <span class=\"token function\">json_var_value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StdErr\"</span><span class=\"token punctuation\">,</span> stdErr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n                    <span class=\"token string\">\"}\"</span><span class=\"token punctuation\">;</span>\n            req<span class=\"token punctuation\">.</span>timeoutSeconds <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Sending appveyor test results to \"</span> <span class=\"token operator\">&lt;&lt;</span> req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">;</span>\n            ofURLFileLoader http<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">auto</span> res <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">handleRequest</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>status<span class=\"token operator\">&lt;</span><span class=\"token number\">200</span> <span class=\"token operator\">||</span> res<span class=\"token punctuation\">.</span>status<span class=\"token operator\">>=</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sending to \"</span> <span class=\"token operator\">&lt;&lt;</span> req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> res<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> res<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">;</span>\n                std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"for body:\"</span><span class=\"token punctuation\">;</span>\n                std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> req<span class=\"token punctuation\">.</span>body <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Test results sent correctly\"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token keyword\">int</span> numTestsTotal <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> numTestsPassed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> numTestsFailed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofColorsLoggerChannel<span class=\"token operator\">></span> logger<span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> ofColorsLoggerChannel<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ofxTest(x, ...) this->do_test(x,__VA_ARGS__,__FILE__,__LINE__)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ofxTestEq(x,y, ...) this->do_test_eq(x,y,# x,# y,__VA_ARGS__,__FILE__,__LINE__)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ofxTestGt(x,y, ...) this->do_test_gt(x,y,# x,# y,__VA_ARGS__,__FILE__,__LINE__)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ofxTestLt(x,y, ...) this->do_test_lt(x,y,# x,# y,__VA_ARGS__,__FILE__,__LINE__)</span>\n","type":"source"}}],"fetch":[]}