{"data":[{"page":{"entry":{"name":"ofxXmlPoco.h","filename":"ofxXmlPoco.h","absolute":"/Users/Gilbert/Code/openFrameworks/addons/ofxPoco/src/ofxXmlPoco.h","path":"/addons/ofxPoco/src/ofxXmlPoco_h","route":"/addons/ofxPoco/src/ofxXmlPoco.h","dir":"../addons/ofxPoco/src","ext":"h","type":"source","id":174,"parent":171,"breadcrumbs":[171,172,36],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofParameter.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofParameterGroup.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;numeric></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Poco/DOM/Document.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Poco/DOM/DocumentFragment.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Poco/DOM/Element.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Poco/DOM/DOMParser.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Poco/DOM/DOMException.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Poco/SAX/SAXException.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Poco/XML/XMLString.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Poco/XML/XMLWriter.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Poco/DOM/DOMParser.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Poco/DOM/DOMWriter.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Poco/DOM/Document.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Poco/DOM/Attr.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Poco/DOM/Node.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Poco/DOM/Text.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Poco/DOM/NodeIterator.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Poco/DOM/NodeFilter.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Poco/DOM/NamedNodeMap.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Poco/DOM/ChildNodesList.h></span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofxXmlPoco</span><span class=\"token punctuation\">{</span>\n    \n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    \n    <span class=\"token function\">ofxXmlPoco</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">ofxXmlPoco</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofxXmlPoco</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> path <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofxXmlPoco</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofxXmlPoco<span class=\"token operator\">&amp;</span> rhs <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> ofxXmlPoco<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofxXmlPoco<span class=\"token operator\">&amp;</span> rhs <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">bool</span>            <span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> path <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span>            <span class=\"token function\">addXml</span><span class=\"token punctuation\">(</span> ofxXmlPoco<span class=\"token operator\">&amp;</span> xml<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> copyAll <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    std<span class=\"token operator\">::</span>string          <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>string          <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span>\t\t\t\t<span class=\"token function\">getIntValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span>\t\t\t\t<span class=\"token function\">getIntValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    int64_t <span class=\"token function\">getInt64Value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    int64_t <span class=\"token function\">getInt64Value</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span>\t\t\t<span class=\"token function\">getFloatValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span>\t\t\t<span class=\"token function\">getFloatValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span>\t\t\t<span class=\"token function\">getBoolValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span>\t\t\t<span class=\"token function\">getBoolValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">bool</span>            <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    std<span class=\"token operator\">::</span>string          <span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span>            <span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>map<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">></span> <span class=\"token function\">getAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span>             <span class=\"token function\">getNumChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span>             <span class=\"token function\">getNumChildren</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">bool</span>            <span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span>            <span class=\"token function\">removeAttributes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// removes attributes for the passed path</span>\n    <span class=\"token keyword\">bool</span>            <span class=\"token function\">removeAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// removes attributes for the element ofxXmlPoco is pointing to</span>\n    <span class=\"token keyword\">bool</span>            <span class=\"token function\">removeContents</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// removes the path passed as parameter</span>\n    <span class=\"token keyword\">bool</span>            <span class=\"token function\">removeContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// removes the childs of the current element</span>\n    <span class=\"token keyword\">bool</span>            <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// removes both attributes and tags for the passed path</span>\n    <span class=\"token keyword\">void</span>            <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// removes the current element and all its children,</span>\n    \t\t\t\t\t\t  <span class=\"token comment\" spellcheck=\"true\">// the current element will point to it's parent afterwards</span>\n    \t\t\t\t\t\t  <span class=\"token comment\" spellcheck=\"true\">// if the current element is the document root this will act as clear()</span>\n\n    <span class=\"token keyword\">bool</span>            <span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// works for both attributes and tags</span>\n    \n    <span class=\"token keyword\">void</span>\t\t\t<span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// clears the full document and points the current element to the root</span>\n\n    std<span class=\"token operator\">::</span>string          <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span>            <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">bool</span>            <span class=\"token function\">setToChild</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span>            <span class=\"token function\">setTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span>            <span class=\"token function\">setToParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span>            <span class=\"token function\">setToParent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> numLevelsUp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span>            <span class=\"token function\">setToSibling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span>            <span class=\"token function\">setToPrevSibling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">bool</span>            <span class=\"token function\">loadFromBuffer</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> buffer <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    std<span class=\"token operator\">::</span>string          <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token comment\" spellcheck=\"true\">//////////////////////////////////////////////////////////////////</span>\n    <span class=\"token comment\" spellcheck=\"true\">// please excuse our mess: templated get/set</span>\n    <span class=\"token comment\" spellcheck=\"true\">//////////////////////////////////////////////////////////////////</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">// a pretty useful tokenization system:</span>\n    <span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">></span> <span class=\"token function\">tokenize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> delim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">></span> tokens<span class=\"token punctuation\">;</span>\n\n        size_t p0 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> p1 <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p0 <span class=\"token operator\">!=</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            p1 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">find_first_of</span><span class=\"token punctuation\">(</span>delim<span class=\"token punctuation\">,</span> p0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">!=</span> p0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                std<span class=\"token operator\">::</span>string token <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>p0<span class=\"token punctuation\">,</span> p1 <span class=\"token operator\">-</span> p0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            p0 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">find_first_not_of</span><span class=\"token punctuation\">(</span>delim<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> tokens<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">// templated to be anything</span>\n    <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">bool</span> <span class=\"token function\">addValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> T data<span class=\"token operator\">=</span><span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> createEntirePath <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        std<span class=\"token operator\">::</span>string value <span class=\"token operator\">=</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">></span> tokens<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            tokens <span class=\"token operator\">=</span> <span class=\"token function\">tokenize</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// is this a tokenized tag?</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// don't 'push' down into the new nodes</span>\n            Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span> firstElement<span class=\"token operator\">=</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>lastElement<span class=\"token operator\">=</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                lastElement <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>firstElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                firstElement <span class=\"token operator\">=</span> lastElement<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            \n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span> newElement <span class=\"token operator\">=</span> <span class=\"token function\">getPocoDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\" spellcheck=\"true\">//ofLogVerbose(\"ofxXml\") &lt;&lt; \"addValue(): creating \" &lt;&lt; newElement->nodeName();</span>\n\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lastElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    lastElement<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>newElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                lastElement <span class=\"token operator\">=</span> newElement<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Text <span class=\"token operator\">*</span>text <span class=\"token operator\">=</span> <span class=\"token function\">getPocoDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    lastElement<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span> text <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span> Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>DOMException <span class=\"token operator\">&amp;</span>e <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXml\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"addValue(): couldn't set node value: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">DOMErrorMessage</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">code</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                element <span class=\"token operator\">=</span> firstElement<span class=\"token punctuation\">;</span>\n                document<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            \n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            \n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element <span class=\"token operator\">*</span>newElement <span class=\"token operator\">=</span> <span class=\"token function\">getPocoDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Text <span class=\"token operator\">*</span>text <span class=\"token operator\">=</span> <span class=\"token function\">getPocoDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    newElement<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    text<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    \n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span> Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>DOMException <span class=\"token operator\">&amp;</span>e <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXml\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"addValue(): couldn't set node value: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">DOMErrorMessage</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">code</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>newElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                element <span class=\"token operator\">=</span> newElement<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    \n    <span class=\"token comment\" spellcheck=\"true\">// templated to be anything</span>\n    <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> T <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> T returnVal<span class=\"token operator\">=</span><span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">firstChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">firstChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">nodeType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Node<span class=\"token operator\">::</span>TEXT_NODE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> ofFromString<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">innerText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getValue(): path \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\" not found when getting value\"</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> returnVal<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// hmm. this could be a problem</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\tPoco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getNodeByPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> ofFromString<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">innerText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n    \t<span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">// these are advanced, you probably don't want to use them</span>\n    \n    Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span>        <span class=\"token function\">getPocoElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span>        <span class=\"token function\">getPocoElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span>  <span class=\"token function\">getPocoElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span>  <span class=\"token function\">getPocoElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Document<span class=\"token operator\">*</span>       <span class=\"token function\">getPocoDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Document<span class=\"token operator\">*</span> <span class=\"token function\">getPocoDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">releaseAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>string <span class=\"token function\">DOMErrorMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Document <span class=\"token operator\">*</span>document<span class=\"token punctuation\">;</span>\n    Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element <span class=\"token operator\">*</span>element<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// serializer</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofSerialize</span><span class=\"token punctuation\">(</span>ofxXmlPoco <span class=\"token operator\">&amp;</span> xml<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofAbstractParameter <span class=\"token operator\">&amp;</span> parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofDeserialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxXmlPoco <span class=\"token operator\">&amp;</span> xml<span class=\"token punctuation\">,</span> ofAbstractParameter <span class=\"token operator\">&amp;</span> parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n","type":"source"}}],"fetch":[]}