{"entry":{"name":"ofVec3f","filename":"ofVec3f.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/math/ofVec3f.markdown","path":"/documentation/math/ofVec3f","route":"/documentation/math/ofVec3f.markdown","dir":"../ofSite/documentation/math","ext":"markdown","type":"page","id":417,"parent":406,"breadcrumbs":[406,1],"siblings":[],"translations":{}},"description":{"short":"<p>ofVec3f is a class for storing a three dimensional vector.</p>\n<p>Moving through space requires knowledge of where things are and where they are\ngoing. Vector Maths is the class of mathematics that gives us control over\nthese things in space, allowing for elegant and intuitive descriptions of\ncomplex structures and movement. Vectors are at the heart of animations,\nparticle systems, and 2D and 3D graphics.</p>\n<p>Vectors in mathematics in general are entities with magnitude (also called\nlength) and direction. A vector whose magnitude is 1 (ie a vector that is\n<em>normalized</em>) is called a <em>unit vector</em>. Unit vectors are very handy for\nstoring directions as they can be easily scaled up (or down) to represent\nmotion in a particular direction with a particular length.</p>\n<p><em>You will also see the term 'vector' used to describe an array of objects in\nC++ (such as text strings). Don't let this confuse you, they are quite\ndifferent: one of them is a mathematical term for a fixed-length list of\nnumbers that you can do mathematical operations on, the other is a\nC++-specific term that means 'dynamically sizeable array'.</em></p>\n<p>'ofVec3f has three member variables, x, y, and z, which allow to conveniently\n'store 3D properties of an object such as its position, velocity, or\n'acceleration.</p>\n<pre><code>ofVec3f v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1.x is 0, v1.y is 0, v1.z is 0</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now v1.x is 10, v1.y is 50, v1.z is 80</span>\n</code></pre>\n<p>Using 'ofVec3f' greatly simplifies arithmetic operations in three dimensions.\nFor example if you have two vectors 'v1' and 'v2', both of which represent a\n3D change in position, you can find the total change of position of both of\nthem just by doing an addition 'v1 + v2':</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// so now v1 represents walking 5 steps forward then 2 steps</span>\n<span class=\"token comment\" spellcheck=\"true\">// sideways then 1 step upwards</span>\nofVec3f v2<span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// so now v2 represents walking 1 step forward then 1 step</span>\n<span class=\"token comment\" spellcheck=\"true\">// sideways then 1 step upwards</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// what happens if you do v1 followed by v2?</span>\n<span class=\"token comment\" spellcheck=\"true\">// to find out just add v1 and v2 together:</span>\nofVec3f result <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// result is (6, 3, 1), or 6 steps forward then 3 steps sideways</span>\n<span class=\"token comment\" spellcheck=\"true\">// then 2 steps upwards</span>\n</code></pre>\n<p>You can scale an 'ofVec3f' by multiplying it with a float:</p>\n<pre><code><span class=\"token comment\" spellcheck=\"true\">// walk 5 steps forward then 2 steps sideways then 1 step upwards</span>\nofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// what happens if we do v1 three times?</span>\nofVec3f result <span class=\"token operator\">=</span> v1 <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// result is (15, 6, 3), or</span>\n<span class=\"token comment\" spellcheck=\"true\">// 15 steps forward, 6 steps sideways and 3 steps upwards</span>\n</code></pre>\n<p>This also works for subtraction and division.</p>\n<p>As you can see this really makes dealing with vectors as easy as dealing with\nsingle 'float's or 'int's, and can reduce the number of lines of code you have\nto write by half, at the same time making your code much easier to read and\nunderstand!</p>\n<p><strong>See also</strong>: ofVec2f for 2D vectors</p>\n<p><strong>See also</strong>: ofVec4f for 4D vectors</p>\n","full":"<p>ofVec3f is a class for storing a three dimensional vector.</p>\n<p>Moving through space requires knowledge of where things are and where they are going. Vector Maths is the class of mathematics that gives us control over these things in space, allowing for elegant and intuitive descriptions of complex structures and movement. Vectors are at the heart of animations, particle systems, and 2D and 3D graphics.</p>\n<p>Vectors in mathematics in general are entities with magnitude (also called length) and direction. A vector whose magnitude is 1 (ie a vector that is <em>normalized</em>) is called a <em>unit vector</em>. Unit vectors are very handy for storing directions as they can be easily scaled up (or down) to represent motion in a particular direction with a particular length.</p>\n<p><em>You will also see the term 'vector' used to describe an array of objects in C++ (such as text strings). Don't let this confuse you, they are quite different: one of them is a mathematical term for a fixed-length list of numbers that you can do mathematical operations on, the other is a C++-specific term that means 'dynamically sizeable array'.</em></p>\n<p>'ofVec3f' has three member variables, 'x', 'y', and 'z', which allow to conveniently store 3D properties of an object such as its position, velocity, or acceleration.</p>\n<pre><code>ofVec3f v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1.x is 0, v1.y is 0, v1.z is 0</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now v1.x is 10, v1.y is 50, v1.z is 80</span>\n</code></pre>\n<p>Using 'ofVec3f' greatly simplifies arithmetic operations in three dimensions. For example if you have two vectors 'v1' and 'v2', both of which represent a 3D change in position, you can find the total change of position of both of them just by doing an addition 'v1 + v2':</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// so now v1 represents walking 5 steps forward then 2 steps</span>\n<span class=\"token comment\" spellcheck=\"true\">// sideways then 1 step upwards</span>\nofVec3f v2<span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// so now v2 represents walking 1 step forward then 1 step</span>\n<span class=\"token comment\" spellcheck=\"true\">// sideways then 1 step upwards</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// what happens if you do v1 followed by v2?</span>\n<span class=\"token comment\" spellcheck=\"true\">// to find out just add v1 and v2 together:</span>\nofVec3f result <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// result is (6, 3, 1), or 6 steps forward then 3 steps sideways</span>\n<span class=\"token comment\" spellcheck=\"true\">// then 2 steps upwards</span>\n</code></pre>\n<p>You can scale an 'ofVec3f' by multiplying it with a float:</p>\n<pre><code><span class=\"token comment\" spellcheck=\"true\">// walk 5 steps forward then 2 steps sideways then 1 step upwards</span>\nofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// what happens if we do v1 three times?</span>\nofVec3f result <span class=\"token operator\">=</span> v1 <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// result is (15, 6, 3), or</span>\n<span class=\"token comment\" spellcheck=\"true\">// 15 steps forward, 6 steps sideways and 3 steps upwards</span>\n\n</code></pre>\n<p>This also works for subtraction and division.</p>\n<p>As you can see this really makes dealing with vectors as easy as dealing with single 'float's or 'int's, and can reduce the number of lines of code you have to write by half, at the same time making your code much easier to read and understand!</p>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"align(&vec, tolerance = 0.0001f)","name":"align","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance<span class=\"token operator\">=</span><span class=\"token number\">0.0001f</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns 'true' if this vector is pointing in the same direction as\n'vec', with an angle error threshold 'tolerance' in degrees (default\n0.0001 degrees).</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1.align(v2, 0.0) is true</span>\n</code></pre>\n","desc":"<p>Returns 'true' if this vector is pointing in the same direction as 'vec', with an angle error threshold 'tolerance' in degrees (default 0.0001 degrees).</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1.align(v2, 0.0) is true</span>\n</code></pre>\n"},{"syntax":"alignRad(&vec, tolerance = 0.0001f)","name":"alignRad","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance<span class=\"token operator\">=</span><span class=\"token number\">0.0001f</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns 'true' if this vector is pointing in the same direction\nas 'vec', with an angle error threshold 'tolerance' in radians\n(default 0.0001).</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1.align(v2, 0.0) is true</span>\n</code></pre>\n","desc":"<p>Returns 'true' if this vector is pointing in the same direction as 'vec', with an angle error threshold 'tolerance' in radians (default 0.0001).</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1.align(v2, 0.0) is true</span>\n</code></pre>\n"},{"syntax":"angle(&vec)","name":"angle","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Calculate and return the coplanar angle in degrees between this vector\nand 'vec'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">angle</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// angle is 90</span>\n</code></pre>\n","desc":"<p>Calculate and return the coplanar angle in degrees between this vector and 'vec'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">angle</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// angle is 90</span>\n</code></pre>\n"},{"syntax":"angleRad(&vec)","name":"angleRad","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Calculate and return the coplanar angle in radians between this\nvector and 'vec'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">angle</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// angle is 90</span>\n</code></pre>\n","desc":"<p>Calculate and return the coplanar angle in radians between this vector and 'vec'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">angle</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// angle is 90</span>\n</code></pre>\n"},{"syntax":"average(*points, num)","name":"average","returns":"ofVec3f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">*</span>points<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets this vector to be the average (<em>centre of gravity</em> or\n<em>centroid</em>) of a given array of 'ofVec3f's. 'points' is the array of\n'ofVec3f's and 'num' specifies the number of 'ofVec3f's in the array.</p>\n<pre><code><span class=\"token keyword\">int</span> numPoints <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nofVec3f points<span class=\"token punctuation\">[</span>numPoints<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>numPoints<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tpoints<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nofVec3f centroid<span class=\"token punctuation\">;</span>\ncentroid<span class=\"token punctuation\">.</span><span class=\"token function\">average</span><span class=\"token punctuation\">(</span> points<span class=\"token punctuation\">,</span> numPoints <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// centroid now is the centre of gravity/average of all the random points</span>\n</code></pre>\n","desc":"<p>Sets this vector to be the average (<em>centre of gravity</em> or <em>centroid</em>) of a given array of 'ofVec3f's. 'points' is the array of 'ofVec3f's and 'num' specifies the number of 'ofVec3f's in the array.</p>\n<pre><code><span class=\"token keyword\">int</span> numPoints <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nofVec3f points<span class=\"token punctuation\">[</span>numPoints<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>numPoints<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tpoints<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nofVec3f centroid<span class=\"token punctuation\">;</span>\ncentroid<span class=\"token punctuation\">.</span><span class=\"token function\">average</span><span class=\"token punctuation\">(</span> points<span class=\"token punctuation\">,</span> numPoints <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// centroid now is the centre of gravity/average of all the random points</span>\n</code></pre>\n"},{"syntax":"cross(&vec)","name":"cross","returns":"ofVec3f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set this vector to the cross product (vector product) of itself and\n'vec'. This is a binary operation on two vectors in three-dimensional\nspace, which results in a vector that is perpendicular to both of the\nvectors being multiplied, and normal to the plane containing them. The\nname <em>cross product</em> is derived from the cross symbol X that is often\nused to designate this operation; the alternative name <em>vector\nproduct</em> emphasizes the vector (rather than scalar) nature of the\nresult.</p>\n","desc":"<p>Set this vector to the cross product (vector product) of itself and 'vec'. This is a binary operation on two vectors in three-dimensional space, which results in a vector that is perpendicular to both of the vectors being multiplied, and normal to the plane containing them. The name <em>cross product</em> is derived from the cross symbol X that is often used to designate this operation; the alternative name <em>vector product</em> emphasizes the vector (rather than scalar) nature of the result.</p>\n"},{"syntax":"distance(&pnt)","name":"distance","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>pnt","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Treats both this vector and 'pnt' as points in 3D space, and\ncalculates and returns the distance between them.</p>\n<pre><code>ofVec3f <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> distance <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span> p2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// distance is 5.8310</span>\n</code></pre>\n<p>'distance' involves a square root calculation, which is one of the\nslowest things you can do in programming. If you don't need an exact\nnumber but rather just a rough idea of distance (for example when\nfinding the shortest distance of a bunch of points to a reference\npoint, where it doesn't matter exactly what the distances are, you\njust want the shortest), you can use squareDistance() instead.</p>\n","desc":"<p>Treats both this vector and 'pnt' as points in 3D space, and calculates and returns the distance between them.</p>\n<pre><code>ofVec3f <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> distance <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span> p2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// distance is 5.8310</span>\n</code></pre>\n<p>'distance' involves a square root calculation, which is one of the slowest things you can do in programming. If you don't need an exact number but rather just a rough idea of distance (for example when finding the shortest distance of a bunch of points to a reference point, where it doesn't matter exactly what the distances are, you just want the shortest), you can use <a href=\"#squareDistance\">'squareDistance'</a> instead.</p>\n"},{"syntax":"dot(&vec)","name":"dot","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the dot product of this vector with 'vec'.</p>\n<p>The <em>dot product</em> of two vectors, also known as the <em>scalar product</em>, is\nthe product of the magnitude of the two vectors and the cosine of the\nangle between them.</p>\n<p>One interpretation of the dot product is as a measure of how closely two\nvectors align with each other. If they point in exactly the same\ndirection, their dot product will simply be the product of their\nmagnitudes, if they are perpendicular, their dot product will be 0, and\nif they point in opposite directions, their dot product will be\nnegative.</p>\n<p>The dot product is in contrast to the <em>cross product</em>, which returns a\nvector rather than a scalar.</p>\n<pre><code>ofVec3f <span class=\"token function\">a1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// magnitude 2, parallel to x-axis</span>\nofVec3f <span class=\"token function\">b1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// magnitude 5, 53.13 degree angle to a1</span>\n<span class=\"token keyword\">float</span> dot <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dot is 2 * 5 * cos(53.13) = 6.0</span>\n\nofVec3f <span class=\"token function\">a2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// magnitude 1, parallel to x-axis</span>\nofVec3f <span class=\"token function\">b2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// magnitude 1, 90 degree angle to a2</span>\ndot <span class=\"token operator\">=</span> a2<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dot is 1 * 1 * cos(90) = 0.0</span>\n\nofVec3f <span class=\"token function\">a3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// magnitude 1, parallel to y-axis</span>\nofVec3f <span class=\"token function\">b3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// magnitude 1, 180 degree angle to a3</span>\ndot <span class=\"token operator\">=</span> a3<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dot is 1 * 1 * cos(180) = -1.0</span>\n</code></pre>\n","desc":"<p>Calculate and return the dot product of this vector with 'vec'.</p>\n<p><em>Dot product</em> (less commonly known as <em>Euclidean inner product</em>) expresses the angular relationship between two vectors. In other words it is a measure of how <em>parallel</em> two vectors are. If they are completely perpendicular the dot product is 0; if they are completely parallel their dot product is either 1 if they are pointing in the same direction, or -1 if they are pointing in opposite directions.</p>\n<p><img src=\"../math/dotproduct.png\" alt=\"DOT\">\nImage courtesy of Wikipedia</p>\n<pre><code>ofVec3f <span class=\"token function\">a1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">b1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 90 degree angle to a1</span>\ndot <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dot is 0, ie cos(90)</span>\n\nofVec3f <span class=\"token function\">a2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">b2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 45 degree angle to a2</span>\nb2<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// vectors should to be unit vectors (normalized)</span>\n<span class=\"token keyword\">float</span> dot <span class=\"token operator\">=</span> a2<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dot is 0.707, ie cos(45)</span>\n\nofVec3f <span class=\"token function\">a3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">b3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 180 degree angle to a3</span>\ndot <span class=\"token operator\">=</span> a3<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dot is -1, ie cos(180)</span>\n</code></pre>\n"},{"syntax":"getCrossed(&vec)","name":"getCrossed","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the cross product (vector product) of this vector and 'vec'. This is a\nbinary operation on two vectors in three-dimensional space, which results in a\nvector that is perpendicular to both of the vectors being multiplied, and\nnormal to the plane containing them. The name <em>cross product</em> is derived from\nthe cross symbol X that is often used to designate this operation; the\nalternative name <em>vector product</em> emphasizes the vector (rather than scalar)\nnature of the result.</p>\n<p><img src=\"math/crossproduct.png\" alt=\"CROSS\">\nImage courtesy of Wikipedia</p>\n","desc":"<p>Returns the cross product (vector product) of this vector and 'vec'. This is a binary operation on two vectors in three-dimensional space, which results in a vector that is perpendicular to both of the vectors being multiplied, and normal to the plane containing them. The name <em>cross product</em> is derived from the cross symbol X that is often used to designate this operation; the alternative name <em>vector product</em> emphasizes the vector (rather than scalar) nature of the result.</p>\n<p><img src=\"../math/crossproduct.png\" alt=\"CROSS\">\nImage courtesy of Wikipedia</p>\n"},{"syntax":"getInterpolated(&pnt, p)","name":"getInterpolated","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>pnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Perform a linear interpolation of this vector's position towards 'pnt'\nand return the interpolated vector without altering the original. 'p'\ncontrols the amount to move towards 'pnt'. 'p' is normally between 0\nand 1 and where 0 means stay the original position and 1 means move\nall the way to 'pnt', but you can also have 'p' greater than 1\novershoot 'pnt', or less than 0 to move backwards away from 'pnt'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getInterpolated</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (5, 7.5, 10)</span>\nofVec3f v4 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getInterpolated</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v4 is (8, 9, 16)</span>\n</code></pre>\n","desc":"<p>Perform a linear interpolation of this vector's position towards 'pnt' and return the interpolated vector without altering the original. 'p' controls the amount to move towards 'pnt'. 'p' is normally between 0 and 1 and where 0 means stay the original position and 1 means move all the way to 'pnt', but you can also have 'p' greater than 1 overshoot 'pnt', or less than 0 to move backwards away from 'pnt'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getInterpolated</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (5, 7.5, 10)</span>\nofVec3f v4 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getInterpolated</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v4 is (8, 9, 16)</span>\n</code></pre>\n"},{"syntax":"getLimited(max)","name":"getLimited","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> max","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Return a copy of this vector with its length (magnitude) restricted to a\nmaximum of 'max' units by scaling down if necessary.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 5.1</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 2.2</span>\nofVec3f v1Limited <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getLimited</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1Limited is (2.9417, 0, 0.58835) which has length of 3 in the same direction as v1</span>\nofVec3f v2Limited <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">getLimited</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v2Limited is (2, 0, 1) (same as v2)</span>\n</code></pre>\n","desc":"<p>Return a copy of this vector with its length (magnitude) restricted to a maximum of 'max' units by scaling down if necessary.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 5.1</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 2.2</span>\nofVec3f v1Limited <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getLimited</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1Limited is (2.9417, 0, 0.58835) which has length of 3 in the same direction as v1</span>\nofVec3f v2Limited <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">getLimited</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v2Limited is (2, 0, 1) (same as v2)</span>\n</code></pre>\n"},{"syntax":"getMapped(&origin, &vx, &vy, &vz)","name":"getMapped","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>origin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vz","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Return a new 'ofVec3f' calculated by copying this vector and then mapping from\nits default coordinate system -- origin (0,0,0), X direction (1,0,0), Y\ndirection (0,1,0), Z direction (0,0,1) -- to a new coordinate system defined\nwith origin at 'origin', X direction 'vx', and Y direction 'vy', and Z\ndirection 'vz'.</p>\n<p><em>In most cases you want 'vx', 'vy', and 'vz' to be perpendicular and of unit\nlength; if they are not perpendicular you will have shearing as part of the\nmapping, and if they are not of unit length you will have scaling as part of\nthe mapping.</em></p>\n","desc":"<p>Return a new 'ofVec3f' calculated by copying this vector and then mapping from its default coordinate system -- origin (0,0,0), X direction (1,0,0), Y direction (0,1,0), Z direction (0,0,1) -- to a new coordinate system defined with origin at 'origin', X direction 'vx', and Y direction 'vy', and Z direction 'vz'.</p>\n<p><em>In most cases you want 'vx', 'vy', and 'vz' to be perpendicular and of unit length; if they are not perpendicular you will have shearing as part of the mapping, and if they are not of unit length you will have scaling as part of the mapping.</em></p>\n"},{"syntax":"getMiddle(&pnt)","name":"getMiddle","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>pnt","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Calculate and return the midpoint between this vector and 'pnt'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f mid <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getMiddle</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// mid gets (7.5, 5, 10)</span>\n</code></pre>\n","desc":"<p>Calculate and return the midpoint between this vector and 'pnt'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f mid <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getMiddle</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// mid gets (7.5, 5, 10)</span>\n</code></pre>\n"},{"syntax":"getNormalized()","name":"getNormalized","returns":"ofVec3f","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Return a normalized copy of this vector.</p>\n<p><em>Normalization</em> means to scale the vector so that its length\n(magnitude) is exactly 1, at which stage all that is left is the\ndirection. A normalized vector is usually called a <em>unit vector</em>, and\ncan be used to represent a pure direction (heading).</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v1Normalized <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (1, 0, 0)</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2Normalized <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (√2, 0, √2)</span>\n</code></pre>\n","desc":"<p>Return a normalized copy of this vector.</p>\n<p><em>Normalization</em> means to scale the vector so that its length (magnitude) is exactly 1, at which stage all that is left is the direction. A normalized vector is usually called a <em>unit vector</em>, and can be used to represent a pure direction (heading).</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v1Normalized <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (1, 0, 0)</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2Normalized <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (√2, 0, √2)</span>\n</code></pre>\n"},{"syntax":"getPerpendicular(&vec)","name":"getPerpendicular","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Construct a plane using this vector and 'vec' (by finding the plane that both\nlectors lie on), and return the vector that is perpendicular to that plane\n(the normal to that plane).</p>\n<pre><code><span class=\"token function\">ofSetLogLevel</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f p <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getPerpendicular</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">%</span><span class=\"token number\">1.1f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span><span class=\"token number\">1.1f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span><span class=\"token number\">1.1f</span>\\n<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// prints &amp;quot;0.0, 0.0, 1.0&amp;quot;</span>\n</code></pre>\n<p>This method is usually used to calculate a normal vector to a surface, which\ncan then be used to calculate lighting, collisions, and other 3D effects.</p>\n","desc":"<p>Construct a plane using this vector and 'vec' (by finding the plane that both lectors lie on), and return the vector that is perpendicular to that plane (the normal to that plane).</p>\n<pre><code><span class=\"token function\">ofSetLogLevel</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f p <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getPerpendicular</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">%</span><span class=\"token number\">1.1f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span><span class=\"token number\">1.1f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span><span class=\"token number\">1.1f</span>\\n<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// prints &amp;quot;0.0, 0.0, 1.0&amp;quot;</span>\n</code></pre>\n<p>This method is usually used to calculate a normal vector to a surface, which can then be used to calculate lighting, collisions, and other 3D effects.</p>\n"},{"syntax":"getPtr()","name":"getPtr","returns":"float *","returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a pointer to the memory position of the first element of the vector\n('x'); the other elements ('y' and 'z') immediately follow it in memory.</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> v1Ptr <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v1Ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// x is 40</span>\n<span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v1Ptr<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// y is 20</span>\n<span class=\"token keyword\">float</span> z <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v1Ptr<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// z is 10</span>\n</code></pre>\n<p>This is very useful when using arrays of 'ofVec3f's to store geometry\ninformation, as it allows the vector to be treated as a simple C array of\n'float's that can be passed verbatim to OpenGL.</p>\n","desc":""},{"syntax":"getPtr()","name":"getPtr","returns":"const float *","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"","desc":"<p>Returns a pointer to the memory position of the first element of the vector  ('x'); the other elements ('y' and 'z') immediately follow it in memory.</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> v1Ptr <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v1Ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// x is 40</span>\n<span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v1Ptr<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// y is 20</span>\n<span class=\"token keyword\">float</span> z <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v1Ptr<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// z is 10</span>\n</code></pre>\n<p>This is very useful when using arrays of 'ofVec3f's to store geometry information, as it allows the vector to be treated as a simple C array of 'float's that can be passed verbatim to OpenGL.</p>\n"},{"syntax":"getRotated(angle, &axis)","name":"getRotated","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>axis","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a new vector that is the result of rotating this vector\nby 'angle' degrees about the given axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (0.707, 0.707, 0)</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (0.707, 0, -0.707)</span>\n</code></pre>\n","desc":"<p>Return a new 'ofVec3f' that is the result of rotating this vector by 'angle' degrees around the given axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// rotate v1 around the z axis</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (√2, √2, 0)</span>\n<span class=\"token comment\" spellcheck=\"true\">// rotate v1 around the y axis</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (√2, 0, √2)</span>\n</code></pre>\n"},{"syntax":"getRotated(angle, &pivot, &axis)","name":"getRotated","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>pivot<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>axis","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"<p>Returns a new vector that is the result of rotating this vector by\n'angle' degrees about the axis specified by 'axis', using 'pivot' as the\norigin of rotation.</p>\n","desc":"<p>Return a new 'ofVec3f' that is the result of rotating this vector by 'angle' degrees around the axis specified by 'axis', using 'pivot' as the origin of rotation.</p>\n"},{"syntax":"getRotated(ax, ay, az)","name":"getRotated","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> ax<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> ay<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> az","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a new vector that is the result of performing an Euler\nrotation of this vector by 'ax' degrees about the x axis, 'ay' degrees\nabout the y axis, and 'az' degrees about the z axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (0.707, 0.707, 0)</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (0.707, 0, -0.707)</span>\n</code></pre>\n<p>Watch out for gimbal lock when specifying multiple rotations in the same call.</p>\n","desc":"<p>Make a copy of this vector and perform an Euler rotation of the copy around three axes: 'ax' degrees about the x axis, 'ay' about the y axis and 'az' about the z axis. Return the copy.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v is now (0, 1, 0)</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v is now (0, √2, √2)</span>\n</code></pre>\n<p>Watch out for gimbal lock when specifying multiple rotations in the same call.</p>\n"},{"syntax":"getRotatedRad(angle, &axis)","name":"getRotatedRad","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>axis","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a new vector that is the result of rotating this vector by\n'angle' radians about the given axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span>PI <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (0.707, 0.707, 0)</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span>PI <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (0.707, 0, -0.707)</span>\n</code></pre>\n","desc":"<p>Return a new 'ofVec3f' that is the result of rotating this vector by 'angle' radians around the given axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// rotate v1 around the z axis</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span>PI<span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (√2, √2, 0)</span>\n<span class=\"token comment\" spellcheck=\"true\">// rotate v1 around the y axis</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span>PI<span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (√2, 0, √2)</span>\n</code></pre>\n"},{"syntax":"getRotatedRad(angle, &pivot, &axis)","name":"getRotatedRad","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>pivot<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>axis","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a new vector that is the result of rotating this vector by\n'angle' radians about the axis specified by 'axis', using 'pivot' as the\norigin of rotation.</p>\n","desc":"<p>Return a new 'ofVec3f' that is the result of rotating this vector by 'angle' radians around the axis specified by 'axis', using 'pivot' as the origin of rotation.</p>\n"},{"syntax":"getRotatedRad(ax, ay, az)","name":"getRotatedRad","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> ax<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> ay<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> az","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a new vector that is the result of performing an Euler\nrotation of this vector by 'ax' radians about the x axis, 'ay' radians\nabout the y axis, and 'az' radians about the z axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotatedRad</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PI <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (0.707, 0.707, 0)</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotatedRad</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PI <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (0.707, 0, -0.707)</span>\n</code></pre>\n<p>Watch out for gimbal lock when specifying multiple rotations in the same call.</p>\n","desc":"<p>Make a copy of this vector and perform an Euler rotation of the copy around three axes: 'ax' radians about the x axis, 'ay' about the y axis and 'az' about the z axis. Return the copy.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotatedRad</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> HALF_PI <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v is now (0, 1, 0)</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotatedRad</span><span class=\"token punctuation\">(</span> PI<span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v is now (0, √2, √2)</span>\n</code></pre>\n<p>Watch out for gimbal lock when specifying multiple rotations in the same call.</p>\n"},{"syntax":"getScaled(length)","name":"getScaled","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Return a new 'ofVec3f' that is the result of scaling this vector up or down so that it has\nthe requested length.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is 5</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getScaled</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (9, 12), which has length of 15</span>\n</code></pre>\n","desc":"<p>Return a new 'ofVec3f' that is the result of scaling this vector up or down so that it has the requested length.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is 5</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getScaled</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (9, 12), which has length of 15</span>\n</code></pre>\n"},{"syntax":"interpolate(&pnt, p)","name":"interpolate","returns":"ofVec3f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>pnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Perform a linear interpolation of this vector's position towards\n'pnt'. 'p' controls the amount to move towards 'pnt'. 'p' is normally\nbetween 0 and 1 and where 0 means stay the original position and 1\nmeans move all the way to 'pnt', but you can also have 'p' greater\nthan 1 overshoot 'pnt', or less than 0 to move backwards away from\n'pnt'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// go go gadget zeno</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (5, 7.5, 10)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (7.5, 8.75, 15)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (8.75, 9.375, 17.5)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (9.375, 9.6875, 18.75)</span>\n</code></pre>\n","desc":"<p>Perform a linear interpolation of this vector's position towards 'pnt'. 'p' controls the amount to move towards 'pnt'. 'p' is normally between 0 and 1 and where 0 means stay the original position and 1 means move all the way to 'pnt', but you can also have 'p' greater than 1 overshoot 'pnt', or less than 0 to move backwards away from 'pnt'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// go go gadget zeno</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (5, 7.5, 10)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (7.5, 8.75, 15)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (8.75, 9.375, 17.5)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (9.375, 9.6875, 18.75)</span>\n</code></pre>\n"},{"syntax":"isAligned(&vec, tolerance = 0.0001f)","name":"isAligned","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance<span class=\"token operator\">=</span><span class=\"token number\">0.0001f</span>","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>/**</p>\n<ul>\n<li>Checks if vectors look in the same direction.\n*/</li>\n</ul>\n","desc":""},{"syntax":"isAlignedRad(&vec, tolerance = 0.0001f)","name":"isAlignedRad","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance<span class=\"token operator\">=</span><span class=\"token number\">0.0001f</span>","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"length()","name":"length","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Return the length (magnitude) of this vector.</p>\n<pre><code>ofVec3f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> len <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// len is 5.0990</span>\n</code></pre>\n<p>`length' involves a square root calculation, which is one of the\nslowest things you can do in programming. If you don't need an exact\nnumber but rather just a rough idea of a length (for example when\nfinding the shortest distance of a bunch of points to a reference\npoint, where it doesn't matter exactly what the lengths are, you just\nwant the shortest), you can use lengthSquared() instead.</p>\n","desc":"<p>Return the length (magnitude) of this vector.</p>\n<pre><code>ofVec3f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> len <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// len is 5.0990</span>\n</code></pre>\n<p>'length' involves a square root calculation, which is one of the slowest things you can do in programming. If you don't need an exact number but rather just a rough idea of a length (for example when finding the shortest distance of a bunch of points to a reference point, where it doesn't matter exactly what the lengths are, you just want the shortest), you can use <a href=\"#squareLength\">'squareLength'</a> instead.</p>\n"},{"syntax":"lengthSquared()","name":"lengthSquared","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":"007","summary":null,"constant":"False","static":"False","visible":"False","advanced":"False","short":"<p>Return the squared length (squared magnitude) of this vector.</p>\n<pre><code>ofVec3f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> len <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// len is 5.0990</span>\n</code></pre>\n<p>Use as a much faster alternative to length() if you don't need\nto know an accurate length but rather just a rough idea of a length (for\nexample when finding the shortest distance of a bunch of points to a\nreference point, where it doesn't matter exactly what the lengths are, you\njust want the shortest). It avoids the square root calculation that is\nordinarily required to calculate a length.</p>\n","desc":"<p>Return the squared length (squared magnitude) of this vector.</p>\n<pre><code>ofVec3f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> len <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// len is 5.0990</span>\n</code></pre>\n<p>Use as a much faster alternative to <a href=\"#length\">'length'</a> if you don't need to know an accurate length but rather just a rough idea of a length (for example when finding the shortest distance of a bunch of points to a reference point, where it doesn't matter exactly what the lengths are, you just want the shortest). It avoids the square root calculation that is ordinarily required to calculate a length.</p>\n"},{"syntax":"limit(max)","name":"limit","returns":"ofVec3f &","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> max","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Restrict the length (magnitude) of this vector to a maximum of 'max'\nunits by scaling down if necessary.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 5.1</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 2.2</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1 is now (2.9417, 0, 0.58835) which has length of 3 in the same direction as at initialization</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v2 is unchanged</span>\n</code></pre>\n","desc":"<p>Restrict the length (magnitude) of this vector to a maximum of 'max' units by scaling down if necessary.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 5.1</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 2.2</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1 is now (2.9417, 0, 0.58835) which has length of 3 in the same direction as at initialization</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v2 is unchanged</span>\n</code></pre>\n"},{"syntax":"map(&origin, &vx, &vy, &vz)","name":"map","returns":"ofVec3f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>origin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vz","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Map this vector from its default coordinate system -- origin (0,0,0), X\ndirection (1,0,0), Y direction (0,1,0), Z direction (0,0,1) -- to a new\ncoordinate system defined with origin at 'origin', X direction 'vx', and Y\ndirection 'vy', and Z direction 'vz'.</p>\n<p><em>In most cases you want 'vx', 'vy', and 'vz' to be perpendicular and of\nunit length; if they are not perpendicular you will have shearing as part\nof the mapping, and if they are not of unit length you will have scaling\nas part of the mapping.</em></p>\n","desc":"<p>Map this vector from its default coordinate system -- origin (0,0,0), X direction (1,0,0), Y direction (0,1,0), Z direction (0,0,1) -- to a new coordinate system defined with origin at 'origin', X direction 'vx', and Y direction 'vy', and Z direction 'vz'.</p>\n<p><em>In most cases you want 'vx', 'vy', and 'vz' to be perpendicular and of unit length; if they are not perpendicular you will have shearing as part of the mapping, and if they are not of unit length you will have scaling as part of the mapping.</em></p>\n"},{"syntax":"match(&vec, tolerance = 0.0001f)","name":"match","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance<span class=\"token operator\">=</span><span class=\"token number\">0.0001f</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"<p>Let you check if two vectors are similar given a tolerance threshold 'tolerance' (default = 0.0001).</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40.01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19.999</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70.05</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1.match(v2, 0.1) is true</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1.match(v2, 0.01) is false (because (70.5-70) </span></code></pre>\n"},{"syntax":"middle(&pnt)","name":"middle","returns":"ofVec3f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>pnt","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set this vector to the midpoint between itself and 'pnt'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// go go gadget zeno</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (5, 7.5, 10)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (7.5, 8.75, 15)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (8.75, 9.375, 17.5)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (9.375, 9.6875, 18.75)</span>\n</code></pre>\n","desc":"<p>Set this vector to the midpoint between itself and 'pnt'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// go go gadget zeno</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (5, 7.5, 10)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (7.5, 8.75, 15)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (8.75, 9.375, 17.5)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (9.375, 9.6875, 18.75)</span>\n</code></pre>\n"},{"syntax":"normalize()","name":"normalize","returns":"ofVec3f &","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Normalize the vector.</p>\n<p><em>Normalizing</em> means to scale the vector so that its length (magnitude)\nis exactly 1, at which stage all that is left is the direction. A\nnormalized vector is usually called a <em>unit vector</em>, and can be used\nto represent a pure direction (heading).</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is now (1, 0, 0)</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is now (√2, 0, √2)</span>\n</code></pre>\n","desc":"<p>Normalize the vector.</p>\n<p><em>Normalizing</em> means to scale the vector so that its length (magnitude) is exactly 1, at which stage all that is left is the direction. A normalized vector is usually called a <em>unit vector</em>, and can be used to represent a pure direction (heading).</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is now (1, 0, 0)</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is now (√2, 0, √2)</span>\n</code></pre>\n"},{"syntax":"ofVec3f(&vec)","name":"ofVec3f","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>//</p>\n","desc":""},{"syntax":"ofVec3f(&vec)","name":"ofVec3f","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Construct a new 3D vector from a 4D vector by\nthrowing away the 'w' component.</p>\n<pre><code>ofVec3f mom <span class=\"token operator\">=</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v is (40, 20, 10)</span>\n</code></pre>\n","desc":"<p>Construct a new 3D vector ('ofxVec3f') from a 4D vector 'vec' by throwing away the 'w' component.</p>\n<pre><code>ofVec3f mom <span class=\"token operator\">=</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v is (40, 20, 10)</span>\n</code></pre>\n"},{"syntax":"ofVec3f(&vec)","name":"ofVec3f","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofVec3f(&vec)","name":"ofVec3f","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofVec3f(&vec)","name":"ofVec3f","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec4 <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofVec3f()","name":"ofVec3f","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Construct a 3D vector. Defaults to (0,0,0).</p>\n<pre><code>ofVec3f v1<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// default: v1.x is 0, v1.y is 0, v1.z is 0</span>\n\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v2.x is 40, v2.y is 20, v2.z is 10</span>\n\nofVec3f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v3.x is 0.1, v3.y is 0.3, v3.z is -1.5</span>\n</code></pre>\n","desc":""},{"syntax":"ofVec3f(scalar)","name":"ofVec3f","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">float</span> scalar","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Construct a 3D vector with <code>x</code>, <code>y</code> and <code>z</code> set to <code>scalar</code></p>\n","desc":""},{"syntax":"ofVec3f(x, y, z)","name":"ofVec3f","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Construt a 3D vector with <code>x</code>, <code>y</code> and <code>z</code> specified</p>\n","desc":"<p>Construct a 3D vector. Defaults to (0,0).</p>\n<pre><code>ofVec3f v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// default: v1.x is 0, v1.y is 0, v1.z is 0</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2.x is 40, v2.y is 20, v2.z is 10</span>\nofVec3f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3.x is 0.1, v3.y is 0.3, v3.z is -1.5</span>\n</code></pre>\n"},{"syntax":"one()","name":"one","returns":"ofVec3f","returns_description":null,"parameters":null,"access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator!=(&vec)","name":"operator!=","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns 'true' if any component is different to its corresponding component in\n'vec', ie if 'x != vec.x' or 'y != vec.y' or 'z != vec.z'; otherwise returns\n'false'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 != v2 ) is true</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 != v3 ) is false</span>\n</code></pre>\n","desc":"<p>Returns 'true' if any component is different to its corresponding component in 'vec', ie if 'x != vec.x' or 'y != vec.y' or 'z != vec.z'; otherwise returns 'false'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 != v2 ) is true</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 != v3 ) is false</span>\n</code></pre>\n"},{"syntax":"operator*(&vec)","name":"operator*","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a new vector ('x'<em>'vec.x','y'</em>'vec.y','z'*'vec.z').</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">inline</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">*</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (80, 80, 100)</span>\n</code></pre>\n<p>Useful for scaling a 3D point by a non-uniform scale.</p>\n","desc":"<p>Returns a new vector ('x'<em>'vec.x','y'</em>'vec.y','z'*'vec.z').</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">*</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (80, 80, 100)</span>\n</code></pre>\n<p>Useful for scaling a 3D point by a non-uniform scale.</p>\n"},{"syntax":"operator*(f)","name":"operator*","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Return a new 'ofVec3f' that is this vector scaled by multiplying 'x', 'y', 'z'\nmembers by 'f'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (8, 20, 4)</span>\n</code></pre>\n","desc":"<p>Return a new 'ofVec3f' that is this vector scaled by multiplying 'x', 'y', 'z' members by 'f'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (8, 20, 4)</span>\n</code></pre>\n"},{"syntax":"operator*=(&vec)","name":"operator*=","returns":"ofVec3f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Multiplies 'x' by 'vec.x', and multiplies 'y' by 'vec.y', and multiplies 'z'\nby 'vec.z'.</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (80, 80, 100)</span>\n</code></pre>\n<p>Useful for scaling a 3D point by a non-uniform scale.</p>\n","desc":"<p>Multiplies 'x' by 'vec.x', and multiplies 'y' by 'vec.y', and multiplies 'z' by 'vec.z'.</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (80, 80, 100)</span>\n</code></pre>\n<p>Useful for scaling a 3D point by a non-uniform scale.</p>\n"},{"syntax":"operator*=(f)","name":"operator*=","returns":"ofVec3f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Scale this vector by multiplying 'x', 'y' and 'z' members by 'f'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (8, 20, 4)</span>\n</code></pre>\n","desc":"<p>Scale this vector by multiplying 'x', 'y' and 'z' members by 'f'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (8, 20, 4)</span>\n</code></pre>\n"},{"syntax":"operator+(&pnt)","name":"operator+","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>pnt","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Super easy vector addition. Returns a new vector\n('x'+'vec.x','y'+'vec.y','z'+'vec.z').</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (65, 70, 20)</span>\n</code></pre>\n","desc":"<p>Super easy vector addition. Returns a new vector ('x'+'vec.x','y'+'vec.y','z'+'vec.z').</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (65, 70, 20)</span>\n</code></pre>\n"},{"syntax":"operator+(f)","name":"operator+","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a new vector with a float value 'f' added to 'x', 'y' and 'z'\nmembers.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (12, 15, 11)</span>\n</code></pre>\n","desc":"<p>Returns a new vector with a float value 'f' added to 'x', 'y' and 'z' members.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (12, 15, 11)</span>\n</code></pre>\n"},{"syntax":"operator+=(&pnt)","name":"operator+=","returns":"ofVec3f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>pnt","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Super easy addition assignment. Adds 'vec.x' to 'x', adds 'vec.y' to 'y' and\nadds 'vec.z' to 'z'.</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">+</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is (65, 70, 20)</span>\n</code></pre>\n","desc":"<p>Super easy addition assignment. Adds 'vec.x' to 'x', adds 'vec.y' to 'y' and adds 'vec.z' to 'z'.</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">+</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is (65, 70, 20)</span>\n</code></pre>\n"},{"syntax":"operator+=(f)","name":"operator+=","returns":"ofVec3f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Adds a float value 'f' to 'x', 'y' and 'z' members.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (12, 15, 11)</span>\n</code></pre>\n","desc":"<p>Adds a float value 'f' to 'x', 'y' and 'z' members.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (12, 15, 11)</span>\n</code></pre>\n"},{"syntax":"operator-(&vec)","name":"operator-","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Super easy vector subtraction. Returns a new vector\n('x'-'vec.x','y'-'vec.y','z'-'vec.z').</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">-</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (15, -30, 0)</span>\n</code></pre>\n","desc":"<p>Super easy vector subtraction. Returns a new vector ('x'-'vec.x','y'-'vec.y','z'-'vec.z').</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">-</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (15, -30, 0)</span>\n</code></pre>\n"},{"syntax":"operator-()","name":"operator-","returns":"ofVec3f","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a new 'ofVec3f' that is the inverted version (mirrored in X, Y and Z)\nof this vector.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (-2, -5, -1)</span>\n</code></pre>\n","desc":"<p>Returns a new 'ofVec3f' that is the inverted version (mirrored in X, Y and Z) of this vector.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (-2, -5, -1)</span>\n</code></pre>\n"},{"syntax":"operator-(f)","name":"operator-","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a new vector with a float value 'f' subtracted from 'x', 'y' and 'z'\nmembers.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (-8, -5, -9)</span>\n</code></pre>\n","desc":"<p>Returns a new vector with a float value 'f' subtracted from 'x', 'y' and 'z' members.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (-8, -5, -9)</span>\n</code></pre>\n"},{"syntax":"operator-=(&vec)","name":"operator-=","returns":"ofVec3f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Super easy subtraction assignment. Subtracts 'vec.x' from 'x', subtracts\n'vec.y' from 'y' and subtracts 'vec.z' from 'z'.</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">-</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is (15, -30, 0)</span>\n</code></pre>\n","desc":"<p>Super easy subtraction assignment. Subtracts 'vec.x' from 'x', subtracts 'vec.y' from 'y' and subtracts 'vec.z' from 'z'.</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">-</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is (15, -30, 0)</span>\n</code></pre>\n"},{"syntax":"operator-=(f)","name":"operator-=","returns":"ofVec3f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Subtract a float value 'f' from 'x', 'y', and 'z' members.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (-8, -5, -9)</span>\n</code></pre>\n","desc":"<p>Subtract a float value 'f' from 'x', 'y', and 'z' members.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (-8, -5, -9)</span>\n</code></pre>\n"},{"syntax":"operator/(&vec)","name":"operator/","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a new vector ('x'/'vec.x','y'/'vec.y','z'/'vec.z').</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">/</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (20, 5, 1)</span>\n</code></pre>\n<p>Useful for scaling a 3D point by a non-uniform scale.</p>\n","desc":"<p>Returns a new vector ('x'/'vec.x','y'/'vec.y','z'/'vec.z').</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">/</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (20, 5, 1)</span>\n</code></pre>\n<p>Useful for scaling a 3D point by a non-uniform scale.</p>\n"},{"syntax":"operator/(f)","name":"operator/","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Return a new 'ofVec3f' that is this vector scaled by dividing 'x', 'y'\nand 'z' members by 'f'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0.5, 1.25, 0.25)</span>\n</code></pre>\n","desc":"<p>Return a new 'ofVec3f' that is this vector scaled by dividing 'x', 'y' and 'z' members by 'f'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0.5, 1.25, 0.25)</span>\n</code></pre>\n"},{"syntax":"operator/=(&vec)","name":"operator/=","returns":"ofVec3f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Divides 'x' by 'vec.x', divides 'y' by 'vec.y', and divides 'z' by 'vec.z'.</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (20, 5, 1)</span>\n</code></pre>\n<p>Useful for scaling a 3D point by a non-uniform scale.</p>\n","desc":"<p>Divides 'x' by 'vec.x', divides 'y' by 'vec.y', and divides 'z' by 'vec.z'.</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (20, 5, 1)</span>\n</code></pre>\n<p>Useful for scaling a 3D point by a non-uniform scale.</p>\n"},{"syntax":"operator/=(f)","name":"operator/=","returns":"ofVec3f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Scale this vector by dividing 'x', 'y' and 'z' members by 'f'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0.5, 1.25, 0.25)</span>\n</code></pre>\n","desc":"<p>Scale this vector by dividing 'x', 'y' and 'z' members by 'f'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0.5, 1.25, 0.25)</span>\n</code></pre>\n"},{"syntax":"operator==(&vec)","name":"operator==","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Check for equality between two ofVec3f</p>\n<p>Returns 'true' if each component is the same as the corresponding component in\n'vec', ie if 'x == vec.x' and 'y == vec.y' and 'z == vec.z'; otherwise returns\n'false'. But you should probably be using <a href=\"#match\">'match'</a> instead.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 == v2 ) is false</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 == v3 ) is true</span>\n</code></pre>\n","desc":"<p>Returns 'true' if each component is the same as the corresponding component in 'vec', ie if 'x == vec.x' and 'y == vec.y' and 'z == vec.z'; otherwise returns 'false'. But you should probably be using <a href=\"#match\">'match'</a> instead.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 == v2 ) is false</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 == v3 ) is true</span>\n</code></pre>\n"},{"syntax":"operator[](n)","name":"operator[]","returns":"float &","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> n","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Allows to access the individual components of an 'ofVec3f' as though it is an\narray</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// x is 40</span>\n<span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// y is 20</span>\n<span class=\"token keyword\">float</span> z <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// z is 10</span>\n</code></pre>\n<p>This function can be handy if you want to do the same operation to all 'x',\n'y' and 'z' components, as it means you can just make a 'for' loop that\nrepeats 3 times.</p>\n","desc":""},{"syntax":"operator[](n)","name":"operator[]","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> n","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"","desc":"<p>Allows to access the individual components of an 'ofVec3f' as though it is an array:</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// x is 40</span>\n<span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// y is 20</span>\n<span class=\"token keyword\">float</span> z <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// z is 10</span>\n</code></pre>\n<p>This function can be handy if you want to do the same operation to all 'x', 'y' and 'z' components, as it means you can just make a 'for' loop that repeats 3 times.</p>\n"},{"syntax":"perpendicular(&vec)","name":"perpendicular","returns":"ofVec3f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Construct a plane using this vector and 'vec' (by finding the plane that both\nlie on), and set our 'x', 'y' and 'z' to be the vector that is perpendicular\nto the constructed plane (the normal to the plane).</p>\n<pre><code><span class=\"token function\">ofSetLogLevel</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">perpendicular</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">%</span><span class=\"token number\">1.1f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span><span class=\"token number\">1.1f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span><span class=\"token number\">1.1f</span>\\n<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// prints &amp;quot;0.0, 0.0, 1.0'</span>\n</code></pre>\n<p>This method is usually used to calculate a normal vector to a surface, which\ncan then be used to calculate lighting, collisions, and other 3D effects.</p>\n","desc":"<p>Construct a plane using this vector and 'vec' (by finding the plane that both lie on), and set our 'x', 'y' and 'z' to be the vector that is perpendicular to the constructed plane (the normal to the plane).</p>\n<pre><code><span class=\"token function\">ofSetLogLevel</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">perpendicular</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">%</span><span class=\"token number\">1.1f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span><span class=\"token number\">1.1f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span><span class=\"token number\">1.1f</span>\\n<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// prints &amp;quot;0.0, 0.0, 1.0'</span>\n</code></pre>\n<p>This method is usually used to calculate a normal vector to a surface, which can then be used to calculate lighting, collisions, and other 3D effects.</p>\n"},{"syntax":"rotate(angle, &axis)","name":"rotate","returns":"ofVec3f &","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>axis","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotates this vector by 'angle' degrees around the given axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (0.707, 0.707, 0)</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is now (0.707, 0, -0.707)</span>\n</code></pre>\n","desc":"<p>Return a new 'ofVec3f' that is the result of rotating this vector by 'angle' degrees around the given axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// rotate v1 around the z axis</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (√2, √2, 0)</span>\n\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// then rotate around the y axis</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (√2, 0, √2)</span>\n</code></pre>\n"},{"syntax":"rotate(angle, &pivot, &axis)","name":"rotate","returns":"ofVec3f &","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>pivot<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>axis","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotates this vector by 'angle' degrees about the axis specified by 'axis',\nusing 'pivot' as the origin of rotation.</p>\n","desc":"<p>Rotate this vector by 'angle' degrees around the axis specified by 'axis', using 'pivot' as the origin of rotation.</p>\n"},{"syntax":"rotate(ax, ay, az)","name":"rotate","returns":"ofVec3f &","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> ax<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> ay<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> az","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Performs an Euler rotation of this vector by 'ax' degrees about the\nx axis, 'ay' degrees about the y axis, and 'az' degrees about the z axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (0.707, 0.707, 0)</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is now (0.707, 0, -0.707)</span>\n</code></pre>\n<p>Watch out for gimbal lock when specifying multiple rotations in the same call.</p>\n","desc":"<p>Perform an Euler rotation of this vector around three axes: 'ax' degrees about the x axis, 'ay' about the y axis and 'az' about the z axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v is now (0, 1, 0)</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v is now (0, √2, √2)</span>\n</code></pre>\n<p>Watch out for gimbal lock when specifying multiple rotations in the same call.</p>\n"},{"syntax":"rotateRad(angle, &axis)","name":"rotateRad","returns":"ofVec3f &","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>axis","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotates this vector by 'angle' radians about the given axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span>PI <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (0.707, 0.707, 0)</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span>PI <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is now (0.707, 0, -0.707)</span>\n</code></pre>\n","desc":"<p>Return a new 'ofVec3f' that is the result of rotating this vector by 'angle' degrees around the given axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// rotate v1 around the z axis</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (√2, √2, 0)</span>\n\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// then rotate around the y axis</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (√2, 0, √2)</span>\n</code></pre>\n"},{"syntax":"rotateRad(angle, &pivot, &axis)","name":"rotateRad","returns":"ofVec3f &","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>pivot<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>axis","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotates this vector by 'angle' radians around the axis specified by 'axis',\nusing 'pivot' as the origin of rotation.</p>\n","desc":"<p>Rotate this vector by 'angle' radians around the axis specified by 'axis', using 'pivot' as the origin of rotation.</p>\n"},{"syntax":"rotateRad(ax, ay, az)","name":"rotateRad","returns":"ofVec3f &","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> ax<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> ay<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> az","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Performs an Euler rotation of this vector by 'ax' radians about\nthe x axis, 'ay' radians about the y axis, and 'az' radians about the z axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PI <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (0.707, 0.707, 0)</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PI <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is now (0.707, 0, -0.707)</span>\n</code></pre>\n<p>Watch out for gimbal lock when specifying multiple rotations in the same call.</p>\n","desc":"<p>Perform an Euler rotation of this vector around three axes: 'ax' radians about the x axis, 'ay' about the y axis and 'az' about the z axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> HALF_PI <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v is now (0, 1, 0)</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span> PI<span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v is now (0, √2, √2)</span>\n</code></pre>\n<p>Watch out for gimbal lock when specifying multiple rotations in the same call.</p>\n"},{"syntax":"scale(length)","name":"scale","returns":"ofVec3f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Scales this vector up or down so that it has the requested length.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is 5</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (9, 12), which has length of 15</span>\n</code></pre>\n","desc":"<p>Scales this vector up or down so that it has the requested length.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is 5</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (9, 12), which has length of 15</span>\n</code></pre>\n"},{"syntax":"set(&vec)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Setting the values by using other 3 dimension vector ofVec3f.</p>\n<pre><code>ofVec3f v1<span class=\"token punctuation\">;</span>\nofVec3f v2<span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n","desc":"<p>Setting the values by using other 3 dimension vector ('ofVec3f').</p>\n<pre><code>ofVec3f v1<span class=\"token punctuation\">;</span>\nofVec3f v2<span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"syntax":"set(_scalar)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> _scalar","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"set(x, y, z)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set 'x', 'y' and 'z' components of this vector with just one function call.\n'z' is optional, it defaults to 0.</p>\n<pre><code>ofVec3f v1<span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n","desc":"<p>Set 'x', 'y' and 'z' components of this vector with just one function call. 'z' is optional, it defaults to 0.</p>\n<pre><code>ofVec3f v1<span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"syntax":"squareDistance(&pnt)","name":"squareDistance","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>pnt","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Treats both this vector and 'pnt' as points in 3D space, and calculates and\nreturns the squared distance between them.</p>\n<pre><code>ofVec3f <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> distance <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span> p2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// distance is 5.8310</span>\n</code></pre>\n<p>Use as a much faster alternative to distance() if you don't need\nto know an exact number but rather just a rough idea of distance (for example\nwhen finding the shortest distance of a bunch of points to a reference point,\nwhere it doesn't matter exactly what the distances are, you just want the\nshortest). It avoids the square root calculation that is ordinarily required\nto calculate a length.</p>\n","desc":"<p>Treats both this vector and 'pnt' as points in 3D space, and calculates and returns the squared distance between them.</p>\n<pre><code>ofVec3f <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> distance <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span> p2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// distance is 5.8310</span>\n</code></pre>\n<p>Use as a much faster alternative to <a href=\"#distance\">'distance'</a> if you don't need to know an exact number but rather just a rough idea of distance (for example when finding the shortest distance of a bunch of points to a reference point, where it doesn't matter exactly what the distances are, you just want the shortest). It avoids the square root calculation that is ordinarily required to calculate a length.</p>\n"},{"syntax":"zero()","name":"zero","returns":"ofVec3f","returns_description":null,"parameters":null,"access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"","desc":""},{"name":"DIM","type":"const int","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\cond INTERNAL</p>\n","desc":""},{"name":"x","type":"float","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>Stores the <code>X</code> component of this vector.</p>\n","desc":"<p>Stores the X component of this vector.</p>\n"},{"name":"y","type":"float","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>Stores the <code>Y</code> component of this vector.</p>\n","desc":"<p>Stores the Y component of this vector.</p>\n"},{"name":"z","type":"float","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>Stores the <code>Z</code> component of this vector.</p>\n","desc":"<p>Stores the Z component of this vector.</p>\n"},{}],"document":"<p>#class ofVec3f</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n_extends: _\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>ofVec3f is a class for storing a three dimensional vector.</p>\n<p>Moving through space requires knowledge of where things are and where they are\ngoing. Vector Maths is the class of mathematics that gives us control over\nthese things in space, allowing for elegant and intuitive descriptions of\ncomplex structures and movement. Vectors are at the heart of animations,\nparticle systems, and 2D and 3D graphics.</p>\n<p>Vectors in mathematics in general are entities with magnitude (also called\nlength) and direction. A vector whose magnitude is 1 (ie a vector that is\n<em>normalized</em>) is called a <em>unit vector</em>. Unit vectors are very handy for\nstoring directions as they can be easily scaled up (or down) to represent\nmotion in a particular direction with a particular length.</p>\n<p><em>You will also see the term 'vector' used to describe an array of objects in\nC++ (such as text strings). Don't let this confuse you, they are quite\ndifferent: one of them is a mathematical term for a fixed-length list of\nnumbers that you can do mathematical operations on, the other is a\nC++-specific term that means 'dynamically sizeable array'.</em></p>\n<p>'ofVec3f has three member variables, x, y, and z, which allow to conveniently\n'store 3D properties of an object such as its position, velocity, or\n'acceleration.</p>\n<pre><code>ofVec3f v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1.x is 0, v1.y is 0, v1.z is 0</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now v1.x is 10, v1.y is 50, v1.z is 80</span>\n</code></pre>\n<p>Using 'ofVec3f' greatly simplifies arithmetic operations in three dimensions.\nFor example if you have two vectors 'v1' and 'v2', both of which represent a\n3D change in position, you can find the total change of position of both of\nthem just by doing an addition 'v1 + v2':</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// so now v1 represents walking 5 steps forward then 2 steps</span>\n<span class=\"token comment\" spellcheck=\"true\">// sideways then 1 step upwards</span>\nofVec3f v2<span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// so now v2 represents walking 1 step forward then 1 step</span>\n<span class=\"token comment\" spellcheck=\"true\">// sideways then 1 step upwards</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// what happens if you do v1 followed by v2?</span>\n<span class=\"token comment\" spellcheck=\"true\">// to find out just add v1 and v2 together:</span>\nofVec3f result <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// result is (6, 3, 1), or 6 steps forward then 3 steps sideways</span>\n<span class=\"token comment\" spellcheck=\"true\">// then 2 steps upwards</span>\n</code></pre>\n<p>You can scale an 'ofVec3f' by multiplying it with a float:</p>\n<pre><code><span class=\"token comment\" spellcheck=\"true\">// walk 5 steps forward then 2 steps sideways then 1 step upwards</span>\nofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// what happens if we do v1 three times?</span>\nofVec3f result <span class=\"token operator\">=</span> v1 <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// result is (15, 6, 3), or</span>\n<span class=\"token comment\" spellcheck=\"true\">// 15 steps forward, 6 steps sideways and 3 steps upwards</span>\n</code></pre>\n<p>This also works for subtraction and division.</p>\n<p>As you can see this really makes dealing with vectors as easy as dealing with\nsingle 'float's or 'int's, and can reduce the number of lines of code you have\nto write by half, at the same time making your code much easier to read and\nunderstand!</p>\n<p><strong>See also</strong>: ofVec2f for 2D vectors</p>\n<p><strong>See also</strong>: ofVec4f for 4D vectors</p>\n<p>##Description</p>\n<p>ofVec3f is a class for storing a three dimensional vector.</p>\n<p>Moving through space requires knowledge of where things are and where they are going. Vector Maths is the class of mathematics that gives us control over these things in space, allowing for elegant and intuitive descriptions of complex structures and movement. Vectors are at the heart of animations, particle systems, and 2D and 3D graphics.</p>\n<p>Vectors in mathematics in general are entities with magnitude (also called length) and direction. A vector whose magnitude is 1 (ie a vector that is <em>normalized</em>) is called a <em>unit vector</em>. Unit vectors are very handy for storing directions as they can be easily scaled up (or down) to represent motion in a particular direction with a particular length.</p>\n<p><em>You will also see the term 'vector' used to describe an array of objects in C++ (such as text strings). Don't let this confuse you, they are quite different: one of them is a mathematical term for a fixed-length list of numbers that you can do mathematical operations on, the other is a C++-specific term that means 'dynamically sizeable array'.</em></p>\n<p>'ofVec3f' has three member variables, 'x', 'y', and 'z', which allow to conveniently store 3D properties of an object such as its position, velocity, or acceleration.</p>\n<pre><code>ofVec3f v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1.x is 0, v1.y is 0, v1.z is 0</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now v1.x is 10, v1.y is 50, v1.z is 80</span>\n</code></pre>\n<p>Using 'ofVec3f' greatly simplifies arithmetic operations in three dimensions. For example if you have two vectors 'v1' and 'v2', both of which represent a 3D change in position, you can find the total change of position of both of them just by doing an addition 'v1 + v2':</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// so now v1 represents walking 5 steps forward then 2 steps</span>\n<span class=\"token comment\" spellcheck=\"true\">// sideways then 1 step upwards</span>\nofVec3f v2<span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// so now v2 represents walking 1 step forward then 1 step</span>\n<span class=\"token comment\" spellcheck=\"true\">// sideways then 1 step upwards</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// what happens if you do v1 followed by v2?</span>\n<span class=\"token comment\" spellcheck=\"true\">// to find out just add v1 and v2 together:</span>\nofVec3f result <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// result is (6, 3, 1), or 6 steps forward then 3 steps sideways</span>\n<span class=\"token comment\" spellcheck=\"true\">// then 2 steps upwards</span>\n</code></pre>\n<p>You can scale an 'ofVec3f' by multiplying it with a float:</p>\n<pre><code><span class=\"token comment\" spellcheck=\"true\">// walk 5 steps forward then 2 steps sideways then 1 step upwards</span>\nofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// what happens if we do v1 three times?</span>\nofVec3f result <span class=\"token operator\">=</span> v1 <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// result is (15, 6, 3), or</span>\n<span class=\"token comment\" spellcheck=\"true\">// 15 steps forward, 6 steps sideways and 3 steps upwards</span>\n\n</code></pre>\n<p>This also works for subtraction and division.</p>\n<p>As you can see this really makes dealing with vectors as easy as dealing with single 'float's or 'int's, and can reduce the number of lines of code you have to write by half, at the same time making your code much easier to read and understand!</p>\n<p>##Methods</p>\n<p>###bool align(&amp;vec, tolerance = 0.0001f)</p>\n<p>&lt;!--\n<em>syntax: align(&amp;vec, tolerance = 0.0001f)</em>\n<em>name: align</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;vec, float tolerance=0.0001f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns 'true' if this vector is pointing in the same direction as\n'vec', with an angle error threshold 'tolerance' in degrees (default\n0.0001 degrees).</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1.align(v2, 0.0) is true</span>\n</code></pre>\n<p>_description: _</p>\n<p>Returns 'true' if this vector is pointing in the same direction as 'vec', with an angle error threshold 'tolerance' in degrees (default 0.0001 degrees).</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1.align(v2, 0.0) is true</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool alignRad(&amp;vec, tolerance = 0.0001f)</p>\n<p>&lt;!--\n<em>syntax: alignRad(&amp;vec, tolerance = 0.0001f)</em>\n<em>name: alignRad</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;vec, float tolerance=0.0001f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns 'true' if this vector is pointing in the same direction\nas 'vec', with an angle error threshold 'tolerance' in radians\n(default 0.0001).</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1.align(v2, 0.0) is true</span>\n</code></pre>\n<p>_description: _</p>\n<p>Returns 'true' if this vector is pointing in the same direction as 'vec', with an angle error threshold 'tolerance' in radians (default 0.0001).</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1.align(v2, 0.0) is true</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float angle(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: angle(&amp;vec)</em>\n<em>name: angle</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Calculate and return the coplanar angle in degrees between this vector\nand 'vec'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">angle</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// angle is 90</span>\n</code></pre>\n<p>_description: _</p>\n<p>Calculate and return the coplanar angle in degrees between this vector and 'vec'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">angle</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// angle is 90</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float angleRad(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: angleRad(&amp;vec)</em>\n<em>name: angleRad</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Calculate and return the coplanar angle in radians between this\nvector and 'vec'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">angle</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// angle is 90</span>\n</code></pre>\n<p>_description: _</p>\n<p>Calculate and return the coplanar angle in radians between this vector and 'vec'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">angle</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// angle is 90</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f &amp; average(*points, num)</p>\n<p>&lt;!--\n<em>syntax: average(*points, num)</em>\n<em>name: average</em>\n<em>returns: ofVec3f &amp;</em>\n_returns_description: _\n<em>parameters: const ofVec3f *points, int num</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets this vector to be the average (<em>centre of gravity</em> or\n<em>centroid</em>) of a given array of 'ofVec3f's. 'points' is the array of\n'ofVec3f's and 'num' specifies the number of 'ofVec3f's in the array.</p>\n<pre><code><span class=\"token keyword\">int</span> numPoints <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nofVec3f points<span class=\"token punctuation\">[</span>numPoints<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>numPoints<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tpoints<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nofVec3f centroid<span class=\"token punctuation\">;</span>\ncentroid<span class=\"token punctuation\">.</span><span class=\"token function\">average</span><span class=\"token punctuation\">(</span> points<span class=\"token punctuation\">,</span> numPoints <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// centroid now is the centre of gravity/average of all the random points</span>\n</code></pre>\n<p>_description: _</p>\n<p>Sets this vector to be the average (<em>centre of gravity</em> or <em>centroid</em>) of a given array of 'ofVec3f's. 'points' is the array of 'ofVec3f's and 'num' specifies the number of 'ofVec3f's in the array.</p>\n<pre><code><span class=\"token keyword\">int</span> numPoints <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nofVec3f points<span class=\"token punctuation\">[</span>numPoints<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>numPoints<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tpoints<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nofVec3f centroid<span class=\"token punctuation\">;</span>\ncentroid<span class=\"token punctuation\">.</span><span class=\"token function\">average</span><span class=\"token punctuation\">(</span> points<span class=\"token punctuation\">,</span> numPoints <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// centroid now is the centre of gravity/average of all the random points</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f &amp; cross(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: cross(&amp;vec)</em>\n<em>name: cross</em>\n<em>returns: ofVec3f &amp;</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set this vector to the cross product (vector product) of itself and\n'vec'. This is a binary operation on two vectors in three-dimensional\nspace, which results in a vector that is perpendicular to both of the\nvectors being multiplied, and normal to the plane containing them. The\nname <em>cross product</em> is derived from the cross symbol X that is often\nused to designate this operation; the alternative name <em>vector\nproduct</em> emphasizes the vector (rather than scalar) nature of the\nresult.</p>\n<p>_description: _</p>\n<p>Set this vector to the cross product (vector product) of itself and 'vec'. This is a binary operation on two vectors in three-dimensional space, which results in a vector that is perpendicular to both of the vectors being multiplied, and normal to the plane containing them. The name <em>cross product</em> is derived from the cross symbol X that is often used to designate this operation; the alternative name <em>vector product</em> emphasizes the vector (rather than scalar) nature of the result.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float distance(&amp;pnt)</p>\n<p>&lt;!--\n<em>syntax: distance(&amp;pnt)</em>\n<em>name: distance</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;pnt</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Treats both this vector and 'pnt' as points in 3D space, and\ncalculates and returns the distance between them.</p>\n<pre><code>ofVec3f <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> distance <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span> p2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// distance is 5.8310</span>\n</code></pre>\n<p>'distance' involves a square root calculation, which is one of the\nslowest things you can do in programming. If you don't need an exact\nnumber but rather just a rough idea of distance (for example when\nfinding the shortest distance of a bunch of points to a reference\npoint, where it doesn't matter exactly what the distances are, you\njust want the shortest), you can use squareDistance() instead.</p>\n<p>_description: _</p>\n<p>Treats both this vector and 'pnt' as points in 3D space, and calculates and returns the distance between them.</p>\n<pre><code>ofVec3f <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> distance <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span> p2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// distance is 5.8310</span>\n</code></pre>\n<p>'distance' involves a square root calculation, which is one of the slowest things you can do in programming. If you don't need an exact number but rather just a rough idea of distance (for example when finding the shortest distance of a bunch of points to a reference point, where it doesn't matter exactly what the distances are, you just want the shortest), you can use <a href=\"#squareDistance\">'squareDistance'</a> instead.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float dot(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: dot(&amp;vec)</em>\n<em>name: dot</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the dot product of this vector with 'vec'.</p>\n<p>The <em>dot product</em> of two vectors, also known as the <em>scalar product</em>, is\nthe product of the magnitude of the two vectors and the cosine of the\nangle between them.</p>\n<p>One interpretation of the dot product is as a measure of how closely two\nvectors align with each other. If they point in exactly the same\ndirection, their dot product will simply be the product of their\nmagnitudes, if they are perpendicular, their dot product will be 0, and\nif they point in opposite directions, their dot product will be\nnegative.</p>\n<p>The dot product is in contrast to the <em>cross product</em>, which returns a\nvector rather than a scalar.</p>\n<pre><code>ofVec3f <span class=\"token function\">a1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// magnitude 2, parallel to x-axis</span>\nofVec3f <span class=\"token function\">b1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// magnitude 5, 53.13 degree angle to a1</span>\n<span class=\"token keyword\">float</span> dot <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dot is 2 * 5 * cos(53.13) = 6.0</span>\n\nofVec3f <span class=\"token function\">a2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// magnitude 1, parallel to x-axis</span>\nofVec3f <span class=\"token function\">b2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// magnitude 1, 90 degree angle to a2</span>\ndot <span class=\"token operator\">=</span> a2<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dot is 1 * 1 * cos(90) = 0.0</span>\n\nofVec3f <span class=\"token function\">a3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// magnitude 1, parallel to y-axis</span>\nofVec3f <span class=\"token function\">b3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// magnitude 1, 180 degree angle to a3</span>\ndot <span class=\"token operator\">=</span> a3<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dot is 1 * 1 * cos(180) = -1.0</span>\n</code></pre>\n<p>_description: _</p>\n<p>Calculate and return the dot product of this vector with 'vec'.</p>\n<p><em>Dot product</em> (less commonly known as <em>Euclidean inner product</em>) expresses the angular relationship between two vectors. In other words it is a measure of how <em>parallel</em> two vectors are. If they are completely perpendicular the dot product is 0; if they are completely parallel their dot product is either 1 if they are pointing in the same direction, or -1 if they are pointing in opposite directions.</p>\n<p><img src=\"../math/dotproduct.png\" alt=\"DOT\">\nImage courtesy of Wikipedia</p>\n<pre><code>ofVec3f <span class=\"token function\">a1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">b1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 90 degree angle to a1</span>\ndot <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dot is 0, ie cos(90)</span>\n\nofVec3f <span class=\"token function\">a2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">b2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 45 degree angle to a2</span>\nb2<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// vectors should to be unit vectors (normalized)</span>\n<span class=\"token keyword\">float</span> dot <span class=\"token operator\">=</span> a2<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dot is 0.707, ie cos(45)</span>\n\nofVec3f <span class=\"token function\">a3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">b3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 180 degree angle to a3</span>\ndot <span class=\"token operator\">=</span> a3<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dot is -1, ie cos(180)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f getCrossed(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: getCrossed(&amp;vec)</em>\n<em>name: getCrossed</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the cross product (vector product) of this vector and 'vec'. This is a\nbinary operation on two vectors in three-dimensional space, which results in a\nvector that is perpendicular to both of the vectors being multiplied, and\nnormal to the plane containing them. The name <em>cross product</em> is derived from\nthe cross symbol X that is often used to designate this operation; the\nalternative name <em>vector product</em> emphasizes the vector (rather than scalar)\nnature of the result.</p>\n<p><img src=\"math/crossproduct.png\" alt=\"CROSS\">\nImage courtesy of Wikipedia</p>\n<p>_description: _</p>\n<p>Returns the cross product (vector product) of this vector and 'vec'. This is a binary operation on two vectors in three-dimensional space, which results in a vector that is perpendicular to both of the vectors being multiplied, and normal to the plane containing them. The name <em>cross product</em> is derived from the cross symbol X that is often used to designate this operation; the alternative name <em>vector product</em> emphasizes the vector (rather than scalar) nature of the result.</p>\n<p><img src=\"../math/crossproduct.png\" alt=\"CROSS\">\nImage courtesy of Wikipedia</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f getInterpolated(&amp;pnt, p)</p>\n<p>&lt;!--\n<em>syntax: getInterpolated(&amp;pnt, p)</em>\n<em>name: getInterpolated</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;pnt, float p</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Perform a linear interpolation of this vector's position towards 'pnt'\nand return the interpolated vector without altering the original. 'p'\ncontrols the amount to move towards 'pnt'. 'p' is normally between 0\nand 1 and where 0 means stay the original position and 1 means move\nall the way to 'pnt', but you can also have 'p' greater than 1\novershoot 'pnt', or less than 0 to move backwards away from 'pnt'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getInterpolated</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (5, 7.5, 10)</span>\nofVec3f v4 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getInterpolated</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v4 is (8, 9, 16)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Perform a linear interpolation of this vector's position towards 'pnt' and return the interpolated vector without altering the original. 'p' controls the amount to move towards 'pnt'. 'p' is normally between 0 and 1 and where 0 means stay the original position and 1 means move all the way to 'pnt', but you can also have 'p' greater than 1 overshoot 'pnt', or less than 0 to move backwards away from 'pnt'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getInterpolated</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (5, 7.5, 10)</span>\nofVec3f v4 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getInterpolated</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v4 is (8, 9, 16)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f getLimited(max)</p>\n<p>&lt;!--\n<em>syntax: getLimited(max)</em>\n<em>name: getLimited</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n<em>parameters: float max</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return a copy of this vector with its length (magnitude) restricted to a\nmaximum of 'max' units by scaling down if necessary.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 5.1</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 2.2</span>\nofVec3f v1Limited <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getLimited</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1Limited is (2.9417, 0, 0.58835) which has length of 3 in the same direction as v1</span>\nofVec3f v2Limited <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">getLimited</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v2Limited is (2, 0, 1) (same as v2)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Return a copy of this vector with its length (magnitude) restricted to a maximum of 'max' units by scaling down if necessary.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 5.1</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 2.2</span>\nofVec3f v1Limited <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getLimited</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1Limited is (2.9417, 0, 0.58835) which has length of 3 in the same direction as v1</span>\nofVec3f v2Limited <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">getLimited</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v2Limited is (2, 0, 1) (same as v2)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f getMapped(&amp;origin, &amp;vx, &amp;vy, &amp;vz)</p>\n<p>&lt;!--\n<em>syntax: getMapped(&amp;origin, &amp;vx, &amp;vy, &amp;vz)</em>\n<em>name: getMapped</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;origin, const ofVec3f &amp;vx, const ofVec3f &amp;vy, const ofVec3f &amp;vz</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return a new 'ofVec3f' calculated by copying this vector and then mapping from\nits default coordinate system -- origin (0,0,0), X direction (1,0,0), Y\ndirection (0,1,0), Z direction (0,0,1) -- to a new coordinate system defined\nwith origin at 'origin', X direction 'vx', and Y direction 'vy', and Z\ndirection 'vz'.</p>\n<p><em>In most cases you want 'vx', 'vy', and 'vz' to be perpendicular and of unit\nlength; if they are not perpendicular you will have shearing as part of the\nmapping, and if they are not of unit length you will have scaling as part of\nthe mapping.</em></p>\n<p>_description: _</p>\n<p>Return a new 'ofVec3f' calculated by copying this vector and then mapping from its default coordinate system -- origin (0,0,0), X direction (1,0,0), Y direction (0,1,0), Z direction (0,0,1) -- to a new coordinate system defined with origin at 'origin', X direction 'vx', and Y direction 'vy', and Z direction 'vz'.</p>\n<p><em>In most cases you want 'vx', 'vy', and 'vz' to be perpendicular and of unit length; if they are not perpendicular you will have shearing as part of the mapping, and if they are not of unit length you will have scaling as part of the mapping.</em></p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f getMiddle(&amp;pnt)</p>\n<p>&lt;!--\n<em>syntax: getMiddle(&amp;pnt)</em>\n<em>name: getMiddle</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;pnt</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Calculate and return the midpoint between this vector and 'pnt'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f mid <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getMiddle</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// mid gets (7.5, 5, 10)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Calculate and return the midpoint between this vector and 'pnt'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f mid <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getMiddle</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// mid gets (7.5, 5, 10)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f getNormalized()</p>\n<p>&lt;!--\n<em>syntax: getNormalized()</em>\n<em>name: getNormalized</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return a normalized copy of this vector.</p>\n<p><em>Normalization</em> means to scale the vector so that its length\n(magnitude) is exactly 1, at which stage all that is left is the\ndirection. A normalized vector is usually called a <em>unit vector</em>, and\ncan be used to represent a pure direction (heading).</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v1Normalized <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (1, 0, 0)</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2Normalized <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (√2, 0, √2)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Return a normalized copy of this vector.</p>\n<p><em>Normalization</em> means to scale the vector so that its length (magnitude) is exactly 1, at which stage all that is left is the direction. A normalized vector is usually called a <em>unit vector</em>, and can be used to represent a pure direction (heading).</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v1Normalized <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (1, 0, 0)</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2Normalized <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (√2, 0, √2)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f getPerpendicular(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: getPerpendicular(&amp;vec)</em>\n<em>name: getPerpendicular</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Construct a plane using this vector and 'vec' (by finding the plane that both\nlectors lie on), and return the vector that is perpendicular to that plane\n(the normal to that plane).</p>\n<pre><code><span class=\"token function\">ofSetLogLevel</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f p <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getPerpendicular</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">%</span><span class=\"token number\">1.1f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span><span class=\"token number\">1.1f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span><span class=\"token number\">1.1f</span>\\n<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// prints &amp;quot;0.0, 0.0, 1.0&amp;quot;</span>\n</code></pre>\n<p>This method is usually used to calculate a normal vector to a surface, which\ncan then be used to calculate lighting, collisions, and other 3D effects.</p>\n<p>_description: _</p>\n<p>Construct a plane using this vector and 'vec' (by finding the plane that both lectors lie on), and return the vector that is perpendicular to that plane (the normal to that plane).</p>\n<pre><code><span class=\"token function\">ofSetLogLevel</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f p <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getPerpendicular</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">%</span><span class=\"token number\">1.1f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span><span class=\"token number\">1.1f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span><span class=\"token number\">1.1f</span>\\n<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// prints &amp;quot;0.0, 0.0, 1.0&amp;quot;</span>\n</code></pre>\n<p>This method is usually used to calculate a normal vector to a surface, which can then be used to calculate lighting, collisions, and other 3D effects.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float * getPtr()</p>\n<p>&lt;!--\n<em>syntax: getPtr()</em>\n<em>name: getPtr</em>\n<em>returns: float *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a pointer to the memory position of the first element of the vector\n('x'); the other elements ('y' and 'z') immediately follow it in memory.</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> v1Ptr <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v1Ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// x is 40</span>\n<span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v1Ptr<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// y is 20</span>\n<span class=\"token keyword\">float</span> z <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v1Ptr<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// z is 10</span>\n</code></pre>\n<p>This is very useful when using arrays of 'ofVec3f's to store geometry\ninformation, as it allows the vector to be treated as a simple C array of\n'float's that can be passed verbatim to OpenGL.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const float * getPtr()</p>\n<p>&lt;!--\n<em>syntax: getPtr()</em>\n<em>name: getPtr</em>\n<em>returns: const float *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns a pointer to the memory position of the first element of the vector  ('x'); the other elements ('y' and 'z') immediately follow it in memory.</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> v1Ptr <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v1Ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// x is 40</span>\n<span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v1Ptr<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// y is 20</span>\n<span class=\"token keyword\">float</span> z <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v1Ptr<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// z is 10</span>\n</code></pre>\n<p>This is very useful when using arrays of 'ofVec3f's to store geometry information, as it allows the vector to be treated as a simple C array of 'float's that can be passed verbatim to OpenGL.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f getRotated(angle, &amp;axis)</p>\n<p>&lt;!--\n<em>syntax: getRotated(angle, &amp;axis)</em>\n<em>name: getRotated</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n<em>parameters: float angle, const ofVec3f &amp;axis</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a new vector that is the result of rotating this vector\nby 'angle' degrees about the given axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (0.707, 0.707, 0)</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (0.707, 0, -0.707)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Return a new 'ofVec3f' that is the result of rotating this vector by 'angle' degrees around the given axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// rotate v1 around the z axis</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (√2, √2, 0)</span>\n<span class=\"token comment\" spellcheck=\"true\">// rotate v1 around the y axis</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (√2, 0, √2)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f getRotated(angle, &amp;pivot, &amp;axis)</p>\n<p>&lt;!--\n<em>syntax: getRotated(angle, &amp;pivot, &amp;axis)</em>\n<em>name: getRotated</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n<em>parameters: float angle, const ofVec3f &amp;pivot, const ofVec3f &amp;axis</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a new vector that is the result of rotating this vector by\n'angle' degrees about the axis specified by 'axis', using 'pivot' as the\norigin of rotation.</p>\n<p>_description: _</p>\n<p>Return a new 'ofVec3f' that is the result of rotating this vector by 'angle' degrees around the axis specified by 'axis', using 'pivot' as the origin of rotation.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f getRotated(ax, ay, az)</p>\n<p>&lt;!--\n<em>syntax: getRotated(ax, ay, az)</em>\n<em>name: getRotated</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n<em>parameters: float ax, float ay, float az</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a new vector that is the result of performing an Euler\nrotation of this vector by 'ax' degrees about the x axis, 'ay' degrees\nabout the y axis, and 'az' degrees about the z axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (0.707, 0.707, 0)</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (0.707, 0, -0.707)</span>\n</code></pre>\n<p>Watch out for gimbal lock when specifying multiple rotations in the same call.</p>\n<p>_description: _</p>\n<p>Make a copy of this vector and perform an Euler rotation of the copy around three axes: 'ax' degrees about the x axis, 'ay' about the y axis and 'az' about the z axis. Return the copy.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v is now (0, 1, 0)</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v is now (0, √2, √2)</span>\n</code></pre>\n<p>Watch out for gimbal lock when specifying multiple rotations in the same call.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f getRotatedRad(angle, &amp;axis)</p>\n<p>&lt;!--\n<em>syntax: getRotatedRad(angle, &amp;axis)</em>\n<em>name: getRotatedRad</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n<em>parameters: float angle, const ofVec3f &amp;axis</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a new vector that is the result of rotating this vector by\n'angle' radians about the given axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span>PI <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (0.707, 0.707, 0)</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span>PI <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (0.707, 0, -0.707)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Return a new 'ofVec3f' that is the result of rotating this vector by 'angle' radians around the given axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// rotate v1 around the z axis</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span>PI<span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (√2, √2, 0)</span>\n<span class=\"token comment\" spellcheck=\"true\">// rotate v1 around the y axis</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span>PI<span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (√2, 0, √2)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f getRotatedRad(angle, &amp;pivot, &amp;axis)</p>\n<p>&lt;!--\n<em>syntax: getRotatedRad(angle, &amp;pivot, &amp;axis)</em>\n<em>name: getRotatedRad</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n<em>parameters: float angle, const ofVec3f &amp;pivot, const ofVec3f &amp;axis</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a new vector that is the result of rotating this vector by\n'angle' radians about the axis specified by 'axis', using 'pivot' as the\norigin of rotation.</p>\n<p>_description: _</p>\n<p>Return a new 'ofVec3f' that is the result of rotating this vector by 'angle' radians around the axis specified by 'axis', using 'pivot' as the origin of rotation.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f getRotatedRad(ax, ay, az)</p>\n<p>&lt;!--\n<em>syntax: getRotatedRad(ax, ay, az)</em>\n<em>name: getRotatedRad</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n<em>parameters: float ax, float ay, float az</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a new vector that is the result of performing an Euler\nrotation of this vector by 'ax' radians about the x axis, 'ay' radians\nabout the y axis, and 'az' radians about the z axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotatedRad</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PI <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (0.707, 0.707, 0)</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotatedRad</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PI <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (0.707, 0, -0.707)</span>\n</code></pre>\n<p>Watch out for gimbal lock when specifying multiple rotations in the same call.</p>\n<p>_description: _</p>\n<p>Make a copy of this vector and perform an Euler rotation of the copy around three axes: 'ax' radians about the x axis, 'ay' about the y axis and 'az' about the z axis. Return the copy.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotatedRad</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> HALF_PI <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v is now (0, 1, 0)</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotatedRad</span><span class=\"token punctuation\">(</span> PI<span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v is now (0, √2, √2)</span>\n</code></pre>\n<p>Watch out for gimbal lock when specifying multiple rotations in the same call.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f getScaled(length)</p>\n<p>&lt;!--\n<em>syntax: getScaled(length)</em>\n<em>name: getScaled</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n<em>parameters: const float length</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return a new 'ofVec3f' that is the result of scaling this vector up or down so that it has\nthe requested length.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is 5</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getScaled</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (9, 12), which has length of 15</span>\n</code></pre>\n<p>_description: _</p>\n<p>Return a new 'ofVec3f' that is the result of scaling this vector up or down so that it has the requested length.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is 5</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getScaled</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (9, 12), which has length of 15</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f &amp; interpolate(&amp;pnt, p)</p>\n<p>&lt;!--\n<em>syntax: interpolate(&amp;pnt, p)</em>\n<em>name: interpolate</em>\n<em>returns: ofVec3f &amp;</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;pnt, float p</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Perform a linear interpolation of this vector's position towards\n'pnt'. 'p' controls the amount to move towards 'pnt'. 'p' is normally\nbetween 0 and 1 and where 0 means stay the original position and 1\nmeans move all the way to 'pnt', but you can also have 'p' greater\nthan 1 overshoot 'pnt', or less than 0 to move backwards away from\n'pnt'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// go go gadget zeno</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (5, 7.5, 10)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (7.5, 8.75, 15)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (8.75, 9.375, 17.5)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (9.375, 9.6875, 18.75)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Perform a linear interpolation of this vector's position towards 'pnt'. 'p' controls the amount to move towards 'pnt'. 'p' is normally between 0 and 1 and where 0 means stay the original position and 1 means move all the way to 'pnt', but you can also have 'p' greater than 1 overshoot 'pnt', or less than 0 to move backwards away from 'pnt'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// go go gadget zeno</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (5, 7.5, 10)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (7.5, 8.75, 15)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (8.75, 9.375, 17.5)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (9.375, 9.6875, 18.75)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isAligned(&amp;vec, tolerance = 0.0001f)</p>\n<p>&lt;!--\n<em>syntax: isAligned(&amp;vec, tolerance = 0.0001f)</em>\n<em>name: isAligned</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;vec, float tolerance=0.0001f</em>\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>/**</p>\n<ul>\n<li>Checks if vectors look in the same direction.\n*/</li>\n</ul>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isAlignedRad(&amp;vec, tolerance = 0.0001f)</p>\n<p>&lt;!--\n<em>syntax: isAlignedRad(&amp;vec, tolerance = 0.0001f)</em>\n<em>name: isAlignedRad</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;vec, float tolerance=0.0001f</em>\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float length()</p>\n<p>&lt;!--\n<em>syntax: length()</em>\n<em>name: length</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return the length (magnitude) of this vector.</p>\n<pre><code>ofVec3f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> len <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// len is 5.0990</span>\n</code></pre>\n<p>`length' involves a square root calculation, which is one of the\nslowest things you can do in programming. If you don't need an exact\nnumber but rather just a rough idea of a length (for example when\nfinding the shortest distance of a bunch of points to a reference\npoint, where it doesn't matter exactly what the lengths are, you just\nwant the shortest), you can use lengthSquared() instead.</p>\n<p>_description: _</p>\n<p>Return the length (magnitude) of this vector.</p>\n<pre><code>ofVec3f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> len <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// len is 5.0990</span>\n</code></pre>\n<p>'length' involves a square root calculation, which is one of the slowest things you can do in programming. If you don't need an exact number but rather just a rough idea of a length (for example when finding the shortest distance of a bunch of points to a reference point, where it doesn't matter exactly what the lengths are, you just want the shortest), you can use <a href=\"#squareLength\">'squareLength'</a> instead.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float lengthSquared()</p>\n<p>&lt;!--\n<em>syntax: lengthSquared()</em>\n<em>name: lengthSquared</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n<em>version_deprecated: 007</em>\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return the squared length (squared magnitude) of this vector.</p>\n<pre><code>ofVec3f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> len <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// len is 5.0990</span>\n</code></pre>\n<p>Use as a much faster alternative to length() if you don't need\nto know an accurate length but rather just a rough idea of a length (for\nexample when finding the shortest distance of a bunch of points to a\nreference point, where it doesn't matter exactly what the lengths are, you\njust want the shortest). It avoids the square root calculation that is\nordinarily required to calculate a length.</p>\n<p>_description: _</p>\n<p>Return the squared length (squared magnitude) of this vector.</p>\n<pre><code>ofVec3f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> len <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// len is 5.0990</span>\n</code></pre>\n<p>Use as a much faster alternative to <a href=\"#length\">'length'</a> if you don't need to know an accurate length but rather just a rough idea of a length (for example when finding the shortest distance of a bunch of points to a reference point, where it doesn't matter exactly what the lengths are, you just want the shortest). It avoids the square root calculation that is ordinarily required to calculate a length.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f &amp; limit(max)</p>\n<p>&lt;!--\n<em>syntax: limit(max)</em>\n<em>name: limit</em>\n<em>returns: ofVec3f &amp;</em>\n_returns_description: _\n<em>parameters: float max</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Restrict the length (magnitude) of this vector to a maximum of 'max'\nunits by scaling down if necessary.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 5.1</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 2.2</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1 is now (2.9417, 0, 0.58835) which has length of 3 in the same direction as at initialization</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v2 is unchanged</span>\n</code></pre>\n<p>_description: _</p>\n<p>Restrict the length (magnitude) of this vector to a maximum of 'max' units by scaling down if necessary.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 5.1</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 2.2</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1 is now (2.9417, 0, 0.58835) which has length of 3 in the same direction as at initialization</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v2 is unchanged</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f &amp; map(&amp;origin, &amp;vx, &amp;vy, &amp;vz)</p>\n<p>&lt;!--\n<em>syntax: map(&amp;origin, &amp;vx, &amp;vy, &amp;vz)</em>\n<em>name: map</em>\n<em>returns: ofVec3f &amp;</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;origin, const ofVec3f &amp;vx, const ofVec3f &amp;vy, const ofVec3f &amp;vz</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Map this vector from its default coordinate system -- origin (0,0,0), X\ndirection (1,0,0), Y direction (0,1,0), Z direction (0,0,1) -- to a new\ncoordinate system defined with origin at 'origin', X direction 'vx', and Y\ndirection 'vy', and Z direction 'vz'.</p>\n<p><em>In most cases you want 'vx', 'vy', and 'vz' to be perpendicular and of\nunit length; if they are not perpendicular you will have shearing as part\nof the mapping, and if they are not of unit length you will have scaling\nas part of the mapping.</em></p>\n<p>_description: _</p>\n<p>Map this vector from its default coordinate system -- origin (0,0,0), X direction (1,0,0), Y direction (0,1,0), Z direction (0,0,1) -- to a new coordinate system defined with origin at 'origin', X direction 'vx', and Y direction 'vy', and Z direction 'vz'.</p>\n<p><em>In most cases you want 'vx', 'vy', and 'vz' to be perpendicular and of unit length; if they are not perpendicular you will have shearing as part of the mapping, and if they are not of unit length you will have scaling as part of the mapping.</em></p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool match(&amp;vec, tolerance = 0.0001f)</p>\n<p>&lt;!--\n<em>syntax: match(&amp;vec, tolerance = 0.0001f)</em>\n<em>name: match</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;vec, float tolerance=0.0001f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Let you check if two vectors are similar given a tolerance threshold\n'tolerance' (default = 0.0001).</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40.01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19.999</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70.05</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1.match(v2, 0.1) is true</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1.match(v2, 0.01) is false (because (70.5-70) &amp;gt; 0.01)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Let you check if two vectors are similar given a tolerance threshold 'tolerance' (default = 0.0001).</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40.01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19.999</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70.05</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1.match(v2, 0.1) is true</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1.match(v2, 0.01) is false (because (70.5-70) &amp;gt; 0.01)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f &amp; middle(&amp;pnt)</p>\n<p>&lt;!--\n<em>syntax: middle(&amp;pnt)</em>\n<em>name: middle</em>\n<em>returns: ofVec3f &amp;</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;pnt</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set this vector to the midpoint between itself and 'pnt'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// go go gadget zeno</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (5, 7.5, 10)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (7.5, 8.75, 15)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (8.75, 9.375, 17.5)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (9.375, 9.6875, 18.75)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Set this vector to the midpoint between itself and 'pnt'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// go go gadget zeno</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (5, 7.5, 10)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (7.5, 8.75, 15)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (8.75, 9.375, 17.5)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (9.375, 9.6875, 18.75)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f &amp; normalize()</p>\n<p>&lt;!--\n<em>syntax: normalize()</em>\n<em>name: normalize</em>\n<em>returns: ofVec3f &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Normalize the vector.</p>\n<p><em>Normalizing</em> means to scale the vector so that its length (magnitude)\nis exactly 1, at which stage all that is left is the direction. A\nnormalized vector is usually called a <em>unit vector</em>, and can be used\nto represent a pure direction (heading).</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is now (1, 0, 0)</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is now (√2, 0, √2)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Normalize the vector.</p>\n<p><em>Normalizing</em> means to scale the vector so that its length (magnitude) is exactly 1, at which stage all that is left is the direction. A normalized vector is usually called a <em>unit vector</em>, and can be used to represent a pure direction (heading).</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is now (1, 0, 0)</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is now (√2, 0, √2)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVec3f(&amp;vec)</h3>\n<p>&lt;!--\n<em>syntax: ofVec3f(&amp;vec)</em>\n<em>name: ofVec3f</em>\n_returns: _\n_returns_description: _\n<em>parameters: const ofVec2f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>//</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVec3f(&amp;vec)</h3>\n<p>&lt;!--\n<em>syntax: ofVec3f(&amp;vec)</em>\n<em>name: ofVec3f</em>\n_returns: _\n_returns_description: _\n<em>parameters: const ofVec4f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Construct a new 3D vector from a 4D vector by\nthrowing away the 'w' component.</p>\n<pre><code>ofVec3f mom <span class=\"token operator\">=</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v is (40, 20, 10)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Construct a new 3D vector ('ofxVec3f') from a 4D vector 'vec' by throwing away the 'w' component.</p>\n<pre><code>ofVec3f mom <span class=\"token operator\">=</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v is (40, 20, 10)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVec3f(&amp;vec)</h3>\n<p>&lt;!--\n<em>syntax: ofVec3f(&amp;vec)</em>\n<em>name: ofVec3f</em>\n_returns: _\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVec3f(&amp;vec)</h3>\n<p>&lt;!--\n<em>syntax: ofVec3f(&amp;vec)</em>\n<em>name: ofVec3f</em>\n_returns: _\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVec3f(&amp;vec)</h3>\n<p>&lt;!--\n<em>syntax: ofVec3f(&amp;vec)</em>\n<em>name: ofVec3f</em>\n_returns: _\n_returns_description: _\n<em>parameters: const glm::vec4 &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVec3f()</h3>\n<p>&lt;!--\n<em>syntax: ofVec3f()</em>\n<em>name: ofVec3f</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Construct a 3D vector. Defaults to (0,0,0).</p>\n<pre><code>ofVec3f v1<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// default: v1.x is 0, v1.y is 0, v1.z is 0</span>\n\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v2.x is 40, v2.y is 20, v2.z is 10</span>\n\nofVec3f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v3.x is 0.1, v3.y is 0.3, v3.z is -1.5</span>\n</code></pre>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVec3f(scalar)</h3>\n<p>&lt;!--\n<em>syntax: ofVec3f(scalar)</em>\n<em>name: ofVec3f</em>\n_returns: _\n_returns_description: _\n<em>parameters: float scalar</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Construct a 3D vector with <code>x</code>, <code>y</code> and <code>z</code> set to <code>scalar</code></p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVec3f(x, y, z)</h3>\n<p>&lt;!--\n<em>syntax: ofVec3f(x, y, z)</em>\n<em>name: ofVec3f</em>\n_returns: _\n_returns_description: _\n<em>parameters: float x, float y, float z</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Construt a 3D vector with <code>x</code>, <code>y</code> and <code>z</code> specified</p>\n<p>_description: _</p>\n<p>Construct a 3D vector. Defaults to (0,0).</p>\n<pre><code>ofVec3f v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// default: v1.x is 0, v1.y is 0, v1.z is 0</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2.x is 40, v2.y is 20, v2.z is 10</span>\nofVec3f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3.x is 0.1, v3.y is 0.3, v3.z is -1.5</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f one()</p>\n<p>&lt;!--\n<em>syntax: one()</em>\n<em>name: one</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool operator!=(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator!=(&amp;vec)</em>\n<em>name: operator!=</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns 'true' if any component is different to its corresponding component in\n'vec', ie if 'x != vec.x' or 'y != vec.y' or 'z != vec.z'; otherwise returns\n'false'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 != v2 ) is true</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 != v3 ) is false</span>\n</code></pre>\n<p>_description: _</p>\n<p>Returns 'true' if any component is different to its corresponding component in 'vec', ie if 'x != vec.x' or 'y != vec.y' or 'z != vec.z'; otherwise returns 'false'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 != v2 ) is true</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 != v3 ) is false</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f operator*(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator*(&amp;vec)</em>\n<em>name: operator*</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a new vector ('x'<em>'vec.x','y'</em>'vec.y','z'*'vec.z').</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">inline</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">*</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (80, 80, 100)</span>\n</code></pre>\n<p>Useful for scaling a 3D point by a non-uniform scale.</p>\n<p>_description: _</p>\n<p>Returns a new vector ('x'<em>'vec.x','y'</em>'vec.y','z'*'vec.z').</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">*</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (80, 80, 100)</span>\n</code></pre>\n<p>Useful for scaling a 3D point by a non-uniform scale.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f operator*(f)</p>\n<p>&lt;!--\n<em>syntax: operator*(f)</em>\n<em>name: operator*</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n<em>parameters: const float f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return a new 'ofVec3f' that is this vector scaled by multiplying 'x', 'y', 'z'\nmembers by 'f'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (8, 20, 4)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Return a new 'ofVec3f' that is this vector scaled by multiplying 'x', 'y', 'z' members by 'f'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (8, 20, 4)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f &amp; operator*=(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator*=(&amp;vec)</em>\n<em>name: operator*=</em>\n<em>returns: ofVec3f &amp;</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Multiplies 'x' by 'vec.x', and multiplies 'y' by 'vec.y', and multiplies 'z'\nby 'vec.z'.</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (80, 80, 100)</span>\n</code></pre>\n<p>Useful for scaling a 3D point by a non-uniform scale.</p>\n<p>_description: _</p>\n<p>Multiplies 'x' by 'vec.x', and multiplies 'y' by 'vec.y', and multiplies 'z' by 'vec.z'.</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (80, 80, 100)</span>\n</code></pre>\n<p>Useful for scaling a 3D point by a non-uniform scale.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f &amp; operator*=(f)</p>\n<p>&lt;!--\n<em>syntax: operator*=(f)</em>\n<em>name: operator*=</em>\n<em>returns: ofVec3f &amp;</em>\n_returns_description: _\n<em>parameters: const float f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Scale this vector by multiplying 'x', 'y' and 'z' members by 'f'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (8, 20, 4)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Scale this vector by multiplying 'x', 'y' and 'z' members by 'f'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (8, 20, 4)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f operator+(&amp;pnt)</p>\n<p>&lt;!--\n<em>syntax: operator+(&amp;pnt)</em>\n<em>name: operator+</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;pnt</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Super easy vector addition. Returns a new vector\n('x'+'vec.x','y'+'vec.y','z'+'vec.z').</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (65, 70, 20)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Super easy vector addition. Returns a new vector ('x'+'vec.x','y'+'vec.y','z'+'vec.z').</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (65, 70, 20)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f operator+(f)</p>\n<p>&lt;!--\n<em>syntax: operator+(f)</em>\n<em>name: operator+</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n<em>parameters: const float f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a new vector with a float value 'f' added to 'x', 'y' and 'z'\nmembers.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (12, 15, 11)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Returns a new vector with a float value 'f' added to 'x', 'y' and 'z' members.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (12, 15, 11)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f &amp; operator+=(&amp;pnt)</p>\n<p>&lt;!--\n<em>syntax: operator+=(&amp;pnt)</em>\n<em>name: operator+=</em>\n<em>returns: ofVec3f &amp;</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;pnt</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Super easy addition assignment. Adds 'vec.x' to 'x', adds 'vec.y' to 'y' and\nadds 'vec.z' to 'z'.</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">+</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is (65, 70, 20)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Super easy addition assignment. Adds 'vec.x' to 'x', adds 'vec.y' to 'y' and adds 'vec.z' to 'z'.</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">+</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is (65, 70, 20)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f &amp; operator+=(f)</p>\n<p>&lt;!--\n<em>syntax: operator+=(f)</em>\n<em>name: operator+=</em>\n<em>returns: ofVec3f &amp;</em>\n_returns_description: _\n<em>parameters: const float f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Adds a float value 'f' to 'x', 'y' and 'z' members.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (12, 15, 11)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Adds a float value 'f' to 'x', 'y' and 'z' members.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (12, 15, 11)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f operator-(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator-(&amp;vec)</em>\n<em>name: operator-</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Super easy vector subtraction. Returns a new vector\n('x'-'vec.x','y'-'vec.y','z'-'vec.z').</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">-</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (15, -30, 0)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Super easy vector subtraction. Returns a new vector ('x'-'vec.x','y'-'vec.y','z'-'vec.z').</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">-</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (15, -30, 0)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f operator-()</p>\n<p>&lt;!--\n<em>syntax: operator-()</em>\n<em>name: operator-</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a new 'ofVec3f' that is the inverted version (mirrored in X, Y and Z)\nof this vector.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (-2, -5, -1)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Returns a new 'ofVec3f' that is the inverted version (mirrored in X, Y and Z) of this vector.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (-2, -5, -1)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f operator-(f)</p>\n<p>&lt;!--\n<em>syntax: operator-(f)</em>\n<em>name: operator-</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n<em>parameters: const float f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a new vector with a float value 'f' subtracted from 'x', 'y' and 'z'\nmembers.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (-8, -5, -9)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Returns a new vector with a float value 'f' subtracted from 'x', 'y' and 'z' members.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (-8, -5, -9)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f &amp; operator-=(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator-=(&amp;vec)</em>\n<em>name: operator-=</em>\n<em>returns: ofVec3f &amp;</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Super easy subtraction assignment. Subtracts 'vec.x' from 'x', subtracts\n'vec.y' from 'y' and subtracts 'vec.z' from 'z'.</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">-</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is (15, -30, 0)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Super easy subtraction assignment. Subtracts 'vec.x' from 'x', subtracts 'vec.y' from 'y' and subtracts 'vec.z' from 'z'.</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">-</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is (15, -30, 0)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f &amp; operator-=(f)</p>\n<p>&lt;!--\n<em>syntax: operator-=(f)</em>\n<em>name: operator-=</em>\n<em>returns: ofVec3f &amp;</em>\n_returns_description: _\n<em>parameters: const float f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Subtract a float value 'f' from 'x', 'y', and 'z' members.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (-8, -5, -9)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Subtract a float value 'f' from 'x', 'y', and 'z' members.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (-8, -5, -9)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f operator/(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator/(&amp;vec)</em>\n<em>name: operator/</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a new vector ('x'/'vec.x','y'/'vec.y','z'/'vec.z').</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">/</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (20, 5, 1)</span>\n</code></pre>\n<p>Useful for scaling a 3D point by a non-uniform scale.</p>\n<p>_description: _</p>\n<p>Returns a new vector ('x'/'vec.x','y'/'vec.y','z'/'vec.z').</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">/</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (20, 5, 1)</span>\n</code></pre>\n<p>Useful for scaling a 3D point by a non-uniform scale.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f operator/(f)</p>\n<p>&lt;!--\n<em>syntax: operator/(f)</em>\n<em>name: operator/</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n<em>parameters: const float f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return a new 'ofVec3f' that is this vector scaled by dividing 'x', 'y'\nand 'z' members by 'f'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0.5, 1.25, 0.25)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Return a new 'ofVec3f' that is this vector scaled by dividing 'x', 'y' and 'z' members by 'f'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0.5, 1.25, 0.25)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f &amp; operator/=(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator/=(&amp;vec)</em>\n<em>name: operator/=</em>\n<em>returns: ofVec3f &amp;</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Divides 'x' by 'vec.x', divides 'y' by 'vec.y', and divides 'z' by 'vec.z'.</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (20, 5, 1)</span>\n</code></pre>\n<p>Useful for scaling a 3D point by a non-uniform scale.</p>\n<p>_description: _</p>\n<p>Divides 'x' by 'vec.x', divides 'y' by 'vec.y', and divides 'z' by 'vec.z'.</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (20, 5, 1)</span>\n</code></pre>\n<p>Useful for scaling a 3D point by a non-uniform scale.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f &amp; operator/=(f)</p>\n<p>&lt;!--\n<em>syntax: operator/=(f)</em>\n<em>name: operator/=</em>\n<em>returns: ofVec3f &amp;</em>\n_returns_description: _\n<em>parameters: const float f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Scale this vector by dividing 'x', 'y' and 'z' members by 'f'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0.5, 1.25, 0.25)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Scale this vector by dividing 'x', 'y' and 'z' members by 'f'.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0.5, 1.25, 0.25)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool operator==(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator==(&amp;vec)</em>\n<em>name: operator==</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Check for equality between two ofVec3f</p>\n<p>Returns 'true' if each component is the same as the corresponding component in\n'vec', ie if 'x == vec.x' and 'y == vec.y' and 'z == vec.z'; otherwise returns\n'false'. But you should probably be using <a href=\"#match\">'match'</a> instead.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 == v2 ) is false</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 == v3 ) is true</span>\n</code></pre>\n<p>_description: _</p>\n<p>Returns 'true' if each component is the same as the corresponding component in 'vec', ie if 'x == vec.x' and 'y == vec.y' and 'z == vec.z'; otherwise returns 'false'. But you should probably be using <a href=\"#match\">'match'</a> instead.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 == v2 ) is false</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 == v3 ) is true</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float &amp; operator<a href=\"n\"></a></p>\n<p>&lt;!--\n<em>syntax: operator<a href=\"n\"></a></em>\n<em>name: operator[]</em>\n<em>returns: float &amp;</em>\n_returns_description: _\n<em>parameters: int n</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Allows to access the individual components of an 'ofVec3f' as though it is an\narray</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// x is 40</span>\n<span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// y is 20</span>\n<span class=\"token keyword\">float</span> z <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// z is 10</span>\n</code></pre>\n<p>This function can be handy if you want to do the same operation to all 'x',\n'y' and 'z' components, as it means you can just make a 'for' loop that\nrepeats 3 times.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float operator<a href=\"n\"></a></p>\n<p>&lt;!--\n<em>syntax: operator<a href=\"n\"></a></em>\n<em>name: operator[]</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: int n</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Allows to access the individual components of an 'ofVec3f' as though it is an array:</p>\n<pre><code>ofVec3f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// x is 40</span>\n<span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// y is 20</span>\n<span class=\"token keyword\">float</span> z <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// z is 10</span>\n</code></pre>\n<p>This function can be handy if you want to do the same operation to all 'x', 'y' and 'z' components, as it means you can just make a 'for' loop that repeats 3 times.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f &amp; perpendicular(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: perpendicular(&amp;vec)</em>\n<em>name: perpendicular</em>\n<em>returns: ofVec3f &amp;</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Construct a plane using this vector and 'vec' (by finding the plane that both\nlie on), and set our 'x', 'y' and 'z' to be the vector that is perpendicular\nto the constructed plane (the normal to the plane).</p>\n<pre><code><span class=\"token function\">ofSetLogLevel</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">perpendicular</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">%</span><span class=\"token number\">1.1f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span><span class=\"token number\">1.1f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span><span class=\"token number\">1.1f</span>\\n<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// prints &amp;quot;0.0, 0.0, 1.0'</span>\n</code></pre>\n<p>This method is usually used to calculate a normal vector to a surface, which\ncan then be used to calculate lighting, collisions, and other 3D effects.</p>\n<p>_description: _</p>\n<p>Construct a plane using this vector and 'vec' (by finding the plane that both lie on), and set our 'x', 'y' and 'z' to be the vector that is perpendicular to the constructed plane (the normal to the plane).</p>\n<pre><code><span class=\"token function\">ofSetLogLevel</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">perpendicular</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">%</span><span class=\"token number\">1.1f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span><span class=\"token number\">1.1f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span><span class=\"token number\">1.1f</span>\\n<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// prints &amp;quot;0.0, 0.0, 1.0'</span>\n</code></pre>\n<p>This method is usually used to calculate a normal vector to a surface, which can then be used to calculate lighting, collisions, and other 3D effects.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f &amp; rotate(angle, &amp;axis)</p>\n<p>&lt;!--\n<em>syntax: rotate(angle, &amp;axis)</em>\n<em>name: rotate</em>\n<em>returns: ofVec3f &amp;</em>\n_returns_description: _\n<em>parameters: float angle, const ofVec3f &amp;axis</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotates this vector by 'angle' degrees around the given axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (0.707, 0.707, 0)</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is now (0.707, 0, -0.707)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Return a new 'ofVec3f' that is the result of rotating this vector by 'angle' degrees around the given axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// rotate v1 around the z axis</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (√2, √2, 0)</span>\n\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// then rotate around the y axis</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (√2, 0, √2)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f &amp; rotate(angle, &amp;pivot, &amp;axis)</p>\n<p>&lt;!--\n<em>syntax: rotate(angle, &amp;pivot, &amp;axis)</em>\n<em>name: rotate</em>\n<em>returns: ofVec3f &amp;</em>\n_returns_description: _\n<em>parameters: float angle, const ofVec3f &amp;pivot, const ofVec3f &amp;axis</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotates this vector by 'angle' degrees about the axis specified by 'axis',\nusing 'pivot' as the origin of rotation.</p>\n<p>_description: _</p>\n<p>Rotate this vector by 'angle' degrees around the axis specified by 'axis', using 'pivot' as the origin of rotation.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f &amp; rotate(ax, ay, az)</p>\n<p>&lt;!--\n<em>syntax: rotate(ax, ay, az)</em>\n<em>name: rotate</em>\n<em>returns: ofVec3f &amp;</em>\n_returns_description: _\n<em>parameters: float ax, float ay, float az</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Performs an Euler rotation of this vector by 'ax' degrees about the\nx axis, 'ay' degrees about the y axis, and 'az' degrees about the z axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (0.707, 0.707, 0)</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is now (0.707, 0, -0.707)</span>\n</code></pre>\n<p>Watch out for gimbal lock when specifying multiple rotations in the same call.</p>\n<p>_description: _</p>\n<p>Perform an Euler rotation of this vector around three axes: 'ax' degrees about the x axis, 'ay' about the y axis and 'az' about the z axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v is now (0, 1, 0)</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v is now (0, √2, √2)</span>\n</code></pre>\n<p>Watch out for gimbal lock when specifying multiple rotations in the same call.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f &amp; rotateRad(angle, &amp;axis)</p>\n<p>&lt;!--\n<em>syntax: rotateRad(angle, &amp;axis)</em>\n<em>name: rotateRad</em>\n<em>returns: ofVec3f &amp;</em>\n_returns_description: _\n<em>parameters: float angle, const ofVec3f &amp;axis</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotates this vector by 'angle' radians about the given axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span>PI <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (0.707, 0.707, 0)</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span>PI <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is now (0.707, 0, -0.707)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Return a new 'ofVec3f' that is the result of rotating this vector by 'angle' degrees around the given axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// rotate v1 around the z axis</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (√2, √2, 0)</span>\n\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// then rotate around the y axis</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (√2, 0, √2)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f &amp; rotateRad(angle, &amp;pivot, &amp;axis)</p>\n<p>&lt;!--\n<em>syntax: rotateRad(angle, &amp;pivot, &amp;axis)</em>\n<em>name: rotateRad</em>\n<em>returns: ofVec3f &amp;</em>\n_returns_description: _\n<em>parameters: float angle, const ofVec3f &amp;pivot, const ofVec3f &amp;axis</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotates this vector by 'angle' radians around the axis specified by 'axis',\nusing 'pivot' as the origin of rotation.</p>\n<p>_description: _</p>\n<p>Rotate this vector by 'angle' radians around the axis specified by 'axis', using 'pivot' as the origin of rotation.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f &amp; rotateRad(ax, ay, az)</p>\n<p>&lt;!--\n<em>syntax: rotateRad(ax, ay, az)</em>\n<em>name: rotateRad</em>\n<em>returns: ofVec3f &amp;</em>\n_returns_description: _\n<em>parameters: float ax, float ay, float az</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Performs an Euler rotation of this vector by 'ax' radians about\nthe x axis, 'ay' radians about the y axis, and 'az' radians about the z axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PI <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (0.707, 0.707, 0)</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PI <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is now (0.707, 0, -0.707)</span>\n</code></pre>\n<p>Watch out for gimbal lock when specifying multiple rotations in the same call.</p>\n<p>_description: _</p>\n<p>Perform an Euler rotation of this vector around three axes: 'ax' radians about the x axis, 'ay' about the y axis and 'az' about the z axis.</p>\n<pre><code>ofVec3f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> HALF_PI <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v is now (0, 1, 0)</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span> PI<span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v is now (0, √2, √2)</span>\n</code></pre>\n<p>Watch out for gimbal lock when specifying multiple rotations in the same call.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f &amp; scale(length)</p>\n<p>&lt;!--\n<em>syntax: scale(length)</em>\n<em>name: scale</em>\n<em>returns: ofVec3f &amp;</em>\n_returns_description: _\n<em>parameters: const float length</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Scales this vector up or down so that it has the requested length.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is 5</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (9, 12), which has length of 15</span>\n</code></pre>\n<p>_description: _</p>\n<p>Scales this vector up or down so that it has the requested length.</p>\n<pre><code>ofVec3f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is 5</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (9, 12), which has length of 15</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: set(&amp;vec)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Setting the values by using other 3 dimension vector ofVec3f.</p>\n<pre><code>ofVec3f v1<span class=\"token punctuation\">;</span>\nofVec3f v2<span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>_description: _</p>\n<p>Setting the values by using other 3 dimension vector ('ofVec3f').</p>\n<pre><code>ofVec3f v1<span class=\"token punctuation\">;</span>\nofVec3f v2<span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(_scalar)</p>\n<p>&lt;!--\n_syntax: set(<em>scalar)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: float <em>scalar</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(x, y, z)</p>\n<p>&lt;!--\n<em>syntax: set(x, y, z)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set 'x', 'y' and 'z' components of this vector with just one function call.\n'z' is optional, it defaults to 0.</p>\n<pre><code>ofVec3f v1<span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>_description: _</p>\n<p>Set 'x', 'y' and 'z' components of this vector with just one function call. 'z' is optional, it defaults to 0.</p>\n<pre><code>ofVec3f v1<span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float squareDistance(&amp;pnt)</p>\n<p>&lt;!--\n<em>syntax: squareDistance(&amp;pnt)</em>\n<em>name: squareDistance</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;pnt</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Treats both this vector and 'pnt' as points in 3D space, and calculates and\nreturns the squared distance between them.</p>\n<pre><code>ofVec3f <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> distance <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span> p2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// distance is 5.8310</span>\n</code></pre>\n<p>Use as a much faster alternative to distance() if you don't need\nto know an exact number but rather just a rough idea of distance (for example\nwhen finding the shortest distance of a bunch of points to a reference point,\nwhere it doesn't matter exactly what the distances are, you just want the\nshortest). It avoids the square root calculation that is ordinarily required\nto calculate a length.</p>\n<p>_description: _</p>\n<p>Treats both this vector and 'pnt' as points in 3D space, and calculates and returns the squared distance between them.</p>\n<pre><code>ofVec3f <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> distance <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span> p2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// distance is 5.8310</span>\n</code></pre>\n<p>Use as a much faster alternative to <a href=\"#distance\">'distance'</a> if you don't need to know an exact number but rather just a rough idea of distance (for example when finding the shortest distance of a bunch of points to a reference point, where it doesn't matter exactly what the distances are, you just want the shortest). It avoids the square root calculation that is ordinarily required to calculate a length.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f zero()</p>\n<p>&lt;!--\n<em>syntax: zero()</em>\n<em>name: zero</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###const int DIM</p>\n<p>&lt;!--\n<em>name: DIM</em>\n<em>type: const int</em>\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\cond INTERNAL</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float x</p>\n<p>&lt;!--\n<em>name: x</em>\n<em>type: float</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Stores the <code>X</code> component of this vector.</p>\n<p>_description: _</p>\n<p>Stores the X component of this vector.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float y</p>\n<p>&lt;!--\n<em>name: y</em>\n<em>type: float</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Stores the <code>Y</code> component of this vector.</p>\n<p>_description: _</p>\n<p>Stores the Y component of this vector.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float z</p>\n<p>&lt;!--\n<em>name: z</em>\n<em>type: float</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Stores the <code>Z</code> component of this vector.</p>\n<p>_description: _</p>\n<p>Stores the Z component of this vector.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofVec3f\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\n ofVec3f is a class for storing a three dimensional vector.\n\nMoving through space requires knowledge of where things are and where they are\ngoing. Vector Maths is the class of mathematics that gives us control over\nthese things in space, allowing for elegant and intuitive descriptions of\ncomplex structures and movement. Vectors are at the heart of animations,\nparticle systems, and 2D and 3D graphics.\n\nVectors in mathematics in general are entities with magnitude (also called\nlength) and direction. A vector whose magnitude is 1 (ie a vector that is\n*normalized*) is called a *unit vector*. Unit vectors are very handy for\nstoring directions as they can be easily scaled up (or down) to represent\nmotion in a particular direction with a particular length.\n\n*You will also see the term 'vector' used to describe an array of objects in\nC++ (such as text strings). Don't let this confuse you, they are quite\ndifferent: one of them is a mathematical term for a fixed-length list of\nnumbers that you can do mathematical operations on, the other is a\nC++-specific term that means 'dynamically sizeable array'.*\n\n'ofVec3f has three member variables, x, y, and z, which allow to conveniently\n'store 3D properties of an object such as its position, velocity, or\n'acceleration.\n\n~~~~{.cpp}\nofVec3f v1; // v1.x is 0, v1.y is 0, v1.z is 0\nv1.set(10, 50, 80); // now v1.x is 10, v1.y is 50, v1.z is 80\n~~~~\n\nUsing 'ofVec3f' greatly simplifies arithmetic operations in three dimensions.\nFor example if you have two vectors 'v1' and 'v2', both of which represent a\n3D change in position, you can find the total change of position of both of\nthem just by doing an addition 'v1 + v2':\n\n~~~~{.cpp}\nofVec3f v1(5, 2, 1);\n// so now v1 represents walking 5 steps forward then 2 steps\n// sideways then 1 step upwards\nofVec3f v2;\nv2.set(1, 1, 1);\n// so now v2 represents walking 1 step forward then 1 step\n// sideways then 1 step upwards\n\n// what happens if you do v1 followed by v2?\n// to find out just add v1 and v2 together:\nofVec3f result = v1 + v2;\n// result is (6, 3, 1), or 6 steps forward then 3 steps sideways\n// then 2 steps upwards\n~~~~\n\nYou can scale an 'ofVec3f' by multiplying it with a float:\n\n~~~~{.cpp}\n// walk 5 steps forward then 2 steps sideways then 1 step upwards\nofVec3f v1(5, 2, 1);\n// what happens if we do v1 three times?\nofVec3f result = v1 * 3; // result is (15, 6, 3), or\n// 15 steps forward, 6 steps sideways and 3 steps upwards\n~~~~\n\nThis also works for subtraction and division.\n\nAs you can see this really makes dealing with vectors as easy as dealing with\nsingle 'float's or 'int's, and can reduce the number of lines of code you have\nto write by half, at the same time making your code much easier to read and\nunderstand!\n\n**See also**: ofVec2f for 2D vectors\n\n**See also**: ofVec4f for 4D vectors\n\n\n\n\n\n##Description\n\nofVec3f is a class for storing a three dimensional vector.\n\nMoving through space requires knowledge of where things are and where they are going. Vector Maths is the class of mathematics that gives us control over these things in space, allowing for elegant and intuitive descriptions of complex structures and movement. Vectors are at the heart of animations, particle systems, and 2D and 3D graphics.\n\nVectors in mathematics in general are entities with magnitude (also called length) and direction. A vector whose magnitude is 1 (ie a vector that is *normalized*) is called a *unit vector*. Unit vectors are very handy for storing directions as they can be easily scaled up (or down) to represent motion in a particular direction with a particular length.\n\n*You will also see the term 'vector' used to describe an array of objects in C++ (such as text strings). Don't let this confuse you, they are quite different: one of them is a mathematical term for a fixed-length list of numbers that you can do mathematical operations on, the other is a C++-specific term that means 'dynamically sizeable array'.*\n\n'ofVec3f' has three member variables, 'x', 'y', and 'z', which allow to conveniently store 3D properties of an object such as its position, velocity, or acceleration.\n\n~~~~{.cpp}\nofVec3f v1; // v1.x is 0, v1.y is 0, v1.z is 0\nv1.set(10, 50, 80); // now v1.x is 10, v1.y is 50, v1.z is 80\n~~~~\n\nUsing 'ofVec3f' greatly simplifies arithmetic operations in three dimensions. For example if you have two vectors 'v1' and 'v2', both of which represent a 3D change in position, you can find the total change of position of both of them just by doing an addition 'v1 + v2':\n\n~~~~{.cpp}\nofVec3f v1(5, 2, 1);\n// so now v1 represents walking 5 steps forward then 2 steps\n// sideways then 1 step upwards\nofVec3f v2;\nv2.set(1, 1, 1);\n// so now v2 represents walking 1 step forward then 1 step\n// sideways then 1 step upwards\n\n// what happens if you do v1 followed by v2?\n// to find out just add v1 and v2 together:\nofVec3f result = v1 + v2;\n// result is (6, 3, 1), or 6 steps forward then 3 steps sideways\n// then 2 steps upwards\n~~~~\n\nYou can scale an 'ofVec3f' by multiplying it with a float:\n\n~~~~{.cpp}\n// walk 5 steps forward then 2 steps sideways then 1 step upwards\nofVec3f v1(5, 2, 1);\n// what happens if we do v1 three times?\nofVec3f result = v1 * 3; // result is (15, 6, 3), or\n// 15 steps forward, 6 steps sideways and 3 steps upwards\n\n~~~~\n\nThis also works for subtraction and division.\n\nAs you can see this really makes dealing with vectors as easy as dealing with single 'float's or 'int's, and can reduce the number of lines of code you have to write by half, at the same time making your code much easier to read and understand!\n\n\n\n\n\n##Methods\n\n\n\n###bool align(&vec, tolerance = 0.0001f)\n\n<!--\n_syntax: align(&vec, tolerance = 0.0001f)_\n_name: align_\n_returns: bool_\n_returns_description: _\n_parameters: const ofVec3f &vec, float tolerance=0.0001f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns 'true' if this vector is pointing in the same direction as\n'vec', with an angle error threshold 'tolerance' in degrees (default\n0.0001 degrees).\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 70);\nofVec3f v2 = ofVec3f(4, 2, 7);\n// v1.align(v2, 0.0) is true\n~~~~\n\n\n\n\n\n_description: _\n\nReturns 'true' if this vector is pointing in the same direction as 'vec', with an angle error threshold 'tolerance' in degrees (default 0.0001 degrees).\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 70);\nofVec3f v2 = ofVec3f(4, 2, 7);\n// v1.align(v2, 0.0) is true\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool alignRad(&vec, tolerance = 0.0001f)\n\n<!--\n_syntax: alignRad(&vec, tolerance = 0.0001f)_\n_name: alignRad_\n_returns: bool_\n_returns_description: _\n_parameters: const ofVec3f &vec, float tolerance=0.0001f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns 'true' if this vector is pointing in the same direction\nas 'vec', with an angle error threshold 'tolerance' in radians\n(default 0.0001).\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 70);\nofVec3f v2 = ofVec3f(4, 2, 7);\n// v1.align(v2, 0.0) is true\n~~~~\n\n\n\n\n\n_description: _\n\nReturns 'true' if this vector is pointing in the same direction as 'vec', with an angle error threshold 'tolerance' in radians (default 0.0001).\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 70);\nofVec3f v2 = ofVec3f(4, 2, 7);\n// v1.align(v2, 0.0) is true\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float angle(&vec)\n\n<!--\n_syntax: angle(&vec)_\n_name: angle_\n_returns: float_\n_returns_description: _\n_parameters: const ofVec3f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCalculate and return the coplanar angle in degrees between this vector\nand 'vec'.\n\n~~~~{.cpp}\nofVec3f v1(1,0,0);\nofVec3f v2(0,1,0);\nfloat angle = v1.angle(v2); // angle is 90\n~~~~\n\n\n\n\n\n_description: _\n\nCalculate and return the coplanar angle in degrees between this vector and 'vec'.\n\n~~~~{.cpp}\nofVec3f v1(1,0,0);\nofVec3f v2(0,1,0);\nfloat angle = v1.angle(v2); // angle is 90\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float angleRad(&vec)\n\n<!--\n_syntax: angleRad(&vec)_\n_name: angleRad_\n_returns: float_\n_returns_description: _\n_parameters: const ofVec3f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCalculate and return the coplanar angle in radians between this\nvector and 'vec'.\n\n~~~~{.cpp}\nofVec3f v1(1,0,0);\nofVec3f v2(0,1,0);\nfloat angle = v1.angle(v2); // angle is 90\n~~~~\n\n\n\n\n\n_description: _\n\nCalculate and return the coplanar angle in radians between this vector and 'vec'.\n\n~~~~{.cpp}\nofVec3f v1(1,0,0);\nofVec3f v2(0,1,0);\nfloat angle = v1.angle(v2); // angle is 90\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f & average(*points, num)\n\n<!--\n_syntax: average(*points, num)_\n_name: average_\n_returns: ofVec3f &_\n_returns_description: _\n_parameters: const ofVec3f *points, int num_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets this vector to be the average (*centre of gravity* or\n*centroid*) of a given array of 'ofVec3f's. 'points' is the array of\n'ofVec3f's and 'num' specifies the number of 'ofVec3f's in the array.\n\n~~~~{.cpp}\nint numPoints = 10;\nofVec3f points[numPoints];\nfor ( int i=0; i<numPoints; i++ ) {\n\tpoints[i].set( ofRandom(0,100), ofRandom(0,100), ofRandom(0,100) );\n}\nofVec3f centroid;\ncentroid.average( points, numPoints );\n// centroid now is the centre of gravity/average of all the random points\n~~~~\n\n\n\n\n\n_description: _\n\nSets this vector to be the average (*centre of gravity* or *centroid*) of a given array of 'ofVec3f's. 'points' is the array of 'ofVec3f's and 'num' specifies the number of 'ofVec3f's in the array.\n\n~~~~{.cpp}\nint numPoints = 10;\nofVec3f points[numPoints];\nfor ( int i=0; i<numPoints; i++ ) {\n\tpoints[i].set( ofRandom(0,100), ofRandom(0,100), ofRandom(0,100) );\n}\nofVec3f centroid;\ncentroid.average( points, numPoints );\n// centroid now is the centre of gravity/average of all the random points\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f & cross(&vec)\n\n<!--\n_syntax: cross(&vec)_\n_name: cross_\n_returns: ofVec3f &_\n_returns_description: _\n_parameters: const ofVec3f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet this vector to the cross product (vector product) of itself and\n'vec'. This is a binary operation on two vectors in three-dimensional\nspace, which results in a vector that is perpendicular to both of the\nvectors being multiplied, and normal to the plane containing them. The\nname *cross product* is derived from the cross symbol X that is often\nused to designate this operation; the alternative name *vector\nproduct* emphasizes the vector (rather than scalar) nature of the\nresult.\n\n\n\n\n\n_description: _\n\nSet this vector to the cross product (vector product) of itself and 'vec'. This is a binary operation on two vectors in three-dimensional space, which results in a vector that is perpendicular to both of the vectors being multiplied, and normal to the plane containing them. The name *cross product* is derived from the cross symbol X that is often used to designate this operation; the alternative name *vector product* emphasizes the vector (rather than scalar) nature of the result.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float distance(&pnt)\n\n<!--\n_syntax: distance(&pnt)_\n_name: distance_\n_returns: float_\n_returns_description: _\n_parameters: const ofVec3f &pnt_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTreats both this vector and 'pnt' as points in 3D space, and\ncalculates and returns the distance between them.\n\n~~~~{.cpp}\nofVec3f p1(3, 4, 2);\nofVec3f p2(6, 8, 5);\nfloat distance = p1.distance( p2 ); // distance is 5.8310\n~~~~\n\n'distance' involves a square root calculation, which is one of the\nslowest things you can do in programming. If you don't need an exact\nnumber but rather just a rough idea of distance (for example when\nfinding the shortest distance of a bunch of points to a reference\npoint, where it doesn't matter exactly what the distances are, you\njust want the shortest), you can use squareDistance() instead.\n\n\n\n\n\n_description: _\n\nTreats both this vector and 'pnt' as points in 3D space, and calculates and returns the distance between them.\n\n~~~~{.cpp}\nofVec3f p1(3, 4, 2);\nofVec3f p2(6, 8, 5);\nfloat distance = p1.distance( p2 ); // distance is 5.8310\n~~~~\n\n'distance' involves a square root calculation, which is one of the slowest things you can do in programming. If you don't need an exact number but rather just a rough idea of distance (for example when finding the shortest distance of a bunch of points to a reference point, where it doesn't matter exactly what the distances are, you just want the shortest), you can use ['squareDistance'](#squareDistance) instead.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float dot(&vec)\n\n<!--\n_syntax: dot(&vec)_\n_name: dot_\n_returns: float_\n_returns_description: _\n_parameters: const ofVec3f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the dot product of this vector with 'vec'.\n\nThe *dot product* of two vectors, also known as the *scalar product*, is\nthe product of the magnitude of the two vectors and the cosine of the\nangle between them.\n\nOne interpretation of the dot product is as a measure of how closely two\nvectors align with each other. If they point in exactly the same\ndirection, their dot product will simply be the product of their\nmagnitudes, if they are perpendicular, their dot product will be 0, and\nif they point in opposite directions, their dot product will be\nnegative.\n\nThe dot product is in contrast to the *cross product*, which returns a\nvector rather than a scalar.\n\n~~~~{.cpp}\nofVec3f a1(2, 0, 0); // magnitude 2, parallel to x-axis\nofVec3f b1(3, 4, 0); // magnitude 5, 53.13 degree angle to a1\nfloat dot = a1.dot(b1); // dot is 2 * 5 * cos(53.13) = 6.0\n\nofVec3f a2(1, 0, 0); // magnitude 1, parallel to x-axis\nofVec3f b2(0, 0, 1); // magnitude 1, 90 degree angle to a2\ndot = a2.dot(b2); // dot is 1 * 1 * cos(90) = 0.0\n\nofVec3f a3(0, 1, 0); // magnitude 1, parallel to y-axis\nofVec3f b3(0, -1, 0); // magnitude 1, 180 degree angle to a3\ndot = a3.dot(b3); // dot is 1 * 1 * cos(180) = -1.0\n~~~~\n\n\n\n\n\n_description: _\n\nCalculate and return the dot product of this vector with 'vec'.\n\n*Dot product* (less commonly known as *Euclidean inner product*) expresses the angular relationship between two vectors. In other words it is a measure of how *parallel* two vectors are. If they are completely perpendicular the dot product is 0; if they are completely parallel their dot product is either 1 if they are pointing in the same direction, or -1 if they are pointing in opposite directions.\n\n![DOT](../math/dotproduct.png)\nImage courtesy of Wikipedia\n\n~~~~{.cpp}\nofVec3f a1(1, 0, 0);\nofVec3f b1(0, 0, 1); // 90 degree angle to a1\ndot = a1.dot(b1); // dot is 0, ie cos(90)\n\nofVec3f a2(1, 0, 0);\nofVec3f b2(1, 1, 0); // 45 degree angle to a2\nb2.normalize(); // vectors should to be unit vectors (normalized)\nfloat dot = a2.dot(b2); // dot is 0.707, ie cos(45)\n\nofVec3f a3(0, 1, 0);\nofVec3f b3(0, -1, 0); // 180 degree angle to a3\ndot = a3.dot(b3); // dot is -1, ie cos(180)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f getCrossed(&vec)\n\n<!--\n_syntax: getCrossed(&vec)_\n_name: getCrossed_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: const ofVec3f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the cross product (vector product) of this vector and 'vec'. This is a\nbinary operation on two vectors in three-dimensional space, which results in a\nvector that is perpendicular to both of the vectors being multiplied, and\nnormal to the plane containing them. The name *cross product* is derived from\nthe cross symbol X that is often used to designate this operation; the\nalternative name *vector product* emphasizes the vector (rather than scalar)\nnature of the result.\n\n![CROSS](math/crossproduct.png)\nImage courtesy of Wikipedia\n\n\n\n\n\n_description: _\n\nReturns the cross product (vector product) of this vector and 'vec'. This is a binary operation on two vectors in three-dimensional space, which results in a vector that is perpendicular to both of the vectors being multiplied, and normal to the plane containing them. The name *cross product* is derived from the cross symbol X that is often used to designate this operation; the alternative name *vector product* emphasizes the vector (rather than scalar) nature of the result.\n\n![CROSS](../math/crossproduct.png)\nImage courtesy of Wikipedia\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f getInterpolated(&pnt, p)\n\n<!--\n_syntax: getInterpolated(&pnt, p)_\n_name: getInterpolated_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: const ofVec3f &pnt, float p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nPerform a linear interpolation of this vector's position towards 'pnt'\nand return the interpolated vector without altering the original. 'p'\ncontrols the amount to move towards 'pnt'. 'p' is normally between 0\nand 1 and where 0 means stay the original position and 1 means move\nall the way to 'pnt', but you can also have 'p' greater than 1\novershoot 'pnt', or less than 0 to move backwards away from 'pnt'.\n\n~~~~{.cpp}\nofVec3f v1(0, 5, 0);\nofVec3f v2(10, 10, 20);\nofVec3f v3 = v1.getInterpolated(p2, 0.5); // v3 is (5, 7.5, 10)\nofVec3f v4 = v1.getInterpolated(p2, 0.8); // v4 is (8, 9, 16)\n~~~~\n\n\n\n\n\n_description: _\n\nPerform a linear interpolation of this vector's position towards 'pnt' and return the interpolated vector without altering the original. 'p' controls the amount to move towards 'pnt'. 'p' is normally between 0 and 1 and where 0 means stay the original position and 1 means move all the way to 'pnt', but you can also have 'p' greater than 1 overshoot 'pnt', or less than 0 to move backwards away from 'pnt'.\n\n~~~~{.cpp}\nofVec3f v1(0, 5, 0);\nofVec3f v2(10, 10, 20);\nofVec3f v3 = v1.getInterpolated(p2, 0.5); // v3 is (5, 7.5, 10)\nofVec3f v4 = v1.getInterpolated(p2, 0.8); // v4 is (8, 9, 16)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f getLimited(max)\n\n<!--\n_syntax: getLimited(max)_\n_name: getLimited_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: float max_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn a copy of this vector with its length (magnitude) restricted to a\nmaximum of 'max' units by scaling down if necessary.\n\n~~~~{.cpp}\nofVec3f v1(5, 0, 1); // length is about 5.1\nofVec3f v2(2, 0, 1); // length is about 2.2\nofVec3f v1Limited = v1.getLimited(3);\n// v1Limited is (2.9417, 0, 0.58835) which has length of 3 in the same direction as v1\nofVec3f v2Limited = v2.getLimited(3);\n// v2Limited is (2, 0, 1) (same as v2)\n~~~~\n\n\n\n\n\n_description: _\n\nReturn a copy of this vector with its length (magnitude) restricted to a maximum of 'max' units by scaling down if necessary.\n\n~~~~{.cpp}\nofVec3f v1(5, 0, 1); // length is about 5.1\nofVec3f v2(2, 0, 1); // length is about 2.2\nofVec3f v1Limited = v1.getLimited(3);\n// v1Limited is (2.9417, 0, 0.58835) which has length of 3 in the same direction as v1\nofVec3f v2Limited = v2.getLimited(3);\n// v2Limited is (2, 0, 1) (same as v2)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f getMapped(&origin, &vx, &vy, &vz)\n\n<!--\n_syntax: getMapped(&origin, &vx, &vy, &vz)_\n_name: getMapped_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: const ofVec3f &origin, const ofVec3f &vx, const ofVec3f &vy, const ofVec3f &vz_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn a new 'ofVec3f' calculated by copying this vector and then mapping from\nits default coordinate system -- origin (0,0,0), X direction (1,0,0), Y\ndirection (0,1,0), Z direction (0,0,1) -- to a new coordinate system defined\nwith origin at 'origin', X direction 'vx', and Y direction 'vy', and Z\ndirection 'vz'.\n\n*In most cases you want 'vx', 'vy', and 'vz' to be perpendicular and of unit\nlength; if they are not perpendicular you will have shearing as part of the\nmapping, and if they are not of unit length you will have scaling as part of\nthe mapping.*\n\n\n\n\n\n_description: _\n\nReturn a new 'ofVec3f' calculated by copying this vector and then mapping from its default coordinate system -- origin (0,0,0), X direction (1,0,0), Y direction (0,1,0), Z direction (0,0,1) -- to a new coordinate system defined with origin at 'origin', X direction 'vx', and Y direction 'vy', and Z direction 'vz'.\n\n*In most cases you want 'vx', 'vy', and 'vz' to be perpendicular and of unit length; if they are not perpendicular you will have shearing as part of the mapping, and if they are not of unit length you will have scaling as part of the mapping.*\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f getMiddle(&pnt)\n\n<!--\n_syntax: getMiddle(&pnt)_\n_name: getMiddle_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: const ofVec3f &pnt_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCalculate and return the midpoint between this vector and 'pnt'.\n\n~~~~{.cpp}\nofVec3f v1(5, 0, 0);\nofVec3f v2(10, 10, 20);\nofVec3f mid = v1.getMiddle(v2); // mid gets (7.5, 5, 10)\n~~~~\n\n\n\n\n\n_description: _\n\nCalculate and return the midpoint between this vector and 'pnt'.\n\n~~~~{.cpp}\nofVec3f v1(5, 0, 0);\nofVec3f v2(10, 10, 20);\nofVec3f mid = v1.getMiddle(v2); // mid gets (7.5, 5, 10)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f getNormalized()\n\n<!--\n_syntax: getNormalized()_\n_name: getNormalized_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn a normalized copy of this vector.\n\n*Normalization* means to scale the vector so that its length\n(magnitude) is exactly 1, at which stage all that is left is the\ndirection. A normalized vector is usually called a *unit vector*, and\ncan be used to represent a pure direction (heading).\n\n~~~~{.cpp}\nofVec3f v1(5, 0, 0);\nofVec3f v1Normalized = v1.getNormalized(); // (1, 0, 0)\nofVec3f v2(5, 0, 5);\nofVec3f v2Normalized = v2.getNormalized(); // (√2, 0, √2)\n~~~~\n\n\n\n\n\n_description: _\n\nReturn a normalized copy of this vector.\n\n*Normalization* means to scale the vector so that its length (magnitude) is exactly 1, at which stage all that is left is the direction. A normalized vector is usually called a *unit vector*, and can be used to represent a pure direction (heading).\n\n~~~~{.cpp}\nofVec3f v1(5, 0, 0);\nofVec3f v1Normalized = v1.getNormalized(); // (1, 0, 0)\nofVec3f v2(5, 0, 5);\nofVec3f v2Normalized = v2.getNormalized(); // (√2, 0, √2)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f getPerpendicular(&vec)\n\n<!--\n_syntax: getPerpendicular(&vec)_\n_name: getPerpendicular_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: const ofVec3f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConstruct a plane using this vector and 'vec' (by finding the plane that both\nlectors lie on), and return the vector that is perpendicular to that plane\n(the normal to that plane).\n\n~~~~{.cpp}\nofSetLogLevel(OF_LOG_NOTICE);\nofVec3f v1(1,0,0);\nofVec3f v2(0,1,0);\nofVec3f p = v1.getPerpendicular(v2);\nofLog(OF_LOG_NOTICE, \"%1.1f, %1.1f, %1.1f\\n\", p.x, p.y, p.z);\n// prints \"0.0, 0.0, 1.0\"\n~~~~\n\nThis method is usually used to calculate a normal vector to a surface, which\ncan then be used to calculate lighting, collisions, and other 3D effects.\n\n\n\n\n\n_description: _\n\nConstruct a plane using this vector and 'vec' (by finding the plane that both lectors lie on), and return the vector that is perpendicular to that plane (the normal to that plane).\n\n~~~~{.cpp}\nofSetLogLevel(OF_LOG_NOTICE);\nofVec3f v1(1,0,0);\nofVec3f v2(0,1,0);\nofVec3f p = v1.getPerpendicular(v2);\nofLog(OF_LOG_NOTICE, \"%1.1f, %1.1f, %1.1f\\n\", p.x, p.y, p.z);\n// prints \"0.0, 0.0, 1.0\"\n~~~~\n\nThis method is usually used to calculate a normal vector to a surface, which can then be used to calculate lighting, collisions, and other 3D effects.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float * getPtr()\n\n<!--\n_syntax: getPtr()_\n_name: getPtr_\n_returns: float *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a pointer to the memory position of the first element of the vector\n('x'); the other elements ('y' and 'z') immediately follow it in memory.\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 10);\nfloat * v1Ptr = v1.getPtr();\nfloat x = *(v1Ptr); // x is 40\nfloat y = *(v1Ptr+1); // y is 20\nfloat z = *(v1Ptr+2); // z is 10\n~~~~\n\nThis is very useful when using arrays of 'ofVec3f's to store geometry\ninformation, as it allows the vector to be treated as a simple C array of\n'float's that can be passed verbatim to OpenGL.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const float * getPtr()\n\n<!--\n_syntax: getPtr()_\n_name: getPtr_\n_returns: const float *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns a pointer to the memory position of the first element of the vector  ('x'); the other elements ('y' and 'z') immediately follow it in memory.\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 10);\nfloat * v1Ptr = v1.getPtr();\nfloat x = *(v1Ptr); // x is 40\nfloat y = *(v1Ptr+1); // y is 20\nfloat z = *(v1Ptr+2); // z is 10\n~~~~\n\nThis is very useful when using arrays of 'ofVec3f's to store geometry information, as it allows the vector to be treated as a simple C array of 'float's that can be passed verbatim to OpenGL.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f getRotated(angle, &axis)\n\n<!--\n_syntax: getRotated(angle, &axis)_\n_name: getRotated_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: float angle, const ofVec3f &axis_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a new vector that is the result of rotating this vector\nby 'angle' degrees about the given axis.\n\n~~~~{.cpp}\nofVec3f v1(1, 0, 0);\nofVec3f v2 = v1.getRotated(45, ofVec3f(0, 0, 1)); // v2 is (0.707, 0.707, 0)\nofVec3f v3 = v1.getRotated(45, ofVec3f(0, 1, 0)); // v3 is (0.707, 0, -0.707)\n~~~~\n\n\n\n\n\n_description: _\n\nReturn a new 'ofVec3f' that is the result of rotating this vector by 'angle' degrees around the given axis.\n\n~~~~{.cpp}\nofVec3f v1(1, 0, 0);\n// rotate v1 around the z axis\nofVec3f v2 = v1.getRotated(45, ofVec3f(0, 0, 1)); // v2 is (√2, √2, 0)\n// rotate v1 around the y axis\nofVec3f v3 = v1.getRotated(45, ofVec3f(0, 1, 0)); // v3 is (√2, 0, √2)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f getRotated(angle, &pivot, &axis)\n\n<!--\n_syntax: getRotated(angle, &pivot, &axis)_\n_name: getRotated_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: float angle, const ofVec3f &pivot, const ofVec3f &axis_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\nReturns a new vector that is the result of rotating this vector by\n'angle' degrees about the axis specified by 'axis', using 'pivot' as the\norigin of rotation.\n\n\n\n\n\n_description: _\n\nReturn a new 'ofVec3f' that is the result of rotating this vector by 'angle' degrees around the axis specified by 'axis', using 'pivot' as the origin of rotation.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f getRotated(ax, ay, az)\n\n<!--\n_syntax: getRotated(ax, ay, az)_\n_name: getRotated_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: float ax, float ay, float az_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a new vector that is the result of performing an Euler\nrotation of this vector by 'ax' degrees about the x axis, 'ay' degrees\nabout the y axis, and 'az' degrees about the z axis.\n\n~~~~~{.cpp}\nofVec3f v1(1, 0, 0);\nofVec3f v2 = v1.getRotated(0, 0, 45); // v2 is (0.707, 0.707, 0)\nofVec3f v3 = v1.getRotated(0, 45, 0); // v3 is (0.707, 0, -0.707)\n~~~~~\n\nWatch out for gimbal lock when specifying multiple rotations in the same call.\n\n\n\n\n\n_description: _\n\nMake a copy of this vector and perform an Euler rotation of the copy around three axes: 'ax' degrees about the x axis, 'ay' about the y axis and 'az' about the z axis. Return the copy.\n\n~~~~~{.cpp}\nofVec3f v1( 1, 0, 0 );\nofVec3f v2 = v1.getRotated( 0, 0, 90 ); // v is now (0, 1, 0)\nofVec3f v3 = v1.getRotated( 45, 0, 0 ); // v is now (0, √2, √2)\n~~~~~\n\nWatch out for gimbal lock when specifying multiple rotations in the same call.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f getRotatedRad(angle, &axis)\n\n<!--\n_syntax: getRotatedRad(angle, &axis)_\n_name: getRotatedRad_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: float angle, const ofVec3f &axis_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a new vector that is the result of rotating this vector by\n'angle' radians about the given axis.\n\n~~~~{.cpp}\nofVec3f v1(1, 0, 0);\nofVec3f v2 = v1.getRotated(PI / 4, ofVec3f(0, 0, 1)); // v2 is (0.707, 0.707, 0)\nofVec3f v3 = v1.getRotated(PI / 4, ofVec3f(0, 1, 0)); // v3 is (0.707, 0, -0.707)\n~~~~\n\n\n\n\n\n_description: _\n\nReturn a new 'ofVec3f' that is the result of rotating this vector by 'angle' radians around the given axis.\n\n~~~~{.cpp}\nofVec3f v1(1, 0, 0);\n// rotate v1 around the z axis\nofVec3f v2 = v1.getRotated(PI/4, ofVec3f(0, 0, 1)); // v2 is (√2, √2, 0)\n// rotate v1 around the y axis\nofVec3f v3 = v1.getRotated(PI/4, ofVec3f(0, 1, 0)); // v3 is (√2, 0, √2)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f getRotatedRad(angle, &pivot, &axis)\n\n<!--\n_syntax: getRotatedRad(angle, &pivot, &axis)_\n_name: getRotatedRad_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: float angle, const ofVec3f &pivot, const ofVec3f &axis_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a new vector that is the result of rotating this vector by\n'angle' radians about the axis specified by 'axis', using 'pivot' as the\norigin of rotation.\n\n\n\n\n\n_description: _\n\nReturn a new 'ofVec3f' that is the result of rotating this vector by 'angle' radians around the axis specified by 'axis', using 'pivot' as the origin of rotation.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f getRotatedRad(ax, ay, az)\n\n<!--\n_syntax: getRotatedRad(ax, ay, az)_\n_name: getRotatedRad_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: float ax, float ay, float az_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a new vector that is the result of performing an Euler\nrotation of this vector by 'ax' radians about the x axis, 'ay' radians\nabout the y axis, and 'az' radians about the z axis.\n\n~~~~~{.cpp}\nofVec3f v1(1, 0, 0);\nofVec3f v2 = v1.getRotatedRad(0, 0, PI / 4); // v2 is (0.707, 0.707, 0)\nofVec3f v3 = v1.getRotatedRad(0, PI / 4, 0); // v3 is (0.707, 0, -0.707)\n~~~~~\n\nWatch out for gimbal lock when specifying multiple rotations in the same call.\n\n\n\n\n\n_description: _\n\nMake a copy of this vector and perform an Euler rotation of the copy around three axes: 'ax' radians about the x axis, 'ay' about the y axis and 'az' about the z axis. Return the copy.\n\n~~~~~{.cpp}\nofVec3f v1( 1, 0, 0 );\nofVec3f v2 = v1.getRotatedRad( 0, 0, HALF_PI ); // v is now (0, 1, 0)\nofVec3f v3 = v1.getRotatedRad( PI/4, 0, 0 ); // v is now (0, √2, √2)\n~~~~~\n\nWatch out for gimbal lock when specifying multiple rotations in the same call.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f getScaled(length)\n\n<!--\n_syntax: getScaled(length)_\n_name: getScaled_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: const float length_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn a new 'ofVec3f' that is the result of scaling this vector up or down so that it has\nthe requested length.\n\n~~~~{.cpp}\nofVec3f v1(3, 4); // length is 5\nofVec3f v2 = v1.getScaled(15); // v2 is (9, 12), which has length of 15\n~~~~\n\n\n\n\n\n_description: _\n\nReturn a new 'ofVec3f' that is the result of scaling this vector up or down so that it has the requested length.\n\n~~~~{.cpp}\nofVec3f v1(3, 4); // length is 5\nofVec3f v2 = v1.getScaled(15); // v2 is (9, 12), which has length of 15\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f & interpolate(&pnt, p)\n\n<!--\n_syntax: interpolate(&pnt, p)_\n_name: interpolate_\n_returns: ofVec3f &_\n_returns_description: _\n_parameters: const ofVec3f &pnt, float p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nPerform a linear interpolation of this vector's position towards\n'pnt'. 'p' controls the amount to move towards 'pnt'. 'p' is normally\nbetween 0 and 1 and where 0 means stay the original position and 1\nmeans move all the way to 'pnt', but you can also have 'p' greater\nthan 1 overshoot 'pnt', or less than 0 to move backwards away from\n'pnt'.\n\n~~~~{.cpp}\nofVec3f v1( 0, 5, 0 );\nofVec3f v2( 10, 10, 20 );\n// go go gadget zeno\nv1.interpolate( v2, 0.5 ); // v1 is now (5, 7.5, 10)\nv1.interpolate( v2, 0.5 ); // v1 is now (7.5, 8.75, 15)\nv1.interpolate( v2, 0.5 ); // v1 is now (8.75, 9.375, 17.5)\nv1.interpolate( v2, 0.5 ); // v1 is now (9.375, 9.6875, 18.75)\n~~~~\n\n\n\n\n\n_description: _\n\nPerform a linear interpolation of this vector's position towards 'pnt'. 'p' controls the amount to move towards 'pnt'. 'p' is normally between 0 and 1 and where 0 means stay the original position and 1 means move all the way to 'pnt', but you can also have 'p' greater than 1 overshoot 'pnt', or less than 0 to move backwards away from 'pnt'.\n\n~~~~{.cpp}\nofVec3f v1( 0, 5, 0 );\nofVec3f v2( 10, 10, 20 );\n// go go gadget zeno\nv1.interpolate( v2, 0.5 ); // v1 is now (5, 7.5, 10)\nv1.interpolate( v2, 0.5 ); // v1 is now (7.5, 8.75, 15)\nv1.interpolate( v2, 0.5 ); // v1 is now (8.75, 9.375, 17.5)\nv1.interpolate( v2, 0.5 ); // v1 is now (9.375, 9.6875, 18.75)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isAligned(&vec, tolerance = 0.0001f)\n\n<!--\n_syntax: isAligned(&vec, tolerance = 0.0001f)_\n_name: isAligned_\n_returns: bool_\n_returns_description: _\n_parameters: const ofVec3f &vec, float tolerance=0.0001f_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n/**\n* Checks if vectors look in the same direction.\n*/\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isAlignedRad(&vec, tolerance = 0.0001f)\n\n<!--\n_syntax: isAlignedRad(&vec, tolerance = 0.0001f)_\n_name: isAlignedRad_\n_returns: bool_\n_returns_description: _\n_parameters: const ofVec3f &vec, float tolerance=0.0001f_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float length()\n\n<!--\n_syntax: length()_\n_name: length_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn the length (magnitude) of this vector.\n\n~~~~{.cpp}\nofVec3f v(3, 4, 1);\nfloat len = v.length(); // len is 5.0990\n~~~~\n\n`length' involves a square root calculation, which is one of the\nslowest things you can do in programming. If you don't need an exact\nnumber but rather just a rough idea of a length (for example when\nfinding the shortest distance of a bunch of points to a reference\npoint, where it doesn't matter exactly what the lengths are, you just\nwant the shortest), you can use lengthSquared() instead.\n\n\n\n\n\n_description: _\n\nReturn the length (magnitude) of this vector.\n\n~~~~{.cpp}\nofVec3f v(3, 4, 1);\nfloat len = v.length(); // len is 5.0990\n~~~~\n\n'length' involves a square root calculation, which is one of the slowest things you can do in programming. If you don't need an exact number but rather just a rough idea of a length (for example when finding the shortest distance of a bunch of points to a reference point, where it doesn't matter exactly what the lengths are, you just want the shortest), you can use ['squareLength'](#squareLength) instead.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float lengthSquared()\n\n<!--\n_syntax: lengthSquared()_\n_name: lengthSquared_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: 007_\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn the squared length (squared magnitude) of this vector.\n\n~~~~{.cpp}\nofVec3f v(3, 4, 1);\nfloat len = v.length(); // len is 5.0990\n~~~~\n\nUse as a much faster alternative to length() if you don't need\nto know an accurate length but rather just a rough idea of a length (for\nexample when finding the shortest distance of a bunch of points to a\nreference point, where it doesn't matter exactly what the lengths are, you\njust want the shortest). It avoids the square root calculation that is\nordinarily required to calculate a length.\n\n\n\n\n\n_description: _\n\nReturn the squared length (squared magnitude) of this vector.\n\n~~~~{.cpp}\nofVec3f v(3, 4, 1);\nfloat len = v.length(); // len is 5.0990\n~~~~\n\nUse as a much faster alternative to ['length'](#length) if you don't need to know an accurate length but rather just a rough idea of a length (for example when finding the shortest distance of a bunch of points to a reference point, where it doesn't matter exactly what the lengths are, you just want the shortest). It avoids the square root calculation that is ordinarily required to calculate a length.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f & limit(max)\n\n<!--\n_syntax: limit(max)_\n_name: limit_\n_returns: ofVec3f &_\n_returns_description: _\n_parameters: float max_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRestrict the length (magnitude) of this vector to a maximum of 'max'\nunits by scaling down if necessary.\n\n~~~~{.cpp}\nofVec3f v1(5, 0, 1); // length is about 5.1\nofVec3f v2(2, 0, 1); // length is about 2.2\nv1.limit(3);\n// v1 is now (2.9417, 0, 0.58835) which has length of 3 in the same direction as at initialization\nv2.limit(3);\n// v2 is unchanged\n~~~~\n\n\n\n\n\n_description: _\n\nRestrict the length (magnitude) of this vector to a maximum of 'max' units by scaling down if necessary.\n\n~~~~{.cpp}\nofVec3f v1(5, 0, 1); // length is about 5.1\nofVec3f v2(2, 0, 1); // length is about 2.2\nv1.limit(3);\n// v1 is now (2.9417, 0, 0.58835) which has length of 3 in the same direction as at initialization\nv2.limit(3);\n// v2 is unchanged\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f & map(&origin, &vx, &vy, &vz)\n\n<!--\n_syntax: map(&origin, &vx, &vy, &vz)_\n_name: map_\n_returns: ofVec3f &_\n_returns_description: _\n_parameters: const ofVec3f &origin, const ofVec3f &vx, const ofVec3f &vy, const ofVec3f &vz_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMap this vector from its default coordinate system -- origin (0,0,0), X\ndirection (1,0,0), Y direction (0,1,0), Z direction (0,0,1) -- to a new\ncoordinate system defined with origin at 'origin', X direction 'vx', and Y\ndirection 'vy', and Z direction 'vz'.\n\n*In most cases you want 'vx', 'vy', and 'vz' to be perpendicular and of\nunit length; if they are not perpendicular you will have shearing as part\nof the mapping, and if they are not of unit length you will have scaling\nas part of the mapping.*\n\n\n\n\n\n_description: _\n\nMap this vector from its default coordinate system -- origin (0,0,0), X direction (1,0,0), Y direction (0,1,0), Z direction (0,0,1) -- to a new coordinate system defined with origin at 'origin', X direction 'vx', and Y direction 'vy', and Z direction 'vz'.\n\n*In most cases you want 'vx', 'vy', and 'vz' to be perpendicular and of unit length; if they are not perpendicular you will have shearing as part of the mapping, and if they are not of unit length you will have scaling as part of the mapping.*\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool match(&vec, tolerance = 0.0001f)\n\n<!--\n_syntax: match(&vec, tolerance = 0.0001f)_\n_name: match_\n_returns: bool_\n_returns_description: _\n_parameters: const ofVec3f &vec, float tolerance=0.0001f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nLet you check if two vectors are similar given a tolerance threshold\n'tolerance' (default = 0.0001).\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 70);\nofVec3f v2 = ofVec3f(40.01, 19.999, 70.05);\n// v1.match(v2, 0.1) is true\n// v1.match(v2, 0.01) is false (because (70.5-70) > 0.01)\n~~~~\n\n\n\n\n\n_description: _\n\nLet you check if two vectors are similar given a tolerance threshold 'tolerance' (default = 0.0001).\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 70);\nofVec3f v2 = ofVec3f(40.01, 19.999, 70.05);\n// v1.match(v2, 0.1) is true\n// v1.match(v2, 0.01) is false (because (70.5-70) > 0.01)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f & middle(&pnt)\n\n<!--\n_syntax: middle(&pnt)_\n_name: middle_\n_returns: ofVec3f &_\n_returns_description: _\n_parameters: const ofVec3f &pnt_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet this vector to the midpoint between itself and 'pnt'.\n\n~~~~{.cpp}\nofVec3f v1( 0, 5, 0 );\nofVec3f v2( 10, 10, 20);\n// go go gadget zeno\nv1.middle( v2 ); // v1 is now (5, 7.5, 10)\nv1.middle( v2 ); // v1 is now (7.5, 8.75, 15)\nv1.middle( v2 ); // v1 is now (8.75, 9.375, 17.5)\nv1.middle( v2 ); // v1 is now (9.375, 9.6875, 18.75)\n~~~~\n\n\n\n\n\n_description: _\n\nSet this vector to the midpoint between itself and 'pnt'.\n\n~~~~{.cpp}\nofVec3f v1( 0, 5, 0 );\nofVec3f v2( 10, 10, 20);\n// go go gadget zeno\nv1.middle( v2 ); // v1 is now (5, 7.5, 10)\nv1.middle( v2 ); // v1 is now (7.5, 8.75, 15)\nv1.middle( v2 ); // v1 is now (8.75, 9.375, 17.5)\nv1.middle( v2 ); // v1 is now (9.375, 9.6875, 18.75)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f & normalize()\n\n<!--\n_syntax: normalize()_\n_name: normalize_\n_returns: ofVec3f &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nNormalize the vector.\n\n*Normalizing* means to scale the vector so that its length (magnitude)\nis exactly 1, at which stage all that is left is the direction. A\nnormalized vector is usually called a *unit vector*, and can be used\nto represent a pure direction (heading).\n\n~~~~{.cpp}\nofVec3f v1(5, 0, 0);\nv1.normalize(); // v2 is now (1, 0, 0)\nofVec3f v2(5, 0, 5);\nv2.normalize(); // v2 is now (√2, 0, √2)\n~~~~\n\n\n\n\n\n_description: _\n\nNormalize the vector.\n\n*Normalizing* means to scale the vector so that its length (magnitude) is exactly 1, at which stage all that is left is the direction. A normalized vector is usually called a *unit vector*, and can be used to represent a pure direction (heading).\n\n~~~~{.cpp}\nofVec3f v1(5, 0, 0);\nv1.normalize(); // v2 is now (1, 0, 0)\nofVec3f v2(5, 0, 5);\nv2.normalize(); // v2 is now (√2, 0, √2)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVec3f(&vec)\n\n<!--\n_syntax: ofVec3f(&vec)_\n_name: ofVec3f_\n_returns: _\n_returns_description: _\n_parameters: const ofVec2f &vec_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n//\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVec3f(&vec)\n\n<!--\n_syntax: ofVec3f(&vec)_\n_name: ofVec3f_\n_returns: _\n_returns_description: _\n_parameters: const ofVec4f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConstruct a new 3D vector from a 4D vector by\nthrowing away the 'w' component.\n\n~~~~{.cpp}\nofVec3f mom = ofVec4f(40, 20, 10, 100);\nofVec3f v(mom); // v is (40, 20, 10)\n~~~~\n\n\n\n\n\n_description: _\n\nConstruct a new 3D vector ('ofxVec3f') from a 4D vector 'vec' by throwing away the 'w' component.\n\n~~~~{.cpp}\nofVec3f mom = ofVec4f(40, 20, 10, 100);\nofVec3f v(mom); // v is (40, 20, 10)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVec3f(&vec)\n\n<!--\n_syntax: ofVec3f(&vec)_\n_name: ofVec3f_\n_returns: _\n_returns_description: _\n_parameters: const glm::vec2 &vec_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVec3f(&vec)\n\n<!--\n_syntax: ofVec3f(&vec)_\n_name: ofVec3f_\n_returns: _\n_returns_description: _\n_parameters: const glm::vec3 &vec_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVec3f(&vec)\n\n<!--\n_syntax: ofVec3f(&vec)_\n_name: ofVec3f_\n_returns: _\n_returns_description: _\n_parameters: const glm::vec4 &vec_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVec3f()\n\n<!--\n_syntax: ofVec3f()_\n_name: ofVec3f_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConstruct a 3D vector. Defaults to (0,0,0).\n\n~~~~{.cpp}\nofVec3f v1;\n// default: v1.x is 0, v1.y is 0, v1.z is 0\n\nofVec3f v2 = ofVec3f(40, 20, 10);\n// v2.x is 40, v2.y is 20, v2.z is 10\n\nofVec3f v3(0.1, 0.3, -1.5);\n// v3.x is 0.1, v3.y is 0.3, v3.z is -1.5\n~~~~\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVec3f(scalar)\n\n<!--\n_syntax: ofVec3f(scalar)_\n_name: ofVec3f_\n_returns: _\n_returns_description: _\n_parameters: float scalar_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConstruct a 3D vector with `x`, `y` and `z` set to `scalar`\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVec3f(x, y, z)\n\n<!--\n_syntax: ofVec3f(x, y, z)_\n_name: ofVec3f_\n_returns: _\n_returns_description: _\n_parameters: float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConstrut a 3D vector with `x`, `y` and `z` specified\n\n\n\n\n\n_description: _\n\nConstruct a 3D vector. Defaults to (0,0).\n\n~~~~{.cpp}\nofVec3f v1; // default: v1.x is 0, v1.y is 0, v1.z is 0\nofVec3f v2 = ofVec3f(40, 20, 10); // v2.x is 40, v2.y is 20, v2.z is 10\nofVec3f v3(0.1, 0.3, -1.5); // v3.x is 0.1, v3.y is 0.3, v3.z is -1.5\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f one()\n\n<!--\n_syntax: one()_\n_name: one_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool operator!=(&vec)\n\n<!--\n_syntax: operator!=(&vec)_\n_name: operator!=_\n_returns: bool_\n_returns_description: _\n_parameters: const ofVec3f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns 'true' if any component is different to its corresponding component in\n'vec', ie if 'x != vec.x' or 'y != vec.y' or 'z != vec.z'; otherwise returns\n'false'.\n\n~~~~{.cpp}\nofVec3f v1(40, 20, 10);\nofVec3f v2(50, 20, 40);\nofVec3f v3(40, 20, 10);\n// ( v1 != v2 ) is true\n// ( v1 != v3 ) is false\n~~~~\n\n\n\n\n\n_description: _\n\nReturns 'true' if any component is different to its corresponding component in 'vec', ie if 'x != vec.x' or 'y != vec.y' or 'z != vec.z'; otherwise returns 'false'.\n\n~~~~{.cpp}\nofVec3f v1(40, 20, 10);\nofVec3f v2(50, 20, 40);\nofVec3f v3(40, 20, 10);\n// ( v1 != v2 ) is true\n// ( v1 != v3 ) is false\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f operator*(&vec)\n\n<!--\n_syntax: operator*(&vec)_\n_name: operator*_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: const ofVec3f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a new vector ('x'*'vec.x','y'*'vec.y','z'*'vec.z').\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 10); inline\nofVec3f v2 = ofVec3f(2, 4, 10);\nofVec3f v3 = v1 * v2; // (80, 80, 100)\n~~~~\n\nUseful for scaling a 3D point by a non-uniform scale.\n\n\n\n\n\n_description: _\n\nReturns a new vector ('x'*'vec.x','y'*'vec.y','z'*'vec.z').\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 10);\nofVec3f v2 = ofVec3f(2, 4, 10);\nofVec3f v3 = v1 * v2; // (80, 80, 100)\n~~~~\n\nUseful for scaling a 3D point by a non-uniform scale.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f operator*(f)\n\n<!--\n_syntax: operator*(f)_\n_name: operator*_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: const float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn a new 'ofVec3f' that is this vector scaled by multiplying 'x', 'y', 'z'\nmembers by 'f'.\n\n~~~~{.cpp}\nofVec3f v1(2, 5, 1);\nofVec3f v2 = v1 * 4; // (8, 20, 4)\n~~~~\n\n\n\n\n\n_description: _\n\nReturn a new 'ofVec3f' that is this vector scaled by multiplying 'x', 'y', 'z' members by 'f'.\n\n~~~~{.cpp}\nofVec3f v1(2, 5, 1);\nofVec3f v2 = v1 * 4; // (8, 20, 4)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f & operator*=(&vec)\n\n<!--\n_syntax: operator*=(&vec)_\n_name: operator*=_\n_returns: ofVec3f &_\n_returns_description: _\n_parameters: const ofVec3f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMultiplies 'x' by 'vec.x', and multiplies 'y' by 'vec.y', and multiplies 'z'\nby 'vec.z'.\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 10);\nofVec3f v2 = ofVec3f(2, 4, 10);\nv1 *= v2; // v1 is now (80, 80, 100)\n~~~~\n\nUseful for scaling a 3D point by a non-uniform scale.\n\n\n\n\n\n_description: _\n\nMultiplies 'x' by 'vec.x', and multiplies 'y' by 'vec.y', and multiplies 'z' by 'vec.z'.\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 10);\nofVec3f v2 = ofVec3f(2, 4, 10);\nv1 *= v2; // v1 is now (80, 80, 100)\n~~~~\n\nUseful for scaling a 3D point by a non-uniform scale.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f & operator*=(f)\n\n<!--\n_syntax: operator*=(f)_\n_name: operator*=_\n_returns: ofVec3f &_\n_returns_description: _\n_parameters: const float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nScale this vector by multiplying 'x', 'y' and 'z' members by 'f'.\n\n~~~~{.cpp}\nofVec3f v1(2, 5, 1);\nv1 *= 4; // (8, 20, 4)\n~~~~\n\n\n\n\n\n_description: _\n\nScale this vector by multiplying 'x', 'y' and 'z' members by 'f'.\n\n~~~~{.cpp}\nofVec3f v1(2, 5, 1);\nv1 *= 4; // (8, 20, 4)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f operator+(&pnt)\n\n<!--\n_syntax: operator+(&pnt)_\n_name: operator+_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: const ofVec3f &pnt_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSuper easy vector addition. Returns a new vector\n('x'+'vec.x','y'+'vec.y','z'+'vec.z').\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 10);\nofVec3f v2 = ofVec3f(25, 50, 10);\nofVec3f v3 = v1 + v2; // v3 is (65, 70, 20)\n~~~~\n\n\n\n\n\n_description: _\n\nSuper easy vector addition. Returns a new vector ('x'+'vec.x','y'+'vec.y','z'+'vec.z').\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 10);\nofVec3f v2 = ofVec3f(25, 50, 10);\nofVec3f v3 = v1 + v2; // v3 is (65, 70, 20)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f operator+(f)\n\n<!--\n_syntax: operator+(f)_\n_name: operator+_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: const float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a new vector with a float value 'f' added to 'x', 'y' and 'z'\nmembers.\n\n~~~~{.cpp}\nofVec3f v1(2, 5, 1);\nofVec3f v2 = v1 + 10; // (12, 15, 11)\n~~~~\n\n\n\n\n\n_description: _\n\nReturns a new vector with a float value 'f' added to 'x', 'y' and 'z' members.\n\n~~~~{.cpp}\nofVec3f v1(2, 5, 1);\nofVec3f v2 = v1 + 10; // (12, 15, 11)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f & operator+=(&pnt)\n\n<!--\n_syntax: operator+=(&pnt)_\n_name: operator+=_\n_returns: ofVec3f &_\n_returns_description: _\n_parameters: const ofVec3f &pnt_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSuper easy addition assignment. Adds 'vec.x' to 'x', adds 'vec.y' to 'y' and\nadds 'vec.z' to 'z'.\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 10);\nofVec3f v2 = ofVec3f(25, 50, 10);\nv1 += v2; // v1 is (65, 70, 20)\n~~~~\n\n\n\n\n\n_description: _\n\nSuper easy addition assignment. Adds 'vec.x' to 'x', adds 'vec.y' to 'y' and adds 'vec.z' to 'z'.\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 10);\nofVec3f v2 = ofVec3f(25, 50, 10);\nv1 += v2; // v1 is (65, 70, 20)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f & operator+=(f)\n\n<!--\n_syntax: operator+=(f)_\n_name: operator+=_\n_returns: ofVec3f &_\n_returns_description: _\n_parameters: const float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdds a float value 'f' to 'x', 'y' and 'z' members.\n\n~~~~{.cpp}\nofVec3f v1(2, 5, 1);\nv1 += 10; // (12, 15, 11)\n~~~~\n\n\n\n\n\n_description: _\n\nAdds a float value 'f' to 'x', 'y' and 'z' members.\n\n~~~~{.cpp}\nofVec3f v1(2, 5, 1);\nv1 += 10; // (12, 15, 11)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f operator-(&vec)\n\n<!--\n_syntax: operator-(&vec)_\n_name: operator-_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: const ofVec3f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSuper easy vector subtraction. Returns a new vector\n('x'-'vec.x','y'-'vec.y','z'-'vec.z').\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 10);\nofVec3f v2 = ofVec3f(25, 50, 10);\nofVec3f v3 = v1 - v2; // v3 is (15, -30, 0)\n~~~~\n\n\n\n\n\n_description: _\n\nSuper easy vector subtraction. Returns a new vector ('x'-'vec.x','y'-'vec.y','z'-'vec.z').\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 10);\nofVec3f v2 = ofVec3f(25, 50, 10);\nofVec3f v3 = v1 - v2; // v3 is (15, -30, 0)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f operator-()\n\n<!--\n_syntax: operator-()_\n_name: operator-_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a new 'ofVec3f' that is the inverted version (mirrored in X, Y and Z)\nof this vector.\n\n~~~~{.cpp}\nofVec3f v1(2, 5, 1);\nofVec3f v2 = -v1; // (-2, -5, -1)\n~~~~\n\n\n\n\n\n_description: _\n\nReturns a new 'ofVec3f' that is the inverted version (mirrored in X, Y and Z) of this vector.\n\n~~~~{.cpp}\nofVec3f v1(2, 5, 1);\nofVec3f v2 = -v1; // (-2, -5, -1)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f operator-(f)\n\n<!--\n_syntax: operator-(f)_\n_name: operator-_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: const float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a new vector with a float value 'f' subtracted from 'x', 'y' and 'z'\nmembers.\n\n~~~~{.cpp}\nofVec3f v1(2, 5, 1);\nofVec3f v2 = v1 - 10; // (-8, -5, -9)\n~~~~\n\n\n\n\n\n_description: _\n\nReturns a new vector with a float value 'f' subtracted from 'x', 'y' and 'z' members.\n\n~~~~{.cpp}\nofVec3f v1(2, 5, 1);\nofVec3f v2 = v1 - 10; // (-8, -5, -9)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f & operator-=(&vec)\n\n<!--\n_syntax: operator-=(&vec)_\n_name: operator-=_\n_returns: ofVec3f &_\n_returns_description: _\n_parameters: const ofVec3f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSuper easy subtraction assignment. Subtracts 'vec.x' from 'x', subtracts\n'vec.y' from 'y' and subtracts 'vec.z' from 'z'.\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 10);\nofVec3f v2 = ofVec3f(25, 50, 10);\nv1 -= v2; // v1 is (15, -30, 0)\n~~~~\n\n\n\n\n\n_description: _\n\nSuper easy subtraction assignment. Subtracts 'vec.x' from 'x', subtracts 'vec.y' from 'y' and subtracts 'vec.z' from 'z'.\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 10);\nofVec3f v2 = ofVec3f(25, 50, 10);\nv1 -= v2; // v1 is (15, -30, 0)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f & operator-=(f)\n\n<!--\n_syntax: operator-=(f)_\n_name: operator-=_\n_returns: ofVec3f &_\n_returns_description: _\n_parameters: const float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSubtract a float value 'f' from 'x', 'y', and 'z' members.\n\n~~~~{.cpp}\nofVec3f v1(2, 5, 1);\nv1 -= 10; // (-8, -5, -9)\n~~~~\n\n\n\n\n\n_description: _\n\nSubtract a float value 'f' from 'x', 'y', and 'z' members.\n\n~~~~{.cpp}\nofVec3f v1(2, 5, 1);\nv1 -= 10; // (-8, -5, -9)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f operator/(&vec)\n\n<!--\n_syntax: operator/(&vec)_\n_name: operator/_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: const ofVec3f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a new vector ('x'/'vec.x','y'/'vec.y','z'/'vec.z').\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 10);\nofVec3f v2 = ofVec3f(2, 4, 10);\nofVec3f v3 = v1 / v2; // (20, 5, 1)\n~~~~\n\nUseful for scaling a 3D point by a non-uniform scale.\n\n\n\n\n\n_description: _\n\nReturns a new vector ('x'/'vec.x','y'/'vec.y','z'/'vec.z').\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 10);\nofVec3f v2 = ofVec3f(2, 4, 10);\nofVec3f v3 = v1 / v2; // (20, 5, 1)\n~~~~\n\nUseful for scaling a 3D point by a non-uniform scale.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f operator/(f)\n\n<!--\n_syntax: operator/(f)_\n_name: operator/_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: const float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn a new 'ofVec3f' that is this vector scaled by dividing 'x', 'y'\nand 'z' members by 'f'.\n\n~~~~{.cpp}\nofVec3f v1(2, 5, 1);\nofVec3f v2 = v1 / 4; // (0.5, 1.25, 0.25)\n~~~~\n\n\n\n\n\n_description: _\n\nReturn a new 'ofVec3f' that is this vector scaled by dividing 'x', 'y' and 'z' members by 'f'.\n\n~~~~{.cpp}\nofVec3f v1(2, 5, 1);\nofVec3f v2 = v1 / 4; // (0.5, 1.25, 0.25)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f & operator/=(&vec)\n\n<!--\n_syntax: operator/=(&vec)_\n_name: operator/=_\n_returns: ofVec3f &_\n_returns_description: _\n_parameters: const ofVec3f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDivides 'x' by 'vec.x', divides 'y' by 'vec.y', and divides 'z' by 'vec.z'.\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 10);\nofVec3f v2 = ofVec3f(2, 4, 10);\nv1 *= v2; // v1 is now (20, 5, 1)\n~~~~\n\nUseful for scaling a 3D point by a non-uniform scale.\n\n\n\n\n\n_description: _\n\nDivides 'x' by 'vec.x', divides 'y' by 'vec.y', and divides 'z' by 'vec.z'.\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 10);\nofVec3f v2 = ofVec3f(2, 4, 10);\nv1 *= v2; // v1 is now (20, 5, 1)\n~~~~\n\nUseful for scaling a 3D point by a non-uniform scale.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f & operator/=(f)\n\n<!--\n_syntax: operator/=(f)_\n_name: operator/=_\n_returns: ofVec3f &_\n_returns_description: _\n_parameters: const float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nScale this vector by dividing 'x', 'y' and 'z' members by 'f'.\n\n~~~~{.cpp}\nofVec3f v1(2, 5, 1);\nv1 /= 4; // (0.5, 1.25, 0.25)\n~~~~\n\n\n\n\n\n_description: _\n\nScale this vector by dividing 'x', 'y' and 'z' members by 'f'.\n\n~~~~{.cpp}\nofVec3f v1(2, 5, 1);\nv1 /= 4; // (0.5, 1.25, 0.25)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool operator==(&vec)\n\n<!--\n_syntax: operator==(&vec)_\n_name: operator==_\n_returns: bool_\n_returns_description: _\n_parameters: const ofVec3f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCheck for equality between two ofVec3f\n\nReturns 'true' if each component is the same as the corresponding component in\n'vec', ie if 'x == vec.x' and 'y == vec.y' and 'z == vec.z'; otherwise returns\n'false'. But you should probably be using ['match'](#match) instead.\n\n~~~~{.cpp}\nofVec3f v1(40, 20, 10);\nofVec3f v2(50, 30, 10);\nofVec3f v3(40, 20, 10);\n// ( v1 == v2 ) is false\n// ( v1 == v3 ) is true\n~~~~\n\n\n\n\n\n_description: _\n\nReturns 'true' if each component is the same as the corresponding component in 'vec', ie if 'x == vec.x' and 'y == vec.y' and 'z == vec.z'; otherwise returns 'false'. But you should probably be using ['match'](#match) instead.\n\n~~~~{.cpp}\nofVec3f v1(40, 20, 10);\nofVec3f v2(50, 30, 10);\nofVec3f v3(40, 20, 10);\n// ( v1 == v2 ) is false\n// ( v1 == v3 ) is true\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float & operator[](n)\n\n<!--\n_syntax: operator[](n)_\n_name: operator[]_\n_returns: float &_\n_returns_description: _\n_parameters: int n_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAllows to access the individual components of an 'ofVec3f' as though it is an\narray\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 10);\nfloat x = v1[0]; // x is 40\nfloat y = v1[1]; // y is 20\nfloat z = v1[2]; // z is 10\n~~~~\n\nThis function can be handy if you want to do the same operation to all 'x',\n'y' and 'z' components, as it means you can just make a 'for' loop that\nrepeats 3 times.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float operator[](n)\n\n<!--\n_syntax: operator[](n)_\n_name: operator[]_\n_returns: float_\n_returns_description: _\n_parameters: int n_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nAllows to access the individual components of an 'ofVec3f' as though it is an array:\n\n~~~~{.cpp}\nofVec3f v1 = ofVec3f(40, 20, 10);\nfloat x = v1[0]; // x is 40\nfloat y = v1[1]; // y is 20\nfloat z = v1[2]; // z is 10\n~~~~\n\nThis function can be handy if you want to do the same operation to all 'x', 'y' and 'z' components, as it means you can just make a 'for' loop that repeats 3 times.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f & perpendicular(&vec)\n\n<!--\n_syntax: perpendicular(&vec)_\n_name: perpendicular_\n_returns: ofVec3f &_\n_returns_description: _\n_parameters: const ofVec3f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConstruct a plane using this vector and 'vec' (by finding the plane that both\nlie on), and set our 'x', 'y' and 'z' to be the vector that is perpendicular\nto the constructed plane (the normal to the plane).\n\n~~~~{.cpp}\nofSetLogLevel(OF_LOG_NOTICE);\nofVec3f v1(1,0,0);\nofVec3f v2(0,1,0);\nv1.perpendicular(v2);\nofLog(OF_LOG_NOTICE, \"%1.1f, %1.1f, %1.1f\\n\", v1.x, v1.y, v1.z);\n// prints \"0.0, 0.0, 1.0'\n~~~~\n\nThis method is usually used to calculate a normal vector to a surface, which\ncan then be used to calculate lighting, collisions, and other 3D effects.\n\n\n\n\n\n_description: _\n\nConstruct a plane using this vector and 'vec' (by finding the plane that both lie on), and set our 'x', 'y' and 'z' to be the vector that is perpendicular to the constructed plane (the normal to the plane).\n\n~~~~{.cpp}\nofSetLogLevel(OF_LOG_NOTICE);\nofVec3f v1(1,0,0);\nofVec3f v2(0,1,0);\nv1.perpendicular(v2);\nofLog(OF_LOG_NOTICE, \"%1.1f, %1.1f, %1.1f\\n\", v1.x, v1.y, v1.z);\n// prints \"0.0, 0.0, 1.0'\n~~~~\n\nThis method is usually used to calculate a normal vector to a surface, which can then be used to calculate lighting, collisions, and other 3D effects.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f & rotate(angle, &axis)\n\n<!--\n_syntax: rotate(angle, &axis)_\n_name: rotate_\n_returns: ofVec3f &_\n_returns_description: _\n_parameters: float angle, const ofVec3f &axis_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotates this vector by 'angle' degrees around the given axis.\n\n~~~~{.cpp}\nofVec3f v1(1, 0, 0);\nofVec3f v2(1, 0, 0);\nv1.rotate(45, ofVec3f(0, 0, 1)); // v1 is now (0.707, 0.707, 0)\nv2.rotate(45, ofVec3f(0, 1, 0)); // v2 is now (0.707, 0, -0.707)\n~~~~\n\n\n\n\n\n_description: _\n\nReturn a new 'ofVec3f' that is the result of rotating this vector by 'angle' degrees around the given axis.\n\n~~~~{.cpp}\nofVec3f v1(1, 0, 0);\n// rotate v1 around the z axis\nv1.rotate(45, ofVec3f(0, 0, 1)); // v2 is (√2, √2, 0)\n\nv1.set(1, 0, 0);\n// then rotate around the y axis\nv1.rotate(45, ofVec3f(0, 1, 0)); // v3 is (√2, 0, √2)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f & rotate(angle, &pivot, &axis)\n\n<!--\n_syntax: rotate(angle, &pivot, &axis)_\n_name: rotate_\n_returns: ofVec3f &_\n_returns_description: _\n_parameters: float angle, const ofVec3f &pivot, const ofVec3f &axis_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotates this vector by 'angle' degrees about the axis specified by 'axis',\nusing 'pivot' as the origin of rotation.\n\n\n\n\n\n_description: _\n\nRotate this vector by 'angle' degrees around the axis specified by 'axis', using 'pivot' as the origin of rotation.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f & rotate(ax, ay, az)\n\n<!--\n_syntax: rotate(ax, ay, az)_\n_name: rotate_\n_returns: ofVec3f &_\n_returns_description: _\n_parameters: float ax, float ay, float az_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nPerforms an Euler rotation of this vector by 'ax' degrees about the\nx axis, 'ay' degrees about the y axis, and 'az' degrees about the z axis.\n\n~~~~~{.cpp}\nofVec3f v1(1, 0, 0);\nofVec3f v2(1, 0, 0);\nv1.rotate(0, 0, 45); // v1 is now (0.707, 0.707, 0)\nv2.rotate(0, 45, 0); // v2 is now (0.707, 0, -0.707)\n~~~~~\n\nWatch out for gimbal lock when specifying multiple rotations in the same call.\n\n\n\n\n\n_description: _\n\nPerform an Euler rotation of this vector around three axes: 'ax' degrees about the x axis, 'ay' about the y axis and 'az' about the z axis.\n\n~~~~~{.cpp}\nofVec3f v( 1, 0, 0 );\nv.rotate( 0, 0, 90 ); // v is now (0, 1, 0)\nv.rotate( 45, 0, 0 ); // v is now (0, √2, √2)\n~~~~~\n\nWatch out for gimbal lock when specifying multiple rotations in the same call.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f & rotateRad(angle, &axis)\n\n<!--\n_syntax: rotateRad(angle, &axis)_\n_name: rotateRad_\n_returns: ofVec3f &_\n_returns_description: _\n_parameters: float angle, const ofVec3f &axis_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotates this vector by 'angle' radians about the given axis.\n\n~~~~{.cpp}\nofVec3f v1(1, 0, 0);\nofVec3f v2(1, 0, 0)\nv1.rotateRad(PI / 4, ofVec3f(0, 0, 1)); // v1 is now (0.707, 0.707, 0)\nv2.rotateRad(PI / 4, ofVec3f(0, 1, 0)); // v2 is now (0.707, 0, -0.707)\n~~~~\n\n\n\n\n\n_description: _\n\nReturn a new 'ofVec3f' that is the result of rotating this vector by 'angle' degrees around the given axis.\n\n~~~~{.cpp}\nofVec3f v1(1, 0, 0);\n// rotate v1 around the z axis\nv1.rotate(45, ofVec3f(0, 0, 1)); // v2 is (√2, √2, 0)\n\nv1.set(1, 0, 0);\n// then rotate around the y axis\nv1.rotate(45, ofVec3f(0, 1, 0)); // v3 is (√2, 0, √2)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f & rotateRad(angle, &pivot, &axis)\n\n<!--\n_syntax: rotateRad(angle, &pivot, &axis)_\n_name: rotateRad_\n_returns: ofVec3f &_\n_returns_description: _\n_parameters: float angle, const ofVec3f &pivot, const ofVec3f &axis_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotates this vector by 'angle' radians around the axis specified by 'axis',\nusing 'pivot' as the origin of rotation.\n\n\n\n\n\n_description: _\n\nRotate this vector by 'angle' radians around the axis specified by 'axis', using 'pivot' as the origin of rotation.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f & rotateRad(ax, ay, az)\n\n<!--\n_syntax: rotateRad(ax, ay, az)_\n_name: rotateRad_\n_returns: ofVec3f &_\n_returns_description: _\n_parameters: float ax, float ay, float az_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nPerforms an Euler rotation of this vector by 'ax' radians about\nthe x axis, 'ay' radians about the y axis, and 'az' radians about the z axis.\n\n~~~~~{.cpp}\nofVec3f v1(1, 0, 0);\nofVec3f v2(1, 0, 0);\nv1.rotateRad(0, 0, PI / 4); // v1 is now (0.707, 0.707, 0)\nv2.rotateRad(0, PI / 4, 0); // v2 is now (0.707, 0, -0.707)\n~~~~~\n\nWatch out for gimbal lock when specifying multiple rotations in the same call.\n\n\n\n\n\n_description: _\n\nPerform an Euler rotation of this vector around three axes: 'ax' radians about the x axis, 'ay' about the y axis and 'az' about the z axis.\n\n~~~~~{.cpp}\nofVec3f v( 1, 0, 0 );\nv.rotateRad( 0, 0, HALF_PI ); // v is now (0, 1, 0)\nv.rotateRad( PI/4, 0, 0 ); // v is now (0, √2, √2)\n~~~~~\n\nWatch out for gimbal lock when specifying multiple rotations in the same call.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f & scale(length)\n\n<!--\n_syntax: scale(length)_\n_name: scale_\n_returns: ofVec3f &_\n_returns_description: _\n_parameters: const float length_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nScales this vector up or down so that it has the requested length.\n\n~~~~{.cpp}\nofVec3f v1(3, 4); // length is 5\nv1.scale(15); // v1 is now (9, 12), which has length of 15\n~~~~\n\n\n\n\n\n_description: _\n\nScales this vector up or down so that it has the requested length.\n\n~~~~{.cpp}\nofVec3f v1(3, 4); // length is 5\nv1.scale(15); // v1 is now (9, 12), which has length of 15\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(&vec)\n\n<!--\n_syntax: set(&vec)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSetting the values by using other 3 dimension vector ofVec3f.\n\n~~~~{.cpp}\nofVec3f v1;\nofVec3f v2;\nv1.set(40, 20, 70);\nv2.set(v1);\n~~~~\n\n\n\n\n\n_description: _\n\nSetting the values by using other 3 dimension vector ('ofVec3f').\n\n~~~~{.cpp}\nofVec3f v1;\nofVec3f v2;\nv1.set(40, 20, 70);\nv2.set(v1);\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(_scalar)\n\n<!--\n_syntax: set(_scalar)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float _scalar_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(x, y, z)\n\n<!--\n_syntax: set(x, y, z)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet 'x', 'y' and 'z' components of this vector with just one function call.\n'z' is optional, it defaults to 0.\n\n~~~~{.cpp}\nofVec3f v1;\nv1.set(40, 20, 70);\n~~~~\n\n\n\n\n\n_description: _\n\nSet 'x', 'y' and 'z' components of this vector with just one function call. 'z' is optional, it defaults to 0.\n\n~~~~{.cpp}\nofVec3f v1;\nv1.set(40, 20, 70);\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float squareDistance(&pnt)\n\n<!--\n_syntax: squareDistance(&pnt)_\n_name: squareDistance_\n_returns: float_\n_returns_description: _\n_parameters: const ofVec3f &pnt_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTreats both this vector and 'pnt' as points in 3D space, and calculates and\nreturns the squared distance between them.\n\n~~~~{.cpp}\nofVec3f p1(3, 4, 2);\nofVec3f p2(6, 8, 5);\nfloat distance = p1.distance( p2 ); // distance is 5.8310\n~~~~\n\nUse as a much faster alternative to distance() if you don't need\nto know an exact number but rather just a rough idea of distance (for example\nwhen finding the shortest distance of a bunch of points to a reference point,\nwhere it doesn't matter exactly what the distances are, you just want the\nshortest). It avoids the square root calculation that is ordinarily required\nto calculate a length.\n\n\n\n\n\n_description: _\n\nTreats both this vector and 'pnt' as points in 3D space, and calculates and returns the squared distance between them.\n\n~~~~{.cpp}\nofVec3f p1(3, 4, 2);\nofVec3f p2(6, 8, 5);\nfloat distance = p1.distance( p2 ); // distance is 5.8310\n~~~~\n\nUse as a much faster alternative to ['distance'](#distance) if you don't need to know an exact number but rather just a rough idea of distance (for example when finding the shortest distance of a bunch of points to a reference point, where it doesn't matter exactly what the distances are, you just want the shortest). It avoids the square root calculation that is ordinarily required to calculate a length.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f zero()\n\n<!--\n_syntax: zero()_\n_name: zero_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###const int DIM\n\n<!--\n_name: DIM_\n_type: const int_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\cond INTERNAL\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float x\n\n<!--\n_name: x_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nStores the `X` component of this vector.\n\n\n\n\n\n_description: _\n\nStores the X component of this vector.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float y\n\n<!--\n_name: y_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nStores the `Y` component of this vector.\n\n\n\n\n\n_description: _\n\nStores the Y component of this vector.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float z\n\n<!--\n_name: z_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nStores the `Z` component of this vector.\n\n\n\n\n\n_description: _\n\nStores the Z component of this vector.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}