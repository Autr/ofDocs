{"entry":{"name":"ofLog_functions","filename":"ofLog_functions.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/utils/ofLog_functions.markdown","path":"/documentation/utils/ofLog_functions","route":"/documentation/utils/ofLog_functions.markdown","dir":"../ofSite/documentation/utils","ext":"markdown","type":"page","id":496,"parent":478,"breadcrumbs":[478,1],"siblings":[],"translations":{}},"description":{},"methods":[null,{"syntax":"ofGetLogLevel()","name":"ofGetLogLevel","returns":"ofLogLevel","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the currently set global logging level.</p>\n<p><strong>Returns</strong>: The currently set global logging level.</p>\n","desc":"<p>Get the current log level. This is useful when combined with ofGetLogLevelName() if you want to print the current log level:</p>\n<pre><code>ofLogLevel currentLevel <span class=\"token operator\">=</span> <span class=\"token function\">ofGetLogLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>The current log level is <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token function\">ofGetLogLevelName</span><span class=\"token punctuation\">(</span>currentLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"syntax":"ofGetLogLevel(module)","name":"ofGetLogLevel","returns":"ofLogLevel","returns_description":null,"parameters":"string module","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the logging level for a specific module.</p>\n<p><strong>Parameters:</strong></p>\n<p>module specific module name.</p>\n<p><strong>Returns</strong>: The currently set specific module logging level.</p>\n","desc":""},{"syntax":"ofGetLogLevelName(level, pad = false)","name":"ofGetLogLevelName","returns":"string","returns_description":null,"parameters":"ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> pad<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get log level name as a string.</p>\n<p><strong>Parameters:</strong></p>\n<p>level The ofLogLevel you want as a string.</p>\n<p>pad True if you want all log level names to be the same length.</p>\n<p><strong>Returns</strong>: The log level name as a string.</p>\n","desc":""},{"short":"<p>Get the current logger channel.</p>\n","desc":""},{"syntax":"ofLogToConsole()","name":"ofLogToConsole","returns":"void","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the logging to ouptut to the console.</p>\n<p>This is the default state and can be called to reset console logging\nafter ofLogToFile or ofSetLoggerChannel has been called.</p>\n","desc":""},{"syntax":"ofLogToFile(&path, append = false)","name":"ofLogToFile","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> append<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the logging to output to a file instead of the console.</p>\n<p><strong>Parameters:</strong></p>\n<p>path The path to the log file to use.</p>\n<p>append True if you want to append to the existing file.</p>\n","desc":"<p>Enable logging to a file instead of the console.\nSet the path and name of the log file and it will be created if it doesn't exist. If it does exist, it will be overwritten unless you set <em>append</em> to true, whereas new lines will be added to the bottom of the file.</p>\n<pre><code><span class=\"token comment\" spellcheck=\"true\">// logs to the console</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>a test string<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// enable file logging, append text</span>\n<span class=\"token comment\" spellcheck=\"true\">// the log file will be created in the data directory</span>\n<span class=\"token function\">ofLogToFile</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>myLogFile<span class=\"token punctuation\">.</span>txt<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// now logs to the file</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>a test string<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Note: When file logging is enabled, will not see log messages on the console!</p>\n"},{"syntax":"ofSetLogLevel(logLevel)","name":"ofSetLogLevel","returns":"void","returns_description":null,"parameters":"ofLogLevel level","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets the logging level to selectively show log messages.</p>\n<p>This is useful if you want see lots of messages when debugging,\nbut then set a higher level so only warnings and errors appear for users.</p>\n<p>ofLogLevel values in order from lowest to highest level are:</p>\n<ul>\n<li><code>OF_LOG_VERBOSE</code> (lowest level)</li>\n<li><code>OF_LOG_NOTICE</code></li>\n<li><code>OF_LOG_WARNING</code></li>\n<li><code>OF_LOG_ERROR</code></li>\n<li><code>OF_LOG_FATAL_ERROR</code></li>\n<li><code>OF_LOG_SILENT</code> (highest level)</li>\n</ul>\n<p>Thus, setting a log level of <code>OF_LOG_ERROR</code>, means only logging messages\nmarked OF_LOG_ERROR and OF_LOG_FATAL_ERROR will be printed. Conversely,\nsetting OF_LOG_VERBOSE means all log level messages, including\nOF_LOG_VERBOSE, will be printed.  Finally, setting a log level of\nOF_LOG_SILENT will prevent any messages from being printed.</p>\n<p>The default ofLogLevel is <code>OF_LOG_NOTICE</code>.</p>\n<p><strong>Parameters:</strong></p>\n<p>level the ofLogLevel (and below) you want to show</p>\n","desc":"<p>Sets the logging level so only messages above a certain priority are shown. This is useful if you want see lots of messages when debugging, but then set a higher level so only warnings and errors appear for users.\nlogLevel values are (in order of priority):\nOF_LOG_VERBOSE\nOF_LOG_NOTICE\nOF_LOG_WARNING\nOF_LOG_ERROR\nOF_LOG_FATAL_ERROR\nOF_LOG_SILENT\nFollowing priority, setting a log level of OF_LOG_ERROR, means only error &amp; fatal error messages will be printed. Conversely, setting OF_LOG_VERBOSE means <strong>all</strong> log level messages will be printed.\nHere's a code example:</p>\n<pre><code><span class=\"token comment\" spellcheck=\"true\">// set to warning level</span>\n<span class=\"token function\">ofSetLogLevel</span><span class=\"token punctuation\">(</span>OF_LOG_WARNING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>a warning print<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\" spellcheck=\"true\">// this prints</span>\n<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>test print<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">// this doesn't</span>\n<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>a verbose print<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\" spellcheck=\"true\">// this doesn't either</span>\n<span class=\"token comment\" spellcheck=\"true\">// set to notice level</span>\n<span class=\"token function\">ofSetLogLevel</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>a warning print<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\" spellcheck=\"true\">// this still prints</span>\n<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>test print<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">// this does too</span>\n<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>a verbose print<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\" spellcheck=\"true\">// this doesn't</span>\n</code></pre>\n<p>The default log level is OF_LOG_NOTICE.\nOF_LOG_SILENT is a special value which disables <strong>all</strong> messages.</p>\n"},{"syntax":"ofSetLogLevel(module, logLevel)","name":"ofSetLogLevel","returns":"void","returns_description":null,"parameters":"string module<span class=\"token punctuation\">,</span> ofLogLevel level","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the logging level for a specific module.</p>\n<p>When a module name is supplied to ofSetLogLevel, the provided ofLogLevel\nis selectively applied only to ofLog messages marked with the specified\nmodule.</p>\n<p>This is particularly useful when the user desires to, for example, log at\nan OF_LOG_VERBOSE level for one module and then log at OF_LOG_ERROR for\nanother module.</p>\n<p>Example of logging to a specific module:</p>\n<pre><code><span class=\"token comment\" spellcheck=\"true\">// Set the default log level for all logging.</span>\n<span class=\"token function\">ofSetLogLevel</span><span class=\"token punctuation\">(</span>OF_LOG_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Selectively enable verbose logging for the MyClass module.</span>\n<span class=\"token function\">ofSetLogLevel</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>MyClass<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> OF_LOG_VERBOSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// If we then log the following ...</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Log a vermose message to a module called &amp;quot;MyClass&amp;quot;.</span>\n<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>MyClass<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>A verbose message from MyClass<span class=\"token punctuation\">.</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Log a verbose message to a module called &amp;quot;MyOtherClass&amp;quot;.</span>\n<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>MyOtherClass<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>A verbose message from MyOtherClass<span class=\"token punctuation\">.</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// In this case, we will see the verbose message from &amp;quot;MyClass&amp;quot;, but not</span>\n<span class=\"token comment\" spellcheck=\"true\">// the message from &amp;quot;MyOtherClass&amp;quot;.</span>\n</code></pre>\n","desc":""},{"short":"<p>Set the logger to use a custom logger channel.</p>\n<p>Custom logger channels must extend ofBaseLoggerChannel. Custom log channels\ncan be useful for combining logging methods, logging to a server, logging\nto email or even Twitter.</p>\n<p><strong>Parameters:</strong></p>\n<p>loggerChannel A shared pointer to the logger channel.</p>\n","desc":""},{}],"document":"<p>#functions</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>##Description</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofLogLevel ofGetLogLevel()</p>\n<p>&lt;!--\n<em>syntax: ofGetLogLevel()</em>\n<em>name: ofGetLogLevel</em>\n<em>returns: ofLogLevel</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the currently set global logging level.</p>\n<p><strong>Returns</strong>: The currently set global logging level.</p>\n<p>_description: _</p>\n<p>Get the current log level. This is useful when combined with ofGetLogLevelName() if you want to print the current log level:</p>\n<pre><code>ofLogLevel currentLevel <span class=\"token operator\">=</span> <span class=\"token function\">ofGetLogLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>The current log level is <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token function\">ofGetLogLevelName</span><span class=\"token punctuation\">(</span>currentLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofLogLevel ofGetLogLevel(module)</p>\n<p>&lt;!--\n<em>syntax: ofGetLogLevel(module)</em>\n<em>name: ofGetLogLevel</em>\n<em>returns: ofLogLevel</em>\n_returns_description: _\n<em>parameters: string module</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the logging level for a specific module.</p>\n<p><strong>Parameters:</strong></p>\n<p>module specific module name.</p>\n<p><strong>Returns</strong>: The currently set specific module logging level.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string ofGetLogLevelName(level, pad = false)</p>\n<p>&lt;!--\n<em>syntax: ofGetLogLevelName(level, pad = false)</em>\n<em>name: ofGetLogLevelName</em>\n<em>returns: string</em>\n_returns_description: _\n<em>parameters: ofLogLevel level, bool pad=false</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get log level name as a string.</p>\n<p><strong>Parameters:</strong></p>\n<p>level The ofLogLevel you want as a string.</p>\n<p>pad True if you want all log level names to be the same length.</p>\n<p><strong>Returns</strong>: The log level name as a string.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###shared_ptr&lt; ofBaseLoggerChannel &gt; ofGetLoggerChannel()</p>\n<p>&lt;!--\n<em>syntax: ofGetLoggerChannel()</em>\n<em>name: ofGetLoggerChannel</em>\n<em>returns: shared_ptr&lt; ofBaseLoggerChannel &gt;</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the current logger channel.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofLogToConsole()</p>\n<p>&lt;!--\n<em>syntax: ofLogToConsole()</em>\n<em>name: ofLogToConsole</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the logging to ouptut to the console.</p>\n<p>This is the default state and can be called to reset console logging\nafter ofLogToFile or ofSetLoggerChannel has been called.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofLogToFile(&amp;path, append = false)</p>\n<p>&lt;!--\n<em>syntax: ofLogToFile(&amp;path, append = false)</em>\n<em>name: ofLogToFile</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const filesystem::path &amp;path, bool append=false</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the logging to output to a file instead of the console.</p>\n<p><strong>Parameters:</strong></p>\n<p>path The path to the log file to use.</p>\n<p>append True if you want to append to the existing file.</p>\n<p>_description: _</p>\n<p>Enable logging to a file instead of the console.\nSet the path and name of the log file and it will be created if it doesn't exist. If it does exist, it will be overwritten unless you set <em>append</em> to true, whereas new lines will be added to the bottom of the file.</p>\n<pre><code><span class=\"token comment\" spellcheck=\"true\">// logs to the console</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>a test string<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// enable file logging, append text</span>\n<span class=\"token comment\" spellcheck=\"true\">// the log file will be created in the data directory</span>\n<span class=\"token function\">ofLogToFile</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>myLogFile<span class=\"token punctuation\">.</span>txt<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// now logs to the file</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>a test string<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Note: When file logging is enabled, will not see log messages on the console!</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetLogLevel(logLevel)</p>\n<p>&lt;!--\n<em>syntax: ofSetLogLevel(logLevel)</em>\n<em>name: ofSetLogLevel</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofLogLevel level</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets the logging level to selectively show log messages.</p>\n<p>This is useful if you want see lots of messages when debugging,\nbut then set a higher level so only warnings and errors appear for users.</p>\n<p>ofLogLevel values in order from lowest to highest level are:</p>\n<ul>\n<li><code>OF_LOG_VERBOSE</code> (lowest level)</li>\n<li><code>OF_LOG_NOTICE</code></li>\n<li><code>OF_LOG_WARNING</code></li>\n<li><code>OF_LOG_ERROR</code></li>\n<li><code>OF_LOG_FATAL_ERROR</code></li>\n<li><code>OF_LOG_SILENT</code> (highest level)</li>\n</ul>\n<p>Thus, setting a log level of <code>OF_LOG_ERROR</code>, means only logging messages\nmarked OF_LOG_ERROR and OF_LOG_FATAL_ERROR will be printed. Conversely,\nsetting OF_LOG_VERBOSE means all log level messages, including\nOF_LOG_VERBOSE, will be printed.  Finally, setting a log level of\nOF_LOG_SILENT will prevent any messages from being printed.</p>\n<p>The default ofLogLevel is <code>OF_LOG_NOTICE</code>.</p>\n<p><strong>Parameters:</strong></p>\n<p>level the ofLogLevel (and below) you want to show</p>\n<p>_description: _</p>\n<p>Sets the logging level so only messages above a certain priority are shown. This is useful if you want see lots of messages when debugging, but then set a higher level so only warnings and errors appear for users.\nlogLevel values are (in order of priority):\nOF_LOG_VERBOSE\nOF_LOG_NOTICE\nOF_LOG_WARNING\nOF_LOG_ERROR\nOF_LOG_FATAL_ERROR\nOF_LOG_SILENT\nFollowing priority, setting a log level of OF_LOG_ERROR, means only error &amp; fatal error messages will be printed. Conversely, setting OF_LOG_VERBOSE means <strong>all</strong> log level messages will be printed.\nHere's a code example:</p>\n<pre><code><span class=\"token comment\" spellcheck=\"true\">// set to warning level</span>\n<span class=\"token function\">ofSetLogLevel</span><span class=\"token punctuation\">(</span>OF_LOG_WARNING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>a warning print<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\" spellcheck=\"true\">// this prints</span>\n<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>test print<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">// this doesn't</span>\n<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>a verbose print<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\" spellcheck=\"true\">// this doesn't either</span>\n<span class=\"token comment\" spellcheck=\"true\">// set to notice level</span>\n<span class=\"token function\">ofSetLogLevel</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>a warning print<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\" spellcheck=\"true\">// this still prints</span>\n<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>test print<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">// this does too</span>\n<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>a verbose print<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\" spellcheck=\"true\">// this doesn't</span>\n</code></pre>\n<p>The default log level is OF_LOG_NOTICE.\nOF_LOG_SILENT is a special value which disables <strong>all</strong> messages.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetLogLevel(module, logLevel)</p>\n<p>&lt;!--\n<em>syntax: ofSetLogLevel(module, logLevel)</em>\n<em>name: ofSetLogLevel</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: string module, ofLogLevel level</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the logging level for a specific module.</p>\n<p>When a module name is supplied to ofSetLogLevel, the provided ofLogLevel\nis selectively applied only to ofLog messages marked with the specified\nmodule.</p>\n<p>This is particularly useful when the user desires to, for example, log at\nan OF_LOG_VERBOSE level for one module and then log at OF_LOG_ERROR for\nanother module.</p>\n<p>Example of logging to a specific module:</p>\n<pre><code><span class=\"token comment\" spellcheck=\"true\">// Set the default log level for all logging.</span>\n<span class=\"token function\">ofSetLogLevel</span><span class=\"token punctuation\">(</span>OF_LOG_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Selectively enable verbose logging for the MyClass module.</span>\n<span class=\"token function\">ofSetLogLevel</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>MyClass<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> OF_LOG_VERBOSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// If we then log the following ...</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Log a vermose message to a module called &amp;quot;MyClass&amp;quot;.</span>\n<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>MyClass<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>A verbose message from MyClass<span class=\"token punctuation\">.</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Log a verbose message to a module called &amp;quot;MyOtherClass&amp;quot;.</span>\n<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>MyOtherClass<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>A verbose message from MyOtherClass<span class=\"token punctuation\">.</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// In this case, we will see the verbose message from &amp;quot;MyClass&amp;quot;, but not</span>\n<span class=\"token comment\" spellcheck=\"true\">// the message from &amp;quot;MyOtherClass&amp;quot;.</span>\n</code></pre>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetLoggerChannel(loggerChannel)</p>\n<p>&lt;!--\n<em>syntax: ofSetLoggerChannel(loggerChannel)</em>\n<em>name: ofSetLoggerChannel</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: shared_ptr&lt; ofBaseLoggerChannel &gt; loggerChannel</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the logger to use a custom logger channel.</p>\n<p>Custom logger channels must extend ofBaseLoggerChannel. Custom log channels\ncan be useful for combining logging methods, logging to a server, logging\nto email or even Twitter.</p>\n<p><strong>Parameters:</strong></p>\n<p>loggerChannel A shared pointer to the logger channel.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#functions\n\n\n<!--\n_visible: True_\n_advanced: True_\n-->\n\n##Description\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofLogLevel ofGetLogLevel()\n\n<!--\n_syntax: ofGetLogLevel()_\n_name: ofGetLogLevel_\n_returns: ofLogLevel_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the currently set global logging level.\n\n**Returns**: The currently set global logging level.\n\n\n\n\n\n_description: _\n\nGet the current log level. This is useful when combined with ofGetLogLevelName() if you want to print the current log level:\n~~~~{.cpp}\nofLogLevel currentLevel = ofGetLogLevel();\nofLog() << \"The current log level is \" << ofGetLogLevelName(currentLevel);\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofLogLevel ofGetLogLevel(module)\n\n<!--\n_syntax: ofGetLogLevel(module)_\n_name: ofGetLogLevel_\n_returns: ofLogLevel_\n_returns_description: _\n_parameters: string module_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the logging level for a specific module.\n\n**Parameters:**\n\nmodule specific module name.\n\n**Returns**: The currently set specific module logging level.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofGetLogLevelName(level, pad = false)\n\n<!--\n_syntax: ofGetLogLevelName(level, pad = false)_\n_name: ofGetLogLevelName_\n_returns: string_\n_returns_description: _\n_parameters: ofLogLevel level, bool pad=false_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet log level name as a string.\n\n**Parameters:**\n\nlevel The ofLogLevel you want as a string.\n\npad True if you want all log level names to be the same length.\n\n**Returns**: The log level name as a string.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###shared_ptr< ofBaseLoggerChannel > ofGetLoggerChannel()\n\n<!--\n_syntax: ofGetLoggerChannel()_\n_name: ofGetLoggerChannel_\n_returns: shared_ptr< ofBaseLoggerChannel >_\n_returns_description: _\n_parameters: _\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the current logger channel.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofLogToConsole()\n\n<!--\n_syntax: ofLogToConsole()_\n_name: ofLogToConsole_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the logging to ouptut to the console.\n\nThis is the default state and can be called to reset console logging\nafter ofLogToFile or ofSetLoggerChannel has been called.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofLogToFile(&path, append = false)\n\n<!--\n_syntax: ofLogToFile(&path, append = false)_\n_name: ofLogToFile_\n_returns: void_\n_returns_description: _\n_parameters: const filesystem::path &path, bool append=false_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the logging to output to a file instead of the console.\n\n**Parameters:**\n\npath The path to the log file to use.\n\nappend True if you want to append to the existing file.\n\n\n\n\n\n_description: _\n\nEnable logging to a file instead of the console.\nSet the path and name of the log file and it will be created if it doesn't exist. If it does exist, it will be overwritten unless you set *append* to true, whereas new lines will be added to the bottom of the file.\n~~~~{.cpp}\n// logs to the console\nofLog() << \"a test string\";\n// enable file logging, append text\n// the log file will be created in the data directory\nofLogToFile(\"myLogFile.txt\", true);\n// now logs to the file\nofLog() << \"a test string\";\n~~~~\nNote: When file logging is enabled, will not see log messages on the console!\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetLogLevel(logLevel)\n\n<!--\n_syntax: ofSetLogLevel(logLevel)_\n_name: ofSetLogLevel_\n_returns: void_\n_returns_description: _\n_parameters: ofLogLevel level_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets the logging level to selectively show log messages.\n\nThis is useful if you want see lots of messages when debugging,\nbut then set a higher level so only warnings and errors appear for users.\n\nofLogLevel values in order from lowest to highest level are:\n- `OF_LOG_VERBOSE` (lowest level)\n- `OF_LOG_NOTICE`\n- `OF_LOG_WARNING`\n- `OF_LOG_ERROR`\n- `OF_LOG_FATAL_ERROR`\n- `OF_LOG_SILENT` (highest level)\n\nThus, setting a log level of `OF_LOG_ERROR`, means only logging messages\nmarked OF_LOG_ERROR and OF_LOG_FATAL_ERROR will be printed. Conversely,\nsetting OF_LOG_VERBOSE means all log level messages, including\nOF_LOG_VERBOSE, will be printed.  Finally, setting a log level of\nOF_LOG_SILENT will prevent any messages from being printed.\n\nThe default ofLogLevel is `OF_LOG_NOTICE`.\n\n\n**Parameters:**\n\nlevel the ofLogLevel (and below) you want to show\n\n\n\n\n\n_description: _\n\nSets the logging level so only messages above a certain priority are shown. This is useful if you want see lots of messages when debugging, but then set a higher level so only warnings and errors appear for users.\nlogLevel values are (in order of priority):\n\tOF_LOG_VERBOSE\n\tOF_LOG_NOTICE\n\tOF_LOG_WARNING\n\tOF_LOG_ERROR\n\tOF_LOG_FATAL_ERROR\n\tOF_LOG_SILENT\nFollowing priority, setting a log level of OF_LOG_ERROR, means only error & fatal error messages will be printed. Conversely, setting OF_LOG_VERBOSE means **all** log level messages will be printed.\nHere's a code example:\n~~~~{.cpp}\n// set to warning level\nofSetLogLevel(OF_LOG_WARNING);\nofLogWarning() << \"a warning print\";\t// this prints\nofLogNotice() << \"test print\";\t\t\t// this doesn't\nofLogVerbose() << \"a verbose print\";\t// this doesn't either\n// set to notice level\nofSetLogLevel(OF_LOG_NOTICE);\nofLogWarning() << \"a warning print\";\t// this still prints\nofLogNotice() << \"test print\";\t\t\t// this does too\nofLogVerbose() << \"a verbose print\";\t// this doesn't\n~~~~\nThe default log level is OF_LOG_NOTICE.\nOF_LOG_SILENT is a special value which disables **all** messages.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetLogLevel(module, logLevel)\n\n<!--\n_syntax: ofSetLogLevel(module, logLevel)_\n_name: ofSetLogLevel_\n_returns: void_\n_returns_description: _\n_parameters: string module, ofLogLevel level_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the logging level for a specific module.\n\nWhen a module name is supplied to ofSetLogLevel, the provided ofLogLevel\nis selectively applied only to ofLog messages marked with the specified\nmodule.\n\nThis is particularly useful when the user desires to, for example, log at\nan OF_LOG_VERBOSE level for one module and then log at OF_LOG_ERROR for\nanother module.\n\nExample of logging to a specific module:\n\n~~~~{.cpp}\n// Set the default log level for all logging.\nofSetLogLevel(OF_LOG_ERROR);\n\n// Selectively enable verbose logging for the MyClass module.\nofSetLogLevel(\"MyClass\", OF_LOG_VERBOSE);\n\n// If we then log the following ...\n\n// Log a vermose message to a module called \"MyClass\".\nofLogVerbose(\"MyClass\") << \"A verbose message from MyClass.\";\n\n// Log a verbose message to a module called \"MyOtherClass\".\nofLogVerbose(\"MyOtherClass\") << \"A verbose message from MyOtherClass.\";\n\n// In this case, we will see the verbose message from \"MyClass\", but not\n// the message from \"MyOtherClass\".\n~~~~\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetLoggerChannel(loggerChannel)\n\n<!--\n_syntax: ofSetLoggerChannel(loggerChannel)_\n_name: ofSetLoggerChannel_\n_returns: void_\n_returns_description: _\n_parameters: shared_ptr< ofBaseLoggerChannel > loggerChannel_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the logger to use a custom logger channel.\n\nCustom logger channels must extend ofBaseLoggerChannel. Custom log channels\ncan be useful for combining logging methods, logging to a server, logging\nto email or even Twitter.\n\n\n**Parameters:**\n\nloggerChannel A shared pointer to the logger channel.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}