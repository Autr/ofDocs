{"entry":{"name":"ofGraphics_functions","filename":"ofGraphics_functions.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/graphics/ofGraphics_functions.markdown","path":"/documentation/graphics/ofGraphics_functions","route":"/documentation/graphics/ofGraphics_functions.markdown","dir":"../ofSite/documentation/graphics","ext":"markdown","type":"page","id":370,"parent":358,"breadcrumbs":[358,1],"siblings":[],"translations":{}},"description":{},"methods":[null,{"syntax":"ofBackground(&c)","name":"ofBackground","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofColor <span class=\"token operator\">&amp;</span>c","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofBackground(brightness, alpha = 255)","name":"ofBackground","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> brightness<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">255</span>","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofBackground(r, g, b, a = 255)","name":"ofBackground","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">255</span>","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets the background color.</p>\n<p>It takes as input r,g,b (0-255). The background is\ncleared automatically, just before the draw() command, so if the background\ncolor is not changing, you could call this inside of setup() (once, at the\nstart of the application). If the background color is changing, you can call\nthis inside of update().</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofBackground</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// Sets the background color to red</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":""},{"syntax":"ofBackgroundGradient(&start, &end, mode = OF_GRADIENT_CIRCULAR)","name":"ofBackgroundGradient","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofColor <span class=\"token operator\">&amp;</span>start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofColor <span class=\"token operator\">&amp;</span>end<span class=\"token punctuation\">,</span> ofGradientMode mode<span class=\"token operator\">=</span>OF_GRADIENT_CIRCULAR","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets the background color to a gradient.</p>\n<p>It takes as input 2 ofColor() objects and a Gradient Mode.\nMust be called in the draw() function.</p>\n<p>Accepted modes are:</p>\n<ul>\n<li>Circular: <code>OF_GRADIENT_CIRCULAR</code></li>\n<li>Linear: <code>OF_GRADIENT_LINEAR</code></li>\n<li>Bar: <code>OF_GRADIENT_BAR</code></li>\n</ul>\n<p><strong>Background Gradient: Circular:</strong>\n<img src=\"bkgGradient_circular.png\" alt=\"Background Gradient Circular\"></p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    ofColor <span class=\"token function\">colorOne</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor <span class=\"token function\">colorTwo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofBackgroundGradient</span><span class=\"token punctuation\">(</span>colorOne<span class=\"token punctuation\">,</span> colorTwo<span class=\"token punctuation\">,</span> OF_GRADIENT_CIRCULAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Sets the background to a circular gradient</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Background Gradient: Linear:</strong>\n<img src=\"bkgGradient_linear.png\" alt=\"Background Gradient Linear\"></p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    ofColor <span class=\"token function\">colorOne</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor <span class=\"token function\">colorTwo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofBackgroundGradient</span><span class=\"token punctuation\">(</span>colorOne<span class=\"token punctuation\">,</span> colorTwo<span class=\"token punctuation\">,</span> OF_GRADIENT_LINEAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\" spellcheck=\"true\">// Sets the background to a linear gradient</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Background Gradient: Bar:</strong>\n<img src=\"bkgGradient_bar.png\" alt=\"Background Gradient Bar\"></p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    ofColor <span class=\"token function\">colorOne</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor <span class=\"token function\">colorTwo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofBackgroundGradient</span><span class=\"token punctuation\">(</span>colorOne<span class=\"token punctuation\">,</span> colorTwo<span class=\"token punctuation\">,</span> OF_GRADIENT_BAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\" spellcheck=\"true\">// Sets the background to a bar gradient</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":""},{"syntax":"ofBackgroundHex(hexColor, alpha = 255)","name":"ofBackgroundHex","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> hexColor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">255</span>","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets the background color using a hex color value.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofBackgroundHex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xff0000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// Sets the background color to red</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":"<p>Sets the background color using a hex color value.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofBackgroundHex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xff0000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// Sets the background color to red</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofBeginSaveScreenAsPDF(filename, bMultipage = false, b3D = false, outputsize)","name":"ofBeginSaveScreenAsPDF","returns":"void","returns_description":null,"parameters":"string filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bMultipage<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> b3D<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> ofRectangle outputsize","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Begin rendering to a PDF file.</p>\n<p>openFrameworks allows rendering of 2D graphics to pdf via the\nofCairoRenderer. ofBeginSaveScreenAsPDF() is called before drawing. When\ndone drawing call ofEndSaveScreenAsPDF() to output the file.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofBeginSaveScreenAsPDF</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>screenshot<span class=\"token punctuation\">.</span>pdf<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawEllipse</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofEndSaveScreenAsPDF</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>See also</strong>: End drawing with ofEndSaveScreenAsPDF()</p>\n","desc":"<p>Begins render to pdf. OpenFrameworks allows rendering of 2D graphics to pdf via the ofCairoRenderer. ofBeginSaveScreenAsPDF is called before drawing. When done drawing call ofEndSaveScreenAsPDF() to output the file.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> oneShot <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofBeginSaveScreenAsPDF</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>screenshot<span class=\"token operator\">-</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">+</span><span class=\"token function\">ofGetTimestampString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">.</span>pdf<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawEllipse</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> oneShot <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofEndSaveScreenAsPDF</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        oneShot <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofBeginSaveScreenAsSVG(filename, bMultipage = false, b3D = false, outputsize)","name":"ofBeginSaveScreenAsSVG","returns":"void","returns_description":null,"parameters":"string filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bMultipage<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> b3D<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> ofRectangle outputsize","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Begin rendering to a SVG file.</p>\n<p><strong>See also</strong>: ofEndSaveScreenAsSVG(), ofBeginSaveScreenAsPDF()</p>\n","desc":""},{"syntax":"ofBeginShape()","name":"ofBeginShape","returns":"void","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Start drawing a new shape. Needs to be followed by a list of\nvertex points and lastly a call to ofEndShape().</p>\n<pre><code><span class=\"token comment\" spellcheck=\"true\">//draws a star</span>\n<span class=\"token function\">ofSetPolyMode</span><span class=\"token punctuation\">(</span>OF_POLY_WINDING_NONZERO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofBeginShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">135</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">215</span><span class=\"token punctuation\">,</span><span class=\"token number\">135</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">365</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">305</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofEndShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>See also</strong>: ofEndShape()</p>\n","desc":"<p>Call this to start drawing a new shape. Needs to be followed by a list of vertex points and lastly a call to ofEndShape().</p>\n<pre><code><span class=\"token comment\" spellcheck=\"true\">//draws a star</span>\n<span class=\"token function\">ofSetPolyMode</span><span class=\"token punctuation\">(</span>OF_POLY_WINDING_NONZERO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofBeginShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">135</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">215</span><span class=\"token punctuation\">,</span><span class=\"token number\">135</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">365</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">305</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofEndShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"syntax":"ofBezierVertex(&p1, &p2, &p3)","name":"ofBezierVertex","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p3","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofBezierVertex(&p1, &p2, &p3)","name":"ofBezierVertex","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p3","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofBezierVertex(x1, y1, z1, x2, y2, z2, x3, y3, z3)","name":"ofBezierVertex","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z3","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofBezierVertex(x1,y1,x2,y2,x3,y3)","name":"ofBezierVertex","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y3","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Describes a bezier curve through three points of a shape. To be called\nbetween ofBeginShape() and ofEndShape().</p>\n","desc":"<p>Describes a bezier curve through three points of a shape. To be called between ofBeginShape() and ofEndShape().</p>\n"},{"syntax":"ofClear(&c)","name":"ofClear","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofColor <span class=\"token operator\">&amp;</span>c","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Clears the color and depth bits of current renderer and replaces it with\nan ofColor.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ofColor <span class=\"token function\">myColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofClear</span><span class=\"token punctuation\">(</span>myColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Clears current screen and replaces it with myColor.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":"<p>Clears the color and depth bits of current renderer and replaces it with an ofColor.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ofColor myColor<span class=\"token punctuation\">;</span>\n    myColor<span class=\"token punctuation\">.</span><span class=\"token function\">set</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofClear</span> <span class=\"token punctuation\">(</span> myColor <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Clears current screen and replaces it with myColor.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofClear(brightness, a = 0)","name":"ofClear","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> brightness<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Clears the color and depth bits of current renderer and replaces it with a\ngrayscale value.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofClear</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Clears current screen and replaces it with a grayscale value.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":"<p>Clears the color and depth bits of current renderer and replaces it with a grayscale value.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ofColor myColor<span class=\"token punctuation\">;</span>\n    myColor<span class=\"token punctuation\">.</span><span class=\"token function\">set</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">128</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofClear</span> <span class=\"token punctuation\">(</span> myColor <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Clears current screen and replaces it with a grayscale value.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofClear(r, g, b, a = 0)","name":"ofClear","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Clears the color and depth bits of current renderer and replaces it with\nan RGB color.</p>\n<p>When drawing to the screen, ofClear() will clear the screen entirely.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofClear</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Clears current screen and replaces it with red.</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Screen will render as a flat color.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>When using the openGL renderer and drawing into an\n<a href=\"http://www.openframeworks.cc/documentation/gl/ofFbo.html\">FBO</a>, ofClear() will clear that buffer rather than the main\nscreen.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ofFbo myFbo<span class=\"token punctuation\">;</span>\n    myFbo<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    myFbo<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofClear</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// Clears FBO buffer and replaces it with red.</span>\n        <span class=\"token comment\" spellcheck=\"true\">// No effect in current drawing screen.</span>\n    myFbo<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>ofClear() is based on <a href=\"http://www.opengl.org/sdk/docs/man/xhtml/glClear.xml\">glClear</a>.</p>\n","desc":"<p>Clears the color and depth bits of current renderer and replaces it with an RGB color.</p>\n<p>When drawing to the screen, ofClear(…) will clear the screen entirely.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofClear</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Clears current screen and replaces it with red.</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Screen will render as a flat color.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>When using the opengl renderer and drawing into an <a href=\"/documentation/gl/ofFbo.html\">FBO</a>, ofClear(...) will clear that buffer rather than the main screen.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ofFbo myFbo<span class=\"token punctuation\">;</span>\n    myFbo<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    myFbo<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofClear</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// Clears FBO buffer and replaces it with red.</span>\n        <span class=\"token comment\" spellcheck=\"true\">// No effect in current drawing screen.</span>\n    myFbo<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>ofClear(…) is based on glClear (http://www.opengl.org/sdk/docs/man/xhtml/glClear.xml).</p>\n"},{"syntax":"ofClearAlpha()","name":"ofClearAlpha","returns":"void","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofCurveVertex(&p)","name":"ofCurveVertex","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofCurveVertex(&p)","name":"ofCurveVertex","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofCurveVertex(x, y, z)","name":"ofCurveVertex","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofCurveVertex(x,y)","name":"ofCurveVertex","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Specifies a single point of a shape. The difference from ofVertex is that\nthe line describing the edge of the shape between two points will be a\ncurve as opposed to a straight line. The curve is automatically generated\nusing the catmull from formula.</p>\n<p>This function has to be called between ofBeginShape() and ofEndShape().</p>\n","desc":"<p>Specifies a single point of a shape. The difference from ofVertex is that the line describing the edge of the shape between two points will be a curve as opposed to a straight line. The curve is automatically generated using the catmull from formula. To be called between ofBeginShape() and ofEndShape().</p>\n"},{"short":"<p>Draws a curve through a series of vertices stored as a vector of\nofPoints. Should be called between ofBeginShape() and ofEndShape().</p>\n","desc":"<p>Draws a curve through a series of vertices stored as a vector of ofPoints. Should be called between ofBeginShape() and ofEndShape().</p>\n"},{"short":"","desc":""},{"short":"","desc":""},{"short":"","desc":""},{"syntax":"ofDisableAlphaBlending()","name":"ofDisableAlphaBlending","returns":"void","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Turn off alpha blending.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofEnableAlphaBlending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// turn on alpha blending</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// red, 50% transparent</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\" spellcheck=\"true\">// draws the rect with alpha</span>\n    <span class=\"token function\">ofDisableAlphaBlending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// turn off alpha</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// draws the rect without alpha</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>See also</strong>: ofEnableAlphaBlending()</p>\n","desc":"<p>Turns off alpha blending.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofEnableAlphaBlending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// turn on alpha blending</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// red, 50% transparent</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\" spellcheck=\"true\">// draws the rect with alpha</span>\n    <span class=\"token function\">ofDisableAlphaBlending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// turn off alpha</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// draws the rect without alpha</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofDisableAntiAliasing()","name":"ofDisableAntiAliasing","returns":"void","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Turns off anti-aliasing (smoothing).</p>\n","desc":"<p>Turns off anti-aliasing (smoothing).</p>\n"},{"syntax":"ofDisableBlendMode()","name":"ofDisableBlendMode","returns":"void","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Disable the current blend mode.</p>\n","desc":"<p>Disables the current blend mode.</p>\n"},{"syntax":"ofDisableDepthTest()","name":"ofDisableDepthTest","returns":"void","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Turn off depth testing so rendering happens in draw order rather than by\nz-depth.</p>\n<p>Turning off depth test is useful for combining 3d scenes with 2d\noverlays such as a control panel.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">ofPushMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span> <span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">ofEnableDepthTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDrawSphere</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDrawSphere</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDisableDepthTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>Some bubbles<span class=\"token punctuation\">.</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span><span class=\"token number\">85</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofPopMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>See also</strong>: ofEnableDepthTest()</p>\n","desc":"<p>Turns off depth testing so rendering happens in draw order rather than by z-depth. Turning off depth test is useful for combining 3d scenes with 2d overlays such as a control panel.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">ofPushMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span> <span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">ofEnableDepthTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDrawSphere</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDrawSphere</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDisableDepthTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>Some bubbles<span class=\"token punctuation\">.</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span><span class=\"token number\">85</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofPopMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofDisablePointSprites()","name":"ofDisablePointSprites","returns":"void","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Turn off point sprites</p>\n","desc":"<p>Turns off point sprite.</p>\n"},{"syntax":"ofDisableSmoothing()","name":"ofDisableSmoothing","returns":"void","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Turn off smoothing. Currently, this only works for lines. You can draw a\nfilled object, and then draw the outline with smoothing enabled to get\nsmoothing effects on filled shapes.</p>\n","desc":"<p>Turns off smoothing. Currently, this only works for lines. You can draw a filled object, and then draw the outline with smoothing enabled to get smoothing effects on filled shapes.</p>\n"},{"syntax":"ofDrawBezier(x0, y0, x1, y1, x2, y2, x3, y3)","name":"ofDrawBezier","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y3","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofDrawBezier(x0, y0, z0, x1, y1, z1, x2, y2, z2, x3, y3, z3)","name":"ofDrawBezier","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z3","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofDrawBitmapString(&textString, &p)","name":"ofDrawBitmapString","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>textString<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofDrawBitmapString(&textString, &p)","name":"ofDrawBitmapString","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>textString<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>}</p>\n","desc":""},{"syntax":"ofDrawBitmapString(&textString, &p)","name":"ofDrawBitmapString","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>textString<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofDrawBitmapString(&textString, &p)","name":"ofDrawBitmapString","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>textString<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofDrawBitmapString(&textString, x, y)","name":"ofDrawBitmapString","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>textString<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a bitmapped string, on screen, at point (x,y).</p>\n<p>For example, you can write some text on screen like this:</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>hi<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Your strings can even be multiline:</p>\n<pre><code><span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>a test\nof multiline\ntext<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>you can also using dynamically generated strings. For example, to print\nthe frame rate:</p>\n<pre><code>string fpsStr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>frame rate<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">+</span><span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetFrameRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span>fpsStr<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>\\note ofDrawBitmapString wraps a glut function that uses glDrawPixels. On\nsome graphics cards, you may discover that glDrawPixels is slow (or even,\nvery slow). If so, you might want to investigate using ofTrueTypeFont\nwith a small typeface, non-anti-aliased, as a suitable alternative.</p>\n<p><strong>See also</strong>: ofTrueTypeFont</p>\n","desc":""},{"syntax":"ofDrawBitmapString(&textString, x, y, z)","name":"ofDrawBitmapString","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>textString<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Draws a bitmapped string, on screen, at point (x,y). For example, you can write some text on screen like this:</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>hi<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Your strings can even be multiline:</p>\n<pre><code><span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>a test\nof multiline\ntext<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>you can also using dynamically generated strings. For example, to print the frame rate:</p>\n<pre><code>string fpsStr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>frame rate<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">+</span><span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetFrameRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span>fpsStr<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Please note, ofDrawBitmapString wraps a glut function that uses glDrawPixels. On some graphics cards, you may discover that glDrawPixels is slow (or even, very slow). If so, you might want to investigate using ofTrueTypeFont with a small typeface, non-anti-aliased, as a suitable alternative.</p>\n"},{"syntax":"ofDrawBitmapString(&textString, x, y, z)","name":"ofDrawBitmapString","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>textString<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofDrawBitmapStringHighlight(text, &position, &background = black, &foreground = white)","name":"ofDrawBitmapStringHighlight","returns":"void","returns_description":null,"parameters":"string text<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>position<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofColor <span class=\"token operator\">&amp;</span>background<span class=\"token operator\">=</span>black<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofColor <span class=\"token operator\">&amp;</span>foreground<span class=\"token operator\">=</span>white","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofDrawBitmapStringHighlight(text, &position, &background = black, &foreground = white)","name":"ofDrawBitmapStringHighlight","returns":"void","returns_description":null,"parameters":"string text<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>position<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofColor <span class=\"token operator\">&amp;</span>background<span class=\"token operator\">=</span>black<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofColor <span class=\"token operator\">&amp;</span>foreground<span class=\"token operator\">=</span>white","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofDrawBitmapStringHighlight(text, x, y, &background = ofColor::black, &foreground = ofColor::white)","name":"ofDrawBitmapStringHighlight","returns":"void","returns_description":null,"parameters":"string text<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofColor <span class=\"token operator\">&amp;</span>background<span class=\"token operator\">=</span>black<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofColor <span class=\"token operator\">&amp;</span>foreground<span class=\"token operator\">=</span>white","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofDrawCircle(&p, radius)","name":"ofDrawCircle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofDrawCircle(&p, radius)","name":"ofDrawCircle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofDrawCircle(x, y, radius)","name":"ofDrawCircle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a circle, centered at x,y, with a given radius.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Please keep in mind that drawing circle with different outline color and\nfill requires calling ofNoFill and ofSetColor for drawing stroke and\nofFill and again ofSetColor for filled solid color circle.</p>\n","desc":""},{"syntax":"ofDrawCircle(x, y, z, radius)","name":"ofDrawCircle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofDrawCurve(x0, y0, x1, y1, x2, y2, x3, y3)","name":"ofDrawCurve","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y3","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a curve from point (x1, y1) to point (x2, y2). The curve is shaped by\nthe two control points (x0,y0) and (x3,y3).</p>\n","desc":""},{"syntax":"ofDrawCurve(x0, y0, z0, x1, y1, z1, x2, y2, z2, x3, y3, z3)","name":"ofDrawCurve","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z3","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a 3-dimensional curve from point (x1, y1, z1) to point (x2, y2, z2).\nThe curve is shaped by the two control points (x0, y0, z0) and (x3, y3, z3).</p>\n","desc":""},{"syntax":"ofDrawEllipse(&p, width, height)","name":"ofDrawEllipse","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofDrawEllipse(&p, width, height)","name":"ofDrawEllipse","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofDrawEllipse(x, y, width, height)","name":"ofDrawEllipse","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws an ellipse from point (x,y) with a given width (w) and height (h).</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawEllipse</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":""},{"syntax":"ofDrawEllipse(x, y, z, width, height)","name":"ofDrawEllipse","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofDrawLine(&p1, &p2)","name":"ofDrawLine","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p2","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofDrawLine(&p1, &p2)","name":"ofDrawLine","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p2","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofDrawLine(x1, y1, x2, y2)","name":"ofDrawLine","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y2","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a line between two points: (x1,y1),(x2,y2).</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawLine</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":""},{"syntax":"ofDrawLine(x1, y1, z1, x2, y2, z2)","name":"ofDrawLine","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z2","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofDrawRectRounded(&b, r)","name":"ofDrawRectRounded","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> r","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a rounded rectangle from the given rectangle using given\nradius.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ofRectangle myRect<span class=\"token punctuation\">;</span>\n    myRect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    myRect<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    myRect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    myRect<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofDrawRectRounded</span><span class=\"token punctuation\">(</span>myRect<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":""},{"syntax":"ofDrawRectRounded(&b, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)","name":"ofDrawRectRounded","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> topLeftRadius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> topRightRadius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> bottomRightRadius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> bottomLeftRadius","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a rounded rectangle from the given rectangle using different given\nradius for each of the corners.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ofRectangle myRect<span class=\"token punctuation\">;</span>\n    myRect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    myRect<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    myRect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    myRect<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofDrawRectRounded</span><span class=\"token punctuation\">(</span> myRect<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":""},{"syntax":"ofDrawRectRounded(&p, w, h, r)","name":"ofDrawRectRounded","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> r","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofDrawRectRounded(&p, w, h, r)","name":"ofDrawRectRounded","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> r","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a rectangle from point p with a given width, height and radius of\nrounded corners.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ofPoint p<span class=\"token punctuation\">;</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">set</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawRectRounded</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":""},{"syntax":"ofDrawRectRounded(&p, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)","name":"ofDrawRectRounded","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> topLeftRadius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> topRightRadius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> bottomRightRadius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> bottomLeftRadius","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a rounded rectangle from point X, Y, at depth Z with a given width,\nheight and radius of rounded corners.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawRectRounded</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":""},{"syntax":"ofDrawRectRounded(&p, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)","name":"ofDrawRectRounded","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> topLeftRadius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> topRightRadius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> bottomRightRadius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> bottomLeftRadius","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofDrawRectRounded(x, y, w, h, r)","name":"ofDrawRectRounded","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> r","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a rectangle from point X, Y with a given width, height and radius of\nrounded corners.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawRectRounded</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":""},{"syntax":"ofDrawRectRounded(x, y, z, w, h, r)","name":"ofDrawRectRounded","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> r","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a rectangle from point X, Y, at depth Z with a given width, height and\nradius of rounded corners.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawRectRounded</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":""},{"syntax":"ofDrawRectRounded(x, y, z, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)","name":"ofDrawRectRounded","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> topLeftRadius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> topRightRadius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> bottomRightRadius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> bottomLeftRadius","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a rounded rectangle from point X, Y, at depth Z with a given width,\nheight and different radius for each rounded corner.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawRectRounded</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":""},{"syntax":"ofDrawRectangle(&p, w, h)","name":"ofDrawRectangle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a rectangle from point p, with a given width and height.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    glm<span class=\"token operator\">::</span>vec3 p<span class=\"token punctuation\">;</span>      <span class=\"token comment\" spellcheck=\"true\">// create a point P</span>\n    p<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">// set the x of the point</span>\n    p<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">// set the y of the point</span>\n\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Draw the rectangle</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":""},{"syntax":"ofDrawRectangle(&p, w, h)","name":"ofDrawRectangle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofDrawRectangle(&r)","name":"ofDrawRectangle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>r","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a rectangle from the given rectangle.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ofRectangle rect<span class=\"token punctuation\">;</span>\n    rect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    rect<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    rect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    rect<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":""},{"syntax":"ofDrawRectangle(x, y, z, w, h)","name":"ofDrawRectangle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a rectangle from point X, Y at depth Z with a given width and height.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Draw a rectangle at 100 pixels in depth</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":""},{"syntax":"ofDrawRectangle(x1, y1, w, h)","name":"ofDrawRectangle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a rectangle from point x,y with a given width and height.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":""},{"syntax":"ofDrawTriangle(&p1, &p2, &p3)","name":"ofDrawTriangle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p3","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofDrawTriangle(&p1, &p2, &p3)","name":"ofDrawTriangle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p3","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofDrawTriangle(x1, y1, x2, y2, x3, y3)","name":"ofDrawTriangle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y3","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a triangle, with the three points: (x1,y1),(x2, y2),(x3, y3).</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawTriangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":""},{"syntax":"ofDrawTriangle(x1, y1, z1, x2, y2, z2, x3, y3, z3)","name":"ofDrawTriangle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z3","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofEnableAlphaBlending()","name":"ofEnableAlphaBlending","returns":"void","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Turns on alpha blending (which is on by default since OF version 0.8.0).\nIt simply wraps opengl commands that enable blending, and turn on a common\nblend mode.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofEnableAlphaBlending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// turn on alpha blending</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// red, 50% transparent</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\" spellcheck=\"true\">// draws the rect with alpha</span>\n    <span class=\"token function\">ofDisableAlphaBlending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// turn off alpha</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\" spellcheck=\"true\">// draws the rect without alpha</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":"<p>Turns on alpha blending (which is on by default since OF version 0.8.0). It simply wraps opengl commands that enable blending, and turn on a common blend mode.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofEnableAlphaBlending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// turn on alpha blending</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// red, 50% transparent</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\" spellcheck=\"true\">// draws the rect with alpha</span>\n    <span class=\"token function\">ofDisableAlphaBlending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// turn off alpha</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// draws the rect without alpha</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofEnableAntiAliasing()","name":"ofEnableAntiAliasing","returns":"void","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Enables anti-aliasing (smoothing) for lines.</p>\n","desc":"<p>Enables anti-aliasing (smoothing) for lines.</p>\n"},{"syntax":"ofEnableBlendMode(blendMode)","name":"ofEnableBlendMode","returns":"void","returns_description":null,"parameters":"ofBlendMode blendMode","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"<p>Sets and enables the blend mode for drawing. The options are:</p>\n<pre><code>OF_BLENDMODE_DISABLED\nOF_BLENDMODE_ALPHA\nOF_BLENDMODE_ADD\nOF_BLENDMODE_SUBTRACT\nOF_BLENDMODE_MULTIPLY\nOF_BLENDMODE_SCREEN\n</code></pre>\n<p>There is a blendingExample in the openFrameworks examples</p>\n"},{"syntax":"ofEnableDepthTest()","name":"ofEnableDepthTest","returns":"void","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Turns on depth testing so rendering happens according to z-depth rather\nthan draw order.</p>\n<p><strong>See also</strong>: ofDisableDepthTest()</p>\n","desc":"<p>Turns on depth testing so rendering happens according to z-depth rather than draw order.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">ofPushMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span> <span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">ofEnableDepthTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// enable depth test</span>\n        <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDrawSphere</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// draw 3d sphere</span>\n        <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDrawSphere</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDisableDepthTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// disable depth test</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// draw 2d overlay</span>\n        <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>Some bubbles<span class=\"token punctuation\">.</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span><span class=\"token number\">85</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofPopMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofEnablePointSprites()","name":"ofEnablePointSprites","returns":"void","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Turn on point sprite.</p>\n<p>Textures can be mapped onto points. By default, point size is 1pt. So\ntexture is not shown correctly. You can change point size by\n`glPointSize(GLfloat size).</p>\n","desc":"<p>Turns on point sprite. Textures can be mapped onto points. By default, point size is 1pt. So texture is not shown correctly. You can change point size by glPointSize(GLfloat size).</p>\n"},{"syntax":"ofEnableSmoothing()","name":"ofEnableSmoothing","returns":"void","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Turns on smoothing. Currently, this only works for lines. You can draw a filled object, and then draw the outline with smoothing enabled to get smoothing effects on filled shapes.</p>\n"},{"syntax":"ofEndSaveScreenAsPDF()","name":"ofEndSaveScreenAsPDF","returns":"void","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Terminates draw to PDF through ofCairoRenderer and outputs the file.</p>\n<p><strong>See also</strong>: ofBeginSaveScreenAsPDF()</p>\n","desc":"<p>Terminates draw to pdf through ofCairoRenderer and outputs the pdf file.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> oneShot <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofBeginSaveScreenAsPDF</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>screenshot<span class=\"token operator\">-</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">+</span><span class=\"token function\">ofGetTimestampString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">.</span>pdf<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawEllipse</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> oneShot <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofEndSaveScreenAsPDF</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        oneShot <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofEndSaveScreenAsSVG()","name":"ofEndSaveScreenAsSVG","returns":"void","returns_description":null,"parameters":null,"version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Terminates draw to SVG and outputs the file.</p>\n<p><strong>See also</strong>: ofBeginSaveScreenAsSVG()</p>\n","desc":""},{"syntax":"ofEndShape(bClose)","name":"ofEndShape","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> bClose<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>This tells the program that your shape is finished and that it should now\ndraw it to the screen.</p>\n<p>This function must be called otherwise you will not see your shape.</p>\n<p><strong>Parameters:</strong></p>\n<p>bClose If you set it to true it will automatically close your\nshape for you. Default false.</p>\n","desc":"<p>This tells the program that your shape is finished and that it should now draw it to the screen. If you set the optional 'bClose' argument to true it will automatically close your shape for you.'bClose' is set to false by default. This function must be called otherwise you will not see your shape.</p>\n"},{"syntax":"ofFill()","name":"ofFill","returns":"void","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw shapes filled with the current draw color.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//draws the rectangle filled in blue</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":"<p>Draw shapes filled with the current draw color.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//draws the rectangle filled in blue</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofGetBackgroundAuto()","name":"ofGetBackgroundAuto","returns":"bool","returns_description":null,"parameters":null,"version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofGetBackgroundColor()","name":"ofGetBackgroundColor","returns":"ofColor","returns_description":null,"parameters":null,"version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the current background color as an ofColor.</p>\n","desc":""},{"syntax":"ofGetCoordHandedness()","name":"ofGetCoordHandedness","returns":"ofHandednessType","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofGetCurrentMatrix(matrixMode)","name":"ofGetCurrentMatrix","returns":"glm::mat4","returns_description":null,"parameters":"ofMatrixMode matrixMode","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Query the current (oF internal) Transformation Matrix state.</p>\n","desc":""},{"syntax":"ofGetCurrentNormalMatrix()","name":"ofGetCurrentNormalMatrix","returns":"glm::mat4","returns_description":null,"parameters":null,"version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Query the current (oF internal) Normal Matrix state.\n\\note  The matrix returned is the transposed of the inverse of the\nview matrix</p>\n<pre><code>   Currently<span class=\"token punctuation\">,</span> only GL Programmable Renderer <span class=\"token operator\">and</span> GL Renderer\n   implement ofGetCurrentNormalMatrix<span class=\"token punctuation\">.</span>\n</code></pre>\n","desc":""},{"syntax":"ofGetCurrentOrientationMatrix()","name":"ofGetCurrentOrientationMatrix","returns":"glm::mat4","returns_description":null,"parameters":null,"version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Query the current (oF internal) Orientation Matrix state.\n\\note  The matrix returned is the matrix openFrameworks uses internally\nto calculate the (final, oriented) projection matrix as it is\npassed on to the GPU.</p>\n<pre><code>   Currently<span class=\"token punctuation\">,</span> only GL Programmable Renderer <span class=\"token operator\">and</span> GL Renderer\n   implement ofGetCurrentOrientationMatrix<span class=\"token punctuation\">.</span>\n</code></pre>\n","desc":""},{"syntax":"ofGetCurrentViewMatrix()","name":"ofGetCurrentViewMatrix","returns":"glm::mat4","returns_description":null,"parameters":null,"version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofGetCurrentViewport()","name":"ofGetCurrentViewport","returns":"ofRectangle","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the position and size of the current viewport</p>\n<p><strong>Returns</strong>: A rectangle describing the viewport</p>\n","desc":""},{"syntax":"ofGetFill()","name":"ofGetFill","returns":"ofFillFlag","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofGetNativeViewport()","name":"ofGetNativeViewport","returns":"ofRectangle","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the position and size of the native viewport</p>\n<p><strong>Returns</strong>: A rectangle describing the viewport</p>\n","desc":""},{"syntax":"ofGetRectMode()","name":"ofGetRectMode","returns":"ofRectMode","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Tells you if rectangle drawing mode is set to drawn from the center or drawn\nfrom the top left corner, as set with the ofSetRectMode() function.</p>\n<p>Default is <code>OF_RECTMODE_CORNER</code></p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetRectMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OF_RECTMODE_CORNER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        ofDrawRea10<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>See also</strong>: ofSetRectMode()</p>\n","desc":"<p>Tells you if rect drawing mode is set to drawn from the center or drawn from the top left corner, as set with the ofSetRectMode() function.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetRectMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OF_RECTMODE_CORNER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofGetStyle()","name":"ofGetStyle","returns":"ofStyle","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofGetViewportHeight()","name":"ofGetViewportHeight","returns":"int","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the height of the current viewport</p>\n<p><strong>Returns</strong>: A height in pixels</p>\n","desc":""},{"syntax":"ofGetViewportWidth()","name":"ofGetViewportWidth","returns":"int","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the width of the current viewport</p>\n<p><strong>Returns</strong>: A width in pixels</p>\n","desc":""},{"syntax":"ofIsVFlipped()","name":"ofIsVFlipped","returns":"bool","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get if view is flipped vertically</p>\n","desc":""},{"syntax":"ofLoadIdentityMatrix()","name":"ofLoadIdentityMatrix","returns":"void","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>}\n\\name Matrix Transformation\n{</p>\n","desc":""},{"syntax":"ofLoadMatrix(&m)","name":"ofLoadMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat4 <span class=\"token operator\">&amp;</span>m","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofLoadMatrix(*m)","name":"ofLoadMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>m","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofLoadViewMatrix(&m)","name":"ofLoadViewMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat4 <span class=\"token operator\">&amp;</span>m","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofMultMatrix(&m)","name":"ofMultMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat4 <span class=\"token operator\">&amp;</span>m","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofMultMatrix(*m)","name":"ofMultMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>m","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofMultViewMatrix(&m)","name":"ofMultViewMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat4 <span class=\"token operator\">&amp;</span>m","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofNextContour(bClose)","name":"ofNextContour","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> bClose<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Allows you to draw multiple contours within one shape. Call this\nbetween ofBeginShape() and ofEndShape() to create a new contour for your\nshape.</p>\n<p><strong>Parameters:</strong></p>\n<p>bClose If set to true then the previous contour will be\nautomatically closed. Default false</p>\n","desc":"<p>Allows you to draw multiple contours within one shape. Call this between ofBeginShape() and ofEndShape() to create a new contour for your shape. If you set the optional argument 'bClose' to true then the previous contour will be automatically closed. 'bClose' is set to false by default.</p>\n"},{"syntax":"ofNoFill()","name":"ofNoFill","returns":"void","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw shapes as outlines with the current draw color.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofNoFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//draws only the outline in blue</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":"<p>Draw shapes as outlines with the current draw color.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofNoFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//draws only the outline in blue</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofOrientationToDegrees(orientation)","name":"ofOrientationToDegrees","returns":"int","returns_description":null,"parameters":"ofOrientation orientation","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofPopMatrix()","name":"ofPopMatrix","returns":"void","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Restores the prior coordinate system.</p>\n<p><strong>See also</strong>: ofPushMatrix()</p>\n","desc":"<p>ofPopMatrix() restores the prior coordinate system.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\" spellcheck=\"true\">// draw a circle</span>\n    <span class=\"token function\">ofPushMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\" spellcheck=\"true\">// push the current coordinate position</span>\n    <span class=\"token function\">ofRotateX</span><span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\" spellcheck=\"true\">// change the coordinate system</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// draw a rect</span>\n    <span class=\"token function\">ofPopMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\" spellcheck=\"true\">// recall the pushed coordinate position</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofPopStyle()","name":"ofPopStyle","returns":"void","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Restores the prior style settings. It needs to be called after ofPushStyle.</p>\n<p><strong>See also</strong>: ofPushStyle()</p>\n","desc":"<p>ofPopStyle() restores the prior style settings. It needs to be called after ofPushStyle.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofPushStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\" spellcheck=\"true\">// push the current style for use later</span>\n    <span class=\"token function\">ofFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofsetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawEllipse</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofPopStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// recall the pushed style</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofPopView()","name":"ofPopView","returns":"void","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Restores the viewport and matrix settings set by ofPushView()</p>\n","desc":""},{"syntax":"ofPushMatrix()","name":"ofPushMatrix","returns":"void","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Saves the current coordinate system allowing users to develop specific\nmovements in some graphic objects. ofPopMatrix needs to be called after.</p>\n<p>In the following example we only rotate the square.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofPushMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\" spellcheck=\"true\">// push the current coordinate position</span>\n    <span class=\"token function\">ofRotateX</span><span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\" spellcheck=\"true\">// change the coordinate system</span>\n    ofDrawRea10<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// draw a rect</span>\n    <span class=\"token function\">ofPopMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\" spellcheck=\"true\">// recall the pushed coordinate position</span>\n    <span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// draw a circle</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":"<p>ofPushMatrix saves the current coordinate system allowing users to develop specific movements in some graphic objects. ofPopMatrix needs to be called after.\nIn the following example we only rotate the square.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// draw a circle</span>\n    <span class=\"token function\">ofPushMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\" spellcheck=\"true\">// push the current coordinate position</span>\n    <span class=\"token function\">ofRotateX</span><span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\" spellcheck=\"true\">// change the coordinate system</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// draw a rect</span>\n    <span class=\"token function\">ofPopMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\" spellcheck=\"true\">// recall the pushed coordinate position</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofPushStyle()","name":"ofPushStyle","returns":"void","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Saves the current style settings for the ofGraphics after its call.\nUsage of ofPushStyle and ofPopStyle allow users to have more control of\ncertain graphics elements. All the style that applies to certain elements\nis controled using ofStyle class. See ofStyle type.</p>\n<p>In the following example the properties of being red and filled only applies to the ellipse:</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofPushStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// push the current style for use later</span>\n    <span class=\"token function\">ofFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawEllipse</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofPopStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// recall the pushed style</span>\n\n    <span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>sa ofPopStyle()</p>\n","desc":"<p>ofPushStyle saves the current style settings for the ofGraphics after its call. Usage of ofPushStyle and ofPopStyle allow users to have more control of certain graphics elements. All the style that applies to certain elements is controled using ofStyle class. See ofStyle type.\nIn the following example the properties of being red and filled only applies to the ellipse:</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofPushStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// push the current style for use later</span>\n    <span class=\"token function\">ofFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawEllipse</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofPopStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// recall the pushed style</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofPushView()","name":"ofPushView","returns":"void","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Stores the current viewport and matrix settings</p>\n","desc":""},{"syntax":"ofRotateDeg(degrees)","name":"ofRotateDeg","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotate around the z-axis</p>\n","desc":""},{"syntax":"ofRotateDeg(degrees, vecX, vecY, vecZ)","name":"ofRotateDeg","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vecX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vecY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vecZ","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Produces a rotation around the vector (vecX,vecY,vecZ).</p>\n<p>All graphics drawn after ofRotate is called are rotated. Use ofPushMatrix()\nand ofPopMatrix() to save and restore the unrotated coordinate system.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofRotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//rotates the coordinate system 50 degrees along the x-axis and 25 degrees on the y-axis</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>degrees Specifies the angle of rotation, in degrees.</p>\n<p>vecX specifies the x coordinates of a vector</p>\n<p>vecY specifies the y coordinates of a vector</p>\n<p>vecZ specifies the z coordinates of a vector</p>\n","desc":""},{"syntax":"ofRotateRad(degrees)","name":"ofRotateRad","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotate around the z-axis</p>\n","desc":""},{"syntax":"ofRotateRad(degrees, vecX, vecY, vecZ)","name":"ofRotateRad","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vecX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vecY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vecZ","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Produces a rotation around the vector (vecX,vecY,vecZ).</p>\n<p>All graphics drawn after ofRotate is called are rotated. Use ofPushMatrix()\nand ofPopMatrix() to save and restore the unrotated coordinate system.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofRotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//rotates the coordinate system 50 degrees along the x-axis and 25 degrees on the y-axis</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>degrees Specifies the angle of rotation, in degrees.</p>\n<p>vecX specifies the x coordinates of a vector</p>\n<p>vecY specifies the y coordinates of a vector</p>\n<p>vecZ specifies the z coordinates of a vector</p>\n","desc":""},{"syntax":"ofRotateXDeg(degrees)","name":"ofRotateXDeg","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Produces a rotation around the X-axis of our coordinate\nsystem represented by the vector (1,0,0).</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofRotateX</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//rotates the coordinate system 45 degrees around the x-axis</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>degrees Specifies the angle of rotation, in degrees.</p>\n","desc":""},{"syntax":"ofRotateXRad(degrees)","name":"ofRotateXRad","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Produces a rotation around the X-axis of our coordinate\nsystem represented by the vector (1,0,0).</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofRotateX</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//rotates the coordinate system 45 degrees around the x-axis</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>degrees Specifies the angle of rotation, in degrees.</p>\n","desc":""},{"syntax":"ofRotateYDeg(degrees)","name":"ofRotateYDeg","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Produces a rotation around the Y-axis of our coordinate\nsystem represented by the vector (0,1,0).</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofRotateY</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//rotates the coordinate system 45 degrees around the y-axis</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>degrees Specifies the angle of rotation, in degrees.</p>\n","desc":""},{"syntax":"ofRotateYRad(degrees)","name":"ofRotateYRad","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Produces a rotation around the Y-axis of our coordinate\nsystem represented by the vector (0,1,0).</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofRotateY</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//rotates the coordinate system 45 degrees around the y-axis</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>degrees Specifies the angle of rotation, in degrees.</p>\n","desc":""},{"syntax":"ofRotateZDeg(degrees)","name":"ofRotateZDeg","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Produces a rotation around the Z-axis of our coordinate\nsystem represented by the vector (0,0,1).</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofRotateZ</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//rotates the coordinate system 45 degrees around the z-axis</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>degrees Specifies the angle of rotation, in degrees.</p>\n","desc":""},{"syntax":"ofRotateZRad(degrees)","name":"ofRotateZRad","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Produces a rotation around the Z-axis of our coordinate\nsystem represented by the vector (0,0,1).</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofRotateZ</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//rotates the coordinate system 45 degrees around the z-axis</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>degrees Specifies the angle of rotation, in degrees.</p>\n","desc":""},{"syntax":"ofScale(&p)","name":"ofScale","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofScale(amount)","name":"ofScale","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> amount","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Scale along the X, Y and Z axis with the same amount.</p>\n","desc":""},{"syntax":"ofScale(xAmnt,yAmnt,zAmnt)","name":"ofScale","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> xAmnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> yAmnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> zAmnt","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>ofScale produces a nonuniform scaling along the x, y, and z axes. The three parameters xAmnt, yAmnt and zAmnt indicate the desired scale factor along each of the three axes.\ne.g:</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofScale</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">// scale 0.5 in height</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// draw a square rectangle</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Rectangle width will be now 20px heigh!</p>\n"},{"syntax":"ofSetBackgroundAuto(bAuto)","name":"ofSetBackgroundAuto","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> bManual","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets the background clearing function to be auto (default) or not. If non-\nauto, then background clearing will not occur per frame (at the start of\ndraw) but rather, whenever ofBackground is called.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetBackgroundAuto</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//disable automatic background redraw</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetFrameNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// draws a black background every 10 frames</span>\n        <span class=\"token function\">ofSetBackgroundColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":"<p>Sets the background clearing function to be auto (default) or not. If non-auto, then background clearing will not occur per frame (at the start of draw) but rather, whenever ofBackground is called.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetBackgroundAuto</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//disable automatic background redraw</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetFrameNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// draws a black background every 10 frames</span>\n        <span class=\"token function\">ofSetBackground</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofSetBackgroundColor(&c)","name":"ofSetBackgroundColor","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofColor <span class=\"token operator\">&amp;</span>c","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofSetBackgroundColor(brightness, alpha = 255)","name":"ofSetBackgroundColor","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> brightness<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">255</span>","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofSetBackgroundColor(r, g, b, a = 255)","name":"ofSetBackgroundColor","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">255</span>","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets the background color. It takes as input r,g,b (0-255). The\nbackground is cleared automatically, just before the draw() command, so\nif the background color is not changing, you could call this inside\nsetup() (once, at the start of the application). If the background color\nis changing, you can call this inside update().</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetBackgroundColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// Sets the background color to red</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":"<p>Sets the background color. It takes as input r,g,b (0-255). The background is cleared automatically, just before the draw() command, so if the background color is not changing, you could call this inside of setup() (once, at the start of the application). If the background color is changing, you can call this inside of update().</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetBackgroundColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// Sets the background color to red</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofSetBackgroundColorHex(hexColor, alpha = 255)","name":"ofSetBackgroundColorHex","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> hexColor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">255</span>","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets the background color using a hex color value.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetBackgroundColorHex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xff0000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// Sets the background color to red</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":"<p>Sets the background color using a hex color value.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetBackgroundColorHex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xff0000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// Sets the background color to red</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofSetCircleResolution(res)","name":"ofSetCircleResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> res","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets the resolution for the ofDrawCircle command. By default, the circle is 22\npoints, but if you need to draw larger circles, you can adjust the\nresolution using this command. All circles are cached in openGL using a\ndisplay list for optimization purposes.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetCircleResolution</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\" spellcheck=\"true\">//draws a rough circle</span>\n    <span class=\"token function\">ofSetCircleResolution</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">450</span><span class=\"token punctuation\">,</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\" spellcheck=\"true\">//draws a fine circle</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":"<p>Sets the resolution for the ofDrawCircle command. By default, the circle is 22 points, but if you need to draw larger circles, you can adjust the resolution using this command. all circles are cached in opengl using a display list for optimization purposes.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetCircleResolution</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\" spellcheck=\"true\">//draws a rough circle</span>\n    <span class=\"token function\">ofSetCircleResolution</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">450</span><span class=\"token punctuation\">,</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\" spellcheck=\"true\">//draws a fine circle</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofSetColor(&color)","name":"ofSetColor","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofColor <span class=\"token operator\">&amp;</span>color","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofSetColor(&color, _a)","name":"ofSetColor","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofColor <span class=\"token operator\">&amp;</span>color<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> _a","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofSetColor(hexColor)","name":"ofSetColor","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> gray","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Sets the draw color with r,g,b, passed in as a hex. Hex is a conventient way to write colors. Some examples:</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xffffff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// white  (255,255,255)</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// black  (0,0,0);</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00ff00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// green  (0,255,0);</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofSetColor(r,g,b)","name":"ofSetColor","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets the draw color with r,g,b, 0-255. For example, red would\nbe: ofSetColor(255,0,0). This affects not only the color of shapes drawn\nwith ofDrawRectangle(), ofDrawCircle(), etc, but also the tint of images and\ntextures.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">//set the color to blue</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":"<p>Sets the draw color with r,g,b, 0-255. For example, red (0xff0000) would be: ofSetColor(255,0,0). This affects not only the color of shapes drawn with ofDrawRectangle(...), ofDrawCircle(...), etc, but also the tint of images and textures.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">//set te color to blue</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofSetColor(r,g,b,a)","name":"ofSetColor","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets the draw color with r,g,b,a 0-255.</p>\n<p>For alpha (transparency), you must first enable transparent blending\n(turned off by default for performance reasons) with\nofEnableAlphaBlending()</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofEnableAlphaBlending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// turn on alpha blending</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// red, 50% transparent</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDisableAlphaBlending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// turn it back off, if you don't need it</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":"<p>sets the draw color with r,g,b,a 0-255. For alpha (transparency), you must first enable transparent blending (turned off by default for performance reasons), and draw in the proper z-order (objects in the back drawn first). For example, to draw a transparent red rectangle:</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofEnableAlphaBlending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// turn on alpha blending</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// red, 50% transparent</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDisableAlphaBlending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// turn it back off, if you don't need it</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofSetCoordHandedness(handedness)","name":"ofSetCoordHandedness","returns":"void","returns_description":null,"parameters":"ofHandednessType handedness","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofSetCurveResolution(res)","name":"ofSetCurveResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> res","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofSetDepthTest(depthTest)","name":"ofSetDepthTest","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> depthTest","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set depth testing on or off to either sort by z-depth (<code><span class=\"token boolean\">true</span></code>)\nor draw order (<code><span class=\"token boolean\">false</span></code>).</p>\n","desc":"<p>Set depth testing on or off to either sort by z-depth (true) or draw order (false).</p>\n"},{"syntax":"ofSetDrawBitmapMode(mode)","name":"ofSetDrawBitmapMode","returns":"void","returns_description":null,"parameters":"ofDrawBitmapMode mode","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the bitmap drawing mode</p>\n<p>Valid modes:</p>\n<p>OF_BITMAPMODE_SCREEN: this is the default mode. It projects the 3d prosition onto\nthe screen so the letters always look the same size but can be positioned in any 3d coordinate.</p>\n<p>OF_BITMAPMODE_VIEWPORT: does the same as screen but uses the current viewport instead\nof the full window if it's different.</p>\n<p>OF_BITMAPMODE_MODEL: uses real 3d coordinates so the text will look scaled if it's not in z=0</p>\n<p>OF_BITMAPMODE_MODEL_BILLBOARD: uses real 3d coordinates but the text always faces the camera.</p>\n<p>OF_BITMAPMODE_SIMPLE: only does 2d and the z coordinate is just disacarded, so if z is not 0\nthe position in which it'll be drawn will be wrong.</p>\n","desc":"<p>takes OF_BITMAPMODE_SIMPLE, OF_BITMAPMODE_SCREEN, OF_BITMAPMODE_VIEWPORT, OF_BITMAPMODE_MODEL and OF_BITMAPMODE_MODEL_BILLBOARD</p>\n"},{"syntax":"ofSetHexColor(hexColor)","name":"ofSetHexColor","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> hexColor","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets the draw color with r,g,b, passed in as a hex. Hex is a conventient\nway to write colors.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xffffff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// white  (255,255,255)</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// black  (0,0,0);</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00ff00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// green  (0,255,0);</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":"<p>Sets the draw color with a hex value.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetHexColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xff0000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">//set te color to red</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofSetLineWidth(lineWidth)","name":"ofSetLineWidth","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> lineWidth","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets the width of the ofDrawLine() called after.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetLineWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\" spellcheck=\"true\">// set line width to 1</span>\n    <span class=\"token function\">ofDrawLine</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// draw thin line</span>\n    <span class=\"token function\">ofSetLineWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\" spellcheck=\"true\">// set line width to 10</span>\n    <span class=\"token function\">ofDrawLine</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// draw fat line</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":"<p>ofSetLineWidth sets the width of the ofDrawLines called after.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetLineWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\" spellcheck=\"true\">// set line width to 1</span>\n    <span class=\"token function\">ofDrawLine</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// draw thin line</span>\n    <span class=\"token function\">ofSetLineWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\" spellcheck=\"true\">// set line width to 10</span>\n    <span class=\"token function\">ofDrawLine</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// draw fat line</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofSetMatrixMode(matrixMode)","name":"ofSetMatrixMode","returns":"void","returns_description":null,"parameters":"ofMatrixMode matrixMode","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofSetPolyMode(mode)","name":"ofSetPolyMode","returns":"void","returns_description":null,"parameters":"ofPolyWindingMode mode","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets the drawing behavior for overlapping parts of the same polygon.</p>\n<p>Possible modes are:</p>\n<pre><code>OF_POLY_WINDING_ODD\nOF_POLY_WINDING_NONZERO\nOF_POLY_WINDING_POSITIVE\nOF_POLY_WINDING_NEGATIVE\nOF_POLY_WINDING_ABS_GEQ_TWO\n</code></pre>\n","desc":""},{"syntax":"ofSetRectMode(mode)","name":"ofSetRectMode","returns":"void","returns_description":null,"parameters":"ofRectMode mode","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets the mode for drawing rectangles and other rectangular objects, if\nthey are corner aligned, or drawn so that the x,y position is the center\nof the rectangle. possible options are <code>OF_RECTMODE_CENTER</code> and\n<code>OF_RECTMODE_CORNER</code>. This affects not only how ofDrawRectangle() objects are drawn,\nbut also ofTexture (and therefore ofImage) objects.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetRectMode</span><span class=\"token punctuation\">(</span>OF_RECTMODE_CORNER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//set rectangle mode to the corner</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofSetRectMode</span><span class=\"token punctuation\">(</span>OF_RECTMODE_CENTER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//set rectangle mode to the center</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// both rectangles are drawn at the same place</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":""},{"syntax":"ofSetStyle(style)","name":"ofSetStyle","returns":"void","returns_description":null,"parameters":"ofStyle style","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the current style of the ofGraphics.</p>\n<p><strong>Parameters:</strong></p>\n<p>style contains information of the graphics style such as\nofColor, ofFill, polyMode and others.</p>\n<p><strong>See also</strong>: See ofStyle for more details.</p>\n","desc":"<p>We use ofSetStyle to set the current style of the ofGraphics. Parameter style contains information of the graphics style such as ofColor, ofFill, polyMode and others. See ofStyle for more details.</p>\n"},{"syntax":"ofSetupGraphicDefaults()","name":"ofSetupGraphicDefaults","returns":"void","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"<p>Resets openGL screen coordinates and values back to OF defaults.</p>\n","desc":"<p>Resets openGL parameters back to OF defaults.</p>\n"},{"syntax":"ofSetupScreen()","name":"ofSetupScreen","returns":"void","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofSetupScreenOrtho(width = 0, height = 0, nearDist = -1, farDist = 1)","name":"ofSetupScreenOrtho","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> nearDist<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> farDist","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofSetupScreenPerspective(width = 0, height = 0, fov = 60, nearDist = 0, farDist = 0)","name":"ofSetupScreenPerspective","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> fov<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> nearDist<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> farDist","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofToString(&)","name":"ofToString","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofTranslate(&p)","name":"ofTranslate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>ofTranslate produces a translation by (x,y,z) vector of our coordinate system. The call of ofTranslate modifies graphics positions.\nUse ofPushMatrix and ofPopMatrix to save and restore the untranslated coordinate system.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ofPoint point<span class=\"token punctuation\">;</span>\n    point<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    point<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\" spellcheck=\"true\">// move the coordinate system to position of point and make that zero.</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// draw a rect at that position</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofTranslate(&p)","name":"ofTranslate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofTranslate(x,y,z)","name":"ofTranslate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Translate by (x,y,z) vector of our coordinate system.\nThe call of ofTranslate() modifies graphics positions.</p>\n<p>Use ofPushMatrix() and ofPopMatrix() to save and restore the untranslated\ncoordinate system.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// move the coordinate system to position x 100 and y 100 and make that zero.</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">// draw a rect at that position</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":"<p>ofTranslate produces a translation by (x,y,z) vector of our coordinate system. The call of ofTranslate modifies graphics positions.\nUse ofPushMatrix and ofPopMatrix to save and restore the untranslated coordinate system.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// move the coordinate system to position x 100 and y 100 and make that zero.</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">// draw a rect at that position</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"ofVertex(&p)","name":"ofVertex","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofVertex(&p)","name":"ofVertex","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofVertex(x, y, z)","name":"ofVertex","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofVertex(x,y)","name":"ofVertex","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Specifies a single point of a shape. To be called between ofBeginShape() and\nofEndShape().</p>\n","desc":"<p>Specifies a single point of a shape. To be called between ofBeginShape() and ofEndShape().</p>\n"},{"short":"","desc":""},{"short":"","desc":""},{"short":"","desc":""},{"short":"","desc":""},{"syntax":"ofViewport(viewport)","name":"ofViewport","returns":"void","returns_description":null,"parameters":"ofRectangle viewport","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Setup the drawing viewport</p>\n<p><strong>Parameters:</strong></p>\n<p>viewport A rectangle describing the size and position of the viewport.\nIf the width or height are set to 0, it will assume the size to be the window\nsize (ofGetWidth(), ofGetHeight())</p>\n","desc":""},{"syntax":"ofViewport(x = 0, y = 0, width = 0, height = 0, invertY = true)","name":"ofViewport","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vflip","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Setup the drawing viewport</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x position of the viewport</p>\n<p>y The y position of the viewport</p>\n<p>width The width of the viewport, defaults to ofGetWidth()</p>\n<p>height The height of the viewport, defaults to ofGetHeight()</p>\n","desc":""},{}],"document":"<p>#functions</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>##Description</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofBackground(&amp;c)</p>\n<p>&lt;!--\n<em>syntax: ofBackground(&amp;c)</em>\n<em>name: ofBackground</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofColor &amp;c</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofBackground(brightness, alpha = 255)</p>\n<p>&lt;!--\n<em>syntax: ofBackground(brightness, alpha = 255)</em>\n<em>name: ofBackground</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int brightness, int alpha=255</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofBackground(r, g, b, a = 255)</p>\n<p>&lt;!--\n<em>syntax: ofBackground(r, g, b, a = 255)</em>\n<em>name: ofBackground</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int r, int g, int b, int a=255</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets the background color.</p>\n<p>It takes as input r,g,b (0-255). The background is\ncleared automatically, just before the draw() command, so if the background\ncolor is not changing, you could call this inside of setup() (once, at the\nstart of the application). If the background color is changing, you can call\nthis inside of update().</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofBackground</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// Sets the background color to red</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofBackgroundGradient(&amp;start, &amp;end, mode = OF_GRADIENT_CIRCULAR)</p>\n<p>&lt;!--\n<em>syntax: ofBackgroundGradient(&amp;start, &amp;end, mode = OF_GRADIENT_CIRCULAR)</em>\n<em>name: ofBackgroundGradient</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofColor &amp;start, const ofColor &amp;end, ofGradientMode mode=OF_GRADIENT_CIRCULAR</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets the background color to a gradient.</p>\n<p>It takes as input 2 ofColor() objects and a Gradient Mode.\nMust be called in the draw() function.</p>\n<p>Accepted modes are:</p>\n<ul>\n<li>Circular: <code>OF_GRADIENT_CIRCULAR</code></li>\n<li>Linear: <code>OF_GRADIENT_LINEAR</code></li>\n<li>Bar: <code>OF_GRADIENT_BAR</code></li>\n</ul>\n<p><strong>Background Gradient: Circular:</strong>\n<img src=\"bkgGradient_circular.png\" alt=\"Background Gradient Circular\"></p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    ofColor <span class=\"token function\">colorOne</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor <span class=\"token function\">colorTwo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofBackgroundGradient</span><span class=\"token punctuation\">(</span>colorOne<span class=\"token punctuation\">,</span> colorTwo<span class=\"token punctuation\">,</span> OF_GRADIENT_CIRCULAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Sets the background to a circular gradient</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Background Gradient: Linear:</strong>\n<img src=\"bkgGradient_linear.png\" alt=\"Background Gradient Linear\"></p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    ofColor <span class=\"token function\">colorOne</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor <span class=\"token function\">colorTwo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofBackgroundGradient</span><span class=\"token punctuation\">(</span>colorOne<span class=\"token punctuation\">,</span> colorTwo<span class=\"token punctuation\">,</span> OF_GRADIENT_LINEAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\" spellcheck=\"true\">// Sets the background to a linear gradient</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Background Gradient: Bar:</strong>\n<img src=\"bkgGradient_bar.png\" alt=\"Background Gradient Bar\"></p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    ofColor <span class=\"token function\">colorOne</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor <span class=\"token function\">colorTwo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofBackgroundGradient</span><span class=\"token punctuation\">(</span>colorOne<span class=\"token punctuation\">,</span> colorTwo<span class=\"token punctuation\">,</span> OF_GRADIENT_BAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\" spellcheck=\"true\">// Sets the background to a bar gradient</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofBackgroundHex(hexColor, alpha = 255)</p>\n<p>&lt;!--\n<em>syntax: ofBackgroundHex(hexColor, alpha = 255)</em>\n<em>name: ofBackgroundHex</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int hexColor, int alpha=255</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets the background color using a hex color value.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofBackgroundHex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xff0000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// Sets the background color to red</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>Sets the background color using a hex color value.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofBackgroundHex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xff0000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// Sets the background color to red</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofBeginSaveScreenAsPDF(filename, bMultipage = false, b3D = false, outputsize)</p>\n<p>&lt;!--\n<em>syntax: ofBeginSaveScreenAsPDF(filename, bMultipage = false, b3D = false, outputsize)</em>\n<em>name: ofBeginSaveScreenAsPDF</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: string filename, bool bMultipage=false, bool b3D=false, ofRectangle outputsize</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Begin rendering to a PDF file.</p>\n<p>openFrameworks allows rendering of 2D graphics to pdf via the\nofCairoRenderer. ofBeginSaveScreenAsPDF() is called before drawing. When\ndone drawing call ofEndSaveScreenAsPDF() to output the file.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofBeginSaveScreenAsPDF</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>screenshot<span class=\"token punctuation\">.</span>pdf<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawEllipse</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofEndSaveScreenAsPDF</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>See also</strong>: End drawing with ofEndSaveScreenAsPDF()</p>\n<p>_description: _</p>\n<p>Begins render to pdf. OpenFrameworks allows rendering of 2D graphics to pdf via the ofCairoRenderer. ofBeginSaveScreenAsPDF is called before drawing. When done drawing call ofEndSaveScreenAsPDF() to output the file.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> oneShot <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofBeginSaveScreenAsPDF</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>screenshot<span class=\"token operator\">-</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">+</span><span class=\"token function\">ofGetTimestampString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">.</span>pdf<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawEllipse</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> oneShot <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofEndSaveScreenAsPDF</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        oneShot <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofBeginSaveScreenAsSVG(filename, bMultipage = false, b3D = false, outputsize)</p>\n<p>&lt;!--\n<em>syntax: ofBeginSaveScreenAsSVG(filename, bMultipage = false, b3D = false, outputsize)</em>\n<em>name: ofBeginSaveScreenAsSVG</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: string filename, bool bMultipage=false, bool b3D=false, ofRectangle outputsize</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Begin rendering to a SVG file.</p>\n<p><strong>See also</strong>: ofEndSaveScreenAsSVG(), ofBeginSaveScreenAsPDF()</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofBeginShape()</p>\n<p>&lt;!--\n<em>syntax: ofBeginShape()</em>\n<em>name: ofBeginShape</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Start drawing a new shape. Needs to be followed by a list of\nvertex points and lastly a call to ofEndShape().</p>\n<pre><code><span class=\"token comment\" spellcheck=\"true\">//draws a star</span>\n<span class=\"token function\">ofSetPolyMode</span><span class=\"token punctuation\">(</span>OF_POLY_WINDING_NONZERO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofBeginShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">135</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">215</span><span class=\"token punctuation\">,</span><span class=\"token number\">135</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">365</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">305</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofEndShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>See also</strong>: ofEndShape()</p>\n<p>_description: _</p>\n<p>Call this to start drawing a new shape. Needs to be followed by a list of vertex points and lastly a call to ofEndShape().</p>\n<pre><code><span class=\"token comment\" spellcheck=\"true\">//draws a star</span>\n<span class=\"token function\">ofSetPolyMode</span><span class=\"token punctuation\">(</span>OF_POLY_WINDING_NONZERO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofBeginShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">135</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">215</span><span class=\"token punctuation\">,</span><span class=\"token number\">135</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">365</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">305</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofEndShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofBezierVertex(&amp;p1, &amp;p2, &amp;p3)</p>\n<p>&lt;!--\n<em>syntax: ofBezierVertex(&amp;p1, &amp;p2, &amp;p3)</em>\n<em>name: ofBezierVertex</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p1, const glm::vec3 &amp;p2, const glm::vec3 &amp;p3</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofBezierVertex(&amp;p1, &amp;p2, &amp;p3)</p>\n<p>&lt;!--\n<em>syntax: ofBezierVertex(&amp;p1, &amp;p2, &amp;p3)</em>\n<em>name: ofBezierVertex</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;p1, const glm::vec2 &amp;p2, const glm::vec2 &amp;p3</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofBezierVertex(x1, y1, z1, x2, y2, z2, x3, y3, z3)</p>\n<p>&lt;!--\n<em>syntax: ofBezierVertex(x1, y1, z1, x2, y2, z2, x3, y3, z3)</em>\n<em>name: ofBezierVertex</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofBezierVertex(x1,y1,x2,y2,x3,y3)</p>\n<p>&lt;!--\n<em>syntax: ofBezierVertex(x1,y1,x2,y2,x3,y3)</em>\n<em>name: ofBezierVertex</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x1, float y1, float x2, float y2, float x3, float y3</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Describes a bezier curve through three points of a shape. To be called\nbetween ofBeginShape() and ofEndShape().</p>\n<p>_description: _</p>\n<p>Describes a bezier curve through three points of a shape. To be called between ofBeginShape() and ofEndShape().</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofClear(&amp;c)</p>\n<p>&lt;!--\n<em>syntax: ofClear(&amp;c)</em>\n<em>name: ofClear</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofColor &amp;c</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clears the color and depth bits of current renderer and replaces it with\nan ofColor.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ofColor <span class=\"token function\">myColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofClear</span><span class=\"token punctuation\">(</span>myColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Clears current screen and replaces it with myColor.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>Clears the color and depth bits of current renderer and replaces it with an ofColor.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ofColor myColor<span class=\"token punctuation\">;</span>\n    myColor<span class=\"token punctuation\">.</span><span class=\"token function\">set</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofClear</span> <span class=\"token punctuation\">(</span> myColor <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Clears current screen and replaces it with myColor.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofClear(brightness, a = 0)</p>\n<p>&lt;!--\n<em>syntax: ofClear(brightness, a = 0)</em>\n<em>name: ofClear</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float brightness, float a</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clears the color and depth bits of current renderer and replaces it with a\ngrayscale value.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofClear</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Clears current screen and replaces it with a grayscale value.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>Clears the color and depth bits of current renderer and replaces it with a grayscale value.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ofColor myColor<span class=\"token punctuation\">;</span>\n    myColor<span class=\"token punctuation\">.</span><span class=\"token function\">set</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">128</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofClear</span> <span class=\"token punctuation\">(</span> myColor <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Clears current screen and replaces it with a grayscale value.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofClear(r, g, b, a = 0)</p>\n<p>&lt;!--\n<em>syntax: ofClear(r, g, b, a = 0)</em>\n<em>name: ofClear</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float r, float g, float b, float a</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clears the color and depth bits of current renderer and replaces it with\nan RGB color.</p>\n<p>When drawing to the screen, ofClear() will clear the screen entirely.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofClear</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Clears current screen and replaces it with red.</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Screen will render as a flat color.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>When using the openGL renderer and drawing into an\n<a href=\"http://www.openframeworks.cc/documentation/gl/ofFbo.html\">FBO</a>, ofClear() will clear that buffer rather than the main\nscreen.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ofFbo myFbo<span class=\"token punctuation\">;</span>\n    myFbo<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    myFbo<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofClear</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// Clears FBO buffer and replaces it with red.</span>\n        <span class=\"token comment\" spellcheck=\"true\">// No effect in current drawing screen.</span>\n    myFbo<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>ofClear() is based on <a href=\"http://www.opengl.org/sdk/docs/man/xhtml/glClear.xml\">glClear</a>.</p>\n<p>_description: _</p>\n<p>Clears the color and depth bits of current renderer and replaces it with an RGB color.</p>\n<p>When drawing to the screen, ofClear(…) will clear the screen entirely.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofClear</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Clears current screen and replaces it with red.</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Screen will render as a flat color.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>When using the opengl renderer and drawing into an <a href=\"/documentation/gl/ofFbo.html\">FBO</a>, ofClear(...) will clear that buffer rather than the main screen.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ofFbo myFbo<span class=\"token punctuation\">;</span>\n    myFbo<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    myFbo<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofClear</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// Clears FBO buffer and replaces it with red.</span>\n        <span class=\"token comment\" spellcheck=\"true\">// No effect in current drawing screen.</span>\n    myFbo<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>ofClear(…) is based on glClear (http://www.opengl.org/sdk/docs/man/xhtml/glClear.xml).</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofClearAlpha()</p>\n<p>&lt;!--\n<em>syntax: ofClearAlpha()</em>\n<em>name: ofClearAlpha</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofCurveVertex(&amp;p)</p>\n<p>&lt;!--\n<em>syntax: ofCurveVertex(&amp;p)</em>\n<em>name: ofCurveVertex</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofCurveVertex(&amp;p)</p>\n<p>&lt;!--\n<em>syntax: ofCurveVertex(&amp;p)</em>\n<em>name: ofCurveVertex</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofCurveVertex(x, y, z)</p>\n<p>&lt;!--\n<em>syntax: ofCurveVertex(x, y, z)</em>\n<em>name: ofCurveVertex</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofCurveVertex(x,y)</p>\n<p>&lt;!--\n<em>syntax: ofCurveVertex(x,y)</em>\n<em>name: ofCurveVertex</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Specifies a single point of a shape. The difference from ofVertex is that\nthe line describing the edge of the shape between two points will be a\ncurve as opposed to a straight line. The curve is automatically generated\nusing the catmull from formula.</p>\n<p>This function has to be called between ofBeginShape() and ofEndShape().</p>\n<p>_description: _</p>\n<p>Specifies a single point of a shape. The difference from ofVertex is that the line describing the edge of the shape between two points will be a curve as opposed to a straight line. The curve is automatically generated using the catmull from formula. To be called between ofBeginShape() and ofEndShape().</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofCurveVertices(&amp;curvePoints)</p>\n<p>&lt;!--\n<em>syntax: ofCurveVertices(&amp;curvePoints)</em>\n<em>name: ofCurveVertices</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const vector&lt; glm::vec3 &gt; &amp;curvePoints</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a curve through a series of vertices stored as a vector of\nofPoints. Should be called between ofBeginShape() and ofEndShape().</p>\n<p>_description: _</p>\n<p>Draws a curve through a series of vertices stored as a vector of ofPoints. Should be called between ofBeginShape() and ofEndShape().</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofCurveVertices(&amp;curvePoints)</p>\n<p>&lt;!--\n<em>syntax: ofCurveVertices(&amp;curvePoints)</em>\n<em>name: ofCurveVertices</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const vector&lt; glm::vec2 &gt; &amp;curvePoints</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofCurveVertices(&amp;curvePoints)</p>\n<p>&lt;!--\n<em>syntax: ofCurveVertices(&amp;curvePoints)</em>\n<em>name: ofCurveVertices</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const vector&lt; ofVec3f &gt; &amp;curvePoints</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofCurveVertices(&amp;curvePoints)</p>\n<p>&lt;!--\n<em>syntax: ofCurveVertices(&amp;curvePoints)</em>\n<em>name: ofCurveVertices</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const vector&lt; ofVec2f &gt; &amp;curvePoints</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDisableAlphaBlending()</p>\n<p>&lt;!--\n<em>syntax: ofDisableAlphaBlending()</em>\n<em>name: ofDisableAlphaBlending</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Turn off alpha blending.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofEnableAlphaBlending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// turn on alpha blending</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// red, 50% transparent</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\" spellcheck=\"true\">// draws the rect with alpha</span>\n    <span class=\"token function\">ofDisableAlphaBlending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// turn off alpha</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// draws the rect without alpha</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>See also</strong>: ofEnableAlphaBlending()</p>\n<p>_description: _</p>\n<p>Turns off alpha blending.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofEnableAlphaBlending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// turn on alpha blending</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// red, 50% transparent</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\" spellcheck=\"true\">// draws the rect with alpha</span>\n    <span class=\"token function\">ofDisableAlphaBlending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// turn off alpha</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// draws the rect without alpha</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDisableAntiAliasing()</p>\n<p>&lt;!--\n<em>syntax: ofDisableAntiAliasing()</em>\n<em>name: ofDisableAntiAliasing</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Turns off anti-aliasing (smoothing).</p>\n<p>_description: _</p>\n<p>Turns off anti-aliasing (smoothing).</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDisableBlendMode()</p>\n<p>&lt;!--\n<em>syntax: ofDisableBlendMode()</em>\n<em>name: ofDisableBlendMode</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Disable the current blend mode.</p>\n<p>_description: _</p>\n<p>Disables the current blend mode.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDisableDepthTest()</p>\n<p>&lt;!--\n<em>syntax: ofDisableDepthTest()</em>\n<em>name: ofDisableDepthTest</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Turn off depth testing so rendering happens in draw order rather than by\nz-depth.</p>\n<p>Turning off depth test is useful for combining 3d scenes with 2d\noverlays such as a control panel.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">ofPushMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span> <span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">ofEnableDepthTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDrawSphere</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDrawSphere</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDisableDepthTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>Some bubbles<span class=\"token punctuation\">.</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span><span class=\"token number\">85</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofPopMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>See also</strong>: ofEnableDepthTest()</p>\n<p>_description: _</p>\n<p>Turns off depth testing so rendering happens in draw order rather than by z-depth. Turning off depth test is useful for combining 3d scenes with 2d overlays such as a control panel.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">ofPushMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span> <span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">ofEnableDepthTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDrawSphere</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDrawSphere</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDisableDepthTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>Some bubbles<span class=\"token punctuation\">.</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span><span class=\"token number\">85</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofPopMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDisablePointSprites()</p>\n<p>&lt;!--\n<em>syntax: ofDisablePointSprites()</em>\n<em>name: ofDisablePointSprites</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Turn off point sprites</p>\n<p>_description: _</p>\n<p>Turns off point sprite.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDisableSmoothing()</p>\n<p>&lt;!--\n<em>syntax: ofDisableSmoothing()</em>\n<em>name: ofDisableSmoothing</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Turn off smoothing. Currently, this only works for lines. You can draw a\nfilled object, and then draw the outline with smoothing enabled to get\nsmoothing effects on filled shapes.</p>\n<p>_description: _</p>\n<p>Turns off smoothing. Currently, this only works for lines. You can draw a filled object, and then draw the outline with smoothing enabled to get smoothing effects on filled shapes.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawBezier(x0, y0, x1, y1, x2, y2, x3, y3)</p>\n<p>&lt;!--\n<em>syntax: ofDrawBezier(x0, y0, x1, y1, x2, y2, x3, y3)</em>\n<em>name: ofDrawBezier</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x0, float y0, float x1, float y1, float x2, float y2, float x3, float y3</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawBezier(x0, y0, z0, x1, y1, z1, x2, y2, z2, x3, y3, z3)</p>\n<p>&lt;!--\n<em>syntax: ofDrawBezier(x0, y0, z0, x1, y1, z1, x2, y2, z2, x3, y3, z3)</em>\n<em>name: ofDrawBezier</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x0, float y0, float z0, float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawBitmapString(&amp;textString, &amp;p)</p>\n<p>&lt;!--\n<em>syntax: ofDrawBitmapString(&amp;textString, &amp;p)</em>\n<em>name: ofDrawBitmapString</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const T &amp;textString, const glm::vec2 &amp;p</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawBitmapString(&amp;textString, &amp;p)</p>\n<p>&lt;!--\n<em>syntax: ofDrawBitmapString(&amp;textString, &amp;p)</em>\n<em>name: ofDrawBitmapString</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const T &amp;textString, const glm::vec3 &amp;p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>}</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawBitmapString(&amp;textString, &amp;p)</p>\n<p>&lt;!--\n<em>syntax: ofDrawBitmapString(&amp;textString, &amp;p)</em>\n<em>name: ofDrawBitmapString</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const string &amp;textString, const glm::vec3 &amp;p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawBitmapString(&amp;textString, &amp;p)</p>\n<p>&lt;!--\n<em>syntax: ofDrawBitmapString(&amp;textString, &amp;p)</em>\n<em>name: ofDrawBitmapString</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const string &amp;textString, const glm::vec2 &amp;p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawBitmapString(&amp;textString, x, y)</p>\n<p>&lt;!--\n<em>syntax: ofDrawBitmapString(&amp;textString, x, y)</em>\n<em>name: ofDrawBitmapString</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const T &amp;textString, float x, float y</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a bitmapped string, on screen, at point (x,y).</p>\n<p>For example, you can write some text on screen like this:</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>hi<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Your strings can even be multiline:</p>\n<pre><code><span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>a test\nof multiline\ntext<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>you can also using dynamically generated strings. For example, to print\nthe frame rate:</p>\n<pre><code>string fpsStr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>frame rate<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">+</span><span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetFrameRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span>fpsStr<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>\\note ofDrawBitmapString wraps a glut function that uses glDrawPixels. On\nsome graphics cards, you may discover that glDrawPixels is slow (or even,\nvery slow). If so, you might want to investigate using ofTrueTypeFont\nwith a small typeface, non-anti-aliased, as a suitable alternative.</p>\n<p><strong>See also</strong>: ofTrueTypeFont</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawBitmapString(&amp;textString, x, y, z)</p>\n<p>&lt;!--\n<em>syntax: ofDrawBitmapString(&amp;textString, x, y, z)</em>\n<em>name: ofDrawBitmapString</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const T &amp;textString, float x, float y, float z</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Draws a bitmapped string, on screen, at point (x,y). For example, you can write some text on screen like this:</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>hi<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Your strings can even be multiline:</p>\n<pre><code><span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>a test\nof multiline\ntext<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>you can also using dynamically generated strings. For example, to print the frame rate:</p>\n<pre><code>string fpsStr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>frame rate<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">+</span><span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetFrameRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span>fpsStr<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Please note, ofDrawBitmapString wraps a glut function that uses glDrawPixels. On some graphics cards, you may discover that glDrawPixels is slow (or even, very slow). If so, you might want to investigate using ofTrueTypeFont with a small typeface, non-anti-aliased, as a suitable alternative.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawBitmapString(&amp;textString, x, y, z)</p>\n<p>&lt;!--\n<em>syntax: ofDrawBitmapString(&amp;textString, x, y, z)</em>\n<em>name: ofDrawBitmapString</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const string &amp;textString, float x, float y, float z</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawBitmapStringHighlight(text, &amp;position, &amp;background = black, &amp;foreground = white)</p>\n<p>&lt;!--\n<em>syntax: ofDrawBitmapStringHighlight(text, &amp;position, &amp;background = black, &amp;foreground = white)</em>\n<em>name: ofDrawBitmapStringHighlight</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: string text, const glm::vec3 &amp;position, const ofColor &amp;background=black, const ofColor &amp;foreground=white</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawBitmapStringHighlight(text, &amp;position, &amp;background = black, &amp;foreground = white)</p>\n<p>&lt;!--\n<em>syntax: ofDrawBitmapStringHighlight(text, &amp;position, &amp;background = black, &amp;foreground = white)</em>\n<em>name: ofDrawBitmapStringHighlight</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: string text, const glm::vec2 &amp;position, const ofColor &amp;background=black, const ofColor &amp;foreground=white</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawBitmapStringHighlight(text, x, y, &amp;background = ofColor::black, &amp;foreground = ofColor::white)</p>\n<p>&lt;!--\n<em>syntax: ofDrawBitmapStringHighlight(text, x, y, &amp;background = ofColor::black, &amp;foreground = ofColor::white)</em>\n<em>name: ofDrawBitmapStringHighlight</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: string text, int x, int y, const ofColor &amp;background=black, const ofColor &amp;foreground=white</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawCircle(&amp;p, radius)</p>\n<p>&lt;!--\n<em>syntax: ofDrawCircle(&amp;p, radius)</em>\n<em>name: ofDrawCircle</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p, float radius</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawCircle(&amp;p, radius)</p>\n<p>&lt;!--\n<em>syntax: ofDrawCircle(&amp;p, radius)</em>\n<em>name: ofDrawCircle</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;p, float radius</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawCircle(x, y, radius)</p>\n<p>&lt;!--\n<em>syntax: ofDrawCircle(x, y, radius)</em>\n<em>name: ofDrawCircle</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float radius</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a circle, centered at x,y, with a given radius.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Please keep in mind that drawing circle with different outline color and\nfill requires calling ofNoFill and ofSetColor for drawing stroke and\nofFill and again ofSetColor for filled solid color circle.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawCircle(x, y, z, radius)</p>\n<p>&lt;!--\n<em>syntax: ofDrawCircle(x, y, z, radius)</em>\n<em>name: ofDrawCircle</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float radius</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawCurve(x0, y0, x1, y1, x2, y2, x3, y3)</p>\n<p>&lt;!--\n<em>syntax: ofDrawCurve(x0, y0, x1, y1, x2, y2, x3, y3)</em>\n<em>name: ofDrawCurve</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x0, float y0, float x1, float y1, float x2, float y2, float x3, float y3</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a curve from point (x1, y1) to point (x2, y2). The curve is shaped by\nthe two control points (x0,y0) and (x3,y3).</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawCurve(x0, y0, z0, x1, y1, z1, x2, y2, z2, x3, y3, z3)</p>\n<p>&lt;!--\n<em>syntax: ofDrawCurve(x0, y0, z0, x1, y1, z1, x2, y2, z2, x3, y3, z3)</em>\n<em>name: ofDrawCurve</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x0, float y0, float z0, float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a 3-dimensional curve from point (x1, y1, z1) to point (x2, y2, z2).\nThe curve is shaped by the two control points (x0, y0, z0) and (x3, y3, z3).</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawEllipse(&amp;p, width, height)</p>\n<p>&lt;!--\n<em>syntax: ofDrawEllipse(&amp;p, width, height)</em>\n<em>name: ofDrawEllipse</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p, float width, float height</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawEllipse(&amp;p, width, height)</p>\n<p>&lt;!--\n<em>syntax: ofDrawEllipse(&amp;p, width, height)</em>\n<em>name: ofDrawEllipse</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;p, float width, float height</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawEllipse(x, y, width, height)</p>\n<p>&lt;!--\n<em>syntax: ofDrawEllipse(x, y, width, height)</em>\n<em>name: ofDrawEllipse</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float width, float height</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws an ellipse from point (x,y) with a given width (w) and height (h).</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawEllipse</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawEllipse(x, y, z, width, height)</p>\n<p>&lt;!--\n<em>syntax: ofDrawEllipse(x, y, z, width, height)</em>\n<em>name: ofDrawEllipse</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float width, float height</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawLine(&amp;p1, &amp;p2)</p>\n<p>&lt;!--\n<em>syntax: ofDrawLine(&amp;p1, &amp;p2)</em>\n<em>name: ofDrawLine</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p1, const glm::vec3 &amp;p2</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawLine(&amp;p1, &amp;p2)</p>\n<p>&lt;!--\n<em>syntax: ofDrawLine(&amp;p1, &amp;p2)</em>\n<em>name: ofDrawLine</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;p1, const glm::vec2 &amp;p2</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawLine(x1, y1, x2, y2)</p>\n<p>&lt;!--\n<em>syntax: ofDrawLine(x1, y1, x2, y2)</em>\n<em>name: ofDrawLine</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x1, float y1, float x2, float y2</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a line between two points: (x1,y1),(x2,y2).</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawLine</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawLine(x1, y1, z1, x2, y2, z2)</p>\n<p>&lt;!--\n<em>syntax: ofDrawLine(x1, y1, z1, x2, y2, z2)</em>\n<em>name: ofDrawLine</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x1, float y1, float z1, float x2, float y2, float z2</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawRectRounded(&amp;b, r)</p>\n<p>&lt;!--\n<em>syntax: ofDrawRectRounded(&amp;b, r)</em>\n<em>name: ofDrawRectRounded</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;b, float r</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a rounded rectangle from the given rectangle using given\nradius.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ofRectangle myRect<span class=\"token punctuation\">;</span>\n    myRect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    myRect<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    myRect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    myRect<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofDrawRectRounded</span><span class=\"token punctuation\">(</span>myRect<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawRectRounded(&amp;b, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)</p>\n<p>&lt;!--\n<em>syntax: ofDrawRectRounded(&amp;b, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)</em>\n<em>name: ofDrawRectRounded</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;b, float topLeftRadius, float topRightRadius, float bottomRightRadius, float bottomLeftRadius</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a rounded rectangle from the given rectangle using different given\nradius for each of the corners.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ofRectangle myRect<span class=\"token punctuation\">;</span>\n    myRect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    myRect<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    myRect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    myRect<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofDrawRectRounded</span><span class=\"token punctuation\">(</span> myRect<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawRectRounded(&amp;p, w, h, r)</p>\n<p>&lt;!--\n<em>syntax: ofDrawRectRounded(&amp;p, w, h, r)</em>\n<em>name: ofDrawRectRounded</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;p, float w, float h, float r</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawRectRounded(&amp;p, w, h, r)</p>\n<p>&lt;!--\n<em>syntax: ofDrawRectRounded(&amp;p, w, h, r)</em>\n<em>name: ofDrawRectRounded</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p, float w, float h, float r</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a rectangle from point p with a given width, height and radius of\nrounded corners.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ofPoint p<span class=\"token punctuation\">;</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">set</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawRectRounded</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawRectRounded(&amp;p, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)</p>\n<p>&lt;!--\n<em>syntax: ofDrawRectRounded(&amp;p, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)</em>\n<em>name: ofDrawRectRounded</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p, float w, float h, float topLeftRadius, float topRightRadius, float bottomRightRadius, float bottomLeftRadius</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a rounded rectangle from point X, Y, at depth Z with a given width,\nheight and radius of rounded corners.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawRectRounded</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawRectRounded(&amp;p, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)</p>\n<p>&lt;!--\n<em>syntax: ofDrawRectRounded(&amp;p, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)</em>\n<em>name: ofDrawRectRounded</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;p, float w, float h, float topLeftRadius, float topRightRadius, float bottomRightRadius, float bottomLeftRadius</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawRectRounded(x, y, w, h, r)</p>\n<p>&lt;!--\n<em>syntax: ofDrawRectRounded(x, y, w, h, r)</em>\n<em>name: ofDrawRectRounded</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float w, float h, float r</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a rectangle from point X, Y with a given width, height and radius of\nrounded corners.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawRectRounded</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawRectRounded(x, y, z, w, h, r)</p>\n<p>&lt;!--\n<em>syntax: ofDrawRectRounded(x, y, z, w, h, r)</em>\n<em>name: ofDrawRectRounded</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float w, float h, float r</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a rectangle from point X, Y, at depth Z with a given width, height and\nradius of rounded corners.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawRectRounded</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawRectRounded(x, y, z, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)</p>\n<p>&lt;!--\n<em>syntax: ofDrawRectRounded(x, y, z, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)</em>\n<em>name: ofDrawRectRounded</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float w, float h, float topLeftRadius, float topRightRadius, float bottomRightRadius, float bottomLeftRadius</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a rounded rectangle from point X, Y, at depth Z with a given width,\nheight and different radius for each rounded corner.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawRectRounded</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawRectangle(&amp;p, w, h)</p>\n<p>&lt;!--\n<em>syntax: ofDrawRectangle(&amp;p, w, h)</em>\n<em>name: ofDrawRectangle</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p, float w, float h</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a rectangle from point p, with a given width and height.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    glm<span class=\"token operator\">::</span>vec3 p<span class=\"token punctuation\">;</span>      <span class=\"token comment\" spellcheck=\"true\">// create a point P</span>\n    p<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">// set the x of the point</span>\n    p<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">// set the y of the point</span>\n\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Draw the rectangle</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawRectangle(&amp;p, w, h)</p>\n<p>&lt;!--\n<em>syntax: ofDrawRectangle(&amp;p, w, h)</em>\n<em>name: ofDrawRectangle</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;p, float w, float h</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawRectangle(&amp;r)</p>\n<p>&lt;!--\n<em>syntax: ofDrawRectangle(&amp;r)</em>\n<em>name: ofDrawRectangle</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;r</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a rectangle from the given rectangle.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ofRectangle rect<span class=\"token punctuation\">;</span>\n    rect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    rect<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    rect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    rect<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawRectangle(x, y, z, w, h)</p>\n<p>&lt;!--\n<em>syntax: ofDrawRectangle(x, y, z, w, h)</em>\n<em>name: ofDrawRectangle</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float w, float h</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a rectangle from point X, Y at depth Z with a given width and height.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Draw a rectangle at 100 pixels in depth</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawRectangle(x1, y1, w, h)</p>\n<p>&lt;!--\n<em>syntax: ofDrawRectangle(x1, y1, w, h)</em>\n<em>name: ofDrawRectangle</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x1, float y1, float w, float h</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a rectangle from point x,y with a given width and height.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawTriangle(&amp;p1, &amp;p2, &amp;p3)</p>\n<p>&lt;!--\n<em>syntax: ofDrawTriangle(&amp;p1, &amp;p2, &amp;p3)</em>\n<em>name: ofDrawTriangle</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p1, const glm::vec3 &amp;p2, const glm::vec3 &amp;p3</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawTriangle(&amp;p1, &amp;p2, &amp;p3)</p>\n<p>&lt;!--\n<em>syntax: ofDrawTriangle(&amp;p1, &amp;p2, &amp;p3)</em>\n<em>name: ofDrawTriangle</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;p1, const glm::vec2 &amp;p2, const glm::vec2 &amp;p3</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawTriangle(x1, y1, x2, y2, x3, y3)</p>\n<p>&lt;!--\n<em>syntax: ofDrawTriangle(x1, y1, x2, y2, x3, y3)</em>\n<em>name: ofDrawTriangle</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x1, float y1, float x2, float y2, float x3, float y3</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a triangle, with the three points: (x1,y1),(x2, y2),(x3, y3).</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawTriangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDrawTriangle(x1, y1, z1, x2, y2, z2, x3, y3, z3)</p>\n<p>&lt;!--\n<em>syntax: ofDrawTriangle(x1, y1, z1, x2, y2, z2, x3, y3, z3)</em>\n<em>name: ofDrawTriangle</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofEnableAlphaBlending()</p>\n<p>&lt;!--\n<em>syntax: ofEnableAlphaBlending()</em>\n<em>name: ofEnableAlphaBlending</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Turns on alpha blending (which is on by default since OF version 0.8.0).\nIt simply wraps opengl commands that enable blending, and turn on a common\nblend mode.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofEnableAlphaBlending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// turn on alpha blending</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// red, 50% transparent</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\" spellcheck=\"true\">// draws the rect with alpha</span>\n    <span class=\"token function\">ofDisableAlphaBlending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// turn off alpha</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\" spellcheck=\"true\">// draws the rect without alpha</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>Turns on alpha blending (which is on by default since OF version 0.8.0). It simply wraps opengl commands that enable blending, and turn on a common blend mode.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofEnableAlphaBlending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// turn on alpha blending</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// red, 50% transparent</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\" spellcheck=\"true\">// draws the rect with alpha</span>\n    <span class=\"token function\">ofDisableAlphaBlending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// turn off alpha</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// draws the rect without alpha</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofEnableAntiAliasing()</p>\n<p>&lt;!--\n<em>syntax: ofEnableAntiAliasing()</em>\n<em>name: ofEnableAntiAliasing</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Enables anti-aliasing (smoothing) for lines.</p>\n<p>_description: _</p>\n<p>Enables anti-aliasing (smoothing) for lines.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofEnableBlendMode(blendMode)</p>\n<p>&lt;!--\n<em>syntax: ofEnableBlendMode(blendMode)</em>\n<em>name: ofEnableBlendMode</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofBlendMode blendMode</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets and enables the blend mode for drawing. The options are:</p>\n<pre><code>OF_BLENDMODE_DISABLED\nOF_BLENDMODE_ALPHA\nOF_BLENDMODE_ADD\nOF_BLENDMODE_SUBTRACT\nOF_BLENDMODE_MULTIPLY\nOF_BLENDMODE_SCREEN\n</code></pre>\n<p>There is a blendingExample in the openFrameworks examples &gt; graphics</p>\n<p>_description: _</p>\n<p>Sets and enables the blend mode for drawing. The options are:</p>\n<pre><code>OF_BLENDMODE_DISABLED\nOF_BLENDMODE_ALPHA\nOF_BLENDMODE_ADD\nOF_BLENDMODE_SUBTRACT\nOF_BLENDMODE_MULTIPLY\nOF_BLENDMODE_SCREEN\n</code></pre>\n<p>There is a blendingExample in the openFrameworks examples &gt; graphics</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofEnableDepthTest()</p>\n<p>&lt;!--\n<em>syntax: ofEnableDepthTest()</em>\n<em>name: ofEnableDepthTest</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Turns on depth testing so rendering happens according to z-depth rather\nthan draw order.</p>\n<p><strong>See also</strong>: ofDisableDepthTest()</p>\n<p>_description: _</p>\n<p>Turns on depth testing so rendering happens according to z-depth rather than draw order.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">ofPushMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span> <span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">ofEnableDepthTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// enable depth test</span>\n        <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDrawSphere</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// draw 3d sphere</span>\n        <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDrawSphere</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDisableDepthTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// disable depth test</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// draw 2d overlay</span>\n        <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>Some bubbles<span class=\"token punctuation\">.</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span><span class=\"token number\">85</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofPopMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofEnablePointSprites()</p>\n<p>&lt;!--\n<em>syntax: ofEnablePointSprites()</em>\n<em>name: ofEnablePointSprites</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Turn on point sprite.</p>\n<p>Textures can be mapped onto points. By default, point size is 1pt. So\ntexture is not shown correctly. You can change point size by\n`glPointSize(GLfloat size).</p>\n<p>_description: _</p>\n<p>Turns on point sprite. Textures can be mapped onto points. By default, point size is 1pt. So texture is not shown correctly. You can change point size by glPointSize(GLfloat size).</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofEnableSmoothing()</p>\n<p>&lt;!--\n<em>syntax: ofEnableSmoothing()</em>\n<em>name: ofEnableSmoothing</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Turns on smoothing. Currently, this only works for lines. You can draw a filled object, and then draw the outline with smoothing enabled to get smoothing effects on filled shapes.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofEndSaveScreenAsPDF()</p>\n<p>&lt;!--\n<em>syntax: ofEndSaveScreenAsPDF()</em>\n<em>name: ofEndSaveScreenAsPDF</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Terminates draw to PDF through ofCairoRenderer and outputs the file.</p>\n<p><strong>See also</strong>: ofBeginSaveScreenAsPDF()</p>\n<p>_description: _</p>\n<p>Terminates draw to pdf through ofCairoRenderer and outputs the pdf file.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> oneShot <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofBeginSaveScreenAsPDF</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>screenshot<span class=\"token operator\">-</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">+</span><span class=\"token function\">ofGetTimestampString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">.</span>pdf<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawEllipse</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> oneShot <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofEndSaveScreenAsPDF</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        oneShot <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofEndSaveScreenAsSVG()</p>\n<p>&lt;!--\n<em>syntax: ofEndSaveScreenAsSVG()</em>\n<em>name: ofEndSaveScreenAsSVG</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Terminates draw to SVG and outputs the file.</p>\n<p><strong>See also</strong>: ofBeginSaveScreenAsSVG()</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofEndShape(bClose)</p>\n<p>&lt;!--\n<em>syntax: ofEndShape(bClose)</em>\n<em>name: ofEndShape</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool bClose=false</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This tells the program that your shape is finished and that it should now\ndraw it to the screen.</p>\n<p>This function must be called otherwise you will not see your shape.</p>\n<p><strong>Parameters:</strong></p>\n<p>bClose If you set it to true it will automatically close your\nshape for you. Default false.</p>\n<p>_description: _</p>\n<p>This tells the program that your shape is finished and that it should now draw it to the screen. If you set the optional 'bClose' argument to true it will automatically close your shape for you.'bClose' is set to false by default. This function must be called otherwise you will not see your shape.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofFill()</p>\n<p>&lt;!--\n<em>syntax: ofFill()</em>\n<em>name: ofFill</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw shapes filled with the current draw color.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//draws the rectangle filled in blue</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>Draw shapes filled with the current draw color.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//draws the rectangle filled in blue</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool ofGetBackgroundAuto()</p>\n<p>&lt;!--\n<em>syntax: ofGetBackgroundAuto()</em>\n<em>name: ofGetBackgroundAuto</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor ofGetBackgroundColor()</p>\n<p>&lt;!--\n<em>syntax: ofGetBackgroundColor()</em>\n<em>name: ofGetBackgroundColor</em>\n<em>returns: ofColor</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the current background color as an ofColor.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofHandednessType ofGetCoordHandedness()</p>\n<p>&lt;!--\n<em>syntax: ofGetCoordHandedness()</em>\n<em>name: ofGetCoordHandedness</em>\n<em>returns: ofHandednessType</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::mat4 ofGetCurrentMatrix(matrixMode)</p>\n<p>&lt;!--\n<em>syntax: ofGetCurrentMatrix(matrixMode)</em>\n<em>name: ofGetCurrentMatrix</em>\n<em>returns: glm::mat4</em>\n_returns_description: _\n<em>parameters: ofMatrixMode matrixMode</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Query the current (oF internal) Transformation Matrix state.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::mat4 ofGetCurrentNormalMatrix()</p>\n<p>&lt;!--\n<em>syntax: ofGetCurrentNormalMatrix()</em>\n<em>name: ofGetCurrentNormalMatrix</em>\n<em>returns: glm::mat4</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Query the current (oF internal) Normal Matrix state.\n\\note  The matrix returned is the transposed of the inverse of the\nview matrix</p>\n<pre><code>   Currently<span class=\"token punctuation\">,</span> only GL Programmable Renderer <span class=\"token operator\">and</span> GL Renderer\n   implement ofGetCurrentNormalMatrix<span class=\"token punctuation\">.</span>\n</code></pre>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::mat4 ofGetCurrentOrientationMatrix()</p>\n<p>&lt;!--\n<em>syntax: ofGetCurrentOrientationMatrix()</em>\n<em>name: ofGetCurrentOrientationMatrix</em>\n<em>returns: glm::mat4</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Query the current (oF internal) Orientation Matrix state.\n\\note  The matrix returned is the matrix openFrameworks uses internally\nto calculate the (final, oriented) projection matrix as it is\npassed on to the GPU.</p>\n<pre><code>   Currently<span class=\"token punctuation\">,</span> only GL Programmable Renderer <span class=\"token operator\">and</span> GL Renderer\n   implement ofGetCurrentOrientationMatrix<span class=\"token punctuation\">.</span>\n</code></pre>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::mat4 ofGetCurrentViewMatrix()</p>\n<p>&lt;!--\n<em>syntax: ofGetCurrentViewMatrix()</em>\n<em>name: ofGetCurrentViewMatrix</em>\n<em>returns: glm::mat4</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofRectangle ofGetCurrentViewport()</p>\n<p>&lt;!--\n<em>syntax: ofGetCurrentViewport()</em>\n<em>name: ofGetCurrentViewport</em>\n<em>returns: ofRectangle</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the position and size of the current viewport</p>\n<p><strong>Returns</strong>: A rectangle describing the viewport</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofFillFlag ofGetFill()</p>\n<p>&lt;!--\n<em>syntax: ofGetFill()</em>\n<em>name: ofGetFill</em>\n<em>returns: ofFillFlag</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofRectangle ofGetNativeViewport()</p>\n<p>&lt;!--\n<em>syntax: ofGetNativeViewport()</em>\n<em>name: ofGetNativeViewport</em>\n<em>returns: ofRectangle</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the position and size of the native viewport</p>\n<p><strong>Returns</strong>: A rectangle describing the viewport</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofRectMode ofGetRectMode()</p>\n<p>&lt;!--\n<em>syntax: ofGetRectMode()</em>\n<em>name: ofGetRectMode</em>\n<em>returns: ofRectMode</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Tells you if rectangle drawing mode is set to drawn from the center or drawn\nfrom the top left corner, as set with the ofSetRectMode() function.</p>\n<p>Default is <code>OF_RECTMODE_CORNER</code></p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetRectMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OF_RECTMODE_CORNER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        ofDrawRea10<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>See also</strong>: ofSetRectMode()</p>\n<p>_description: _</p>\n<p>Tells you if rect drawing mode is set to drawn from the center or drawn from the top left corner, as set with the ofSetRectMode() function.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetRectMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OF_RECTMODE_CORNER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofStyle ofGetStyle()</p>\n<p>&lt;!--\n<em>syntax: ofGetStyle()</em>\n<em>name: ofGetStyle</em>\n<em>returns: ofStyle</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int ofGetViewportHeight()</p>\n<p>&lt;!--\n<em>syntax: ofGetViewportHeight()</em>\n<em>name: ofGetViewportHeight</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the height of the current viewport</p>\n<p><strong>Returns</strong>: A height in pixels</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int ofGetViewportWidth()</p>\n<p>&lt;!--\n<em>syntax: ofGetViewportWidth()</em>\n<em>name: ofGetViewportWidth</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the width of the current viewport</p>\n<p><strong>Returns</strong>: A width in pixels</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool ofIsVFlipped()</p>\n<p>&lt;!--\n<em>syntax: ofIsVFlipped()</em>\n<em>name: ofIsVFlipped</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get if view is flipped vertically</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofLoadIdentityMatrix()</p>\n<p>&lt;!--\n<em>syntax: ofLoadIdentityMatrix()</em>\n<em>name: ofLoadIdentityMatrix</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>}\n\\name Matrix Transformation\n{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofLoadMatrix(&amp;m)</p>\n<p>&lt;!--\n<em>syntax: ofLoadMatrix(&amp;m)</em>\n<em>name: ofLoadMatrix</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::mat4 &amp;m</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofLoadMatrix(*m)</p>\n<p>&lt;!--\n<em>syntax: ofLoadMatrix(*m)</em>\n<em>name: ofLoadMatrix</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const float *m</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofLoadViewMatrix(&amp;m)</p>\n<p>&lt;!--\n<em>syntax: ofLoadViewMatrix(&amp;m)</em>\n<em>name: ofLoadViewMatrix</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::mat4 &amp;m</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofMultMatrix(&amp;m)</p>\n<p>&lt;!--\n<em>syntax: ofMultMatrix(&amp;m)</em>\n<em>name: ofMultMatrix</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::mat4 &amp;m</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofMultMatrix(*m)</p>\n<p>&lt;!--\n<em>syntax: ofMultMatrix(*m)</em>\n<em>name: ofMultMatrix</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const float *m</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofMultViewMatrix(&amp;m)</p>\n<p>&lt;!--\n<em>syntax: ofMultViewMatrix(&amp;m)</em>\n<em>name: ofMultViewMatrix</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::mat4 &amp;m</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofNextContour(bClose)</p>\n<p>&lt;!--\n<em>syntax: ofNextContour(bClose)</em>\n<em>name: ofNextContour</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool bClose=false</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Allows you to draw multiple contours within one shape. Call this\nbetween ofBeginShape() and ofEndShape() to create a new contour for your\nshape.</p>\n<p><strong>Parameters:</strong></p>\n<p>bClose If set to true then the previous contour will be\nautomatically closed. Default false</p>\n<p>_description: _</p>\n<p>Allows you to draw multiple contours within one shape. Call this between ofBeginShape() and ofEndShape() to create a new contour for your shape. If you set the optional argument 'bClose' to true then the previous contour will be automatically closed. 'bClose' is set to false by default.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofNoFill()</p>\n<p>&lt;!--\n<em>syntax: ofNoFill()</em>\n<em>name: ofNoFill</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw shapes as outlines with the current draw color.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofNoFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//draws only the outline in blue</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>Draw shapes as outlines with the current draw color.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofNoFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//draws only the outline in blue</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int ofOrientationToDegrees(orientation)</p>\n<p>&lt;!--\n<em>syntax: ofOrientationToDegrees(orientation)</em>\n<em>name: ofOrientationToDegrees</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: ofOrientation orientation</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofPopMatrix()</p>\n<p>&lt;!--\n<em>syntax: ofPopMatrix()</em>\n<em>name: ofPopMatrix</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Restores the prior coordinate system.</p>\n<p><strong>See also</strong>: ofPushMatrix()</p>\n<p>_description: _</p>\n<p>ofPopMatrix() restores the prior coordinate system.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\" spellcheck=\"true\">// draw a circle</span>\n    <span class=\"token function\">ofPushMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\" spellcheck=\"true\">// push the current coordinate position</span>\n    <span class=\"token function\">ofRotateX</span><span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\" spellcheck=\"true\">// change the coordinate system</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// draw a rect</span>\n    <span class=\"token function\">ofPopMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\" spellcheck=\"true\">// recall the pushed coordinate position</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofPopStyle()</p>\n<p>&lt;!--\n<em>syntax: ofPopStyle()</em>\n<em>name: ofPopStyle</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Restores the prior style settings. It needs to be called after ofPushStyle.</p>\n<p><strong>See also</strong>: ofPushStyle()</p>\n<p>_description: _</p>\n<p>ofPopStyle() restores the prior style settings. It needs to be called after ofPushStyle.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofPushStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\" spellcheck=\"true\">// push the current style for use later</span>\n    <span class=\"token function\">ofFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofsetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawEllipse</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofPopStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// recall the pushed style</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofPopView()</p>\n<p>&lt;!--\n<em>syntax: ofPopView()</em>\n<em>name: ofPopView</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Restores the viewport and matrix settings set by ofPushView()</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofPushMatrix()</p>\n<p>&lt;!--\n<em>syntax: ofPushMatrix()</em>\n<em>name: ofPushMatrix</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Saves the current coordinate system allowing users to develop specific\nmovements in some graphic objects. ofPopMatrix needs to be called after.</p>\n<p>In the following example we only rotate the square.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofPushMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\" spellcheck=\"true\">// push the current coordinate position</span>\n    <span class=\"token function\">ofRotateX</span><span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\" spellcheck=\"true\">// change the coordinate system</span>\n    ofDrawRea10<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// draw a rect</span>\n    <span class=\"token function\">ofPopMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\" spellcheck=\"true\">// recall the pushed coordinate position</span>\n    <span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// draw a circle</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>ofPushMatrix saves the current coordinate system allowing users to develop specific movements in some graphic objects. ofPopMatrix needs to be called after.\nIn the following example we only rotate the square.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// draw a circle</span>\n    <span class=\"token function\">ofPushMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\" spellcheck=\"true\">// push the current coordinate position</span>\n    <span class=\"token function\">ofRotateX</span><span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\" spellcheck=\"true\">// change the coordinate system</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// draw a rect</span>\n    <span class=\"token function\">ofPopMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\" spellcheck=\"true\">// recall the pushed coordinate position</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofPushStyle()</p>\n<p>&lt;!--\n<em>syntax: ofPushStyle()</em>\n<em>name: ofPushStyle</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Saves the current style settings for the ofGraphics after its call.\nUsage of ofPushStyle and ofPopStyle allow users to have more control of\ncertain graphics elements. All the style that applies to certain elements\nis controled using ofStyle class. See ofStyle type.</p>\n<p>In the following example the properties of being red and filled only applies to the ellipse:</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofPushStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// push the current style for use later</span>\n    <span class=\"token function\">ofFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawEllipse</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofPopStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// recall the pushed style</span>\n\n    <span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>sa ofPopStyle()</p>\n<p>_description: _</p>\n<p>ofPushStyle saves the current style settings for the ofGraphics after its call. Usage of ofPushStyle and ofPopStyle allow users to have more control of certain graphics elements. All the style that applies to certain elements is controled using ofStyle class. See ofStyle type.\nIn the following example the properties of being red and filled only applies to the ellipse:</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofPushStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// push the current style for use later</span>\n    <span class=\"token function\">ofFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawEllipse</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofPopStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// recall the pushed style</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofPushView()</p>\n<p>&lt;!--\n<em>syntax: ofPushView()</em>\n<em>name: ofPushView</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Stores the current viewport and matrix settings</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofRotateDeg(degrees)</p>\n<p>&lt;!--\n<em>syntax: ofRotateDeg(degrees)</em>\n<em>name: ofRotateDeg</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotate around the z-axis</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofRotateDeg(degrees, vecX, vecY, vecZ)</p>\n<p>&lt;!--\n<em>syntax: ofRotateDeg(degrees, vecX, vecY, vecZ)</em>\n<em>name: ofRotateDeg</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees, float vecX, float vecY, float vecZ</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Produces a rotation around the vector (vecX,vecY,vecZ).</p>\n<p>All graphics drawn after ofRotate is called are rotated. Use ofPushMatrix()\nand ofPopMatrix() to save and restore the unrotated coordinate system.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofRotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//rotates the coordinate system 50 degrees along the x-axis and 25 degrees on the y-axis</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>degrees Specifies the angle of rotation, in degrees.</p>\n<p>vecX specifies the x coordinates of a vector</p>\n<p>vecY specifies the y coordinates of a vector</p>\n<p>vecZ specifies the z coordinates of a vector</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofRotateRad(degrees)</p>\n<p>&lt;!--\n<em>syntax: ofRotateRad(degrees)</em>\n<em>name: ofRotateRad</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotate around the z-axis</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofRotateRad(degrees, vecX, vecY, vecZ)</p>\n<p>&lt;!--\n<em>syntax: ofRotateRad(degrees, vecX, vecY, vecZ)</em>\n<em>name: ofRotateRad</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees, float vecX, float vecY, float vecZ</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Produces a rotation around the vector (vecX,vecY,vecZ).</p>\n<p>All graphics drawn after ofRotate is called are rotated. Use ofPushMatrix()\nand ofPopMatrix() to save and restore the unrotated coordinate system.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofRotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//rotates the coordinate system 50 degrees along the x-axis and 25 degrees on the y-axis</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>degrees Specifies the angle of rotation, in degrees.</p>\n<p>vecX specifies the x coordinates of a vector</p>\n<p>vecY specifies the y coordinates of a vector</p>\n<p>vecZ specifies the z coordinates of a vector</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofRotateXDeg(degrees)</p>\n<p>&lt;!--\n<em>syntax: ofRotateXDeg(degrees)</em>\n<em>name: ofRotateXDeg</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Produces a rotation around the X-axis of our coordinate\nsystem represented by the vector (1,0,0).</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofRotateX</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//rotates the coordinate system 45 degrees around the x-axis</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>degrees Specifies the angle of rotation, in degrees.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofRotateXRad(degrees)</p>\n<p>&lt;!--\n<em>syntax: ofRotateXRad(degrees)</em>\n<em>name: ofRotateXRad</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Produces a rotation around the X-axis of our coordinate\nsystem represented by the vector (1,0,0).</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofRotateX</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//rotates the coordinate system 45 degrees around the x-axis</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>degrees Specifies the angle of rotation, in degrees.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofRotateYDeg(degrees)</p>\n<p>&lt;!--\n<em>syntax: ofRotateYDeg(degrees)</em>\n<em>name: ofRotateYDeg</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Produces a rotation around the Y-axis of our coordinate\nsystem represented by the vector (0,1,0).</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofRotateY</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//rotates the coordinate system 45 degrees around the y-axis</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>degrees Specifies the angle of rotation, in degrees.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofRotateYRad(degrees)</p>\n<p>&lt;!--\n<em>syntax: ofRotateYRad(degrees)</em>\n<em>name: ofRotateYRad</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Produces a rotation around the Y-axis of our coordinate\nsystem represented by the vector (0,1,0).</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofRotateY</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//rotates the coordinate system 45 degrees around the y-axis</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>degrees Specifies the angle of rotation, in degrees.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofRotateZDeg(degrees)</p>\n<p>&lt;!--\n<em>syntax: ofRotateZDeg(degrees)</em>\n<em>name: ofRotateZDeg</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Produces a rotation around the Z-axis of our coordinate\nsystem represented by the vector (0,0,1).</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofRotateZ</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//rotates the coordinate system 45 degrees around the z-axis</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>degrees Specifies the angle of rotation, in degrees.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofRotateZRad(degrees)</p>\n<p>&lt;!--\n<em>syntax: ofRotateZRad(degrees)</em>\n<em>name: ofRotateZRad</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Produces a rotation around the Z-axis of our coordinate\nsystem represented by the vector (0,0,1).</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofRotateZ</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//rotates the coordinate system 45 degrees around the z-axis</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>degrees Specifies the angle of rotation, in degrees.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofScale(&amp;p)</p>\n<p>&lt;!--\n<em>syntax: ofScale(&amp;p)</em>\n<em>name: ofScale</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofScale(amount)</p>\n<p>&lt;!--\n<em>syntax: ofScale(amount)</em>\n<em>name: ofScale</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float amount</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Scale along the X, Y and Z axis with the same amount.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofScale(xAmnt,yAmnt,zAmnt)</p>\n<p>&lt;!--\n<em>syntax: ofScale(xAmnt,yAmnt,zAmnt)</em>\n<em>name: ofScale</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float xAmnt, float yAmnt, float zAmnt</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>ofScale produces a nonuniform scaling along the x, y, and z axes. The three parameters xAmnt, yAmnt and zAmnt indicate the desired scale factor along each of the three axes.\ne.g:</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofScale</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">// scale 0.5 in height</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// draw a square rectangle</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Rectangle width will be now 20px heigh!</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetBackgroundAuto(bAuto)</p>\n<p>&lt;!--\n<em>syntax: ofSetBackgroundAuto(bAuto)</em>\n<em>name: ofSetBackgroundAuto</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool bManual</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets the background clearing function to be auto (default) or not. If non-\nauto, then background clearing will not occur per frame (at the start of\ndraw) but rather, whenever ofBackground is called.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetBackgroundAuto</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//disable automatic background redraw</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetFrameNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// draws a black background every 10 frames</span>\n        <span class=\"token function\">ofSetBackgroundColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>Sets the background clearing function to be auto (default) or not. If non-auto, then background clearing will not occur per frame (at the start of draw) but rather, whenever ofBackground is called.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetBackgroundAuto</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//disable automatic background redraw</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetFrameNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// draws a black background every 10 frames</span>\n        <span class=\"token function\">ofSetBackground</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetBackgroundColor(&amp;c)</p>\n<p>&lt;!--\n<em>syntax: ofSetBackgroundColor(&amp;c)</em>\n<em>name: ofSetBackgroundColor</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofColor &amp;c</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetBackgroundColor(brightness, alpha = 255)</p>\n<p>&lt;!--\n<em>syntax: ofSetBackgroundColor(brightness, alpha = 255)</em>\n<em>name: ofSetBackgroundColor</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int brightness, int alpha=255</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetBackgroundColor(r, g, b, a = 255)</p>\n<p>&lt;!--\n<em>syntax: ofSetBackgroundColor(r, g, b, a = 255)</em>\n<em>name: ofSetBackgroundColor</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int r, int g, int b, int a=255</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets the background color. It takes as input r,g,b (0-255). The\nbackground is cleared automatically, just before the draw() command, so\nif the background color is not changing, you could call this inside\nsetup() (once, at the start of the application). If the background color\nis changing, you can call this inside update().</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetBackgroundColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// Sets the background color to red</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>Sets the background color. It takes as input r,g,b (0-255). The background is cleared automatically, just before the draw() command, so if the background color is not changing, you could call this inside of setup() (once, at the start of the application). If the background color is changing, you can call this inside of update().</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetBackgroundColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// Sets the background color to red</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetBackgroundColorHex(hexColor, alpha = 255)</p>\n<p>&lt;!--\n<em>syntax: ofSetBackgroundColorHex(hexColor, alpha = 255)</em>\n<em>name: ofSetBackgroundColorHex</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int hexColor, int alpha=255</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets the background color using a hex color value.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetBackgroundColorHex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xff0000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// Sets the background color to red</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>Sets the background color using a hex color value.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetBackgroundColorHex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xff0000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// Sets the background color to red</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetCircleResolution(res)</p>\n<p>&lt;!--\n<em>syntax: ofSetCircleResolution(res)</em>\n<em>name: ofSetCircleResolution</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int res</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets the resolution for the ofDrawCircle command. By default, the circle is 22\npoints, but if you need to draw larger circles, you can adjust the\nresolution using this command. All circles are cached in openGL using a\ndisplay list for optimization purposes.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetCircleResolution</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\" spellcheck=\"true\">//draws a rough circle</span>\n    <span class=\"token function\">ofSetCircleResolution</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">450</span><span class=\"token punctuation\">,</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\" spellcheck=\"true\">//draws a fine circle</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>Sets the resolution for the ofDrawCircle command. By default, the circle is 22 points, but if you need to draw larger circles, you can adjust the resolution using this command. all circles are cached in opengl using a display list for optimization purposes.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetCircleResolution</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\" spellcheck=\"true\">//draws a rough circle</span>\n    <span class=\"token function\">ofSetCircleResolution</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">450</span><span class=\"token punctuation\">,</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\" spellcheck=\"true\">//draws a fine circle</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetColor(&amp;color)</p>\n<p>&lt;!--\n<em>syntax: ofSetColor(&amp;color)</em>\n<em>name: ofSetColor</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofColor &amp;color</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetColor(&amp;color, _a)</p>\n<p>&lt;!--\n_syntax: ofSetColor(&amp;color, <em>a)</em>\n<em>name: ofSetColor</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: const ofColor &amp;color, int <em>a</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetColor(hexColor)</p>\n<p>&lt;!--\n<em>syntax: ofSetColor(hexColor)</em>\n<em>name: ofSetColor</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int gray</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Sets the draw color with r,g,b, passed in as a hex. Hex is a conventient way to write colors. Some examples:</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xffffff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// white  (255,255,255)</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// black  (0,0,0);</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00ff00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// green  (0,255,0);</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetColor(r,g,b)</p>\n<p>&lt;!--\n<em>syntax: ofSetColor(r,g,b)</em>\n<em>name: ofSetColor</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int r, int g, int b</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets the draw color with r,g,b, 0-255. For example, red would\nbe: ofSetColor(255,0,0). This affects not only the color of shapes drawn\nwith ofDrawRectangle(), ofDrawCircle(), etc, but also the tint of images and\ntextures.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">//set the color to blue</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>Sets the draw color with r,g,b, 0-255. For example, red (0xff0000) would be: ofSetColor(255,0,0). This affects not only the color of shapes drawn with ofDrawRectangle(...), ofDrawCircle(...), etc, but also the tint of images and textures.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">//set te color to blue</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetColor(r,g,b,a)</p>\n<p>&lt;!--\n<em>syntax: ofSetColor(r,g,b,a)</em>\n<em>name: ofSetColor</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int r, int g, int b, int a</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets the draw color with r,g,b,a 0-255.</p>\n<p>For alpha (transparency), you must first enable transparent blending\n(turned off by default for performance reasons) with\nofEnableAlphaBlending()</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofEnableAlphaBlending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// turn on alpha blending</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// red, 50% transparent</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDisableAlphaBlending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// turn it back off, if you don't need it</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>sets the draw color with r,g,b,a 0-255. For alpha (transparency), you must first enable transparent blending (turned off by default for performance reasons), and draw in the proper z-order (objects in the back drawn first). For example, to draw a transparent red rectangle:</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofEnableAlphaBlending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// turn on alpha blending</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// red, 50% transparent</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDisableAlphaBlending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// turn it back off, if you don't need it</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetCoordHandedness(handedness)</p>\n<p>&lt;!--\n<em>syntax: ofSetCoordHandedness(handedness)</em>\n<em>name: ofSetCoordHandedness</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofHandednessType handedness</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetCurveResolution(res)</p>\n<p>&lt;!--\n<em>syntax: ofSetCurveResolution(res)</em>\n<em>name: ofSetCurveResolution</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int res</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetDepthTest(depthTest)</p>\n<p>&lt;!--\n<em>syntax: ofSetDepthTest(depthTest)</em>\n<em>name: ofSetDepthTest</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool depthTest</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set depth testing on or off to either sort by z-depth (<code><span class=\"token boolean\">true</span></code>)\nor draw order (<code><span class=\"token boolean\">false</span></code>).</p>\n<p>_description: _</p>\n<p>Set depth testing on or off to either sort by z-depth (true) or draw order (false).</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetDrawBitmapMode(mode)</p>\n<p>&lt;!--\n<em>syntax: ofSetDrawBitmapMode(mode)</em>\n<em>name: ofSetDrawBitmapMode</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofDrawBitmapMode mode</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the bitmap drawing mode</p>\n<p>Valid modes:</p>\n<p>OF_BITMAPMODE_SCREEN: this is the default mode. It projects the 3d prosition onto\nthe screen so the letters always look the same size but can be positioned in any 3d coordinate.</p>\n<p>OF_BITMAPMODE_VIEWPORT: does the same as screen but uses the current viewport instead\nof the full window if it's different.</p>\n<p>OF_BITMAPMODE_MODEL: uses real 3d coordinates so the text will look scaled if it's not in z=0</p>\n<p>OF_BITMAPMODE_MODEL_BILLBOARD: uses real 3d coordinates but the text always faces the camera.</p>\n<p>OF_BITMAPMODE_SIMPLE: only does 2d and the z coordinate is just disacarded, so if z is not 0\nthe position in which it'll be drawn will be wrong.</p>\n<p>_description: _</p>\n<p>takes OF_BITMAPMODE_SIMPLE, OF_BITMAPMODE_SCREEN, OF_BITMAPMODE_VIEWPORT, OF_BITMAPMODE_MODEL and OF_BITMAPMODE_MODEL_BILLBOARD</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetHexColor(hexColor)</p>\n<p>&lt;!--\n<em>syntax: ofSetHexColor(hexColor)</em>\n<em>name: ofSetHexColor</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int hexColor</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets the draw color with r,g,b, passed in as a hex. Hex is a conventient\nway to write colors.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xffffff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// white  (255,255,255)</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// black  (0,0,0);</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00ff00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// green  (0,255,0);</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>Sets the draw color with a hex value.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetHexColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xff0000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">//set te color to red</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetLineWidth(lineWidth)</p>\n<p>&lt;!--\n<em>syntax: ofSetLineWidth(lineWidth)</em>\n<em>name: ofSetLineWidth</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float lineWidth</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets the width of the ofDrawLine() called after.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetLineWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\" spellcheck=\"true\">// set line width to 1</span>\n    <span class=\"token function\">ofDrawLine</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// draw thin line</span>\n    <span class=\"token function\">ofSetLineWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\" spellcheck=\"true\">// set line width to 10</span>\n    <span class=\"token function\">ofDrawLine</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// draw fat line</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>ofSetLineWidth sets the width of the ofDrawLines called after.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetLineWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\" spellcheck=\"true\">// set line width to 1</span>\n    <span class=\"token function\">ofDrawLine</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// draw thin line</span>\n    <span class=\"token function\">ofSetLineWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\" spellcheck=\"true\">// set line width to 10</span>\n    <span class=\"token function\">ofDrawLine</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// draw fat line</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetMatrixMode(matrixMode)</p>\n<p>&lt;!--\n<em>syntax: ofSetMatrixMode(matrixMode)</em>\n<em>name: ofSetMatrixMode</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofMatrixMode matrixMode</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetPolyMode(mode)</p>\n<p>&lt;!--\n<em>syntax: ofSetPolyMode(mode)</em>\n<em>name: ofSetPolyMode</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofPolyWindingMode mode</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets the drawing behavior for overlapping parts of the same polygon.</p>\n<p>Possible modes are:</p>\n<pre><code>OF_POLY_WINDING_ODD\nOF_POLY_WINDING_NONZERO\nOF_POLY_WINDING_POSITIVE\nOF_POLY_WINDING_NEGATIVE\nOF_POLY_WINDING_ABS_GEQ_TWO\n</code></pre>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetRectMode(mode)</p>\n<p>&lt;!--\n<em>syntax: ofSetRectMode(mode)</em>\n<em>name: ofSetRectMode</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofRectMode mode</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets the mode for drawing rectangles and other rectangular objects, if\nthey are corner aligned, or drawn so that the x,y position is the center\nof the rectangle. possible options are <code>OF_RECTMODE_CENTER</code> and\n<code>OF_RECTMODE_CORNER</code>. This affects not only how ofDrawRectangle() objects are drawn,\nbut also ofTexture (and therefore ofImage) objects.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetRectMode</span><span class=\"token punctuation\">(</span>OF_RECTMODE_CORNER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//set rectangle mode to the corner</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofSetRectMode</span><span class=\"token punctuation\">(</span>OF_RECTMODE_CENTER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//set rectangle mode to the center</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// both rectangles are drawn at the same place</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetStyle(style)</p>\n<p>&lt;!--\n<em>syntax: ofSetStyle(style)</em>\n<em>name: ofSetStyle</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofStyle style</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the current style of the ofGraphics.</p>\n<p><strong>Parameters:</strong></p>\n<p>style contains information of the graphics style such as\nofColor, ofFill, polyMode and others.</p>\n<p><strong>See also</strong>: See ofStyle for more details.</p>\n<p>_description: _</p>\n<p>We use ofSetStyle to set the current style of the ofGraphics. Parameter style contains information of the graphics style such as ofColor, ofFill, polyMode and others. See ofStyle for more details.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetupGraphicDefaults()</p>\n<p>&lt;!--\n<em>syntax: ofSetupGraphicDefaults()</em>\n<em>name: ofSetupGraphicDefaults</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Resets openGL screen coordinates and values back to OF defaults.</p>\n<p>_description: _</p>\n<p>Resets openGL parameters back to OF defaults.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetupScreen()</p>\n<p>&lt;!--\n<em>syntax: ofSetupScreen()</em>\n<em>name: ofSetupScreen</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetupScreenOrtho(width = 0, height = 0, nearDist = -1, farDist = 1)</p>\n<p>&lt;!--\n<em>syntax: ofSetupScreenOrtho(width = 0, height = 0, nearDist = -1, farDist = 1)</em>\n<em>name: ofSetupScreenOrtho</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float width, float height, float nearDist, float farDist</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetupScreenPerspective(width = 0, height = 0, fov = 60, nearDist = 0, farDist = 0)</p>\n<p>&lt;!--\n<em>syntax: ofSetupScreenPerspective(width = 0, height = 0, fov = 60, nearDist = 0, farDist = 0)</em>\n<em>name: ofSetupScreenPerspective</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float width, float height, float fov, float nearDist, float farDist</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string ofToString(&amp;)</p>\n<p>&lt;!--\n<em>syntax: ofToString(&amp;)</em>\n<em>name: ofToString</em>\n<em>returns: string</em>\n_returns_description: _\n<em>parameters: const T &amp;</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofTranslate(&amp;p)</p>\n<p>&lt;!--\n<em>syntax: ofTranslate(&amp;p)</em>\n<em>name: ofTranslate</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>ofTranslate produces a translation by (x,y,z) vector of our coordinate system. The call of ofTranslate modifies graphics positions.\nUse ofPushMatrix and ofPopMatrix to save and restore the untranslated coordinate system.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ofPoint point<span class=\"token punctuation\">;</span>\n    point<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    point<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\" spellcheck=\"true\">// move the coordinate system to position of point and make that zero.</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// draw a rect at that position</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofTranslate(&amp;p)</p>\n<p>&lt;!--\n<em>syntax: ofTranslate(&amp;p)</em>\n<em>name: ofTranslate</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofTranslate(x,y,z)</p>\n<p>&lt;!--\n<em>syntax: ofTranslate(x,y,z)</em>\n<em>name: ofTranslate</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Translate by (x,y,z) vector of our coordinate system.\nThe call of ofTranslate() modifies graphics positions.</p>\n<p>Use ofPushMatrix() and ofPopMatrix() to save and restore the untranslated\ncoordinate system.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// move the coordinate system to position x 100 and y 100 and make that zero.</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">// draw a rect at that position</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>ofTranslate produces a translation by (x,y,z) vector of our coordinate system. The call of ofTranslate modifies graphics positions.\nUse ofPushMatrix and ofPopMatrix to save and restore the untranslated coordinate system.</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// move the coordinate system to position x 100 and y 100 and make that zero.</span>\n    <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">// draw a rect at that position</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofVertex(&amp;p)</p>\n<p>&lt;!--\n<em>syntax: ofVertex(&amp;p)</em>\n<em>name: ofVertex</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofVertex(&amp;p)</p>\n<p>&lt;!--\n<em>syntax: ofVertex(&amp;p)</em>\n<em>name: ofVertex</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofVertex(x, y, z)</p>\n<p>&lt;!--\n<em>syntax: ofVertex(x, y, z)</em>\n<em>name: ofVertex</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofVertex(x,y)</p>\n<p>&lt;!--\n<em>syntax: ofVertex(x,y)</em>\n<em>name: ofVertex</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Specifies a single point of a shape. To be called between ofBeginShape() and\nofEndShape().</p>\n<p>_description: _</p>\n<p>Specifies a single point of a shape. To be called between ofBeginShape() and ofEndShape().</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofVertices(&amp;polyPoints)</p>\n<p>&lt;!--\n<em>syntax: ofVertices(&amp;polyPoints)</em>\n<em>name: ofVertices</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const vector&lt; glm::vec3 &gt; &amp;polyPoints</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofVertices(&amp;polyPoints)</p>\n<p>&lt;!--\n<em>syntax: ofVertices(&amp;polyPoints)</em>\n<em>name: ofVertices</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const vector&lt; glm::vec2 &gt; &amp;polyPoints</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofVertices(&amp;polyPoints)</p>\n<p>&lt;!--\n<em>syntax: ofVertices(&amp;polyPoints)</em>\n<em>name: ofVertices</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const vector&lt; ofVec3f &gt; &amp;polyPoints</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofVertices(&amp;polyPoints)</p>\n<p>&lt;!--\n<em>syntax: ofVertices(&amp;polyPoints)</em>\n<em>name: ofVertices</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const vector&lt; ofVec2f &gt; &amp;polyPoints</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofViewport(viewport)</p>\n<p>&lt;!--\n<em>syntax: ofViewport(viewport)</em>\n<em>name: ofViewport</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofRectangle viewport</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Setup the drawing viewport</p>\n<p><strong>Parameters:</strong></p>\n<p>viewport A rectangle describing the size and position of the viewport.\nIf the width or height are set to 0, it will assume the size to be the window\nsize (ofGetWidth(), ofGetHeight())</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofViewport(x = 0, y = 0, width = 0, height = 0, invertY = true)</p>\n<p>&lt;!--\n<em>syntax: ofViewport(x = 0, y = 0, width = 0, height = 0, invertY = true)</em>\n<em>name: ofViewport</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float width, float height, bool vflip</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Setup the drawing viewport</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x position of the viewport</p>\n<p>y The y position of the viewport</p>\n<p>width The width of the viewport, defaults to ofGetWidth()</p>\n<p>height The height of the viewport, defaults to ofGetHeight()</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#functions\n\n\n<!--\n_visible: True_\n_advanced: False_\n-->\n\n##Description\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofBackground(&c)\n\n<!--\n_syntax: ofBackground(&c)_\n_name: ofBackground_\n_returns: void_\n_returns_description: _\n_parameters: const ofColor &c_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofBackground(brightness, alpha = 255)\n\n<!--\n_syntax: ofBackground(brightness, alpha = 255)_\n_name: ofBackground_\n_returns: void_\n_returns_description: _\n_parameters: int brightness, int alpha=255_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofBackground(r, g, b, a = 255)\n\n<!--\n_syntax: ofBackground(r, g, b, a = 255)_\n_name: ofBackground_\n_returns: void_\n_returns_description: _\n_parameters: int r, int g, int b, int a=255_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets the background color.\n\nIt takes as input r,g,b (0-255). The background is\ncleared automatically, just before the draw() command, so if the background\ncolor is not changing, you could call this inside of setup() (once, at the\nstart of the application). If the background color is changing, you can call\nthis inside of update().\n\n~~~~{.cpp}\nvoid ofApp::setup(){\n    ofBackground(255,0,0);  // Sets the background color to red\n}\n~~~~\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofBackgroundGradient(&start, &end, mode = OF_GRADIENT_CIRCULAR)\n\n<!--\n_syntax: ofBackgroundGradient(&start, &end, mode = OF_GRADIENT_CIRCULAR)_\n_name: ofBackgroundGradient_\n_returns: void_\n_returns_description: _\n_parameters: const ofColor &start, const ofColor &end, ofGradientMode mode=OF_GRADIENT_CIRCULAR_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets the background color to a gradient.\n\nIt takes as input 2 ofColor() objects and a Gradient Mode.\nMust be called in the draw() function.\n\nAccepted modes are:\n\n- Circular: `OF_GRADIENT_CIRCULAR`\n- Linear: `OF_GRADIENT_LINEAR`\n- Bar: `OF_GRADIENT_BAR`\n\n**Background Gradient: Circular:**\n![Background Gradient Circular](bkgGradient_circular.png)\n~~~~{.cpp}\nvoid ofApp::draw(){\n\n    ofColor colorOne(255, 0, 0);\n    ofColor colorTwo(0, 0, 0);\n\n    ofBackgroundGradient(colorOne, colorTwo, OF_GRADIENT_CIRCULAR);\n    // Sets the background to a circular gradient\n}\n~~~~\n\n**Background Gradient: Linear:**\n![Background Gradient Linear](bkgGradient_linear.png)\n~~~~{.cpp}\nvoid ofApp::draw(){\n\n    ofColor colorOne(255, 0, 0);\n    ofColor colorTwo(0, 0, 0);\n\n    ofBackgroundGradient(colorOne, colorTwo, OF_GRADIENT_LINEAR);\n      // Sets the background to a linear gradient\n}\n~~~~\n\n**Background Gradient: Bar:**\n![Background Gradient Bar](bkgGradient_bar.png)\n~~~~{.cpp}\nvoid ofApp::draw(){\n\n    ofColor colorOne(255, 0, 0);\n    ofColor colorTwo(0, 0, 0);\n\n    ofBackgroundGradient(colorOne, colorTwo, OF_GRADIENT_BAR);\n      // Sets the background to a bar gradient\n}\n~~~~\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofBackgroundHex(hexColor, alpha = 255)\n\n<!--\n_syntax: ofBackgroundHex(hexColor, alpha = 255)_\n_name: ofBackgroundHex_\n_returns: void_\n_returns_description: _\n_parameters: int hexColor, int alpha=255_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets the background color using a hex color value.\n~~~~{.cpp}\nvoid ofApp::setup(){\n    ofBackgroundHex(0xff0000);  // Sets the background color to red\n}\n~~~~\n\n\n\n\n\n_description: _\n\nSets the background color using a hex color value.\n~~~~{.cpp}\nvoid ofApp::setup(){\n    ofBackgroundHex(0xff0000);  // Sets the background color to red\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofBeginSaveScreenAsPDF(filename, bMultipage = false, b3D = false, outputsize)\n\n<!--\n_syntax: ofBeginSaveScreenAsPDF(filename, bMultipage = false, b3D = false, outputsize)_\n_name: ofBeginSaveScreenAsPDF_\n_returns: void_\n_returns_description: _\n_parameters: string filename, bool bMultipage=false, bool b3D=false, ofRectangle outputsize_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nBegin rendering to a PDF file.\n\nopenFrameworks allows rendering of 2D graphics to pdf via the\nofCairoRenderer. ofBeginSaveScreenAsPDF() is called before drawing. When\ndone drawing call ofEndSaveScreenAsPDF() to output the file.\n\n~~~~{.cpp}\nvoid ofApp::setup(){\n    ofBeginSaveScreenAsPDF(\"screenshot.pdf\", false);\n    ofSetColor(54,54,54);\n    ofDrawEllipse(100,100,200,200);\n    ofEndSaveScreenAsPDF();\n}\n~~~~\n\n**See also**: End drawing with ofEndSaveScreenAsPDF()\n\n\n\n\n\n_description: _\n\nBegins render to pdf. OpenFrameworks allows rendering of 2D graphics to pdf via the ofCairoRenderer. ofBeginSaveScreenAsPDF is called before drawing. When done drawing call ofEndSaveScreenAsPDF() to output the file.\n~~~~{.cpp}\nvoid ofApp::setup(){\n    if( oneShot ){\n        ofBeginSaveScreenAsPDF(\"screenshot-\"+ofGetTimestampString()+\".pdf\", false);\n    }\n\n    ofSetColor(54,54,54);\n    ofDrawEllipse(100,100,200,200);\n    if( oneShot ){\n        ofEndSaveScreenAsPDF();\n        oneShot = false;\n    }\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofBeginSaveScreenAsSVG(filename, bMultipage = false, b3D = false, outputsize)\n\n<!--\n_syntax: ofBeginSaveScreenAsSVG(filename, bMultipage = false, b3D = false, outputsize)_\n_name: ofBeginSaveScreenAsSVG_\n_returns: void_\n_returns_description: _\n_parameters: string filename, bool bMultipage=false, bool b3D=false, ofRectangle outputsize_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nBegin rendering to a SVG file.\n\n**See also**: ofEndSaveScreenAsSVG(), ofBeginSaveScreenAsPDF()\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofBeginShape()\n\n<!--\n_syntax: ofBeginShape()_\n_name: ofBeginShape_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nStart drawing a new shape. Needs to be followed by a list of\nvertex points and lastly a call to ofEndShape().\n\n~~~~{.cpp}\n//draws a star\nofSetPolyMode(OF_POLY_WINDING_NONZERO);\nofBeginShape();\n  ofVertex(400,135);\n  ofVertex(215,135);\n  ofVertex(365,25);\n  ofVertex(305,200);\n  ofVertex(250,25);\nofEndShape();\n~~~~\n\n\n**See also**: ofEndShape()\n\n\n\n\n\n_description: _\n\nCall this to start drawing a new shape. Needs to be followed by a list of vertex points and lastly a call to ofEndShape().\n~~~~{.cpp}\n//draws a star\nofSetPolyMode(OF_POLY_WINDING_NONZERO);\nofBeginShape();\n  ofVertex(400,135);\n  ofVertex(215,135);\n  ofVertex(365,25);\n  ofVertex(305,200);\n  ofVertex(250,25);\nofEndShape();\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofBezierVertex(&p1, &p2, &p3)\n\n<!--\n_syntax: ofBezierVertex(&p1, &p2, &p3)_\n_name: ofBezierVertex_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p1, const glm::vec3 &p2, const glm::vec3 &p3_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofBezierVertex(&p1, &p2, &p3)\n\n<!--\n_syntax: ofBezierVertex(&p1, &p2, &p3)_\n_name: ofBezierVertex_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p1, const glm::vec2 &p2, const glm::vec2 &p3_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofBezierVertex(x1, y1, z1, x2, y2, z2, x3, y3, z3)\n\n<!--\n_syntax: ofBezierVertex(x1, y1, z1, x2, y2, z2, x3, y3, z3)_\n_name: ofBezierVertex_\n_returns: void_\n_returns_description: _\n_parameters: float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofBezierVertex(x1,y1,x2,y2,x3,y3)\n\n<!--\n_syntax: ofBezierVertex(x1,y1,x2,y2,x3,y3)_\n_name: ofBezierVertex_\n_returns: void_\n_returns_description: _\n_parameters: float x1, float y1, float x2, float y2, float x3, float y3_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDescribes a bezier curve through three points of a shape. To be called\nbetween ofBeginShape() and ofEndShape().\n\n\n\n\n\n_description: _\n\nDescribes a bezier curve through three points of a shape. To be called between ofBeginShape() and ofEndShape().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofClear(&c)\n\n<!--\n_syntax: ofClear(&c)_\n_name: ofClear_\n_returns: void_\n_returns_description: _\n_parameters: const ofColor &c_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClears the color and depth bits of current renderer and replaces it with\nan ofColor.\n\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofColor myColor(0, 0, 255);\n    ofClear(myColor);\n    // Clears current screen and replaces it with myColor.\n}\n~~~~\n\n\n\n\n\n_description: _\n\nClears the color and depth bits of current renderer and replaces it with an ofColor.\n\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofColor myColor;\n    myColor.set ( 0, 0, 255 );\n    ofClear ( myColor );\n    // Clears current screen and replaces it with myColor.\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofClear(brightness, a = 0)\n\n<!--\n_syntax: ofClear(brightness, a = 0)_\n_name: ofClear_\n_returns: void_\n_returns_description: _\n_parameters: float brightness, float a_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClears the color and depth bits of current renderer and replaces it with a\ngrayscale value.\n\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofClear(128);\n    // Clears current screen and replaces it with a grayscale value.\n}\n~~~~\n\n\n\n\n\n_description: _\n\nClears the color and depth bits of current renderer and replaces it with a grayscale value.\n\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofColor myColor;\n    myColor.set ( 128 );\n    ofClear ( myColor );\n    // Clears current screen and replaces it with a grayscale value.\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofClear(r, g, b, a = 0)\n\n<!--\n_syntax: ofClear(r, g, b, a = 0)_\n_name: ofClear_\n_returns: void_\n_returns_description: _\n_parameters: float r, float g, float b, float a_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClears the color and depth bits of current renderer and replaces it with\nan RGB color.\n\nWhen drawing to the screen, ofClear() will clear the screen entirely.\n\n~~~~{.cpp}\nvoid ofApp::draw() {\n    ofClear(255, 0, 0);\n    // Clears current screen and replaces it with red.\n    // Screen will render as a flat color.\n}\n~~~~\n\nWhen using the openGL renderer and drawing into an\n[FBO][1], ofClear() will clear that buffer rather than the main\nscreen.\n\n~~~~{.cpp}\nvoid ofApp::draw() {\n    ofFbo myFbo;\n    myFbo.allocate(300, 300);\n\n    myFbo.begin();\n        ofClear(255, 0, 0);\n        // Clears FBO buffer and replaces it with red.\n        // No effect in current drawing screen.\n    myFbo.end();\n}\n~~~~\n\nofClear() is based on [glClear][2].\n\n[1]: http://www.openframeworks.cc/documentation/gl/ofFbo.html\n[2]: http://www.opengl.org/sdk/docs/man/xhtml/glClear.xml\n\n\n\n\n\n_description: _\n\nClears the color and depth bits of current renderer and replaces it with an RGB color.\n\nWhen drawing to the screen, ofClear(…) will clear the screen entirely.\n\n~~~~{.cpp}\nvoid ofApp::draw() {\n    ofClear ( 255, 0, 0 );\n    // Clears current screen and replaces it with red.\n    // Screen will render as a flat color.\n}\n~~~~\n\nWhen using the opengl renderer and drawing into an [FBO](/documentation/gl/ofFbo.html), ofClear(...) will clear that buffer rather than the main screen.\n\n~~~~{.cpp}\nvoid ofApp::draw() {\n    ofFbo myFbo;\n    myFbo.allocate ( 300, 300 );\n\n    myFbo.begin();\n        ofClear ( 255, 0, 0 );\n        // Clears FBO buffer and replaces it with red.\n        // No effect in current drawing screen.\n    myFbo.end();\n}\n~~~~\n\nofClear(…) is based on glClear (http://www.opengl.org/sdk/docs/man/xhtml/glClear.xml).\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofClearAlpha()\n\n<!--\n_syntax: ofClearAlpha()_\n_name: ofClearAlpha_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofCurveVertex(&p)\n\n<!--\n_syntax: ofCurveVertex(&p)_\n_name: ofCurveVertex_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofCurveVertex(&p)\n\n<!--\n_syntax: ofCurveVertex(&p)_\n_name: ofCurveVertex_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofCurveVertex(x, y, z)\n\n<!--\n_syntax: ofCurveVertex(x, y, z)_\n_name: ofCurveVertex_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofCurveVertex(x,y)\n\n<!--\n_syntax: ofCurveVertex(x,y)_\n_name: ofCurveVertex_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSpecifies a single point of a shape. The difference from ofVertex is that\nthe line describing the edge of the shape between two points will be a\ncurve as opposed to a straight line. The curve is automatically generated\nusing the catmull from formula.\n\nThis function has to be called between ofBeginShape() and ofEndShape().\n\n\n\n\n\n_description: _\n\nSpecifies a single point of a shape. The difference from ofVertex is that the line describing the edge of the shape between two points will be a curve as opposed to a straight line. The curve is automatically generated using the catmull from formula. To be called between ofBeginShape() and ofEndShape().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofCurveVertices(&curvePoints)\n\n<!--\n_syntax: ofCurveVertices(&curvePoints)_\n_name: ofCurveVertices_\n_returns: void_\n_returns_description: _\n_parameters: const vector< glm::vec3 > &curvePoints_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a curve through a series of vertices stored as a vector of\nofPoints. Should be called between ofBeginShape() and ofEndShape().\n\n\n\n\n\n_description: _\n\nDraws a curve through a series of vertices stored as a vector of ofPoints. Should be called between ofBeginShape() and ofEndShape().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofCurveVertices(&curvePoints)\n\n<!--\n_syntax: ofCurveVertices(&curvePoints)_\n_name: ofCurveVertices_\n_returns: void_\n_returns_description: _\n_parameters: const vector< glm::vec2 > &curvePoints_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofCurveVertices(&curvePoints)\n\n<!--\n_syntax: ofCurveVertices(&curvePoints)_\n_name: ofCurveVertices_\n_returns: void_\n_returns_description: _\n_parameters: const vector< ofVec3f > &curvePoints_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofCurveVertices(&curvePoints)\n\n<!--\n_syntax: ofCurveVertices(&curvePoints)_\n_name: ofCurveVertices_\n_returns: void_\n_returns_description: _\n_parameters: const vector< ofVec2f > &curvePoints_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDisableAlphaBlending()\n\n<!--\n_syntax: ofDisableAlphaBlending()_\n_name: ofDisableAlphaBlending_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTurn off alpha blending.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofEnableAlphaBlending();    // turn on alpha blending\n    ofSetColor(255,0,0,127);    // red, 50% transparent\n    ofDrawRectangle(20,20,100,100);      // draws the rect with alpha\n    ofDisableAlphaBlending();   // turn off alpha\n    ofDrawRectangle(120,20,100,100); // draws the rect without alpha\n}\n~~~~\n\n\n**See also**: ofEnableAlphaBlending()\n\n\n\n\n\n_description: _\n\nTurns off alpha blending.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofEnableAlphaBlending();    // turn on alpha blending\n    ofSetColor(255,0,0,127);    // red, 50% transparent\n    ofDrawRectangle(20,20,100,100);      // draws the rect with alpha\n    ofDisableAlphaBlending();   // turn off alpha\n    ofDrawRectangle(120,20,100,100); // draws the rect without alpha\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDisableAntiAliasing()\n\n<!--\n_syntax: ofDisableAntiAliasing()_\n_name: ofDisableAntiAliasing_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTurns off anti-aliasing (smoothing).\n\n\n\n\n\n_description: _\n\nTurns off anti-aliasing (smoothing).\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDisableBlendMode()\n\n<!--\n_syntax: ofDisableBlendMode()_\n_name: ofDisableBlendMode_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDisable the current blend mode.\n\n\n\n\n\n_description: _\n\nDisables the current blend mode.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDisableDepthTest()\n\n<!--\n_syntax: ofDisableDepthTest()_\n_name: ofDisableDepthTest_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTurn off depth testing so rendering happens in draw order rather than by\nz-depth.\n\nTurning off depth test is useful for combining 3d scenes with 2d\noverlays such as a control panel.\n\n~~~~{.cpp}\nvoid ofApp::draw(){\n\n    ofPushMatrix();\n\n        ofTranslate( ofGetWidth()/2, ofGetHeight()/2, 0 );\n\n        ofEnableDepthTest();\n        ofSetColor(255);\n        ofDrawSphere(0,0,100,60);\n        ofSetColor(255,0,255);\n        ofDrawSphere(50,0,50,100);\n        ofDisableDepthTest();\n\n        ofSetColor(0);\n        ofDrawRectangle(75,75,120,30);\n        ofSetColor(255);\n        ofDrawBitmapString(\"Some bubbles.\",85,90);\n\n    ofPopMatrix();\n}\n~~~~\n\n\n**See also**: ofEnableDepthTest()\n\n\n\n\n\n_description: _\n\nTurns off depth testing so rendering happens in draw order rather than by z-depth. Turning off depth test is useful for combining 3d scenes with 2d overlays such as a control panel.\n~~~~{.cpp}\nvoid ofApp::draw(){\n\n    ofPushMatrix();\n\n        ofTranslate( ofGetWidth()/2, ofGetHeight()/2, 0 );\n\n        ofEnableDepthTest();\n        ofSetColor(255);\n        ofDrawSphere(0,0,100,60);\n        ofSetColor(255,0,255);\n        ofDrawSphere(50,0,50,100);\n        ofDisableDepthTest();\n\n        ofSetColor(0);\n        ofDrawRectangle(75,75,120,30);\n        ofSetColor(255);\n        ofDrawBitmapString(\"Some bubbles.\",85,90);\n\n    ofPopMatrix();\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDisablePointSprites()\n\n<!--\n_syntax: ofDisablePointSprites()_\n_name: ofDisablePointSprites_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTurn off point sprites\n\n\n\n\n\n_description: _\n\nTurns off point sprite.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDisableSmoothing()\n\n<!--\n_syntax: ofDisableSmoothing()_\n_name: ofDisableSmoothing_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTurn off smoothing. Currently, this only works for lines. You can draw a\nfilled object, and then draw the outline with smoothing enabled to get\nsmoothing effects on filled shapes.\n\n\n\n\n\n_description: _\n\nTurns off smoothing. Currently, this only works for lines. You can draw a filled object, and then draw the outline with smoothing enabled to get smoothing effects on filled shapes.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawBezier(x0, y0, x1, y1, x2, y2, x3, y3)\n\n<!--\n_syntax: ofDrawBezier(x0, y0, x1, y1, x2, y2, x3, y3)_\n_name: ofDrawBezier_\n_returns: void_\n_returns_description: _\n_parameters: float x0, float y0, float x1, float y1, float x2, float y2, float x3, float y3_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawBezier(x0, y0, z0, x1, y1, z1, x2, y2, z2, x3, y3, z3)\n\n<!--\n_syntax: ofDrawBezier(x0, y0, z0, x1, y1, z1, x2, y2, z2, x3, y3, z3)_\n_name: ofDrawBezier_\n_returns: void_\n_returns_description: _\n_parameters: float x0, float y0, float z0, float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawBitmapString(&textString, &p)\n\n<!--\n_syntax: ofDrawBitmapString(&textString, &p)_\n_name: ofDrawBitmapString_\n_returns: void_\n_returns_description: _\n_parameters: const T &textString, const glm::vec2 &p_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawBitmapString(&textString, &p)\n\n<!--\n_syntax: ofDrawBitmapString(&textString, &p)_\n_name: ofDrawBitmapString_\n_returns: void_\n_returns_description: _\n_parameters: const T &textString, const glm::vec3 &p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\}\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawBitmapString(&textString, &p)\n\n<!--\n_syntax: ofDrawBitmapString(&textString, &p)_\n_name: ofDrawBitmapString_\n_returns: void_\n_returns_description: _\n_parameters: const string &textString, const glm::vec3 &p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawBitmapString(&textString, &p)\n\n<!--\n_syntax: ofDrawBitmapString(&textString, &p)_\n_name: ofDrawBitmapString_\n_returns: void_\n_returns_description: _\n_parameters: const string &textString, const glm::vec2 &p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawBitmapString(&textString, x, y)\n\n<!--\n_syntax: ofDrawBitmapString(&textString, x, y)_\n_name: ofDrawBitmapString_\n_returns: void_\n_returns_description: _\n_parameters: const T &textString, float x, float y_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a bitmapped string, on screen, at point (x,y).\n\nFor example, you can write some text on screen like this:\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofDrawBitmapString(\"hi!!\", 100,100);\n}\n~~~~\n\nYour strings can even be multiline:\n~~~~{.cpp}\nofDrawBitmapString(\"a test\nof multiline\ntext\", 100,100);\n~~~~\n\nyou can also using dynamically generated strings. For example, to print\nthe frame rate:\n~~~~{.cpp}\nstring fpsStr = \"frame rate: \"+ofToString(ofGetFrameRate(), 2);\nofDrawBitmapString(fpsStr, 100,100);\n~~~~\n\n\\note ofDrawBitmapString wraps a glut function that uses glDrawPixels. On\nsome graphics cards, you may discover that glDrawPixels is slow (or even,\nvery slow). If so, you might want to investigate using ofTrueTypeFont\nwith a small typeface, non-anti-aliased, as a suitable alternative.\n\n\n**See also**: ofTrueTypeFont\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawBitmapString(&textString, x, y, z)\n\n<!--\n_syntax: ofDrawBitmapString(&textString, x, y, z)_\n_name: ofDrawBitmapString_\n_returns: void_\n_returns_description: _\n_parameters: const T &textString, float x, float y, float z_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nDraws a bitmapped string, on screen, at point (x,y). For example, you can write some text on screen like this:\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofDrawBitmapString(\"hi!!\", 100,100);\n}\n~~~~\nYour strings can even be multiline:\n~~~~{.cpp}\nofDrawBitmapString(\"a test\nof multiline\ntext\", 100,100);\n~~~~\nyou can also using dynamically generated strings. For example, to print the frame rate:\n~~~~{.cpp}\nstring fpsStr = \"frame rate: \"+ofToString(ofGetFrameRate(), 2);\nofDrawBitmapString(fpsStr, 100,100);\n~~~~\nPlease note, ofDrawBitmapString wraps a glut function that uses glDrawPixels. On some graphics cards, you may discover that glDrawPixels is slow (or even, very slow). If so, you might want to investigate using ofTrueTypeFont with a small typeface, non-anti-aliased, as a suitable alternative.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawBitmapString(&textString, x, y, z)\n\n<!--\n_syntax: ofDrawBitmapString(&textString, x, y, z)_\n_name: ofDrawBitmapString_\n_returns: void_\n_returns_description: _\n_parameters: const string &textString, float x, float y, float z_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawBitmapStringHighlight(text, &position, &background = black, &foreground = white)\n\n<!--\n_syntax: ofDrawBitmapStringHighlight(text, &position, &background = black, &foreground = white)_\n_name: ofDrawBitmapStringHighlight_\n_returns: void_\n_returns_description: _\n_parameters: string text, const glm::vec3 &position, const ofColor &background=black, const ofColor &foreground=white_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawBitmapStringHighlight(text, &position, &background = black, &foreground = white)\n\n<!--\n_syntax: ofDrawBitmapStringHighlight(text, &position, &background = black, &foreground = white)_\n_name: ofDrawBitmapStringHighlight_\n_returns: void_\n_returns_description: _\n_parameters: string text, const glm::vec2 &position, const ofColor &background=black, const ofColor &foreground=white_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawBitmapStringHighlight(text, x, y, &background = ofColor::black, &foreground = ofColor::white)\n\n<!--\n_syntax: ofDrawBitmapStringHighlight(text, x, y, &background = ofColor::black, &foreground = ofColor::white)_\n_name: ofDrawBitmapStringHighlight_\n_returns: void_\n_returns_description: _\n_parameters: string text, int x, int y, const ofColor &background=black, const ofColor &foreground=white_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawCircle(&p, radius)\n\n<!--\n_syntax: ofDrawCircle(&p, radius)_\n_name: ofDrawCircle_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p, float radius_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawCircle(&p, radius)\n\n<!--\n_syntax: ofDrawCircle(&p, radius)_\n_name: ofDrawCircle_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p, float radius_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawCircle(x, y, radius)\n\n<!--\n_syntax: ofDrawCircle(x, y, radius)_\n_name: ofDrawCircle_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float radius_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a circle, centered at x,y, with a given radius.\n\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofDrawCircle(150,150,100);\n}\n~~~~\nPlease keep in mind that drawing circle with different outline color and\nfill requires calling ofNoFill and ofSetColor for drawing stroke and\nofFill and again ofSetColor for filled solid color circle.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawCircle(x, y, z, radius)\n\n<!--\n_syntax: ofDrawCircle(x, y, z, radius)_\n_name: ofDrawCircle_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float radius_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawCurve(x0, y0, x1, y1, x2, y2, x3, y3)\n\n<!--\n_syntax: ofDrawCurve(x0, y0, x1, y1, x2, y2, x3, y3)_\n_name: ofDrawCurve_\n_returns: void_\n_returns_description: _\n_parameters: float x0, float y0, float x1, float y1, float x2, float y2, float x3, float y3_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a curve from point (x1, y1) to point (x2, y2). The curve is shaped by\nthe two control points (x0,y0) and (x3,y3).\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawCurve(x0, y0, z0, x1, y1, z1, x2, y2, z2, x3, y3, z3)\n\n<!--\n_syntax: ofDrawCurve(x0, y0, z0, x1, y1, z1, x2, y2, z2, x3, y3, z3)_\n_name: ofDrawCurve_\n_returns: void_\n_returns_description: _\n_parameters: float x0, float y0, float z0, float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a 3-dimensional curve from point (x1, y1, z1) to point (x2, y2, z2).\nThe curve is shaped by the two control points (x0, y0, z0) and (x3, y3, z3).\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawEllipse(&p, width, height)\n\n<!--\n_syntax: ofDrawEllipse(&p, width, height)_\n_name: ofDrawEllipse_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p, float width, float height_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawEllipse(&p, width, height)\n\n<!--\n_syntax: ofDrawEllipse(&p, width, height)_\n_name: ofDrawEllipse_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p, float width, float height_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawEllipse(x, y, width, height)\n\n<!--\n_syntax: ofDrawEllipse(x, y, width, height)_\n_name: ofDrawEllipse_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float width, float height_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws an ellipse from point (x,y) with a given width (w) and height (h).\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofDrawEllipse(10,10,50,30);\n}\n~~~~\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawEllipse(x, y, z, width, height)\n\n<!--\n_syntax: ofDrawEllipse(x, y, z, width, height)_\n_name: ofDrawEllipse_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float width, float height_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawLine(&p1, &p2)\n\n<!--\n_syntax: ofDrawLine(&p1, &p2)_\n_name: ofDrawLine_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p1, const glm::vec3 &p2_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawLine(&p1, &p2)\n\n<!--\n_syntax: ofDrawLine(&p1, &p2)_\n_name: ofDrawLine_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p1, const glm::vec2 &p2_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawLine(x1, y1, x2, y2)\n\n<!--\n_syntax: ofDrawLine(x1, y1, x2, y2)_\n_name: ofDrawLine_\n_returns: void_\n_returns_description: _\n_parameters: float x1, float y1, float x2, float y2_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a line between two points: (x1,y1),(x2,y2).\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofDrawLine(10,10,100,100);\n}\n~~~~\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawLine(x1, y1, z1, x2, y2, z2)\n\n<!--\n_syntax: ofDrawLine(x1, y1, z1, x2, y2, z2)_\n_name: ofDrawLine_\n_returns: void_\n_returns_description: _\n_parameters: float x1, float y1, float z1, float x2, float y2, float z2_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawRectRounded(&b, r)\n\n<!--\n_syntax: ofDrawRectRounded(&b, r)_\n_name: ofDrawRectRounded_\n_returns: void_\n_returns_description: _\n_parameters: const ofRectangle &b, float r_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a rounded rectangle from the given rectangle using given\nradius.\n\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofRectangle myRect;\n    myRect.x = 10;\n    myRect.y = 10;\n    myRect.width = 100;\n    myRect.height = 100;\n\n    ofDrawRectRounded(myRect, 10);\n}\n~~~~\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawRectRounded(&b, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)\n\n<!--\n_syntax: ofDrawRectRounded(&b, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)_\n_name: ofDrawRectRounded_\n_returns: void_\n_returns_description: _\n_parameters: const ofRectangle &b, float topLeftRadius, float topRightRadius, float bottomRightRadius, float bottomLeftRadius_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a rounded rectangle from the given rectangle using different given\nradius for each of the corners.\n\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofRectangle myRect;\n    myRect.x = 10;\n    myRect.y = 10;\n    myRect.width = 100;\n    myRect.height = 100;\n\n    ofDrawRectRounded( myRect, 10, 20, 30, 40 );\n}\n~~~~\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawRectRounded(&p, w, h, r)\n\n<!--\n_syntax: ofDrawRectRounded(&p, w, h, r)_\n_name: ofDrawRectRounded_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p, float w, float h, float r_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawRectRounded(&p, w, h, r)\n\n<!--\n_syntax: ofDrawRectRounded(&p, w, h, r)_\n_name: ofDrawRectRounded_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p, float w, float h, float r_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a rectangle from point p with a given width, height and radius of\nrounded corners.\n\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofPoint p;\n    p.set ( 10, 10 );\n    ofDrawRectRounded( p, 100, 100, 10 );\n}\n~~~~\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawRectRounded(&p, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)\n\n<!--\n_syntax: ofDrawRectRounded(&p, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)_\n_name: ofDrawRectRounded_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p, float w, float h, float topLeftRadius, float topRightRadius, float bottomRightRadius, float bottomLeftRadius_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a rounded rectangle from point X, Y, at depth Z with a given width,\nheight and radius of rounded corners.\n\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofDrawRectRounded(10, 10, 10, 100, 100, 10);\n}\n~~~~\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawRectRounded(&p, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)\n\n<!--\n_syntax: ofDrawRectRounded(&p, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)_\n_name: ofDrawRectRounded_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p, float w, float h, float topLeftRadius, float topRightRadius, float bottomRightRadius, float bottomLeftRadius_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawRectRounded(x, y, w, h, r)\n\n<!--\n_syntax: ofDrawRectRounded(x, y, w, h, r)_\n_name: ofDrawRectRounded_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float w, float h, float r_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a rectangle from point X, Y with a given width, height and radius of\nrounded corners.\n\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofDrawRectRounded(10, 10, 100, 100, 10);\n}\n~~~~\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawRectRounded(x, y, z, w, h, r)\n\n<!--\n_syntax: ofDrawRectRounded(x, y, z, w, h, r)_\n_name: ofDrawRectRounded_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float w, float h, float r_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a rectangle from point X, Y, at depth Z with a given width, height and\nradius of rounded corners.\n\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofDrawRectRounded(10, 10, 10, 100, 100, 10);\n}\n~~~~\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawRectRounded(x, y, z, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)\n\n<!--\n_syntax: ofDrawRectRounded(x, y, z, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)_\n_name: ofDrawRectRounded_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float w, float h, float topLeftRadius, float topRightRadius, float bottomRightRadius, float bottomLeftRadius_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a rounded rectangle from point X, Y, at depth Z with a given width,\nheight and different radius for each rounded corner.\n\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofDrawRectRounded(10, 10, 10, 100, 100, 10, 20, 30, 40);\n}\n~~~~\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawRectangle(&p, w, h)\n\n<!--\n_syntax: ofDrawRectangle(&p, w, h)_\n_name: ofDrawRectangle_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p, float w, float h_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a rectangle from point p, with a given width and height.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    glm::vec3 p;      // create a point P\n    p.x = 10;       // set the x of the point\n    p.y = 10;       // set the y of the point\n\n    ofDrawRectangle(p, 80, 80); // Draw the rectangle\n}\n~~~~\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawRectangle(&p, w, h)\n\n<!--\n_syntax: ofDrawRectangle(&p, w, h)_\n_name: ofDrawRectangle_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p, float w, float h_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawRectangle(&r)\n\n<!--\n_syntax: ofDrawRectangle(&r)_\n_name: ofDrawRectangle_\n_returns: void_\n_returns_description: _\n_parameters: const ofRectangle &r_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a rectangle from the given rectangle.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofRectangle rect;\n    rect.x = 10;\n    rect.y = 10;\n    rect.width = 100;\n    rect.height = 100;\n\n    ofDrawRectangle(rect);\n}\n~~~~\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawRectangle(x, y, z, w, h)\n\n<!--\n_syntax: ofDrawRectangle(x, y, z, w, h)_\n_name: ofDrawRectangle_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float w, float h_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a rectangle from point X, Y at depth Z with a given width and height.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofDrawRectangle(10,10,-100, 80, 80); // Draw a rectangle at 100 pixels in depth\n}\n~~~~\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawRectangle(x1, y1, w, h)\n\n<!--\n_syntax: ofDrawRectangle(x1, y1, w, h)_\n_name: ofDrawRectangle_\n_returns: void_\n_returns_description: _\n_parameters: float x1, float y1, float w, float h_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a rectangle from point x,y with a given width and height.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofDrawRect(10,10,100,100);\n}\n~~~~\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawTriangle(&p1, &p2, &p3)\n\n<!--\n_syntax: ofDrawTriangle(&p1, &p2, &p3)_\n_name: ofDrawTriangle_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p1, const glm::vec3 &p2, const glm::vec3 &p3_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawTriangle(&p1, &p2, &p3)\n\n<!--\n_syntax: ofDrawTriangle(&p1, &p2, &p3)_\n_name: ofDrawTriangle_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p1, const glm::vec2 &p2, const glm::vec2 &p3_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawTriangle(x1, y1, x2, y2, x3, y3)\n\n<!--\n_syntax: ofDrawTriangle(x1, y1, x2, y2, x3, y3)_\n_name: ofDrawTriangle_\n_returns: void_\n_returns_description: _\n_parameters: float x1, float y1, float x2, float y2, float x3, float y3_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a triangle, with the three points: (x1,y1),(x2, y2),(x3, y3).\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofDrawTriangle(50,10,10,40,90,40);\n}\n~~~~\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDrawTriangle(x1, y1, z1, x2, y2, z2, x3, y3, z3)\n\n<!--\n_syntax: ofDrawTriangle(x1, y1, z1, x2, y2, z2, x3, y3, z3)_\n_name: ofDrawTriangle_\n_returns: void_\n_returns_description: _\n_parameters: float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofEnableAlphaBlending()\n\n<!--\n_syntax: ofEnableAlphaBlending()_\n_name: ofEnableAlphaBlending_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTurns on alpha blending (which is on by default since OF version 0.8.0).\nIt simply wraps opengl commands that enable blending, and turn on a common\nblend mode.\n\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofEnableAlphaBlending();    // turn on alpha blending\n    ofSetColor(255,0,0,127);    // red, 50% transparent\n    ofDrawRectangle(20,20,100,100);      // draws the rect with alpha\n    ofDisableAlphaBlending();   // turn off alpha\n    ofDrawRectangle(120,20,100,100);     // draws the rect without alpha\n}\n~~~~\n\n\n\n\n\n_description: _\n\nTurns on alpha blending (which is on by default since OF version 0.8.0). It simply wraps opengl commands that enable blending, and turn on a common blend mode.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofEnableAlphaBlending();    // turn on alpha blending\n    ofSetColor(255,0,0,127);    // red, 50% transparent\n    ofDrawRectangle(20,20,100,100);      // draws the rect with alpha\n    ofDisableAlphaBlending();   // turn off alpha\n    ofDrawRectangle(120,20,100,100); // draws the rect without alpha\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofEnableAntiAliasing()\n\n<!--\n_syntax: ofEnableAntiAliasing()_\n_name: ofEnableAntiAliasing_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nEnables anti-aliasing (smoothing) for lines.\n\n\n\n\n\n_description: _\n\nEnables anti-aliasing (smoothing) for lines.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofEnableBlendMode(blendMode)\n\n<!--\n_syntax: ofEnableBlendMode(blendMode)_\n_name: ofEnableBlendMode_\n_returns: void_\n_returns_description: _\n_parameters: ofBlendMode blendMode_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets and enables the blend mode for drawing. The options are:\n\n    OF_BLENDMODE_DISABLED\n    OF_BLENDMODE_ALPHA\n    OF_BLENDMODE_ADD\n    OF_BLENDMODE_SUBTRACT\n    OF_BLENDMODE_MULTIPLY\n    OF_BLENDMODE_SCREEN\n\nThere is a blendingExample in the openFrameworks examples > graphics\n\n\n\n\n\n_description: _\n\nSets and enables the blend mode for drawing. The options are:\n\n    OF_BLENDMODE_DISABLED\n    OF_BLENDMODE_ALPHA\n    OF_BLENDMODE_ADD\n    OF_BLENDMODE_SUBTRACT\n    OF_BLENDMODE_MULTIPLY\n    OF_BLENDMODE_SCREEN\nThere is a blendingExample in the openFrameworks examples > graphics\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofEnableDepthTest()\n\n<!--\n_syntax: ofEnableDepthTest()_\n_name: ofEnableDepthTest_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTurns on depth testing so rendering happens according to z-depth rather\nthan draw order.\n\n\n**See also**: ofDisableDepthTest()\n\n\n\n\n\n_description: _\n\nTurns on depth testing so rendering happens according to z-depth rather than draw order.\n~~~~{.cpp}\nvoid ofApp::draw(){\n\n    ofPushMatrix();\n\n        ofTranslate( ofGetWidth()/2, ofGetHeight()/2, 0 );\n\n        ofEnableDepthTest(); // enable depth test\n        ofSetColor(255);\n        ofDrawSphere(0,0,100,60); // draw 3d sphere\n        ofSetColor(255,0,255);\n        ofDrawSphere(50,0,50,100);\n        ofDisableDepthTest(); // disable depth test\n\n        // draw 2d overlay\n        ofSetColor(0);\n        ofDrawRectangle(75,75,120,30);\n        ofSetColor(255);\n        ofDrawBitmapString(\"Some bubbles.\",85,90);\n\n    ofPopMatrix();\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofEnablePointSprites()\n\n<!--\n_syntax: ofEnablePointSprites()_\n_name: ofEnablePointSprites_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTurn on point sprite.\n\nTextures can be mapped onto points. By default, point size is 1pt. So\ntexture is not shown correctly. You can change point size by\n`glPointSize(GLfloat size).\n\n\n\n\n\n_description: _\n\nTurns on point sprite. Textures can be mapped onto points. By default, point size is 1pt. So texture is not shown correctly. You can change point size by glPointSize(GLfloat size).\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofEnableSmoothing()\n\n<!--\n_syntax: ofEnableSmoothing()_\n_name: ofEnableSmoothing_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nTurns on smoothing. Currently, this only works for lines. You can draw a filled object, and then draw the outline with smoothing enabled to get smoothing effects on filled shapes.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofEndSaveScreenAsPDF()\n\n<!--\n_syntax: ofEndSaveScreenAsPDF()_\n_name: ofEndSaveScreenAsPDF_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTerminates draw to PDF through ofCairoRenderer and outputs the file.\n\n**See also**: ofBeginSaveScreenAsPDF()\n\n\n\n\n\n_description: _\n\nTerminates draw to pdf through ofCairoRenderer and outputs the pdf file.\n~~~~{.cpp}\nvoid ofApp::setup(){\n    if( oneShot ){\n        ofBeginSaveScreenAsPDF(\"screenshot-\"+ofGetTimestampString()+\".pdf\", false);\n    }\n\n    ofSetColor(54,54,54);\n    ofDrawEllipse(100,100,200,200);\n    if( oneShot ){\n        ofEndSaveScreenAsPDF();\n        oneShot = false;\n    }\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofEndSaveScreenAsSVG()\n\n<!--\n_syntax: ofEndSaveScreenAsSVG()_\n_name: ofEndSaveScreenAsSVG_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTerminates draw to SVG and outputs the file.\n\n**See also**: ofBeginSaveScreenAsSVG()\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofEndShape(bClose)\n\n<!--\n_syntax: ofEndShape(bClose)_\n_name: ofEndShape_\n_returns: void_\n_returns_description: _\n_parameters: bool bClose=false_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis tells the program that your shape is finished and that it should now\ndraw it to the screen.\n\nThis function must be called otherwise you will not see your shape.\n\n\n**Parameters:**\n\nbClose If you set it to true it will automatically close your\nshape for you. Default false.\n\n\n\n\n\n_description: _\n\nThis tells the program that your shape is finished and that it should now draw it to the screen. If you set the optional 'bClose' argument to true it will automatically close your shape for you.'bClose' is set to false by default. This function must be called otherwise you will not see your shape.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofFill()\n\n<!--\n_syntax: ofFill()_\n_name: ofFill_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw shapes filled with the current draw color.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofSetColor(0,0,255);\n    ofFill();\n    ofDrawRect(10,10,100,100);  //draws the rectangle filled in blue\n}\n~~~~\n\n\n\n\n\n_description: _\n\nDraw shapes filled with the current draw color.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofSetColor(0,0,255);\n    ofFill();\n    ofDrawRectangle(10,10,100,100);  //draws the rectangle filled in blue\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool ofGetBackgroundAuto()\n\n<!--\n_syntax: ofGetBackgroundAuto()_\n_name: ofGetBackgroundAuto_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor ofGetBackgroundColor()\n\n<!--\n_syntax: ofGetBackgroundColor()_\n_name: ofGetBackgroundColor_\n_returns: ofColor_\n_returns_description: _\n_parameters: _\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the current background color as an ofColor.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofHandednessType ofGetCoordHandedness()\n\n<!--\n_syntax: ofGetCoordHandedness()_\n_name: ofGetCoordHandedness_\n_returns: ofHandednessType_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat4 ofGetCurrentMatrix(matrixMode)\n\n<!--\n_syntax: ofGetCurrentMatrix(matrixMode)_\n_name: ofGetCurrentMatrix_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: ofMatrixMode matrixMode_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nQuery the current (oF internal) Transformation Matrix state.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat4 ofGetCurrentNormalMatrix()\n\n<!--\n_syntax: ofGetCurrentNormalMatrix()_\n_name: ofGetCurrentNormalMatrix_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: _\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nQuery the current (oF internal) Normal Matrix state.\n\\note  The matrix returned is the transposed of the inverse of the\n       view matrix\n\n       Currently, only GL Programmable Renderer and GL Renderer\n       implement ofGetCurrentNormalMatrix.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat4 ofGetCurrentOrientationMatrix()\n\n<!--\n_syntax: ofGetCurrentOrientationMatrix()_\n_name: ofGetCurrentOrientationMatrix_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: _\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nQuery the current (oF internal) Orientation Matrix state.\n\\note  The matrix returned is the matrix openFrameworks uses internally\n       to calculate the (final, oriented) projection matrix as it is\n       passed on to the GPU.\n\n       Currently, only GL Programmable Renderer and GL Renderer\n       implement ofGetCurrentOrientationMatrix.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat4 ofGetCurrentViewMatrix()\n\n<!--\n_syntax: ofGetCurrentViewMatrix()_\n_name: ofGetCurrentViewMatrix_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: _\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofRectangle ofGetCurrentViewport()\n\n<!--\n_syntax: ofGetCurrentViewport()_\n_name: ofGetCurrentViewport_\n_returns: ofRectangle_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the position and size of the current viewport\n\n**Returns**: A rectangle describing the viewport\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofFillFlag ofGetFill()\n\n<!--\n_syntax: ofGetFill()_\n_name: ofGetFill_\n_returns: ofFillFlag_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofRectangle ofGetNativeViewport()\n\n<!--\n_syntax: ofGetNativeViewport()_\n_name: ofGetNativeViewport_\n_returns: ofRectangle_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the position and size of the native viewport\n\n**Returns**: A rectangle describing the viewport\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofRectMode ofGetRectMode()\n\n<!--\n_syntax: ofGetRectMode()_\n_name: ofGetRectMode_\n_returns: ofRectMode_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTells you if rectangle drawing mode is set to drawn from the center or drawn\nfrom the top left corner, as set with the ofSetRectMode() function.\n\nDefault is `OF_RECTMODE_CORNER`\n\n~~~~{.cpp}\nvoid ofApp::draw(){\n    if(ofGetRectMode() == OF_RECTMODE_CORNER){\n        ofDrawRea10,10,80,80);\n    }\n    else {\n        ofDrawRectangle(50,50,80,80);\n    }\n}\n~~~~\n\n**See also**: ofSetRectMode()\n\n\n\n\n\n_description: _\n\nTells you if rect drawing mode is set to drawn from the center or drawn from the top left corner, as set with the ofSetRectMode() function.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    if(ofGetRectMode() == OF_RECTMODE_CORNER){\n        ofDrawRectangle(10,10,80,80);\n    }\n    else {\n        ofDrawRectangle(50,50,80,80);\n    }\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofStyle ofGetStyle()\n\n<!--\n_syntax: ofGetStyle()_\n_name: ofGetStyle_\n_returns: ofStyle_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofGetViewportHeight()\n\n<!--\n_syntax: ofGetViewportHeight()_\n_name: ofGetViewportHeight_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the height of the current viewport\n\n**Returns**: A height in pixels\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofGetViewportWidth()\n\n<!--\n_syntax: ofGetViewportWidth()_\n_name: ofGetViewportWidth_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the width of the current viewport\n\n**Returns**: A width in pixels\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool ofIsVFlipped()\n\n<!--\n_syntax: ofIsVFlipped()_\n_name: ofIsVFlipped_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet if view is flipped vertically\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofLoadIdentityMatrix()\n\n<!--\n_syntax: ofLoadIdentityMatrix()_\n_name: ofLoadIdentityMatrix_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\}\n\\name Matrix Transformation\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofLoadMatrix(&m)\n\n<!--\n_syntax: ofLoadMatrix(&m)_\n_name: ofLoadMatrix_\n_returns: void_\n_returns_description: _\n_parameters: const glm::mat4 &m_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofLoadMatrix(*m)\n\n<!--\n_syntax: ofLoadMatrix(*m)_\n_name: ofLoadMatrix_\n_returns: void_\n_returns_description: _\n_parameters: const float *m_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofLoadViewMatrix(&m)\n\n<!--\n_syntax: ofLoadViewMatrix(&m)_\n_name: ofLoadViewMatrix_\n_returns: void_\n_returns_description: _\n_parameters: const glm::mat4 &m_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofMultMatrix(&m)\n\n<!--\n_syntax: ofMultMatrix(&m)_\n_name: ofMultMatrix_\n_returns: void_\n_returns_description: _\n_parameters: const glm::mat4 &m_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofMultMatrix(*m)\n\n<!--\n_syntax: ofMultMatrix(*m)_\n_name: ofMultMatrix_\n_returns: void_\n_returns_description: _\n_parameters: const float *m_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofMultViewMatrix(&m)\n\n<!--\n_syntax: ofMultViewMatrix(&m)_\n_name: ofMultViewMatrix_\n_returns: void_\n_returns_description: _\n_parameters: const glm::mat4 &m_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofNextContour(bClose)\n\n<!--\n_syntax: ofNextContour(bClose)_\n_name: ofNextContour_\n_returns: void_\n_returns_description: _\n_parameters: bool bClose=false_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAllows you to draw multiple contours within one shape. Call this\nbetween ofBeginShape() and ofEndShape() to create a new contour for your\nshape.\n\n\n**Parameters:**\n\nbClose If set to true then the previous contour will be\nautomatically closed. Default false\n\n\n\n\n\n_description: _\n\nAllows you to draw multiple contours within one shape. Call this between ofBeginShape() and ofEndShape() to create a new contour for your shape. If you set the optional argument 'bClose' to true then the previous contour will be automatically closed. 'bClose' is set to false by default.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofNoFill()\n\n<!--\n_syntax: ofNoFill()_\n_name: ofNoFill_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw shapes as outlines with the current draw color.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofSetColor(0,0,255);\n    ofNoFill();\n    ofDrawRectangle(10,10,100,100);  //draws only the outline in blue\n}\n~~~~\n\n\n\n\n\n_description: _\n\nDraw shapes as outlines with the current draw color.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofSetColor(0,0,255);\n    ofNoFill();\n    ofDrawRectangle(10,10,100,100);  //draws only the outline in blue\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofOrientationToDegrees(orientation)\n\n<!--\n_syntax: ofOrientationToDegrees(orientation)_\n_name: ofOrientationToDegrees_\n_returns: int_\n_returns_description: _\n_parameters: ofOrientation orientation_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofPopMatrix()\n\n<!--\n_syntax: ofPopMatrix()_\n_name: ofPopMatrix_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRestores the prior coordinate system.\n\n\n**See also**: ofPushMatrix()\n\n\n\n\n\n_description: _\n\nofPopMatrix() restores the prior coordinate system.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofDrawCircle(10, 10, 5);      // draw a circle\n    ofPushMatrix();               // push the current coordinate position\n    ofRotateX(90);                // change the coordinate system\n    ofDrawRectangle(10,10,40,40); // draw a rect\n    ofPopMatrix();                // recall the pushed coordinate position\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofPopStyle()\n\n<!--\n_syntax: ofPopStyle()_\n_name: ofPopStyle_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRestores the prior style settings. It needs to be called after ofPushStyle.\n\n\n**See also**: ofPushStyle()\n\n\n\n\n\n_description: _\n\nofPopStyle() restores the prior style settings. It needs to be called after ofPushStyle.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofDrawCircle(10,10,5);\n    ofPushStyle();           // push the current style for use later\n    ofFill();\n    ofsetColor(255,0,0);\n    ofDrawEllipse(30,10,40,40);\n    ofPopStyle();   // recall the pushed style\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofPopView()\n\n<!--\n_syntax: ofPopView()_\n_name: ofPopView_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRestores the viewport and matrix settings set by ofPushView()\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofPushMatrix()\n\n<!--\n_syntax: ofPushMatrix()_\n_name: ofPushMatrix_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSaves the current coordinate system allowing users to develop specific\nmovements in some graphic objects. ofPopMatrix needs to be called after.\n\nIn the following example we only rotate the square.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofPushMatrix();         // push the current coordinate position\n    ofRotateX(90);          // change the coordinate system\n    ofDrawRea10,10,40,40);  // draw a rect\n    ofPopMatrix()           // recall the pushed coordinate position\n    ofDrawCircle(10, 10, 5);    // draw a circle\n}\n~~~~\n\n\n\n\n\n_description: _\n\nofPushMatrix saves the current coordinate system allowing users to develop specific movements in some graphic objects. ofPopMatrix needs to be called after.\nIn the following example we only rotate the square.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofDrawCircle(10,10,5); // draw a circle\n    ofPushMatrix();        // push the current coordinate position\n    ofRotateX(90);         // change the coordinate system\n    ofDrawRectangle(10,10,40,40);    // draw a rect\n    ofPopMatrix();         // recall the pushed coordinate position\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofPushStyle()\n\n<!--\n_syntax: ofPushStyle()_\n_name: ofPushStyle_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSaves the current style settings for the ofGraphics after its call.\nUsage of ofPushStyle and ofPopStyle allow users to have more control of\ncertain graphics elements. All the style that applies to certain elements\nis controled using ofStyle class. See ofStyle type.\n\nIn the following example the properties of being red and filled only applies to the ellipse:\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofPushStyle();  // push the current style for use later\n    ofFill();\n    ofSetColor(255,0,0);\n    ofDrawEllipse(30,10,40,40);\n    ofPopStyle();   // recall the pushed style\n\n    ofDrawCircle(10,10,5);\n}\n~~~~\nsa ofPopStyle()\n\n\n\n\n\n_description: _\n\nofPushStyle saves the current style settings for the ofGraphics after its call. Usage of ofPushStyle and ofPopStyle allow users to have more control of certain graphics elements. All the style that applies to certain elements is controled using ofStyle class. See ofStyle type.\nIn the following example the properties of being red and filled only applies to the ellipse:\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofDrawCircle(10,10,5);\n    ofPushStyle();  // push the current style for use later\n    ofFill();\n    ofSetColor(255,0,0);\n    ofDrawEllipse(30,10,40,40);\n    ofPopStyle();   // recall the pushed style\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofPushView()\n\n<!--\n_syntax: ofPushView()_\n_name: ofPushView_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nStores the current viewport and matrix settings\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofRotateDeg(degrees)\n\n<!--\n_syntax: ofRotateDeg(degrees)_\n_name: ofRotateDeg_\n_returns: void_\n_returns_description: _\n_parameters: float degrees_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotate around the z-axis\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofRotateDeg(degrees, vecX, vecY, vecZ)\n\n<!--\n_syntax: ofRotateDeg(degrees, vecX, vecY, vecZ)_\n_name: ofRotateDeg_\n_returns: void_\n_returns_description: _\n_parameters: float degrees, float vecX, float vecY, float vecZ_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nProduces a rotation around the vector (vecX,vecY,vecZ).\n\nAll graphics drawn after ofRotate is called are rotated. Use ofPushMatrix()\nand ofPopMatrix() to save and restore the unrotated coordinate system.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofRotate(50, 1, 0.5, 0); //rotates the coordinate system 50 degrees along the x-axis and 25 degrees on the y-axis\n    ofDrawRectangle(20,20,100,100);\n}\n~~~~\n\n\n**Parameters:**\n\ndegrees Specifies the angle of rotation, in degrees.\n\nvecX specifies the x coordinates of a vector\n\nvecY specifies the y coordinates of a vector\n\nvecZ specifies the z coordinates of a vector\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofRotateRad(degrees)\n\n<!--\n_syntax: ofRotateRad(degrees)_\n_name: ofRotateRad_\n_returns: void_\n_returns_description: _\n_parameters: float degrees_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotate around the z-axis\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofRotateRad(degrees, vecX, vecY, vecZ)\n\n<!--\n_syntax: ofRotateRad(degrees, vecX, vecY, vecZ)_\n_name: ofRotateRad_\n_returns: void_\n_returns_description: _\n_parameters: float degrees, float vecX, float vecY, float vecZ_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nProduces a rotation around the vector (vecX,vecY,vecZ).\n\nAll graphics drawn after ofRotate is called are rotated. Use ofPushMatrix()\nand ofPopMatrix() to save and restore the unrotated coordinate system.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofRotate(50, 1, 0.5, 0); //rotates the coordinate system 50 degrees along the x-axis and 25 degrees on the y-axis\n    ofDrawRectangle(20,20,100,100);\n}\n~~~~\n\n\n**Parameters:**\n\ndegrees Specifies the angle of rotation, in degrees.\n\nvecX specifies the x coordinates of a vector\n\nvecY specifies the y coordinates of a vector\n\nvecZ specifies the z coordinates of a vector\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofRotateXDeg(degrees)\n\n<!--\n_syntax: ofRotateXDeg(degrees)_\n_name: ofRotateXDeg_\n_returns: void_\n_returns_description: _\n_parameters: float degrees_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nProduces a rotation around the X-axis of our coordinate\nsystem represented by the vector (1,0,0).\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofRotateX(45); //rotates the coordinate system 45 degrees around the x-axis\n    ofDrawRectangle(20,20,100,100);\n}\n~~~~\n\n**Parameters:**\n\ndegrees Specifies the angle of rotation, in degrees.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofRotateXRad(degrees)\n\n<!--\n_syntax: ofRotateXRad(degrees)_\n_name: ofRotateXRad_\n_returns: void_\n_returns_description: _\n_parameters: float degrees_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nProduces a rotation around the X-axis of our coordinate\nsystem represented by the vector (1,0,0).\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofRotateX(45); //rotates the coordinate system 45 degrees around the x-axis\n    ofDrawRectangle(20,20,100,100);\n}\n~~~~\n\n**Parameters:**\n\ndegrees Specifies the angle of rotation, in degrees.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofRotateYDeg(degrees)\n\n<!--\n_syntax: ofRotateYDeg(degrees)_\n_name: ofRotateYDeg_\n_returns: void_\n_returns_description: _\n_parameters: float degrees_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nProduces a rotation around the Y-axis of our coordinate\nsystem represented by the vector (0,1,0).\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofRotateY(45); //rotates the coordinate system 45 degrees around the y-axis\n    ofDrawRectangle(20,20,100,100);\n}\n~~~~\n\n**Parameters:**\n\ndegrees Specifies the angle of rotation, in degrees.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofRotateYRad(degrees)\n\n<!--\n_syntax: ofRotateYRad(degrees)_\n_name: ofRotateYRad_\n_returns: void_\n_returns_description: _\n_parameters: float degrees_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nProduces a rotation around the Y-axis of our coordinate\nsystem represented by the vector (0,1,0).\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofRotateY(45); //rotates the coordinate system 45 degrees around the y-axis\n    ofDrawRectangle(20,20,100,100);\n}\n~~~~\n\n**Parameters:**\n\ndegrees Specifies the angle of rotation, in degrees.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofRotateZDeg(degrees)\n\n<!--\n_syntax: ofRotateZDeg(degrees)_\n_name: ofRotateZDeg_\n_returns: void_\n_returns_description: _\n_parameters: float degrees_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nProduces a rotation around the Z-axis of our coordinate\nsystem represented by the vector (0,0,1).\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofRotateZ(45); //rotates the coordinate system 45 degrees around the z-axis\n    ofDrawRectangle(20,20,100,100);\n}\n~~~~\n\n**Parameters:**\n\ndegrees Specifies the angle of rotation, in degrees.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofRotateZRad(degrees)\n\n<!--\n_syntax: ofRotateZRad(degrees)_\n_name: ofRotateZRad_\n_returns: void_\n_returns_description: _\n_parameters: float degrees_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nProduces a rotation around the Z-axis of our coordinate\nsystem represented by the vector (0,0,1).\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofRotateZ(45); //rotates the coordinate system 45 degrees around the z-axis\n    ofDrawRectangle(20,20,100,100);\n}\n~~~~\n\n**Parameters:**\n\ndegrees Specifies the angle of rotation, in degrees.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofScale(&p)\n\n<!--\n_syntax: ofScale(&p)_\n_name: ofScale_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofScale(amount)\n\n<!--\n_syntax: ofScale(amount)_\n_name: ofScale_\n_returns: void_\n_returns_description: _\n_parameters: float amount_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nScale along the X, Y and Z axis with the same amount.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofScale(xAmnt,yAmnt,zAmnt)\n\n<!--\n_syntax: ofScale(xAmnt,yAmnt,zAmnt)_\n_name: ofScale_\n_returns: void_\n_returns_description: _\n_parameters: float xAmnt, float yAmnt, float zAmnt_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nofScale produces a nonuniform scaling along the x, y, and z axes. The three parameters xAmnt, yAmnt and zAmnt indicate the desired scale factor along each of the three axes.\ne.g:\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofScale(0.5,1,1);       // scale 0.5 in height\n    ofDrawRectangle(10,10,40,40);    // draw a square rectangle\n}\n~~~~\nRectangle width will be now 20px heigh!\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetBackgroundAuto(bAuto)\n\n<!--\n_syntax: ofSetBackgroundAuto(bAuto)_\n_name: ofSetBackgroundAuto_\n_returns: void_\n_returns_description: _\n_parameters: bool bManual_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets the background clearing function to be auto (default) or not. If non-\nauto, then background clearing will not occur per frame (at the start of\ndraw) but rather, whenever ofBackground is called.\n\n~~~~{.cpp}\nvoid ofApp::setup(){\n    ofSetBackgroundAuto(false); //disable automatic background redraw\n}\nvoid ofApp::draw(){\n    if(ofGetFrameNum() % 10 == 0){\n        // draws a black background every 10 frames\n        ofSetBackgroundColor(0,0,0);\n    }\n}\n~~~~\n\n\n\n\n\n_description: _\n\nSets the background clearing function to be auto (default) or not. If non-auto, then background clearing will not occur per frame (at the start of draw) but rather, whenever ofBackground is called.\n~~~~{.cpp}\nvoid ofApp::setup(){\n    ofSetBackgroundAuto(false); //disable automatic background redraw\n}\nvoid ofApp::draw(){\n    if(ofGetFrameNum() % 10 == 0){\n        // draws a black background every 10 frames\n        ofSetBackground(0,0,0);\n    }\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetBackgroundColor(&c)\n\n<!--\n_syntax: ofSetBackgroundColor(&c)_\n_name: ofSetBackgroundColor_\n_returns: void_\n_returns_description: _\n_parameters: const ofColor &c_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetBackgroundColor(brightness, alpha = 255)\n\n<!--\n_syntax: ofSetBackgroundColor(brightness, alpha = 255)_\n_name: ofSetBackgroundColor_\n_returns: void_\n_returns_description: _\n_parameters: int brightness, int alpha=255_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetBackgroundColor(r, g, b, a = 255)\n\n<!--\n_syntax: ofSetBackgroundColor(r, g, b, a = 255)_\n_name: ofSetBackgroundColor_\n_returns: void_\n_returns_description: _\n_parameters: int r, int g, int b, int a=255_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets the background color. It takes as input r,g,b (0-255). The\nbackground is cleared automatically, just before the draw() command, so\nif the background color is not changing, you could call this inside\nsetup() (once, at the start of the application). If the background color\nis changing, you can call this inside update().\n\n~~~~{.cpp}\nvoid ofApp::setup(){\n    ofSetBackgroundColor(255,0,0);  // Sets the background color to red\n}\n~~~~\n\n\n\n\n\n_description: _\n\nSets the background color. It takes as input r,g,b (0-255). The background is cleared automatically, just before the draw() command, so if the background color is not changing, you could call this inside of setup() (once, at the start of the application). If the background color is changing, you can call this inside of update().\n~~~~{.cpp}\nvoid ofApp::setup(){\n    ofSetBackgroundColor(255,0,0);  // Sets the background color to red\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetBackgroundColorHex(hexColor, alpha = 255)\n\n<!--\n_syntax: ofSetBackgroundColorHex(hexColor, alpha = 255)_\n_name: ofSetBackgroundColorHex_\n_returns: void_\n_returns_description: _\n_parameters: int hexColor, int alpha=255_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets the background color using a hex color value.\n~~~~{.cpp}\nvoid ofApp::setup(){\n    ofSetBackgroundColorHex(0xff0000);  // Sets the background color to red\n}\n~~~~\n\n\n\n\n\n_description: _\n\nSets the background color using a hex color value.\n~~~~{.cpp}\nvoid ofApp::setup(){\n    ofSetBackgroundColorHex(0xff0000);  // Sets the background color to red\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetCircleResolution(res)\n\n<!--\n_syntax: ofSetCircleResolution(res)_\n_name: ofSetCircleResolution_\n_returns: void_\n_returns_description: _\n_parameters: int res_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets the resolution for the ofDrawCircle command. By default, the circle is 22\npoints, but if you need to draw larger circles, you can adjust the\nresolution using this command. All circles are cached in openGL using a\ndisplay list for optimization purposes.\n\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofSetCircleResolution(10);\n    ofDrawCircle(150,150,100);          //draws a rough circle\n    ofSetCircleResolution(100);\n    ofDrawCircle(450,150,100);          //draws a fine circle\n}\n~~~~\n\n\n\n\n\n_description: _\n\nSets the resolution for the ofDrawCircle command. By default, the circle is 22 points, but if you need to draw larger circles, you can adjust the resolution using this command. all circles are cached in opengl using a display list for optimization purposes.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofSetCircleResolution(10);\n    ofDrawCircle(150,150,100);          //draws a rough circle\n    ofSetCircleResolution(100);\n    ofDrawCircle(450,150,100);          //draws a fine circle\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetColor(&color)\n\n<!--\n_syntax: ofSetColor(&color)_\n_name: ofSetColor_\n_returns: void_\n_returns_description: _\n_parameters: const ofColor &color_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetColor(&color, _a)\n\n<!--\n_syntax: ofSetColor(&color, _a)_\n_name: ofSetColor_\n_returns: void_\n_returns_description: _\n_parameters: const ofColor &color, int _a_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetColor(hexColor)\n\n<!--\n_syntax: ofSetColor(hexColor)_\n_name: ofSetColor_\n_returns: void_\n_returns_description: _\n_parameters: int gray_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSets the draw color with r,g,b, passed in as a hex. Hex is a conventient way to write colors. Some examples:\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofSetColor(0xffffff);  // white  (255,255,255)\n    ofSetColor(0x000000);  // black  (0,0,0);\n    ofSetColor(0x00ff00);  // green  (0,255,0);\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetColor(r,g,b)\n\n<!--\n_syntax: ofSetColor(r,g,b)_\n_name: ofSetColor_\n_returns: void_\n_returns_description: _\n_parameters: int r, int g, int b_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets the draw color with r,g,b, 0-255. For example, red would\nbe: ofSetColor(255,0,0). This affects not only the color of shapes drawn\nwith ofDrawRectangle(), ofDrawCircle(), etc, but also the tint of images and\ntextures.\n\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofSetColor(0,0,255);    //set the color to blue\n    ofDrawRectangle(10,10,100,100);\n}\n~~~~\n\n\n\n\n\n_description: _\n\nSets the draw color with r,g,b, 0-255. For example, red (0xff0000) would be: ofSetColor(255,0,0). This affects not only the color of shapes drawn with ofDrawRectangle(...), ofDrawCircle(...), etc, but also the tint of images and textures.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofSetColor(0,0,255);    //set te color to blue\n    ofDrawRectangle(10,10,100,100);\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetColor(r,g,b,a)\n\n<!--\n_syntax: ofSetColor(r,g,b,a)_\n_name: ofSetColor_\n_returns: void_\n_returns_description: _\n_parameters: int r, int g, int b, int a_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets the draw color with r,g,b,a 0-255.\n\nFor alpha (transparency), you must first enable transparent blending\n(turned off by default for performance reasons) with\nofEnableAlphaBlending()\n\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofEnableAlphaBlending();    // turn on alpha blending\n    ofSetColor(255,0,0,127);    // red, 50% transparent\n    ofDrawRectangle(20,20,100,100);\n    ofDisableAlphaBlending();   // turn it back off, if you don't need it\n}\n~~~~\n\n\n\n\n\n_description: _\n\nsets the draw color with r,g,b,a 0-255. For alpha (transparency), you must first enable transparent blending (turned off by default for performance reasons), and draw in the proper z-order (objects in the back drawn first). For example, to draw a transparent red rectangle:\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofEnableAlphaBlending();    // turn on alpha blending\n    ofSetColor(255,0,0,127);    // red, 50% transparent\n    ofDrawRectangle(20,20,100,100);\n    ofDisableAlphaBlending();   // turn it back off, if you don't need it\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetCoordHandedness(handedness)\n\n<!--\n_syntax: ofSetCoordHandedness(handedness)_\n_name: ofSetCoordHandedness_\n_returns: void_\n_returns_description: _\n_parameters: ofHandednessType handedness_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetCurveResolution(res)\n\n<!--\n_syntax: ofSetCurveResolution(res)_\n_name: ofSetCurveResolution_\n_returns: void_\n_returns_description: _\n_parameters: int res_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetDepthTest(depthTest)\n\n<!--\n_syntax: ofSetDepthTest(depthTest)_\n_name: ofSetDepthTest_\n_returns: void_\n_returns_description: _\n_parameters: bool depthTest_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet depth testing on or off to either sort by z-depth (`true`)\nor draw order (`false`).\n\n\n\n\n\n_description: _\n\nSet depth testing on or off to either sort by z-depth (true) or draw order (false).\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetDrawBitmapMode(mode)\n\n<!--\n_syntax: ofSetDrawBitmapMode(mode)_\n_name: ofSetDrawBitmapMode_\n_returns: void_\n_returns_description: _\n_parameters: ofDrawBitmapMode mode_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the bitmap drawing mode\n\nValid modes:\n\nOF_BITMAPMODE_SCREEN: this is the default mode. It projects the 3d prosition onto\nthe screen so the letters always look the same size but can be positioned in any 3d coordinate.\n\nOF_BITMAPMODE_VIEWPORT: does the same as screen but uses the current viewport instead\nof the full window if it's different.\n\nOF_BITMAPMODE_MODEL: uses real 3d coordinates so the text will look scaled if it's not in z=0\n\nOF_BITMAPMODE_MODEL_BILLBOARD: uses real 3d coordinates but the text always faces the camera.\n\nOF_BITMAPMODE_SIMPLE: only does 2d and the z coordinate is just disacarded, so if z is not 0\nthe position in which it'll be drawn will be wrong.\n\n\n\n\n\n_description: _\n\ntakes OF_BITMAPMODE_SIMPLE, OF_BITMAPMODE_SCREEN, OF_BITMAPMODE_VIEWPORT, OF_BITMAPMODE_MODEL and OF_BITMAPMODE_MODEL_BILLBOARD\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetHexColor(hexColor)\n\n<!--\n_syntax: ofSetHexColor(hexColor)_\n_name: ofSetHexColor_\n_returns: void_\n_returns_description: _\n_parameters: int hexColor_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets the draw color with r,g,b, passed in as a hex. Hex is a conventient\nway to write colors.\n\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofSetColor(0xffffff);  // white  (255,255,255)\n    ofSetColor(0x000000);  // black  (0,0,0);\n    ofSetColor(0x00ff00);  // green  (0,255,0);\n}\n~~~~\n\n\n\n\n\n_description: _\n\nSets the draw color with a hex value.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofSetHexColor(0xff0000);    //set te color to red\n    ofDrawRectangle(10,10,100,100);\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetLineWidth(lineWidth)\n\n<!--\n_syntax: ofSetLineWidth(lineWidth)_\n_name: ofSetLineWidth_\n_returns: void_\n_returns_description: _\n_parameters: float lineWidth_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets the width of the ofDrawLine() called after.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofSetLineWidth(1);          // set line width to 1\n    ofDrawLine(10,10,100,100);  // draw thin line\n    ofSetLineWidth(10);         // set line width to 10\n    ofDrawLine(10,100,100,10);  // draw fat line\n}\n~~~~\n\n\n\n\n\n_description: _\n\nofSetLineWidth sets the width of the ofDrawLines called after.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofSetLineWidth(1);          // set line width to 1\n    ofDrawLine(10,10,100,100);  // draw thin line\n    ofSetLineWidth(10);         // set line width to 10\n    ofDrawLine(10,100,100,10);  // draw fat line\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetMatrixMode(matrixMode)\n\n<!--\n_syntax: ofSetMatrixMode(matrixMode)_\n_name: ofSetMatrixMode_\n_returns: void_\n_returns_description: _\n_parameters: ofMatrixMode matrixMode_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetPolyMode(mode)\n\n<!--\n_syntax: ofSetPolyMode(mode)_\n_name: ofSetPolyMode_\n_returns: void_\n_returns_description: _\n_parameters: ofPolyWindingMode mode_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets the drawing behavior for overlapping parts of the same polygon.\n\nPossible modes are:\n\n    OF_POLY_WINDING_ODD\n    OF_POLY_WINDING_NONZERO\n    OF_POLY_WINDING_POSITIVE\n    OF_POLY_WINDING_NEGATIVE\n    OF_POLY_WINDING_ABS_GEQ_TWO\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetRectMode(mode)\n\n<!--\n_syntax: ofSetRectMode(mode)_\n_name: ofSetRectMode_\n_returns: void_\n_returns_description: _\n_parameters: ofRectMode mode_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets the mode for drawing rectangles and other rectangular objects, if\nthey are corner aligned, or drawn so that the x,y position is the center\nof the rectangle. possible options are `OF_RECTMODE_CENTER` and\n`OF_RECTMODE_CORNER`. This affects not only how ofDrawRectangle() objects are drawn,\nbut also ofTexture (and therefore ofImage) objects.\n\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofSetRectMode(OF_RECTMODE_CORNER); //set rectangle mode to the corner\n    ofDrawRectangle(10,10,80,80);\n    ofSetRectMode(OF_RECTMODE_CENTER); //set rectangle mode to the center\n    ofDrawRectangle(50,50,80,80);\n    // both rectangles are drawn at the same place\n}\n~~~~\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetStyle(style)\n\n<!--\n_syntax: ofSetStyle(style)_\n_name: ofSetStyle_\n_returns: void_\n_returns_description: _\n_parameters: ofStyle style_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the current style of the ofGraphics.\n\n**Parameters:**\n\nstyle contains information of the graphics style such as\nofColor, ofFill, polyMode and others.\n\n\n**See also**: See ofStyle for more details.\n\n\n\n\n\n_description: _\n\nWe use ofSetStyle to set the current style of the ofGraphics. Parameter style contains information of the graphics style such as ofColor, ofFill, polyMode and others. See ofStyle for more details.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetupGraphicDefaults()\n\n<!--\n_syntax: ofSetupGraphicDefaults()_\n_name: ofSetupGraphicDefaults_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\nResets openGL screen coordinates and values back to OF defaults.\n\n\n\n\n\n_description: _\n\nResets openGL parameters back to OF defaults.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetupScreen()\n\n<!--\n_syntax: ofSetupScreen()_\n_name: ofSetupScreen_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetupScreenOrtho(width = 0, height = 0, nearDist = -1, farDist = 1)\n\n<!--\n_syntax: ofSetupScreenOrtho(width = 0, height = 0, nearDist = -1, farDist = 1)_\n_name: ofSetupScreenOrtho_\n_returns: void_\n_returns_description: _\n_parameters: float width, float height, float nearDist, float farDist_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetupScreenPerspective(width = 0, height = 0, fov = 60, nearDist = 0, farDist = 0)\n\n<!--\n_syntax: ofSetupScreenPerspective(width = 0, height = 0, fov = 60, nearDist = 0, farDist = 0)_\n_name: ofSetupScreenPerspective_\n_returns: void_\n_returns_description: _\n_parameters: float width, float height, float fov, float nearDist, float farDist_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofToString(&)\n\n<!--\n_syntax: ofToString(&)_\n_name: ofToString_\n_returns: string_\n_returns_description: _\n_parameters: const T &_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofTranslate(&p)\n\n<!--\n_syntax: ofTranslate(&p)_\n_name: ofTranslate_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nofTranslate produces a translation by (x,y,z) vector of our coordinate system. The call of ofTranslate modifies graphics positions.\nUse ofPushMatrix and ofPopMatrix to save and restore the untranslated coordinate system.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofPoint point;\n    point.x = 100;\n    point.y = 100;\n\n    ofTranslate(point);     // move the coordinate system to position of point and make that zero.\n    ofDrawRectangle(0, 0, 10, 10);   // draw a rect at that position\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofTranslate(&p)\n\n<!--\n_syntax: ofTranslate(&p)_\n_name: ofTranslate_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofTranslate(x,y,z)\n\n<!--\n_syntax: ofTranslate(x,y,z)_\n_name: ofTranslate_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTranslate by (x,y,z) vector of our coordinate system.\nThe call of ofTranslate() modifies graphics positions.\n\nUse ofPushMatrix() and ofPopMatrix() to save and restore the untranslated\ncoordinate system.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofTranslate(100, 100, 0);   // move the coordinate system to position x 100 and y 100 and make that zero.\n    ofDrawRectangle(0, 0, 10, 10);       // draw a rect at that position\n}\n~~~~\n\n\n\n\n\n_description: _\n\nofTranslate produces a translation by (x,y,z) vector of our coordinate system. The call of ofTranslate modifies graphics positions.\nUse ofPushMatrix and ofPopMatrix to save and restore the untranslated coordinate system.\n~~~~{.cpp}\nvoid ofApp::draw(){\n    ofTranslate(100, 100, 0);   // move the coordinate system to position x 100 and y 100 and make that zero.\n    ofDrawRectangle(0, 0, 10, 10);       // draw a rect at that position\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofVertex(&p)\n\n<!--\n_syntax: ofVertex(&p)_\n_name: ofVertex_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofVertex(&p)\n\n<!--\n_syntax: ofVertex(&p)_\n_name: ofVertex_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofVertex(x, y, z)\n\n<!--\n_syntax: ofVertex(x, y, z)_\n_name: ofVertex_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofVertex(x,y)\n\n<!--\n_syntax: ofVertex(x,y)_\n_name: ofVertex_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSpecifies a single point of a shape. To be called between ofBeginShape() and\nofEndShape().\n\n\n\n\n\n_description: _\n\nSpecifies a single point of a shape. To be called between ofBeginShape() and ofEndShape().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofVertices(&polyPoints)\n\n<!--\n_syntax: ofVertices(&polyPoints)_\n_name: ofVertices_\n_returns: void_\n_returns_description: _\n_parameters: const vector< glm::vec3 > &polyPoints_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofVertices(&polyPoints)\n\n<!--\n_syntax: ofVertices(&polyPoints)_\n_name: ofVertices_\n_returns: void_\n_returns_description: _\n_parameters: const vector< glm::vec2 > &polyPoints_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofVertices(&polyPoints)\n\n<!--\n_syntax: ofVertices(&polyPoints)_\n_name: ofVertices_\n_returns: void_\n_returns_description: _\n_parameters: const vector< ofVec3f > &polyPoints_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofVertices(&polyPoints)\n\n<!--\n_syntax: ofVertices(&polyPoints)_\n_name: ofVertices_\n_returns: void_\n_returns_description: _\n_parameters: const vector< ofVec2f > &polyPoints_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofViewport(viewport)\n\n<!--\n_syntax: ofViewport(viewport)_\n_name: ofViewport_\n_returns: void_\n_returns_description: _\n_parameters: ofRectangle viewport_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSetup the drawing viewport\n\n**Parameters:**\n\nviewport A rectangle describing the size and position of the viewport.\nIf the width or height are set to 0, it will assume the size to be the window\nsize (ofGetWidth(), ofGetHeight())\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofViewport(x = 0, y = 0, width = 0, height = 0, invertY = true)\n\n<!--\n_syntax: ofViewport(x = 0, y = 0, width = 0, height = 0, invertY = true)_\n_name: ofViewport_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float width, float height, bool vflip_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSetup the drawing viewport\n\n**Parameters:**\n\nx The x position of the viewport\n\ny The y position of the viewport\n\nwidth The width of the viewport, defaults to ofGetWidth()\n\nheight The height of the viewport, defaults to ofGetHeight()\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}