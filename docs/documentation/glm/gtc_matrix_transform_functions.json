{"entry":{"name":"gtc_matrix_transform_functions","filename":"gtc_matrix_transform_functions.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/glm/gtc_matrix_transform_functions.markdown","path":"/documentation/glm/gtc_matrix_transform_functions","route":"/documentation/glm/gtc_matrix_transform_functions.markdown","dir":"../ofSite/documentation/glm","ext":"markdown","type":"page","id":299,"parent":268,"breadcrumbs":[268,1],"siblings":[],"translations":{}},"description":{},"methods":[null,{"short":"<p>Creates a frustum matrix with default handedness.</p>\n<p><strong>Parameters:</strong></p>\n<p>left</p>\n<p>right</p>\n<p>bottom</p>\n<p>top</p>\n<p>near</p>\n<p>far</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n","desc":""},{"short":"<p>Creates a left handed frustum matrix.</p>\n<p><strong>Parameters:</strong></p>\n<p>left</p>\n<p>right</p>\n<p>bottom</p>\n<p>top</p>\n<p>near</p>\n<p>far</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n","desc":""},{"short":"<p>Creates a right handed frustum matrix.</p>\n<p><strong>Parameters:</strong></p>\n<p>left</p>\n<p>right</p>\n<p>bottom</p>\n<p>top</p>\n<p>near</p>\n<p>far</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n","desc":""},{"short":"<p>Creates a matrix for a symmetric perspective-view frustum with far plane at infinite with default handedness.</p>\n<p><strong>Parameters:</strong></p>\n<p>fovy Specifies the field of view angle, in degrees, in the y direction. Expressed in radians.</p>\n<p>aspect Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).</p>\n<p>near Specifies the distance from the viewer to the near clipping plane (always positive).</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n","desc":""},{"short":"<p>Creates a matrix for a left handed, symmetric perspective-view frustum with far plane at infinite.</p>\n<p><strong>Parameters:</strong></p>\n<p>fovy Specifies the field of view angle, in degrees, in the y direction. Expressed in radians.</p>\n<p>aspect Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).</p>\n<p>near Specifies the distance from the viewer to the near clipping plane (always positive).</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n","desc":""},{"short":"<p>Creates a matrix for a right handed, symmetric perspective-view frustum with far plane at infinite.</p>\n<p><strong>Parameters:</strong></p>\n<p>fovy Specifies the field of view angle, in degrees, in the y direction. Expressed in radians.</p>\n<p>aspect Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).</p>\n<p>near Specifies the distance from the viewer to the near clipping plane (always positive).</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n","desc":""},{"syntax":"glm::lookAt(&eye = P, &center = P, &up = P)","name":"glm::lookAt","returns":"glm::mat4","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>eye<span class=\"token operator\">=</span>P<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>center<span class=\"token operator\">=</span>P<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>up<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Build a look at view matrix based on the default handedness.</p>\n<p><strong>Parameters:</strong></p>\n<p>eye Position of the camera</p>\n<p>center Position where the camera is looking at</p>\n<p>up Normalized up vector, how the camera is oriented. Typically (0, 0, 1)</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p><strong>See also</strong>: - frustum(T const &amp; left, T const &amp; right, T const &amp; bottom, T const &amp; top, T const &amp; nearVal, T const &amp; farVal) frustum(T const &amp; left, T const &amp; right, T const &amp; bottom, T const &amp; top, T const &amp; nearVal, T const &amp; farVal)</p>\n","desc":""},{"syntax":"glm::lookAtLH(&eye = P, &center = P, &up = P)","name":"glm::lookAtLH","returns":"glm::mat4","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>eye<span class=\"token operator\">=</span>P<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>center<span class=\"token operator\">=</span>P<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>up<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Build a left handed look at view matrix.</p>\n<p><strong>Parameters:</strong></p>\n<p>eye Position of the camera</p>\n<p>center Position where the camera is looking at</p>\n<p>up Normalized up vector, how the camera is oriented. Typically (0, 0, 1)</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p><strong>See also</strong>: - frustum(T const &amp; left, T const &amp; right, T const &amp; bottom, T const &amp; top, T const &amp; nearVal, T const &amp; farVal) frustum(T const &amp; left, T const &amp; right, T const &amp; bottom, T const &amp; top, T const &amp; nearVal, T const &amp; farVal)</p>\n","desc":""},{"syntax":"glm::lookAtRH(&eye = P, &center = P, &up = P)","name":"glm::lookAtRH","returns":"glm::mat4","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>eye<span class=\"token operator\">=</span>P<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>center<span class=\"token operator\">=</span>P<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>up<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Build a right handed look at view matrix.</p>\n<p><strong>Parameters:</strong></p>\n<p>eye Position of the camera</p>\n<p>center Position where the camera is looking at</p>\n<p>up Normalized up vector, how the camera is oriented. Typically (0, 0, 1)</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p><strong>See also</strong>: - frustum(T const &amp; left, T const &amp; right, T const &amp; bottom, T const &amp; top, T const &amp; nearVal, T const &amp; farVal) frustum(T const &amp; left, T const &amp; right, T const &amp; bottom, T const &amp; top, T const &amp; nearVal, T const &amp; farVal)</p>\n","desc":""},{"short":"<p>Creates a matrix for projecting two-dimensional coordinates onto the screen.</p>\n<p><strong>Parameters:</strong></p>\n<p>left</p>\n<p>right</p>\n<p>bottom</p>\n<p>top</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p><strong>See also</strong>: - glm::ortho(T const &amp; left, T const &amp; right, T const &amp; bottom, T const &amp; top, T const &amp; zNear, T const &amp; zFar)</p>\n","desc":""},{"short":"<p>Creates a matrix for an orthographic parallel viewing volume, using the default handedness.</p>\n<p><strong>Parameters:</strong></p>\n<p>left</p>\n<p>right</p>\n<p>bottom</p>\n<p>top</p>\n<p>zNear</p>\n<p>zFar</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p><strong>See also</strong>: - glm::ortho(T const &amp; left, T const &amp; right, T const &amp; bottom, T const &amp; top)</p>\n","desc":""},{"short":"<p>Creates a matrix for an orthographic parallel viewing volume, using left-handedness.</p>\n<p><strong>Parameters:</strong></p>\n<p>left</p>\n<p>right</p>\n<p>bottom</p>\n<p>top</p>\n<p>zNear</p>\n<p>zFar</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p><strong>See also</strong>: - glm::ortho(T const &amp; left, T const &amp; right, T const &amp; bottom, T const &amp; top)</p>\n","desc":""},{"short":"<p>Creates a matrix for an orthographic parallel viewing volume, using right-handedness.</p>\n<p><strong>Parameters:</strong></p>\n<p>left</p>\n<p>right</p>\n<p>bottom</p>\n<p>top</p>\n<p>zNear</p>\n<p>zFar</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p><strong>See also</strong>: - glm::ortho(T const &amp; left, T const &amp; right, T const &amp; bottom, T const &amp; top)</p>\n","desc":""},{"short":"<p>Creates a matrix for a symetric perspective-view frustum based on the default handedness.</p>\n<p><strong>Parameters:</strong></p>\n<p>fovy Specifies the field of view angle in the y direction. Expressed in radians.</p>\n<p>aspect Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).</p>\n<p>near Specifies the distance from the viewer to the near clipping plane (always positive).</p>\n<p>far Specifies the distance from the viewer to the far clipping plane (always positive).</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n","desc":""},{"short":"<p>Builds a perspective projection matrix based on a field of view and the default handedness.</p>\n<p><strong>Parameters:</strong></p>\n<p>fov Expressed in radians.</p>\n<p>width</p>\n<p>height</p>\n<p>near Specifies the distance from the viewer to the near clipping plane (always positive).</p>\n<p>far Specifies the distance from the viewer to the far clipping plane (always positive).</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n","desc":""},{"short":"<p>Builds a left handed perspective projection matrix based on a field of view.</p>\n<p><strong>Parameters:</strong></p>\n<p>fov Expressed in radians.</p>\n<p>width</p>\n<p>height</p>\n<p>near Specifies the distance from the viewer to the near clipping plane (always positive).</p>\n<p>far Specifies the distance from the viewer to the far clipping plane (always positive).</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n","desc":""},{"short":"<p>Builds a right handed perspective projection matrix based on a field of view.</p>\n<p><strong>Parameters:</strong></p>\n<p>fov Expressed in radians.</p>\n<p>width</p>\n<p>height</p>\n<p>near Specifies the distance from the viewer to the near clipping plane (always positive).</p>\n<p>far Specifies the distance from the viewer to the far clipping plane (always positive).</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n","desc":""},{"short":"<p>Creates a matrix for a left handed, symetric perspective-view frustum.</p>\n<p><strong>Parameters:</strong></p>\n<p>fovy Specifies the field of view angle, in degrees, in the y direction. Expressed in radians.</p>\n<p>aspect Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).</p>\n<p>near Specifies the distance from the viewer to the near clipping plane (always positive).</p>\n<p>far Specifies the distance from the viewer to the far clipping plane (always positive).</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n","desc":""},{"short":"<p>Creates a matrix for a right handed, symetric perspective-view frustum.</p>\n<p><strong>Parameters:</strong></p>\n<p>fovy Specifies the field of view angle, in degrees, in the y direction. Expressed in radians.</p>\n<p>aspect Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).</p>\n<p>near Specifies the distance from the viewer to the near clipping plane (always positive).</p>\n<p>far Specifies the distance from the viewer to the far clipping plane (always positive).</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n","desc":""},{"short":"<p>Define a picking region</p>\n<p><strong>Parameters:</strong></p>\n<p>center</p>\n<p>delta</p>\n<p>viewport</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Native type used for the computation. Currently supported: half (not recommanded), float or double.</p>\n<p>U Currently supported: Floating-point types and integer types.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n","desc":""},{"short":"<p>Map the specified object coordinates (obj.x, obj.y, obj.z) into window coordinates.</p>\n<p><strong>Parameters:</strong></p>\n<p>obj Specify the object coordinates.</p>\n<p>model Specifies the current modelview matrix</p>\n<p>proj Specifies the current projection matrix</p>\n<p>viewport Specifies the current viewport\n@return Return the computed window coordinates.</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Native type used for the computation. Currently supported: half (not recommanded), float or double.</p>\n<p>U Currently supported: Floating-point types and integer types.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n","desc":""},{"syntax":"glm::rotate(&m = P, angle, &axis = P)","name":"glm::rotate","returns":"glm::mat4","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat4 <span class=\"token operator\">&amp;</span>m<span class=\"token operator\">=</span>P<span class=\"token punctuation\">,</span> T angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>axis<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::scale(&m = P, &v = P)","name":"glm::scale","returns":"glm::mat4","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat4 <span class=\"token operator\">&amp;</span>m<span class=\"token operator\">=</span>P<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>v<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::translate(&m = P, &v = P)","name":"glm::translate","returns":"glm::mat4","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat4 <span class=\"token operator\">&amp;</span>m<span class=\"token operator\">=</span>P<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>v<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"short":"<p>Creates a matrix for a symmetric perspective-view frustum with far plane at infinite for graphics hardware that doesn't support depth clamping.</p>\n<p><strong>Parameters:</strong></p>\n<p>fovy Specifies the field of view angle, in degrees, in the y direction. Expressed in radians.</p>\n<p>aspect Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).</p>\n<p>near Specifies the distance from the viewer to the near clipping plane (always positive).</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n","desc":""},{"short":"<p>Creates a matrix for a symmetric perspective-view frustum with far plane at infinite for graphics hardware that doesn't support depth clamping.</p>\n<p><strong>Parameters:</strong></p>\n<p>fovy Specifies the field of view angle, in degrees, in the y direction. Expressed in radians.</p>\n<p>aspect Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).</p>\n<p>near Specifies the distance from the viewer to the near clipping plane (always positive).</p>\n<p>ep</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n","desc":""},{"short":"<p>Map the specified window coordinates (win.x, win.y, win.z) into object coordinates.</p>\n<p><strong>Parameters:</strong></p>\n<p>win Specify the window coordinates to be mapped.</p>\n<p>model Specifies the modelview matrix</p>\n<p>proj Specifies the projection matrix</p>\n<p>viewport Specifies the viewport\n@return Returns the computed object coordinates.</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Native type used for the computation. Currently supported: half (not recommanded), float or double.</p>\n<p>U Currently supported: Floating-point types and integer types.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n","desc":""},{}],"document":"<p>#functions</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>##Description</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::frustum(left, right, bottom, top, near, far)</p>\n<p>&lt;!--\n<em>syntax: glm::frustum(left, right, bottom, top, near, far)</em>\n<em>name: glm::frustum</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: T left, T right, T bottom, T top, T near, T far</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a frustum matrix with default handedness.</p>\n<p><strong>Parameters:</strong></p>\n<p>left</p>\n<p>right</p>\n<p>bottom</p>\n<p>top</p>\n<p>near</p>\n<p>far</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::frustumLH(left, right, bottom, top, near, far)</p>\n<p>&lt;!--\n<em>syntax: glm::frustumLH(left, right, bottom, top, near, far)</em>\n<em>name: glm::frustumLH</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: T left, T right, T bottom, T top, T near, T far</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a left handed frustum matrix.</p>\n<p><strong>Parameters:</strong></p>\n<p>left</p>\n<p>right</p>\n<p>bottom</p>\n<p>top</p>\n<p>near</p>\n<p>far</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::frustumRH(left, right, bottom, top, near, far)</p>\n<p>&lt;!--\n<em>syntax: glm::frustumRH(left, right, bottom, top, near, far)</em>\n<em>name: glm::frustumRH</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: T left, T right, T bottom, T top, T near, T far</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a right handed frustum matrix.</p>\n<p><strong>Parameters:</strong></p>\n<p>left</p>\n<p>right</p>\n<p>bottom</p>\n<p>top</p>\n<p>near</p>\n<p>far</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::infinitePerspective(fovy, aspect, near)</p>\n<p>&lt;!--\n<em>syntax: glm::infinitePerspective(fovy, aspect, near)</em>\n<em>name: glm::infinitePerspective</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: T fovy, T aspect, T near</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a matrix for a symmetric perspective-view frustum with far plane at infinite with default handedness.</p>\n<p><strong>Parameters:</strong></p>\n<p>fovy Specifies the field of view angle, in degrees, in the y direction. Expressed in radians.</p>\n<p>aspect Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).</p>\n<p>near Specifies the distance from the viewer to the near clipping plane (always positive).</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::infinitePerspectiveLH(fovy, aspect, near)</p>\n<p>&lt;!--\n<em>syntax: glm::infinitePerspectiveLH(fovy, aspect, near)</em>\n<em>name: glm::infinitePerspectiveLH</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: T fovy, T aspect, T near</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a matrix for a left handed, symmetric perspective-view frustum with far plane at infinite.</p>\n<p><strong>Parameters:</strong></p>\n<p>fovy Specifies the field of view angle, in degrees, in the y direction. Expressed in radians.</p>\n<p>aspect Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).</p>\n<p>near Specifies the distance from the viewer to the near clipping plane (always positive).</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::infinitePerspectiveRH(fovy, aspect, near)</p>\n<p>&lt;!--\n<em>syntax: glm::infinitePerspectiveRH(fovy, aspect, near)</em>\n<em>name: glm::infinitePerspectiveRH</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: T fovy, T aspect, T near</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a matrix for a right handed, symmetric perspective-view frustum with far plane at infinite.</p>\n<p><strong>Parameters:</strong></p>\n<p>fovy Specifies the field of view angle, in degrees, in the y direction. Expressed in radians.</p>\n<p>aspect Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).</p>\n<p>near Specifies the distance from the viewer to the near clipping plane (always positive).</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::mat4 glm::lookAt(&amp;eye = P, &amp;center = P, &amp;up = P)</p>\n<p>&lt;!--\n<em>syntax: glm::lookAt(&amp;eye = P, &amp;center = P, &amp;up = P)</em>\n<em>name: glm::lookAt</em>\n<em>returns: glm::mat4</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;eye=P, const glm::vec3 &amp;center=P, const glm::vec3 &amp;up=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Build a look at view matrix based on the default handedness.</p>\n<p><strong>Parameters:</strong></p>\n<p>eye Position of the camera</p>\n<p>center Position where the camera is looking at</p>\n<p>up Normalized up vector, how the camera is oriented. Typically (0, 0, 1)</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p><strong>See also</strong>: - frustum(T const &amp; left, T const &amp; right, T const &amp; bottom, T const &amp; top, T const &amp; nearVal, T const &amp; farVal) frustum(T const &amp; left, T const &amp; right, T const &amp; bottom, T const &amp; top, T const &amp; nearVal, T const &amp; farVal)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::mat4 glm::lookAtLH(&amp;eye = P, &amp;center = P, &amp;up = P)</p>\n<p>&lt;!--\n<em>syntax: glm::lookAtLH(&amp;eye = P, &amp;center = P, &amp;up = P)</em>\n<em>name: glm::lookAtLH</em>\n<em>returns: glm::mat4</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;eye=P, const glm::vec3 &amp;center=P, const glm::vec3 &amp;up=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Build a left handed look at view matrix.</p>\n<p><strong>Parameters:</strong></p>\n<p>eye Position of the camera</p>\n<p>center Position where the camera is looking at</p>\n<p>up Normalized up vector, how the camera is oriented. Typically (0, 0, 1)</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p><strong>See also</strong>: - frustum(T const &amp; left, T const &amp; right, T const &amp; bottom, T const &amp; top, T const &amp; nearVal, T const &amp; farVal) frustum(T const &amp; left, T const &amp; right, T const &amp; bottom, T const &amp; top, T const &amp; nearVal, T const &amp; farVal)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::mat4 glm::lookAtRH(&amp;eye = P, &amp;center = P, &amp;up = P)</p>\n<p>&lt;!--\n<em>syntax: glm::lookAtRH(&amp;eye = P, &amp;center = P, &amp;up = P)</em>\n<em>name: glm::lookAtRH</em>\n<em>returns: glm::mat4</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;eye=P, const glm::vec3 &amp;center=P, const glm::vec3 &amp;up=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Build a right handed look at view matrix.</p>\n<p><strong>Parameters:</strong></p>\n<p>eye Position of the camera</p>\n<p>center Position where the camera is looking at</p>\n<p>up Normalized up vector, how the camera is oriented. Typically (0, 0, 1)</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p><strong>See also</strong>: - frustum(T const &amp; left, T const &amp; right, T const &amp; bottom, T const &amp; top, T const &amp; nearVal, T const &amp; farVal) frustum(T const &amp; left, T const &amp; right, T const &amp; bottom, T const &amp; top, T const &amp; nearVal, T const &amp; farVal)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::ortho(left, right, bottom, top)</p>\n<p>&lt;!--\n<em>syntax: glm::ortho(left, right, bottom, top)</em>\n<em>name: glm::ortho</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: T left, T right, T bottom, T top</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a matrix for projecting two-dimensional coordinates onto the screen.</p>\n<p><strong>Parameters:</strong></p>\n<p>left</p>\n<p>right</p>\n<p>bottom</p>\n<p>top</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p><strong>See also</strong>: - glm::ortho(T const &amp; left, T const &amp; right, T const &amp; bottom, T const &amp; top, T const &amp; zNear, T const &amp; zFar)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::ortho(left, right, bottom, top, zNear, zFar)</p>\n<p>&lt;!--\n<em>syntax: glm::ortho(left, right, bottom, top, zNear, zFar)</em>\n<em>name: glm::ortho</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: T left, T right, T bottom, T top, T zNear, T zFar</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a matrix for an orthographic parallel viewing volume, using the default handedness.</p>\n<p><strong>Parameters:</strong></p>\n<p>left</p>\n<p>right</p>\n<p>bottom</p>\n<p>top</p>\n<p>zNear</p>\n<p>zFar</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p><strong>See also</strong>: - glm::ortho(T const &amp; left, T const &amp; right, T const &amp; bottom, T const &amp; top)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::orthoLH(left, right, bottom, top, zNear, zFar)</p>\n<p>&lt;!--\n<em>syntax: glm::orthoLH(left, right, bottom, top, zNear, zFar)</em>\n<em>name: glm::orthoLH</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: T left, T right, T bottom, T top, T zNear, T zFar</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a matrix for an orthographic parallel viewing volume, using left-handedness.</p>\n<p><strong>Parameters:</strong></p>\n<p>left</p>\n<p>right</p>\n<p>bottom</p>\n<p>top</p>\n<p>zNear</p>\n<p>zFar</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p><strong>See also</strong>: - glm::ortho(T const &amp; left, T const &amp; right, T const &amp; bottom, T const &amp; top)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::orthoRH(left, right, bottom, top, zNear, zFar)</p>\n<p>&lt;!--\n<em>syntax: glm::orthoRH(left, right, bottom, top, zNear, zFar)</em>\n<em>name: glm::orthoRH</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: T left, T right, T bottom, T top, T zNear, T zFar</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a matrix for an orthographic parallel viewing volume, using right-handedness.</p>\n<p><strong>Parameters:</strong></p>\n<p>left</p>\n<p>right</p>\n<p>bottom</p>\n<p>top</p>\n<p>zNear</p>\n<p>zFar</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p><strong>See also</strong>: - glm::ortho(T const &amp; left, T const &amp; right, T const &amp; bottom, T const &amp; top)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::perspective(fovy, aspect, near, far)</p>\n<p>&lt;!--\n<em>syntax: glm::perspective(fovy, aspect, near, far)</em>\n<em>name: glm::perspective</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: T fovy, T aspect, T near, T far</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a matrix for a symetric perspective-view frustum based on the default handedness.</p>\n<p><strong>Parameters:</strong></p>\n<p>fovy Specifies the field of view angle in the y direction. Expressed in radians.</p>\n<p>aspect Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).</p>\n<p>near Specifies the distance from the viewer to the near clipping plane (always positive).</p>\n<p>far Specifies the distance from the viewer to the far clipping plane (always positive).</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::perspectiveFov(fov, width, height, near, far)</p>\n<p>&lt;!--\n<em>syntax: glm::perspectiveFov(fov, width, height, near, far)</em>\n<em>name: glm::perspectiveFov</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: T fov, T width, T height, T near, T far</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Builds a perspective projection matrix based on a field of view and the default handedness.</p>\n<p><strong>Parameters:</strong></p>\n<p>fov Expressed in radians.</p>\n<p>width</p>\n<p>height</p>\n<p>near Specifies the distance from the viewer to the near clipping plane (always positive).</p>\n<p>far Specifies the distance from the viewer to the far clipping plane (always positive).</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::perspectiveFovLH(fov, width, height, near, far)</p>\n<p>&lt;!--\n<em>syntax: glm::perspectiveFovLH(fov, width, height, near, far)</em>\n<em>name: glm::perspectiveFovLH</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: T fov, T width, T height, T near, T far</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Builds a left handed perspective projection matrix based on a field of view.</p>\n<p><strong>Parameters:</strong></p>\n<p>fov Expressed in radians.</p>\n<p>width</p>\n<p>height</p>\n<p>near Specifies the distance from the viewer to the near clipping plane (always positive).</p>\n<p>far Specifies the distance from the viewer to the far clipping plane (always positive).</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::perspectiveFovRH(fov, width, height, near, far)</p>\n<p>&lt;!--\n<em>syntax: glm::perspectiveFovRH(fov, width, height, near, far)</em>\n<em>name: glm::perspectiveFovRH</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: T fov, T width, T height, T near, T far</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Builds a right handed perspective projection matrix based on a field of view.</p>\n<p><strong>Parameters:</strong></p>\n<p>fov Expressed in radians.</p>\n<p>width</p>\n<p>height</p>\n<p>near Specifies the distance from the viewer to the near clipping plane (always positive).</p>\n<p>far Specifies the distance from the viewer to the far clipping plane (always positive).</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::perspectiveLH(fovy, aspect, near, far)</p>\n<p>&lt;!--\n<em>syntax: glm::perspectiveLH(fovy, aspect, near, far)</em>\n<em>name: glm::perspectiveLH</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: T fovy, T aspect, T near, T far</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a matrix for a left handed, symetric perspective-view frustum.</p>\n<p><strong>Parameters:</strong></p>\n<p>fovy Specifies the field of view angle, in degrees, in the y direction. Expressed in radians.</p>\n<p>aspect Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).</p>\n<p>near Specifies the distance from the viewer to the near clipping plane (always positive).</p>\n<p>far Specifies the distance from the viewer to the far clipping plane (always positive).</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::perspectiveRH(fovy, aspect, near, far)</p>\n<p>&lt;!--\n<em>syntax: glm::perspectiveRH(fovy, aspect, near, far)</em>\n<em>name: glm::perspectiveRH</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: T fovy, T aspect, T near, T far</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a matrix for a right handed, symetric perspective-view frustum.</p>\n<p><strong>Parameters:</strong></p>\n<p>fovy Specifies the field of view angle, in degrees, in the y direction. Expressed in radians.</p>\n<p>aspect Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).</p>\n<p>near Specifies the distance from the viewer to the near clipping plane (always positive).</p>\n<p>far Specifies the distance from the viewer to the far clipping plane (always positive).</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::mat4 glm::pickMatrix(&amp;center = P, &amp;delta = P, U, &amp;viewport = P)</p>\n<p>&lt;!--\n<em>syntax: glm::pickMatrix(&amp;center = P, &amp;delta = P, U, &amp;viewport = P)</em>\n<em>name: glm::pickMatrix</em>\n<em>returns: glm::mat4</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;center=P, const glm::vec2 &amp;delta=P, const tvec4&lt; U, P &gt; &amp;viewport=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Define a picking region</p>\n<p><strong>Parameters:</strong></p>\n<p>center</p>\n<p>delta</p>\n<p>viewport</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Native type used for the computation. Currently supported: half (not recommanded), float or double.</p>\n<p>U Currently supported: Floating-point types and integer types.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 glm::project(&amp;obj = P, &amp;model = P, &amp;proj = P, U, &amp;viewport = P)</p>\n<p>&lt;!--\n<em>syntax: glm::project(&amp;obj = P, &amp;model = P, &amp;proj = P, U, &amp;viewport = P)</em>\n<em>name: glm::project</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;obj=P, const glm::mat4 &amp;model=P, const glm::mat4 &amp;proj=P, const tvec4&lt; U, P &gt; &amp;viewport=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Map the specified object coordinates (obj.x, obj.y, obj.z) into window coordinates.</p>\n<p><strong>Parameters:</strong></p>\n<p>obj Specify the object coordinates.</p>\n<p>model Specifies the current modelview matrix</p>\n<p>proj Specifies the current projection matrix</p>\n<p>viewport Specifies the current viewport\n@return Return the computed window coordinates.</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Native type used for the computation. Currently supported: half (not recommanded), float or double.</p>\n<p>U Currently supported: Floating-point types and integer types.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::mat4 glm::rotate(&amp;m = P, angle, &amp;axis = P)</p>\n<p>&lt;!--\n<em>syntax: glm::rotate(&amp;m = P, angle, &amp;axis = P)</em>\n<em>name: glm::rotate</em>\n<em>returns: glm::mat4</em>\n_returns_description: _\n<em>parameters: const glm::mat4 &amp;m=P, T angle, const glm::vec3 &amp;axis=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Builds a rotation 4 * 4 matrix created from an axis vector and an angle.</p>\n<p><strong>Parameters:</strong></p>\n<p>m Input matrix multiplied by this rotation matrix.</p>\n<p>angle Rotation angle expressed in radians.</p>\n<p>axis Rotation axis, recommended to be normalized.</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Supported: half, float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p><strong>See also</strong>: - rotate(tmat4x4&lt;T, P&gt; const &amp; m, T angle, T x, T y, T z)</p>\n<p><strong>See also</strong>: - rotate(T angle, tvec3&lt;T, P&gt; const &amp; v)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::mat4 glm::scale(&amp;m = P, &amp;v = P)</p>\n<p>&lt;!--\n<em>syntax: glm::scale(&amp;m = P, &amp;v = P)</em>\n<em>name: glm::scale</em>\n<em>returns: glm::mat4</em>\n_returns_description: _\n<em>parameters: const glm::mat4 &amp;m=P, const glm::vec3 &amp;v=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Builds a scale 4 * 4 matrix created from 3 scalars.</p>\n<p><strong>Parameters:</strong></p>\n<p>m Input matrix multiplied by this scale matrix.</p>\n<p>v Ratio of scaling for each axis.</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p><strong>See also</strong>: - scale(tmat4x4&lt;T, P&gt; const &amp; m, T x, T y, T z)</p>\n<p><strong>See also</strong>: - scale(tvec3&lt;T, P&gt; const &amp; v)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::mat4 glm::translate(&amp;m = P, &amp;v = P)</p>\n<p>&lt;!--\n<em>syntax: glm::translate(&amp;m = P, &amp;v = P)</em>\n<em>name: glm::translate</em>\n<em>returns: glm::mat4</em>\n_returns_description: _\n<em>parameters: const glm::mat4 &amp;m=P, const glm::vec3 &amp;v=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Builds a translation 4 * 4 matrix created from a vector of 3 components.</p>\n<p><strong>Parameters:</strong></p>\n<p>m Input matrix multiplied by this translation matrix.</p>\n<p>v Coordinates of a translation vector.</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<pre><code>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> &amp;lt;glm/glm.hpp&amp;gt;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> &amp;lt;glm/gtc/matrix_transform.hpp&amp;gt;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nglm<span class=\"token operator\">::</span>mat4 m <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span><span class=\"token function\">mat4</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// m[0][0] == 1.0f, m[0][1] == 0.0f, m[0][2] == 0.0f, m[0][3] == 0.0f</span>\n<span class=\"token comment\" spellcheck=\"true\">// m[1][0] == 0.0f, m[1][1] == 1.0f, m[1][2] == 0.0f, m[1][3] == 0.0f</span>\n<span class=\"token comment\" spellcheck=\"true\">// m[2][0] == 0.0f, m[2][1] == 0.0f, m[2][2] == 1.0f, m[2][3] == 0.0f</span>\n<span class=\"token comment\" spellcheck=\"true\">// m[3][0] == 1.0f, m[3][1] == 1.0f, m[3][2] == 1.0f, m[3][3] == 1.0f</span>\n\n</code></pre>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p><strong>See also</strong>: - translate(tmat4x4&lt;T, P&gt; const &amp; m, T x, T y, T z)</p>\n<p><strong>See also</strong>: - translate(tvec3&lt;T, P&gt; const &amp; v)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::tweakedInfinitePerspective(fovy, aspect, near)</p>\n<p>&lt;!--\n<em>syntax: glm::tweakedInfinitePerspective(fovy, aspect, near)</em>\n<em>name: glm::tweakedInfinitePerspective</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: T fovy, T aspect, T near</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a matrix for a symmetric perspective-view frustum with far plane at infinite for graphics hardware that doesn't support depth clamping.</p>\n<p><strong>Parameters:</strong></p>\n<p>fovy Specifies the field of view angle, in degrees, in the y direction. Expressed in radians.</p>\n<p>aspect Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).</p>\n<p>near Specifies the distance from the viewer to the near clipping plane (always positive).</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###tmat4x4&lt; T, defaultp &gt; glm::tweakedInfinitePerspective(fovy, aspect, near, ep)</p>\n<p>&lt;!--\n<em>syntax: glm::tweakedInfinitePerspective(fovy, aspect, near, ep)</em>\n<em>name: glm::tweakedInfinitePerspective</em>\n<em>returns: tmat4x4&lt; T, defaultp &gt;</em>\n_returns_description: _\n<em>parameters: T fovy, T aspect, T near, T ep</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Creates a matrix for a symmetric perspective-view frustum with far plane at infinite for graphics hardware that doesn't support depth clamping.</p>\n<p><strong>Parameters:</strong></p>\n<p>fovy Specifies the field of view angle, in degrees, in the y direction. Expressed in radians.</p>\n<p>aspect Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).</p>\n<p>near Specifies the distance from the viewer to the near clipping plane (always positive).</p>\n<p>ep</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 glm::unProject(&amp;win = P, &amp;model = P, &amp;proj = P, U, &amp;viewport = P)</p>\n<p>&lt;!--\n<em>syntax: glm::unProject(&amp;win = P, &amp;model = P, &amp;proj = P, U, &amp;viewport = P)</em>\n<em>name: glm::unProject</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;win=P, const glm::mat4 &amp;model=P, const glm::mat4 &amp;proj=P, const tvec4&lt; U, P &gt; &amp;viewport=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Map the specified window coordinates (win.x, win.y, win.z) into object coordinates.</p>\n<p><strong>Parameters:</strong></p>\n<p>win Specify the window coordinates to be mapped.</p>\n<p>model Specifies the modelview matrix</p>\n<p>proj Specifies the projection matrix</p>\n<p>viewport Specifies the viewport\n@return Returns the computed object coordinates.</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Native type used for the computation. Currently supported: half (not recommanded), float or double.</p>\n<p>U Currently supported: Floating-point types and integer types.</p>\n<p><strong>See also</strong>: gtc_matrix_transform</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#functions\n\n\n<!--\n_visible: True_\n_advanced: False_\n-->\n\n##Description\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::frustum(left, right, bottom, top, near, far)\n\n<!--\n_syntax: glm::frustum(left, right, bottom, top, near, far)_\n_name: glm::frustum_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: T left, T right, T bottom, T top, T near, T far_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a frustum matrix with default handedness.\n\n\n**Parameters:**\n\nleft\n\nright\n\nbottom\n\ntop\n\nnear\n\nfar\n\n**Type parameters:**\n\nT Value type used to build the matrix. Currently supported: half (not recommanded), float or double.\n\n**See also**: gtc_matrix_transform\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::frustumLH(left, right, bottom, top, near, far)\n\n<!--\n_syntax: glm::frustumLH(left, right, bottom, top, near, far)_\n_name: glm::frustumLH_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: T left, T right, T bottom, T top, T near, T far_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a left handed frustum matrix.\n\n\n**Parameters:**\n\nleft\n\nright\n\nbottom\n\ntop\n\nnear\n\nfar\n\n**Type parameters:**\n\nT Value type used to build the matrix. Currently supported: half (not recommanded), float or double.\n\n**See also**: gtc_matrix_transform\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::frustumRH(left, right, bottom, top, near, far)\n\n<!--\n_syntax: glm::frustumRH(left, right, bottom, top, near, far)_\n_name: glm::frustumRH_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: T left, T right, T bottom, T top, T near, T far_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a right handed frustum matrix.\n\n\n**Parameters:**\n\nleft\n\nright\n\nbottom\n\ntop\n\nnear\n\nfar\n\n**Type parameters:**\n\nT Value type used to build the matrix. Currently supported: half (not recommanded), float or double.\n\n**See also**: gtc_matrix_transform\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::infinitePerspective(fovy, aspect, near)\n\n<!--\n_syntax: glm::infinitePerspective(fovy, aspect, near)_\n_name: glm::infinitePerspective_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: T fovy, T aspect, T near_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a matrix for a symmetric perspective-view frustum with far plane at infinite with default handedness.\n\n\n**Parameters:**\n\nfovy Specifies the field of view angle, in degrees, in the y direction. Expressed in radians.\n\naspect Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).\n\nnear Specifies the distance from the viewer to the near clipping plane (always positive).\n\n**Type parameters:**\n\nT Value type used to build the matrix. Currently supported: half (not recommanded), float or double.\n\n**See also**: gtc_matrix_transform\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::infinitePerspectiveLH(fovy, aspect, near)\n\n<!--\n_syntax: glm::infinitePerspectiveLH(fovy, aspect, near)_\n_name: glm::infinitePerspectiveLH_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: T fovy, T aspect, T near_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a matrix for a left handed, symmetric perspective-view frustum with far plane at infinite.\n\n\n**Parameters:**\n\nfovy Specifies the field of view angle, in degrees, in the y direction. Expressed in radians.\n\naspect Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).\n\nnear Specifies the distance from the viewer to the near clipping plane (always positive).\n\n**Type parameters:**\n\nT Value type used to build the matrix. Currently supported: half (not recommanded), float or double.\n\n**See also**: gtc_matrix_transform\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::infinitePerspectiveRH(fovy, aspect, near)\n\n<!--\n_syntax: glm::infinitePerspectiveRH(fovy, aspect, near)_\n_name: glm::infinitePerspectiveRH_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: T fovy, T aspect, T near_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a matrix for a right handed, symmetric perspective-view frustum with far plane at infinite.\n\n\n**Parameters:**\n\nfovy Specifies the field of view angle, in degrees, in the y direction. Expressed in radians.\n\naspect Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).\n\nnear Specifies the distance from the viewer to the near clipping plane (always positive).\n\n**Type parameters:**\n\nT Value type used to build the matrix. Currently supported: half (not recommanded), float or double.\n\n**See also**: gtc_matrix_transform\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat4 glm::lookAt(&eye = P, &center = P, &up = P)\n\n<!--\n_syntax: glm::lookAt(&eye = P, &center = P, &up = P)_\n_name: glm::lookAt_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: const glm::vec3 &eye=P, const glm::vec3 &center=P, const glm::vec3 &up=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nBuild a look at view matrix based on the default handedness.\n\n\n**Parameters:**\n\neye Position of the camera\n\ncenter Position where the camera is looking at\n\nup Normalized up vector, how the camera is oriented. Typically (0, 0, 1)\n\n**See also**: gtc_matrix_transform\n\n**See also**: - frustum(T const & left, T const & right, T const & bottom, T const & top, T const & nearVal, T const & farVal) frustum(T const & left, T const & right, T const & bottom, T const & top, T const & nearVal, T const & farVal)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat4 glm::lookAtLH(&eye = P, &center = P, &up = P)\n\n<!--\n_syntax: glm::lookAtLH(&eye = P, &center = P, &up = P)_\n_name: glm::lookAtLH_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: const glm::vec3 &eye=P, const glm::vec3 &center=P, const glm::vec3 &up=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nBuild a left handed look at view matrix.\n\n\n**Parameters:**\n\neye Position of the camera\n\ncenter Position where the camera is looking at\n\nup Normalized up vector, how the camera is oriented. Typically (0, 0, 1)\n\n**See also**: gtc_matrix_transform\n\n**See also**: - frustum(T const & left, T const & right, T const & bottom, T const & top, T const & nearVal, T const & farVal) frustum(T const & left, T const & right, T const & bottom, T const & top, T const & nearVal, T const & farVal)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat4 glm::lookAtRH(&eye = P, &center = P, &up = P)\n\n<!--\n_syntax: glm::lookAtRH(&eye = P, &center = P, &up = P)_\n_name: glm::lookAtRH_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: const glm::vec3 &eye=P, const glm::vec3 &center=P, const glm::vec3 &up=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nBuild a right handed look at view matrix.\n\n\n**Parameters:**\n\neye Position of the camera\n\ncenter Position where the camera is looking at\n\nup Normalized up vector, how the camera is oriented. Typically (0, 0, 1)\n\n**See also**: gtc_matrix_transform\n\n**See also**: - frustum(T const & left, T const & right, T const & bottom, T const & top, T const & nearVal, T const & farVal) frustum(T const & left, T const & right, T const & bottom, T const & top, T const & nearVal, T const & farVal)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::ortho(left, right, bottom, top)\n\n<!--\n_syntax: glm::ortho(left, right, bottom, top)_\n_name: glm::ortho_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: T left, T right, T bottom, T top_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a matrix for projecting two-dimensional coordinates onto the screen.\n\n\n**Parameters:**\n\nleft\n\nright\n\nbottom\n\ntop\n\n**Type parameters:**\n\nT Value type used to build the matrix. Currently supported: half (not recommanded), float or double.\n\n**See also**: gtc_matrix_transform\n\n**See also**: - glm::ortho(T const & left, T const & right, T const & bottom, T const & top, T const & zNear, T const & zFar)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::ortho(left, right, bottom, top, zNear, zFar)\n\n<!--\n_syntax: glm::ortho(left, right, bottom, top, zNear, zFar)_\n_name: glm::ortho_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: T left, T right, T bottom, T top, T zNear, T zFar_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a matrix for an orthographic parallel viewing volume, using the default handedness.\n\n\n**Parameters:**\n\nleft\n\nright\n\nbottom\n\ntop\n\nzNear\n\nzFar\n\n**Type parameters:**\n\nT Value type used to build the matrix. Currently supported: half (not recommanded), float or double.\n\n**See also**: gtc_matrix_transform\n\n**See also**: - glm::ortho(T const & left, T const & right, T const & bottom, T const & top)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::orthoLH(left, right, bottom, top, zNear, zFar)\n\n<!--\n_syntax: glm::orthoLH(left, right, bottom, top, zNear, zFar)_\n_name: glm::orthoLH_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: T left, T right, T bottom, T top, T zNear, T zFar_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a matrix for an orthographic parallel viewing volume, using left-handedness.\n\n\n**Parameters:**\n\nleft\n\nright\n\nbottom\n\ntop\n\nzNear\n\nzFar\n\n**Type parameters:**\n\nT Value type used to build the matrix. Currently supported: half (not recommanded), float or double.\n\n**See also**: gtc_matrix_transform\n\n**See also**: - glm::ortho(T const & left, T const & right, T const & bottom, T const & top)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::orthoRH(left, right, bottom, top, zNear, zFar)\n\n<!--\n_syntax: glm::orthoRH(left, right, bottom, top, zNear, zFar)_\n_name: glm::orthoRH_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: T left, T right, T bottom, T top, T zNear, T zFar_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a matrix for an orthographic parallel viewing volume, using right-handedness.\n\n\n**Parameters:**\n\nleft\n\nright\n\nbottom\n\ntop\n\nzNear\n\nzFar\n\n**Type parameters:**\n\nT Value type used to build the matrix. Currently supported: half (not recommanded), float or double.\n\n**See also**: gtc_matrix_transform\n\n**See also**: - glm::ortho(T const & left, T const & right, T const & bottom, T const & top)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::perspective(fovy, aspect, near, far)\n\n<!--\n_syntax: glm::perspective(fovy, aspect, near, far)_\n_name: glm::perspective_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: T fovy, T aspect, T near, T far_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a matrix for a symetric perspective-view frustum based on the default handedness.\n\n\n**Parameters:**\n\nfovy Specifies the field of view angle in the y direction. Expressed in radians.\n\naspect Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).\n\nnear Specifies the distance from the viewer to the near clipping plane (always positive).\n\nfar Specifies the distance from the viewer to the far clipping plane (always positive).\n\n**Type parameters:**\n\nT Value type used to build the matrix. Currently supported: half (not recommanded), float or double.\n\n**See also**: gtc_matrix_transform\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::perspectiveFov(fov, width, height, near, far)\n\n<!--\n_syntax: glm::perspectiveFov(fov, width, height, near, far)_\n_name: glm::perspectiveFov_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: T fov, T width, T height, T near, T far_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nBuilds a perspective projection matrix based on a field of view and the default handedness.\n\n\n**Parameters:**\n\nfov Expressed in radians.\n\nwidth\n\nheight\n\nnear Specifies the distance from the viewer to the near clipping plane (always positive).\n\nfar Specifies the distance from the viewer to the far clipping plane (always positive).\n\n**Type parameters:**\n\nT Value type used to build the matrix. Currently supported: half (not recommanded), float or double.\n\n**See also**: gtc_matrix_transform\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::perspectiveFovLH(fov, width, height, near, far)\n\n<!--\n_syntax: glm::perspectiveFovLH(fov, width, height, near, far)_\n_name: glm::perspectiveFovLH_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: T fov, T width, T height, T near, T far_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nBuilds a left handed perspective projection matrix based on a field of view.\n\n\n**Parameters:**\n\nfov Expressed in radians.\n\nwidth\n\nheight\n\nnear Specifies the distance from the viewer to the near clipping plane (always positive).\n\nfar Specifies the distance from the viewer to the far clipping plane (always positive).\n\n**Type parameters:**\n\nT Value type used to build the matrix. Currently supported: half (not recommanded), float or double.\n\n**See also**: gtc_matrix_transform\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::perspectiveFovRH(fov, width, height, near, far)\n\n<!--\n_syntax: glm::perspectiveFovRH(fov, width, height, near, far)_\n_name: glm::perspectiveFovRH_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: T fov, T width, T height, T near, T far_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nBuilds a right handed perspective projection matrix based on a field of view.\n\n\n**Parameters:**\n\nfov Expressed in radians.\n\nwidth\n\nheight\n\nnear Specifies the distance from the viewer to the near clipping plane (always positive).\n\nfar Specifies the distance from the viewer to the far clipping plane (always positive).\n\n**Type parameters:**\n\nT Value type used to build the matrix. Currently supported: half (not recommanded), float or double.\n\n**See also**: gtc_matrix_transform\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::perspectiveLH(fovy, aspect, near, far)\n\n<!--\n_syntax: glm::perspectiveLH(fovy, aspect, near, far)_\n_name: glm::perspectiveLH_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: T fovy, T aspect, T near, T far_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a matrix for a left handed, symetric perspective-view frustum.\n\n\n**Parameters:**\n\nfovy Specifies the field of view angle, in degrees, in the y direction. Expressed in radians.\n\naspect Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).\n\nnear Specifies the distance from the viewer to the near clipping plane (always positive).\n\nfar Specifies the distance from the viewer to the far clipping plane (always positive).\n\n**Type parameters:**\n\nT Value type used to build the matrix. Currently supported: half (not recommanded), float or double.\n\n**See also**: gtc_matrix_transform\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::perspectiveRH(fovy, aspect, near, far)\n\n<!--\n_syntax: glm::perspectiveRH(fovy, aspect, near, far)_\n_name: glm::perspectiveRH_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: T fovy, T aspect, T near, T far_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a matrix for a right handed, symetric perspective-view frustum.\n\n\n**Parameters:**\n\nfovy Specifies the field of view angle, in degrees, in the y direction. Expressed in radians.\n\naspect Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).\n\nnear Specifies the distance from the viewer to the near clipping plane (always positive).\n\nfar Specifies the distance from the viewer to the far clipping plane (always positive).\n\n**Type parameters:**\n\nT Value type used to build the matrix. Currently supported: half (not recommanded), float or double.\n\n**See also**: gtc_matrix_transform\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat4 glm::pickMatrix(&center = P, &delta = P, U, &viewport = P)\n\n<!--\n_syntax: glm::pickMatrix(&center = P, &delta = P, U, &viewport = P)_\n_name: glm::pickMatrix_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: const glm::vec2 &center=P, const glm::vec2 &delta=P, const tvec4< U, P > &viewport=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDefine a picking region\n\n\n**Parameters:**\n\ncenter\n\ndelta\n\nviewport\n\n**Type parameters:**\n\nT Native type used for the computation. Currently supported: half (not recommanded), float or double.\n\nU Currently supported: Floating-point types and integer types.\n\n**See also**: gtc_matrix_transform\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 glm::project(&obj = P, &model = P, &proj = P, U, &viewport = P)\n\n<!--\n_syntax: glm::project(&obj = P, &model = P, &proj = P, U, &viewport = P)_\n_name: glm::project_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: const glm::vec3 &obj=P, const glm::mat4 &model=P, const glm::mat4 &proj=P, const tvec4< U, P > &viewport=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMap the specified object coordinates (obj.x, obj.y, obj.z) into window coordinates.\n\n\n**Parameters:**\n\nobj Specify the object coordinates.\n\nmodel Specifies the current modelview matrix\n\nproj Specifies the current projection matrix\n\nviewport Specifies the current viewport\n@return Return the computed window coordinates.\n\n**Type parameters:**\n\nT Native type used for the computation. Currently supported: half (not recommanded), float or double.\n\nU Currently supported: Floating-point types and integer types.\n\n**See also**: gtc_matrix_transform\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat4 glm::rotate(&m = P, angle, &axis = P)\n\n<!--\n_syntax: glm::rotate(&m = P, angle, &axis = P)_\n_name: glm::rotate_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: const glm::mat4 &m=P, T angle, const glm::vec3 &axis=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nBuilds a rotation 4 * 4 matrix created from an axis vector and an angle.\n\n\n**Parameters:**\n\nm Input matrix multiplied by this rotation matrix.\n\nangle Rotation angle expressed in radians.\n\naxis Rotation axis, recommended to be normalized.\n\n**Type parameters:**\n\nT Value type used to build the matrix. Supported: half, float or double.\n\n**See also**: gtc_matrix_transform\n\n**See also**: - rotate(tmat4x4<T, P> const & m, T angle, T x, T y, T z)\n\n**See also**: - rotate(T angle, tvec3<T, P> const & v)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat4 glm::scale(&m = P, &v = P)\n\n<!--\n_syntax: glm::scale(&m = P, &v = P)_\n_name: glm::scale_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: const glm::mat4 &m=P, const glm::vec3 &v=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nBuilds a scale 4 * 4 matrix created from 3 scalars.\n\n\n**Parameters:**\n\nm Input matrix multiplied by this scale matrix.\n\nv Ratio of scaling for each axis.\n\n**Type parameters:**\n\nT Value type used to build the matrix. Currently supported: half (not recommanded), float or double.\n\n**See also**: gtc_matrix_transform\n\n**See also**: - scale(tmat4x4<T, P> const & m, T x, T y, T z)\n\n**See also**: - scale(tvec3<T, P> const & v)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat4 glm::translate(&m = P, &v = P)\n\n<!--\n_syntax: glm::translate(&m = P, &v = P)_\n_name: glm::translate_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: const glm::mat4 &m=P, const glm::vec3 &v=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nBuilds a translation 4 * 4 matrix created from a vector of 3 components.\n\n\n**Parameters:**\n\nm Input matrix multiplied by this translation matrix.\n\nv Coordinates of a translation vector.\n\n**Type parameters:**\n\nT Value type used to build the matrix. Currently supported: half (not recommanded), float or double.\n```cpp\n\n#include <glm/glm.hpp>\n#include <glm/gtc/matrix_transform.hpp>\n...\nglm::mat4 m = glm::translate(glm::mat4(1.0f), glm::vec3(1.0f));\n// m[0][0] == 1.0f, m[0][1] == 0.0f, m[0][2] == 0.0f, m[0][3] == 0.0f\n// m[1][0] == 0.0f, m[1][1] == 1.0f, m[1][2] == 0.0f, m[1][3] == 0.0f\n// m[2][0] == 0.0f, m[2][1] == 0.0f, m[2][2] == 1.0f, m[2][3] == 0.0f\n// m[3][0] == 1.0f, m[3][1] == 1.0f, m[3][2] == 1.0f, m[3][3] == 1.0f\n\n```\n\n**See also**: gtc_matrix_transform\n\n**See also**: - translate(tmat4x4<T, P> const & m, T x, T y, T z)\n\n**See also**: - translate(tvec3<T, P> const & v)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::tweakedInfinitePerspective(fovy, aspect, near)\n\n<!--\n_syntax: glm::tweakedInfinitePerspective(fovy, aspect, near)_\n_name: glm::tweakedInfinitePerspective_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: T fovy, T aspect, T near_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a matrix for a symmetric perspective-view frustum with far plane at infinite for graphics hardware that doesn't support depth clamping.\n\n\n**Parameters:**\n\nfovy Specifies the field of view angle, in degrees, in the y direction. Expressed in radians.\n\naspect Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).\n\nnear Specifies the distance from the viewer to the near clipping plane (always positive).\n\n**Type parameters:**\n\nT Value type used to build the matrix. Currently supported: half (not recommanded), float or double.\n\n**See also**: gtc_matrix_transform\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tmat4x4< T, defaultp > glm::tweakedInfinitePerspective(fovy, aspect, near, ep)\n\n<!--\n_syntax: glm::tweakedInfinitePerspective(fovy, aspect, near, ep)_\n_name: glm::tweakedInfinitePerspective_\n_returns: tmat4x4< T, defaultp >_\n_returns_description: _\n_parameters: T fovy, T aspect, T near, T ep_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a matrix for a symmetric perspective-view frustum with far plane at infinite for graphics hardware that doesn't support depth clamping.\n\n\n**Parameters:**\n\nfovy Specifies the field of view angle, in degrees, in the y direction. Expressed in radians.\n\naspect Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).\n\nnear Specifies the distance from the viewer to the near clipping plane (always positive).\n\nep\n\n**Type parameters:**\n\nT Value type used to build the matrix. Currently supported: half (not recommanded), float or double.\n\n**See also**: gtc_matrix_transform\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 glm::unProject(&win = P, &model = P, &proj = P, U, &viewport = P)\n\n<!--\n_syntax: glm::unProject(&win = P, &model = P, &proj = P, U, &viewport = P)_\n_name: glm::unProject_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: const glm::vec3 &win=P, const glm::mat4 &model=P, const glm::mat4 &proj=P, const tvec4< U, P > &viewport=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMap the specified window coordinates (win.x, win.y, win.z) into object coordinates.\n\n\n**Parameters:**\n\nwin Specify the window coordinates to be mapped.\n\nmodel Specifies the modelview matrix\n\nproj Specifies the projection matrix\n\nviewport Specifies the viewport\n@return Returns the computed object coordinates.\n\n**Type parameters:**\n\nT Native type used for the computation. Currently supported: half (not recommanded), float or double.\n\nU Currently supported: Floating-point types and integer types.\n\n**See also**: gtc_matrix_transform\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}