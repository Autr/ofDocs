{"entry":{"name":"gtx_rotate_normalized_axis_functions","filename":"gtx_rotate_normalized_axis_functions.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/glm/gtx_rotate_normalized_axis_functions.markdown","path":"/documentation/glm/gtx_rotate_normalized_axis_functions","route":"/documentation/glm/gtx_rotate_normalized_axis_functions.markdown","dir":"../ofSite/documentation/glm","ext":"markdown","type":"page","id":344,"parent":268,"breadcrumbs":[268,1],"siblings":[],"translations":{}},"description":{},"methods":[null,{"syntax":"glm::rotateNormalizedAxis(&m = P, &angle, &axis = P)","name":"glm::rotateNormalizedAxis","returns":"glm::mat4","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat4 <span class=\"token operator\">&amp;</span>m<span class=\"token operator\">=</span>P<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>axis<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::rotateNormalizedAxis(&q = P, &angle, &axis = P)","name":"glm::rotateNormalizedAxis","returns":"glm::quat","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>q<span class=\"token operator\">=</span>P<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>axis<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotates a quaternion from a vector of 3 components normalized axis and an angle.</p>\n<p><strong>Parameters:</strong></p>\n<p>q Source orientation</p>\n<p>angle Angle expressed in radians if GLM_FORCE_RADIANS is define or degrees otherwise.</p>\n<p>axis Normalized axis of the rotation, must be normalized.</p>\n<p><strong>See also</strong>: gtx_rotate_normalized_axis</p>\n","desc":""},{}],"document":"<p>#functions</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>##Description</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::mat4 glm::rotateNormalizedAxis(&amp;m = P, &amp;angle, &amp;axis = P)</p>\n<p>&lt;!--\n<em>syntax: glm::rotateNormalizedAxis(&amp;m = P, &amp;angle, &amp;axis = P)</em>\n<em>name: glm::rotateNormalizedAxis</em>\n<em>returns: glm::mat4</em>\n_returns_description: _\n<em>parameters: const glm::mat4 &amp;m=P, const T &amp;angle, const glm::vec3 &amp;axis=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Builds a rotation 4 * 4 matrix created from a normalized axis and an angle.</p>\n<p><strong>Parameters:</strong></p>\n<p>m Input matrix multiplied by this rotation matrix.</p>\n<p>angle Rotation angle expressed in radians if GLM_FORCE_RADIANS is define or degrees otherwise.</p>\n<p>axis Rotation axis, must be normalized.</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the matrix. Currently supported: half (not recommanded), float or double.</p>\n<p><strong>See also</strong>: gtx_rotate_normalized_axis</p>\n<p><strong>See also</strong>: - rotate(T angle, T x, T y, T z)</p>\n<p><strong>See also</strong>: - rotate(tmat4x4&lt;T, P&gt; const &amp; m, T angle, T x, T y, T z)</p>\n<p><strong>See also</strong>: - rotate(T angle, tvec3&lt;T, P&gt; const &amp; v)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::quat glm::rotateNormalizedAxis(&amp;q = P, &amp;angle, &amp;axis = P)</p>\n<p>&lt;!--\n<em>syntax: glm::rotateNormalizedAxis(&amp;q = P, &amp;angle, &amp;axis = P)</em>\n<em>name: glm::rotateNormalizedAxis</em>\n<em>returns: glm::quat</em>\n_returns_description: _\n<em>parameters: const glm::quat &amp;q=P, const T &amp;angle, const glm::vec3 &amp;axis=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotates a quaternion from a vector of 3 components normalized axis and an angle.</p>\n<p><strong>Parameters:</strong></p>\n<p>q Source orientation</p>\n<p>angle Angle expressed in radians if GLM_FORCE_RADIANS is define or degrees otherwise.</p>\n<p>axis Normalized axis of the rotation, must be normalized.</p>\n<p><strong>See also</strong>: gtx_rotate_normalized_axis</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#functions\n\n\n<!--\n_visible: True_\n_advanced: False_\n-->\n\n##Description\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat4 glm::rotateNormalizedAxis(&m = P, &angle, &axis = P)\n\n<!--\n_syntax: glm::rotateNormalizedAxis(&m = P, &angle, &axis = P)_\n_name: glm::rotateNormalizedAxis_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: const glm::mat4 &m=P, const T &angle, const glm::vec3 &axis=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nBuilds a rotation 4 * 4 matrix created from a normalized axis and an angle.\n\n\n**Parameters:**\n\nm Input matrix multiplied by this rotation matrix.\n\nangle Rotation angle expressed in radians if GLM_FORCE_RADIANS is define or degrees otherwise.\n\naxis Rotation axis, must be normalized.\n\n**Type parameters:**\n\nT Value type used to build the matrix. Currently supported: half (not recommanded), float or double.\n\n\n**See also**: gtx_rotate_normalized_axis\n\n**See also**: - rotate(T angle, T x, T y, T z)\n\n**See also**: - rotate(tmat4x4<T, P> const & m, T angle, T x, T y, T z)\n\n**See also**: - rotate(T angle, tvec3<T, P> const & v)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::quat glm::rotateNormalizedAxis(&q = P, &angle, &axis = P)\n\n<!--\n_syntax: glm::rotateNormalizedAxis(&q = P, &angle, &axis = P)_\n_name: glm::rotateNormalizedAxis_\n_returns: glm::quat_\n_returns_description: _\n_parameters: const glm::quat &q=P, const T &angle, const glm::vec3 &axis=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotates a quaternion from a vector of 3 components normalized axis and an angle.\n\n\n**Parameters:**\n\nq Source orientation\n\nangle Angle expressed in radians if GLM_FORCE_RADIANS is define or degrees otherwise.\n\naxis Normalized axis of the rotation, must be normalized.\n\n\n**See also**: gtx_rotate_normalized_axis\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}