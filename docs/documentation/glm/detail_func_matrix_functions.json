{"entry":{"name":"detail_func_matrix_functions","filename":"detail_func_matrix_functions.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/glm/detail_func_matrix_functions.markdown","path":"/documentation/glm/detail_func_matrix_functions","route":"/documentation/glm/detail_func_matrix_functions.markdown","dir":"../ofSite/documentation/glm","ext":"markdown","type":"page","id":273,"parent":268,"breadcrumbs":[268,1],"siblings":[],"translations":{}},"description":{},"methods":[null,{"desc":""},{"desc":""},{"desc":""},{"desc":""},{}],"document":"<p>#functions</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>##Description</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###T glm::determinant(T, &amp;m = P)</p>\n<p>&lt;!--\n<em>syntax: glm::determinant(T, &amp;m = P)</em>\n<em>name: glm::determinant</em>\n<em>returns: T</em>\n_returns_description: _\n<em>parameters: const matType&lt; T, P &gt; &amp;m=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return the determinant of a squared matrix.</p>\n<p><strong>Type parameters:</strong></p>\n<p>valType Floating-point scalar types.</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/determinant.xml&quot;&gt;GLSL determinant man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.6 Matrix Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###matType&lt; T, P &gt; glm::inverse(T, &amp;m = P)</p>\n<p>&lt;!--\n<em>syntax: glm::inverse(T, &amp;m = P)</em>\n<em>name: glm::inverse</em>\n<em>returns: matType&lt; T, P &gt;</em>\n_returns_description: _\n<em>parameters: const matType&lt; T, P &gt; &amp;m=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return the inverse of a squared matrix.</p>\n<p><strong>Type parameters:</strong></p>\n<p>valType Floating-point scalar types.</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/inverse.xml&quot;&gt;GLSL inverse man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.6 Matrix Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###matType&lt; T, P &gt; glm::matrixCompMult(T, &amp;x = P, T, &amp;y = P)</p>\n<p>&lt;!--\n<em>syntax: glm::matrixCompMult(T, &amp;x = P, T, &amp;y = P)</em>\n<em>name: glm::matrixCompMult</em>\n<em>returns: matType&lt; T, P &gt;</em>\n_returns_description: _\n<em>parameters: const matType&lt; T, P &gt; &amp;x=P, const matType&lt; T, P &gt; &amp;y=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Multiply matrix x by matrix y component-wise, i.e.,\nresult[i][j] is the scalar product of x[i][j] and y[i][j].</p>\n<p><strong>Type parameters:</strong></p>\n<p>matType Floating-point matrix types.</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/matrixCompMult.xml&quot;&gt;GLSL matrixCompMult man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.6 Matrix Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###typename detail::outerProduct_trait&lt; T, P, vecTypeA, vecTypeB &gt;::type glm::outerProduct(T, &amp;c = P, T, &amp;r = P)</p>\n<p>&lt;!--\n<em>syntax: glm::outerProduct(T, &amp;c = P, T, &amp;r = P)</em>\n<em>name: glm::outerProduct</em>\n<em>returns: typename detail::outerProduct_trait&lt; T, P, vecTypeA, vecTypeB &gt;::type</em>\n_returns_description: _\n<em>parameters: const vecTypeA&lt; T, P &gt; &amp;c=P, const vecTypeB&lt; T, P &gt; &amp;r=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Treats the first parameter c as a column vector\nand the second parameter r as a row vector\nand does a linear algebraic matrix multiply c * r.</p>\n<p><strong>Type parameters:</strong></p>\n<p>matType Floating-point matrix types.</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/outerProduct.xml&quot;&gt;GLSL outerProduct man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.6 Matrix Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#functions\n\n\n<!--\n_visible: True_\n_advanced: False_\n-->\n\n##Description\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T glm::determinant(T, &m = P)\n\n<!--\n_syntax: glm::determinant(T, &m = P)_\n_name: glm::determinant_\n_returns: T_\n_returns_description: _\n_parameters: const matType< T, P > &m=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn the determinant of a squared matrix.\n\n\n**Type parameters:**\n\nvalType Floating-point scalar types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/determinant.xml\">GLSL determinant man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.6 Matrix Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###matType< T, P > glm::inverse(T, &m = P)\n\n<!--\n_syntax: glm::inverse(T, &m = P)_\n_name: glm::inverse_\n_returns: matType< T, P >_\n_returns_description: _\n_parameters: const matType< T, P > &m=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn the inverse of a squared matrix.\n\n\n**Type parameters:**\n\nvalType Floating-point scalar types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/inverse.xml\">GLSL inverse man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.6 Matrix Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###matType< T, P > glm::matrixCompMult(T, &x = P, T, &y = P)\n\n<!--\n_syntax: glm::matrixCompMult(T, &x = P, T, &y = P)_\n_name: glm::matrixCompMult_\n_returns: matType< T, P >_\n_returns_description: _\n_parameters: const matType< T, P > &x=P, const matType< T, P > &y=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMultiply matrix x by matrix y component-wise, i.e.,\nresult[i][j] is the scalar product of x[i][j] and y[i][j].\n\n\n**Type parameters:**\n\nmatType Floating-point matrix types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/matrixCompMult.xml\">GLSL matrixCompMult man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.6 Matrix Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###typename detail::outerProduct_trait< T, P, vecTypeA, vecTypeB >::type glm::outerProduct(T, &c = P, T, &r = P)\n\n<!--\n_syntax: glm::outerProduct(T, &c = P, T, &r = P)_\n_name: glm::outerProduct_\n_returns: typename detail::outerProduct_trait< T, P, vecTypeA, vecTypeB >::type_\n_returns_description: _\n_parameters: const vecTypeA< T, P > &c=P, const vecTypeB< T, P > &r=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTreats the first parameter c as a column vector\nand the second parameter r as a row vector\nand does a linear algebraic matrix multiply c * r.\n\n\n**Type parameters:**\n\nmatType Floating-point matrix types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/outerProduct.xml\">GLSL outerProduct man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.6 Matrix Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}