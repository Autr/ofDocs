{"entry":{"name":"ofColor_","filename":"ofColor_.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/types/ofColor_.markdown","path":"/documentation/types/ofColor_","route":"/documentation/types/ofColor_.markdown","dir":"../ofSite/documentation/types","ext":"markdown","type":"page","id":468,"parent":439,"breadcrumbs":[439,1],"siblings":[],"translations":{}},"description":{"short":"<p>ofColor represents a color in openFrameworks.</p>\n<p>The default ofColor uses unsigned char values [0,255], but use\nofFloatColor for floating point values [0.0,1.0], or ofShortColor for\nunsigned short ints [0,[65,535]]. ofColor can be represented by an RGB\nvalue, an HSB value or a hex value.</p>\n<p>\\tparam PixelType The data type used to represent a single pixel value.</p>\n","full":"<p>ofColor represents a color in openFrameworks.\nColors are usually defined by specifying a red, green, blue and optionally\nan alpha value (r,g,b,[a]), or a hue, saturation, brightness and optionally\nan alpha value (h,s,b,[a]) or hexadecimal value with an optional alpha\nvalue (0x________, a).</p>\n<p>For example:</p>\n<pre><code><span class=\"token comment\" spellcheck=\"true\">// set red, component by component</span>\nofColor red<span class=\"token punctuation\">;</span>\nred<span class=\"token punctuation\">.</span>r<span class=\"token operator\">=</span><span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\nred<span class=\"token punctuation\">.</span>g<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nred<span class=\"token punctuation\">.</span>b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// draw color is now red</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// shorter notation is also possible</span>\nofColor <span class=\"token function\">green</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span>green<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// draw color is now green</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// or even shorter</span>\n<span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span> <span class=\"token function\">ofColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// draw color is now a random blue</span>\n</code></pre>\n<p>ofColor also enables a lot of extra functionality like using HSB instead of\ncolor spectrums, lerping or linearly interpolating between colors, and\ninverting colors, among other things.</p>\n<p>ofColor is templated, which means that it has several different ways it can\nbe created. These are probably best to leave as they are because there's\nalready a few kinds typedefed for you. The default ofColor uses unsigned\nchar values (0 to 255), but you can make an ofFloatColor if you want to work\nwith floating point numbers between 0 and 1, or ofShortColor if you want to\nwork with integers between 0 and 65,535.</p>\n<table>\n<thead>\n<tr>\n<th>Typedef</th>\n<th>PixelType</th>\n<th>Bit Depth</th>\n<th>Min. Value</th>\n<th>Max. Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ofColor</code></td>\n<td><code><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span></code></td>\n<td>8</td>\n<td>0</td>\n<td>255</td>\n</tr>\n<tr>\n<td><code>ofShortColor</code></td>\n<td><code><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span></code></td>\n<td>16</td>\n<td>0</td>\n<td>65535</td>\n</tr>\n<tr>\n<td><code>ofFloatColor</code></td>\n<td><code><span class=\"token keyword\">float</span></code></td>\n<td><em>varies</em></td>\n<td>0.0</td>\n<td>1.0</td>\n</tr>\n</tbody>\n</table>\n<h4>HSB</h4>\n<p>You're probably familiar with RGB colors already, but HSB is a big part of\nofColor. It uses a <em>hue</em> value (for the standard ofColor the range for this\nvalue is between 0 and 255) to determine what the hue (the 'color' in the\nsense of a color in the rainbow) will be:</p>\n<p><img src=\"hsb.png\" alt=\"HSB\"></p>\n<p>Approximate hues for some common colors:</p>\n<ul>\n<li>Red: 0 (wrapped round from 255)</li>\n<li>Orange: 25</li>\n<li>Yellow: 42</li>\n<li>Green: 85</li>\n<li>Blue: 170</li>\n<li>Purple: 205</li>\n<li>Red: 255 (wraps round to 0)</li>\n</ul>\n<p>Once you've selected a hue, you can use the <em>saturation</em> and <em>brightness</em>\nvalues to further refine the color. The saturation determines how much of\nthe hue versus white is present and brightness determines how much hue\nversus black is present:</p>\n<p><img src=\"hsb-cone.jpg\" alt=\"SB\"></p>\n<p>In other words, saturation refers to the intensity of the color: high\nsaturation means intense color, low saturation means washed out or black and\nwhite. Brightness refers to how light or dark the color is: high brightness\nmeans a bright color, low brightness means a dark color. If the brightness\nis 0 the resulting color will be black, regardless of the values of hue or\nsaturation.</p>\n<p>\\tparam PixelType The data type used to represent a single pixel value.</p>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"True","extends":null},"methods":[{"short":"<p>Clamp values between 0 and the limit().</p>\n<p>Clamps the value of each component, R, G, B and A to a maximum of\nlimit() and a minimum of zero.</p>\n<p><strong>Returns</strong>: A reference to itself.</p>\n","desc":"<p>This clamps the values of your color in case they're too high or low for their\ntypes, in case you go negative or too use values that are too high, like\nanything &lt; 0 or</p>\n"},{"short":"<p>}</p>\n","desc":""},{"short":"<p>Create an ofColor_ from a hexadecimal value.</p>\n<p><strong>Parameters:</strong></p>\n<p>hexColor A color in hexadecimal form.</p>\n<p>alpha The alpha value of the color.</p>\n","desc":"<p>Convenience method to construct an ofColor from a 24 bit hex value.\nIn some cases, it is convenient to represent colors using a hexadecimal\nnumber. In this case, red, green, and blue values are packed into a\nsingle integer.</p>\n<p>The alpha channel is specified separately and will default to the\nPixelType's maximum, resulting in an opaque color.</p>\n<pre><code>    ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span><span class=\"token function\">fromHex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFFFF00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// c is yellow.</span>\n</code></pre>\n"},{"short":"<p>Create an ofColor_ from an HSB representation.</p>\n<p><strong>Parameters:</strong></p>\n<p>hue The hue of the color.</p>\n<p>saturation The saturation of the color.</p>\n<p>brightness The brightness of the color.</p>\n<p>alpha The alpha value of the color.</p>\n","desc":"<p>Convenience method to construct an ofColor from Hsb values.</p>\n<p>While ofColor_ represents color using R, G, B, and A components, other\nrepresentations are available.  This method allows the user to construct\nan ofColor_ from a Hue (H), Saturation (S), and Brightness (B) and an\noptional alpha value.</p>\n<p>The alpha channel is specified separately and will default to the\nPixelType's maximum, resulting in an opaque color.</p>\n<p>For more information about HSB, see:\nhttp://en.wikipedia.org/wiki/HSV_color_space</p>\n<pre><code>    ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span><span class=\"token function\">fromHsb</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c is bright saturated cyan.</span>\n</code></pre>\n"},{"syntax":"getBrightness()","name":"getBrightness","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Calculate the brightness of of the R, G and B components.</p>\n<p>Brightness is simply the maximum of the three color components. This\nmethod of calculating brightness is used by Photoshop (HSB) and\nProcessing (HSB).  Note that brightness is also called &quot;Value&quot;.</p>\n<p><strong>Returns</strong>: the brightness in the range 0 - limit().</p>\n","desc":"<p>Return the brightness component of the HSB representation of this color.\nRefer the <a href=\"#HSB\">discussion of HSB</a> above.</p>\n<p>Brightness is simply the maximum of the three color components. This\nmethod of calculating brightness is used by Photoshop (HSB) and\nProcessing (HSB).  Note that brightness is also called &quot;Value&quot;.</p>\n"},{"short":"<p>A non-destructive version of clamp().</p>\n<p><strong>See also</strong>: clamp()</p>\n<p><strong>Returns</strong>: A copy of this color, clamped.</p>\n","desc":"<p>Returns a clamped version of this color, without modifying the original.\nSee <a href=\"#clamp\">clamp</a> for more info.</p>\n<pre><code>    ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// r component is above the limit() of 255.</span>\n    ofColor g <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getClamped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// c.r is still 300.</span>\n    <span class=\"token comment\" spellcheck=\"true\">//g has the RGB value (255, 200, 0)</span>\n</code></pre>\n"},{"syntax":"getHex()","name":"getHex","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get a 24-bit hexadecimal representation of the RGB color.</p>\n<p><strong>Warning</strong>: This method does <em>not</em> encode the alpha component.</p>\n<p><strong>Returns</strong>: An integer representing an RGB color.</p>\n","desc":"<p>Return a 24 bit hexidecimal number representing this color.</p>\n<pre><code>ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// yellow</span>\n<span class=\"token keyword\">int</span> hex <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getHex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// hex is 0xffff00 (or 16776960 in decimal)</span>\n</code></pre>\n<p>Usually when we look at these colors in print they're hex, so don't be\nsurprised if they don't look familiar when you print them as decimal.</p>\n"},{"syntax":"getHsb(&hue, &saturation, &brightness)","name":"getHsb","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>hue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>saturation<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>brightness","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Extract the hue, saturation and brightness (HSB) from this color.</p>\n<p><strong>Parameters:</strong></p>\n<p>hue A reference to the hue to fill. Will be in the range of\n0 - limit().</p>\n<p>saturation A reference to the saturation to fill. Will be in the\nrange of 0 - limit().</p>\n<p>brightness A reference to the brightness to fill. Will be in the\nrange of 0 - limit().</p>\n","desc":"<p>Return all three components of the HSB representation of this color\nat the same time.</p>\n<pre><code>    ofColor <span class=\"token function\">red</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> hue <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// The hue value to set.</span>\n    <span class=\"token keyword\">float</span> saturation <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// The saturation value to set.</span>\n    <span class=\"token keyword\">float</span> brightness <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// The brightness value to set.</span>\n    red<span class=\"token punctuation\">.</span><span class=\"token function\">getHsb</span><span class=\"token punctuation\">(</span>hue<span class=\"token punctuation\">,</span> saturation<span class=\"token punctuation\">,</span> brightness<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Hue is now 0 (for red), saturation is 255, brightness is 255.</span>\n</code></pre>\n<p>Refer the <a href=\"#HSB\">discussion of HSB</a> above.</p>\n"},{"syntax":"getHue()","name":"getHue","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the Hue of this color.</p>\n<p>The color is converted from the default RGB to an HSB color space and\nthe resulting Hue value is returned.  The resulting hue value will\nalways be returned in the range 0 - limit().</p>\n<p><strong>Returns</strong>: The Hue value in the range 0 - limit().</p>\n","desc":"<p>Return the hue component of the HSB representation of this color.\nRefer the <a href=\"#HSB\">discussion of HSB</a> above.</p>\n<p>The color is converted from the default RGB to an HSB color space and\nthe resulting hue value is returned.  The resulting hue value will\nalways be returned in the range 0 - limit().</p>\n"},{"syntax":"getHueAngle()","name":"getHueAngle","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the Hue angle of this color.</p>\n<p>The color is converted from the default RGB to an HSB color space and\nthe resulting Hue angle is returned.  The resulting hue value will\nalways be returned in degrees in the range 0 - 360.</p>\n<p><strong>Returns</strong>: The Hue angle in the range 0 - 360.</p>\n","desc":"<p>The color is converted from the default RGB to an HSB color space and\nthe resulting hue angle is returned.  The resulting hue value will\nalways be returned in degrees in the range 0 - 360.</p>\n<p><img src=\"hue_circle.jpg\" alt=\"hc\"></p>\n"},{"short":"<p>A non-destructive version of invert().</p>\n<p><strong>See also</strong>: invert()</p>\n<p><strong>Returns</strong>: A copy of this color, inverted.</p>\n","desc":"<p>Returns the color that is the inverted version (complement) to this color,\nwithout modifying the original. See <a href=\"#invert\">invert</a> for more info.</p>\n<pre><code>    ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor i <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getInverted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c still has RGB value of (255,200,0)</span>\n    <span class=\"token comment\" spellcheck=\"true\">// i has the RGB value (0, 55, 255)</span>\n</code></pre>\n"},{"short":"<p>A non-destructive version of lerp().</p>\n<p><strong>Parameters:</strong></p>\n<p>target The target color corresponding to an amount of 1.0.</p>\n<p>amount The amount (between 0.0 and 1.0) to interpolate.\nA value of 0.0 will yield an unchanged color.  A value of 1.0\nwill yield the target color.</p>\n<p><strong>Returns</strong>: A copy of this color, lerped.</p>\n<p><strong>See also</strong>: lerp()</p>\n","desc":"<p>Returns this color lerped towards target by amount, without modifying the original.\nSee <a href=\"#lerp\">lerp</a> for more info.</p>\n<pre><code>    ofColor r <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>red<span class=\"token punctuation\">;</span>\n    ofColor b <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>blue<span class=\"token punctuation\">;</span>\n    ofColor p <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getLerped</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// p is purple, r is still red and b is still blue</span>\n</code></pre>\n"},{"syntax":"getLightness()","name":"getLightness","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Calculate the lightness of the R, G and B components.</p>\n<p>Lightness is simply the average of the three color components. This\nmethod of calculating lightness is used by the Lab and HSL color spaces.</p>\n<p><strong>Returns</strong>: the lightness in the range 0 - limit().</p>\n","desc":"<p>Return a float that is the average of the three color components. This is used by\nthe Lab and HSL color spaces.</p>\n<pre><code>    ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> l <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getLightness</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// l is 100.f</span>\n</code></pre>\n"},{"short":"<p>A non-destructive version of normalize().</p>\n<p><strong>See also</strong>: normalize()</p>\n<p><strong>Returns</strong>: A copy of this color, normalized.</p>\n","desc":"<p>Returns the normalized version of this color, without modifying the original.\nSee <a href=\"#normalize\">normalize</a> for more info.</p>\n<pre><code>    ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor n <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Returns c / (200/255)</span>\n    <span class=\"token comment\" spellcheck=\"true\">// n now has RGB value of (153,255,0)</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c still has the RGB value of (120, 200, 0)</span>\n</code></pre>\n"},{"syntax":"getSaturation()","name":"getSaturation","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the Saturation of this color.</p>\n<p>The color is converted from the default RGB to an HSB color space and\nthe resulting saturation is returned.  The resulting saturation value\nwill always be returned in the range 0 - limit().</p>\n<p><strong>Returns</strong>: The saturation in the range 0 - limit().</p>\n","desc":"<p>Return the saturation component of the HSB representation of this color.\nThe resulting saturation value will always be returned in the range 0 - limit().\nRefer the <a href=\"#HSB\">discussion of HSB</a> above.</p>\n"},{"short":"<p>Invert the R, G and B components.</p>\n<p>Performs an inversion operation on the color by replacing the red, green\nand blue components with their original value subtracted from the\nlimit().</p>\n<p><strong>Returns</strong>: A reference to itself.</p>\n","desc":"<p>Performs an inversion operation on the color by replacing the red, green\nand blue components with their original value subtracted from the\nlimit().  For example, an ofColor value of:</p>\n<pre><code>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> maxValue <span class=\"token operator\">=</span> <span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// would return 255</span>\n\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> r <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> g <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> rNew <span class=\"token operator\">=</span> maxValue <span class=\"token operator\">-</span> r<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 255 - 255 = 0</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> gNew <span class=\"token operator\">=</span> maxValue <span class=\"token operator\">-</span> g<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 255 - 255 = 0</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> bNew <span class=\"token operator\">=</span> maxValue <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 255 - 0   = 255;</span>\n</code></pre>\n<p>Example usage:</p>\n<pre><code>    ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Blue.</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">invert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c is now (255,255,0), or yellow, which is blue's complement.</span>\n</code></pre>\n"},{"short":"<p>A linear interpolation between all components of two colors.</p>\n<p>The linear interpolation is carried out\non <em>all</em> components, R, G, B <em>and</em> A.</p>\n<p><strong>Parameters:</strong></p>\n<p>target The target color corresponding to an amount of 1.0.</p>\n<p>amount The amount (between 0.0 and 1.0) to interpolate.\nA value of 0.0 will yield an unchanged color.  A value of 1.0\nwill yield the target color.</p>\n<p><strong>Returns</strong>: A reference to itself.</p>\n","desc":"<p>The lerp method performs a linear interpolation (or <a href=\"http://en.wikipedia.org/wiki/Lerp_(computing)\" title=\"Lerp\">lerp</a>) between\nthis color and a target color.  In contrast to many of the mathematical\nfunctions found in ofColor_, The linear interpolation is carried out\non <em>all</em> components, R, G, B <em>and</em> A.  The amount is typically a value\nbetween 0.0 and 1.0, with 0.0 yielding an unchanged color and 1.0\nyielding a color identical to the target color.</p>\n<p>This function allows to blend between colors. For instance, if you have\nred and you want halfway between red and blue, you can do this:</p>\n<pre><code>ofColor r <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>red<span class=\"token punctuation\">;</span>\nofColor b <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>blue<span class=\"token punctuation\">;</span>\nb<span class=\"token punctuation\">.</span><span class=\"token function\">lerp</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now purple!</span>\n</code></pre>\n"},{"syntax":"limit()","name":"limit","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p>Get the maximum value of a color component.</p>\n<p><strong>Returns</strong>: The value associated with a fully saturated color component.</p>\n","desc":"<p>Based on the type of PixelType (whether its a ofColor, ofFloatColor or\nofShortColor), the maximum value different. For a ofFloatColor the\nmaximum is <code><span class=\"token number\">1.0</span></code>, but for a ofColor it's <code><span class=\"token number\">255</span></code>, and for ofShortColor\nreturns <code><span class=\"token number\">65</span><span class=\"token punctuation\">,</span><span class=\"token number\">536</span></code>.</p>\n<p>Use this function to get this maximum number.</p>\n"},{"short":"<p>Normalize the R, G and B components.</p>\n<p>Performs a normalization operation on the red, green and blue components\nby scaling them by brightness of the original color divided by the\nlimit().  The brightness is calculated by finding the maximum of\noriginal red, green and blue components.\nIn short: ofColor / (brightness / limit())</p>\n<p><strong>Returns</strong>: A reference to itself.</p>\n","desc":"<p>Divide all color components by brightness. This has the effect of conforming\nthe color to the outer surface of the hue/saturation/brightness spherical\ncolor space, by forcing a unit radius (brightness).</p>\n<p>This operation is equivalent to the following:</p>\n<pre><code>    ofColor <span class=\"token function\">myColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">float</span> brightness <span class=\"token operator\">=</span> myColor<span class=\"token punctuation\">.</span><span class=\"token function\">getBrightness</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Returns 127.</span>\n    <span class=\"token keyword\">float</span> scaleFactor <span class=\"token operator\">=</span> brightness <span class=\"token operator\">/</span> <span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// Returns 127 / 255.</span>\n\n    ofColor myNormalizedColor <span class=\"token operator\">=</span> myColor <span class=\"token operator\">/</span> scaleFactor<span class=\"token punctuation\">;</span>\n                                <span class=\"token comment\" spellcheck=\"true\">// Divides the red, green and blue</span>\n                                <span class=\"token comment\" spellcheck=\"true\">// components by the scale factor.</span>\n</code></pre>\n<p>The following:</p>\n<pre><code>\tofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">122</span><span class=\"token punctuation\">,</span> <span class=\"token number\">122</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>will create this:</p>\n<p><img src=\"../types/ofNormalize.png\" alt=\"ofNorm\"></p>\n"},{"short":"<p>Construct an ofColor_ from an existing ofColor_.</p>\n<p><strong>Warning</strong>: Depending on the PixelType and SrcType used, color precision\nmay be lost when converting a higher precision to a lower\nprecision representation.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The ofColor_ to copy.</p>\n","desc":"<p>Creates a color by copying another color with a different type (for example when copying from a standard ofColor using unsigned chars to an ofFloatColor):</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// orange</span>\n    ofFloatColor <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> g <span class=\"token operator\">=</span> c2<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// g is now 0.5</span>\n</code></pre>\n<pre><code>    ofColor <span class=\"token function\">colorA</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor <span class=\"token function\">colorB</span><span class=\"token punctuation\">(</span>colorA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// colorB is now equal to colorA.</span>\n</code></pre>\n"},{"short":"<p>Construct an ofColor_ from an existing ofColor_.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The ofColor_ to copy.</p>\n<p>alpha The new alpha value to replace the alpha value in color.</p>\n","desc":"<p>Creates a color by copying another color, overriding the existing alpha value with the given alpha value.</p>\n<pre><code>ofColor <span class=\"token function\">mom</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// red</span>\nofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now c is red with 50% alpha</span>\n</code></pre>\n"},{"syntax":"ofColor_()","name":"ofColor_","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Construct a default white color.</p>\n","desc":"<p>Creates a color and sets it to white.</p>\n<pre><code>    ofColor c<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Draw color is now white.</span>\n</code></pre>\n"},{"syntax":"ofColor_(gray, alpha)","name":"ofColor_","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">float</span> gray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> alpha","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Construct a grayscale ofColor_ by specifying a single number.</p>\n<p><strong>Parameters:</strong></p>\n<p>gray A grayscale value.</p>\n<p>alpha The opacity of the color.</p>\n","desc":"<p>Creates a gray color from a single value to describe a grayscale color.\nThis single value will be taken by each of the R, G and B components.\nAlpha value defaults to completely opaque.</p>\n<pre><code>    ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// c is now gray.</span>\n</code></pre>\n<pre><code>    ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">122</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now c is 50% alpha gray, ooh, dismal</span>\n</code></pre>\n"},{"syntax":"ofColor_(red, green, blue, alpha)","name":"ofColor_","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">float</span> red<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> green<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> blue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> alpha","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Construct an ofColor_ by using channel values.</p>\n<p><strong>Parameters:</strong></p>\n<p>red The red component.</p>\n<p>green The green component.</p>\n<p>blue The blue component.</p>\n<p>alpha The alpha component.</p>\n","desc":"<p>Creates a color using RGB values and optional alpha value. The default alpha\nvalue makes a completely opaque color:</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Red with 100% alpha.</span>\n    ofColor <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Red with 50% alpha.</span>\n</code></pre>\n"},{"short":"<p>Test two colors for inequality.</p>\n<p><strong>Returns</strong>: true iff any of the R, G, B or A components are not equal.</p>\n","desc":"<p>Returns true iff any of the R, G, B or A components are not equal.</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Red with 100% alpha.</span>\n    ofColor <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Red with 50% alpha.</span>\n    <span class=\"token keyword\">bool</span> not_equal <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">!=</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// not_equal is true</span>\n</code></pre>\n"},{"short":"<p>Clamped multiplication operator.</p>\n<p>Multiply two colors by multiplying and clamping their R, G and B\ncomponents.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The color to multiply.</p>\n<p><strong>Returns</strong>: The new clamped color.</p>\n","desc":"<p>Creates a new color by taking two colors and multiplying and clamping their R,\nG and B components. The alpha component is ignored.</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor c3 <span class=\"token operator\">=</span> c1 <span class=\"token operator\">*</span> c2<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c3 has the RGB value of (255,30,40)</span>\n</code></pre>\n"},{"short":"<p>Clamped scalar multiplication operator.</p>\n<p>Multiply the R, G and B components by a scaler and clamp each.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The value to multiply.</p>\n<p><strong>Returns</strong>: The new clamped color.</p>\n","desc":"<p>Multiplys R, G and B components by a scaler and clamps each to be</p>\n"},{"short":"<p>Clamped multiplication operator.</p>\n<p>Multiply two colors by multiplying and clamping their R, G and B\ncomponents.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The color to multiply.</p>\n<p><strong>Returns</strong>: A reference to itself, the new clamped color.</p>\n","desc":"<p>Set a color to the cumulative product of that color and another color's R, G\nand B components, then clamps each to be</p>\n"},{"short":"<p>Clamped scalar multiplication operator.</p>\n<p>Multiply the R, G and B components by a scaler and clamp each.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The scaler value.</p>\n<p><strong>Returns</strong>: A reference to itself, the new clamped color.</p>\n","desc":"<p>Set a color to the cumulative product of that color and a scaler,\nthen clamps each to be</p>\n"},{"short":"<p>Clamped addition operator.</p>\n<p>Add two colors by summing and clamping their R, G and B components.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The color to add.</p>\n<p><strong>Returns</strong>: The new clamped color.</p>\n","desc":"<p>Creates a color that is a sum of two color's R, G and B components,\nthen clamps each to be</p>\n"},{"short":"<p>Clamped addition operator.</p>\n<p>Add a value to each of the R, G and B components and clamp each.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The value to add.</p>\n<p><strong>Returns</strong>: The new clamped color.</p>\n","desc":"<p>Creates a color that is a sum of one color's R, G and B components and a value,\nthen clamps each to be</p>\n"},{"short":"<p>Clamped addition operator.</p>\n<p>Add two colors by summing and clamping their R, G and B components.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The color to add.</p>\n<p><strong>Returns</strong>: A reference to itself, the new clamped color.</p>\n","desc":"<p>Set a color to the cumulative sum of that color and another color's R, G\nand B components, then clamps each to be</p>\n"},{"short":"<p>Clamped addition operator.</p>\n<p>Add a value to each of the R, G and B components and clamp each.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The value to add.</p>\n<p><strong>Returns</strong>: A reference to itself, the new clamped color.</p>\n","desc":"<p>Set a color to the cumulative sum of that color's R, G and B components\nand a value, then clamps each to be</p>\n"},{"short":"<p>Clamped subtraction operator.</p>\n<p>Subtract two colors by subtracting and clamping their R, G and B\ncomponents.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The color to subtract.</p>\n<p><strong>Returns</strong>: The new clamped color.</p>\n","desc":"<p>Creates a color that is the difference between two color's R, G and B components,\nthen clamps each to be</p>\n"},{"short":"<p>Clamped subtraction operator.</p>\n<p>Subtract a value from each of the R, G and B components and clamp each.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The value to subtract.</p>\n<p><strong>Returns</strong>: The new clamped color.</p>\n","desc":"<p>Creates a color that is the difference between one color's R, G and B components\nand a value, then clamps each to be</p>\n"},{"short":"<p>Clamped subtraction operator.</p>\n<p>Add two colors by subtracting and clamping their R, G and B components.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The color to subtract.</p>\n<p><strong>Returns</strong>: A reference to itself, the new clamped color.</p>\n","desc":"<p>sets a color to the difference between that color's R, G and B\ncomponents and another color's R, G and B components, then\nclamps each to be</p>\n"},{"short":"<p>Clamped subtraction operator.</p>\n<p>Subtract a value to each of the R, G and B components and clamp each.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The value to subtract.</p>\n<p><strong>Returns</strong>: A reference to itself, the new clamped color.</p>\n","desc":"<p>Sets a color's R, G and B components to the difference between each component\nand a value, then clamps each to be</p>\n"},{"short":"<p>Clamped division operator.</p>\n<p>Divide two colors by treating the passed color components as divisors.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The divisor color.</p>\n<p><strong>Returns</strong>: The new clamped color.</p>\n","desc":"<p>Creates a new color by taking two colors and dividing and clamping their R,\nG and B components. The alpha component is ignored.</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor c3 <span class=\"token operator\">=</span> c1 <span class=\"token operator\">/</span> c2<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c3 has the RGB value of (10,10,10)</span>\n</code></pre>\n"},{"short":"<p>Clamped scalar division operator.</p>\n<p>Divide each of the R, G and B components by a scalar and clamp each.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The divisor value.</p>\n<p><strong>Returns</strong>: The new clamped color.</p>\n","desc":"<p>Creates a new color that is the quotient of a color's R, G and B\ncomponents and a divisor value and clamps each to be</p>\n"},{"short":"<p>Clamped division operator.</p>\n<p>Divide two colors by treating the passed color components as divisors.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The divisor color.</p>\n<p><strong>Returns</strong>: A reference to itself, the new clamped color.</p>\n","desc":"<p>Set a color to the quotient of that color's and another color's R, G\nand B components, then clamps each to be</p>\n"},{"short":"<p>Clamped scalar division operator.</p>\n<p>Divide each of the R, G and B components by a scalar and clamp each.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The divisor value.</p>\n<p><strong>Returns</strong>: A reference to itself, the new clamped color.</p>\n","desc":"<p>Set a color to the cumulative product of that color and a scaler,\nthen clamps each to be</p>\n"},{"short":"<p>Assign a color using an existing color.</p>\n<p>R, G, B and A components are set to the the values of the assigned\ncolor.</p>\n<p><strong>Warning</strong>: Depending on the PixelType and SrcType used, color precision\nmay be lost when converting a higher precision to a lower precision\nrepresentation.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The color to assign.</p>\n<p><strong>Returns</strong>: A reference to itself.</p>\n","desc":"<p>R, G, B and A components are set to the the values of the assigned\ncolor.</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor c2 <span class=\"token operator\">=</span> c1<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c2 has the RGB value of (255, 30, 20)</span>\n</code></pre>\n"},{"short":"<p>Assign a color using a grayscale value.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The grayscale value.</p>\n<p><strong>Returns</strong>: A reference to itself.</p>\n","desc":"<p>R, G and B components are set to the grayscale value and alpha is\nset to limit().</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>is equivalent to:</p>\n<pre><code>    ofColor <span class=\"token function\">myColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"short":"<p>Test two colors for equality.</p>\n<p><strong>Returns</strong>: true iff the R, G, B and A components are all equal.</p>\n","desc":"<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Red with 100% alpha.</span>\n    ofColor <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Red with 50% alpha.</span>\n    <span class=\"token keyword\">bool</span> is_equal <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">==</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// is_equal is false</span>\n    c2<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n    is_equal <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">==</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// is_equal is true</span>\n</code></pre>\n"},{"syntax":"operator[](n)","name":"operator[]","returns":"const PixelType &","returns_description":null,"parameters":"size_t n","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Array subscript operator.</p>\n<p>If n is 0 returns .r, if 1 returns .g, if 2 returns .b, if 3 returns\nalpha.</p>\n<p><strong>Parameters:</strong></p>\n<p>n An index 0-3 of the component to get.</p>\n<p><strong>Returns</strong>: The value of the requested component.</p>\n","desc":"<p>If n is 0 returns .r, if 1 returns .g, if 2 returns .b, if 3 returns\nalpha.</p>\n<pre><code>    ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> red <span class=\"token operator\">=</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Red is 128.</span>\n</code></pre>\n"},{"syntax":"operator[](n)","name":"operator[]","returns":"PixelType &","returns_description":null,"parameters":"size_t n","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Array subscript operator.</p>\n<p>If n is 0 returns .r, if 1 returns .g, if 2 returns .b, if 3 returns\nalpha.</p>\n<p><strong>Parameters:</strong></p>\n<p>n An index 0-3 of the component to get.</p>\n<p><strong>Returns</strong>: The value of the requested component.</p>\n","desc":"<p>Array subscript operator. If n is 0 returns .r, if 1 returns .g, if 2 returns .b, if 3 returns alpha.</p>\n<pre><code>\tofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> red <span class=\"token operator\">=</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// red is 128</span>\n</code></pre>\n"},{"short":"<p>Set an ofColor_ from an existing ofColor_.</p>\n<p>This will use the R, G, B and A components from the passed color.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The ofColor_ to copy.</p>\n","desc":"<p>This will use the R, G, B and A components from the passed color.</p>\n<pre><code>    ofColor <span class=\"token function\">r</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Red</span>\n    ofColor <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Blue</span>\n    r<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now the RGB value of r is (0,0,255)</span>\n</code></pre>\n"},{"syntax":"set(gray, alpha)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> gray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> alpha","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set a grayscale ofColor_ by specifying a single number.</p>\n<p><strong>Parameters:</strong></p>\n<p>gray A grayscale value.</p>\n<p>alpha The opacity of the color.</p>\n","desc":"<p>Creates a gray color from the value of gray. This single value will be taken by each of the R, G and B components. The alpha value defaults to completely opaque.</p>\n<pre><code>    ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Red ...</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// ... and now 50% gray with 50% alpha.</span>\n</code></pre>\n"},{"syntax":"set(red, green, blue, alpha)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> red<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> green<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> blue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> alpha","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set an ofColor_ by using RGB values.</p>\n<p><strong>Parameters:</strong></p>\n<p>red The red component.</p>\n<p>green The green component.</p>\n<p>blue The blue component.</p>\n<p>alpha The alpha component.</p>\n","desc":"<p>Creates a color using RGB values and optional alpha value. The default\nalpha value makes a completely opaque color. By default, the alpha\ncomponent will take the PixelType's maximum, producing an opaque color.\nThe channel values must fall within the range represented by the PixelType</p>\n<pre><code>    ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Red ...</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// ... and now green.</span>\n</code></pre>\n"},{"syntax":"setBrightness(brightness)","name":"setBrightness","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> brightness","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the brightness of this color.</p>\n<p><strong>Parameters:</strong></p>\n<p>brightness A brightness value to set in the range of 0 - limit().</p>\n","desc":"<p>Change the current brightness, leaving hue and saturation the same.</p>\n<pre><code>    ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Bright blue ...</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">setBrightness</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// ... dark blue.</span>\n</code></pre>\n<p>Refer the <a href=\"#HSB\">discussion of HSB</a>.</p>\n"},{"syntax":"setHex(hexColor, alpha)","name":"setHex","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> hexColor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> alpha","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set an ofColor_ from a hexadecimal representation.</p>\n<p><strong>Warning</strong>: The alpha value <em>should not</em> be packed in the hexColor and\nmust be specified separately.</p>\n<p><strong>Parameters:</strong></p>\n<p>hexColor An RGB color in hexadecimal form.</p>\n<p>alpha The alpha value of the color.</p>\n","desc":"<p>In some cases, it is convenient to represent colors using a hexadecimal\nnumber. In this case, red, green and blue values are packed into a\ninteger.</p>\n<p>Set this color to hexColor using a 24 bit hex-style color as normally\nused in web development. The alpha channel is specified separately\nand will default to the PixelType's maximum, resulting in an opaque color.</p>\n<pre><code>    ofColor c<span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">setHex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFFFFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// White.</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">setHex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00FF00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Green.</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">setHex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFF8000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Orange, 50% alpha.</span>\n</code></pre>\n"},{"syntax":"setHsb(hue, saturation, brightness, alpha)","name":"setHsb","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> hue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> saturation<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> brightness<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> alpha","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the color using HSB components.</p>\n<p><strong>Parameters:</strong></p>\n<p>hue A hue value to set in the range of 0 - limit().</p>\n<p>saturation A saturation value to set in the range of 0 - limit().</p>\n<p>brightness A brightness value to set in the range of 0 - limit().</p>\n<p>alpha An alpha value to set in the range of 0 - limit().</p>\n","desc":"<p>In some cases, it is convenient to represent colors using a HSB\nvalue. In this case, red, green and blue values are represented by their hue,\nsaturation and brightness.</p>\n<p>Set this color using a HSB representation. Refer the <a href=\"#HSB\">discussion of HSB</a>\nabove. <strong>Note</strong> that the hue value has a range that matches the base data type\n(ie <strong>0 to 255</strong> for the standard ofColor), rather than 0 to 360, 0 to 100 or\nfloat 0 to 1, as may be expected. The alpha channel is specified separately\nand will default to the PixelType's maximum, resulting in an opaque color.</p>\n<pre><code>    ofColor c <span class=\"token operator\">=</span> <span class=\"token function\">ofColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// c is black</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">setHsb</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// c is now bright red</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">setHsb</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// c is still bright red (colors wrap around)</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">setHsb</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// c is dark red</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">setHsb</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// c is dull light red</span>\n</code></pre>\n"},{"syntax":"setHue(hue)","name":"setHue","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> hue","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the hue of this color.</p>\n<p><strong>Parameters:</strong></p>\n<p>hue A hue value to set in the range of 0 - limit().</p>\n","desc":"<p>Change the current hue, leaving saturation and brightness the same.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span><span class=\"token function\">fromHsb</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// bright red</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">setHue</span><span class=\"token punctuation\">(</span> <span class=\"token number\">128</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now bright cyan</span>\n</code></pre>\n<p>Refer the <a href=\"#HSB\">discussion of HSB</a> above.</p>\n"},{"syntax":"setHueAngle(angle)","name":"setHueAngle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the hue angle of this color.</p>\n<p><strong>Parameters:</strong></p>\n<p>angle A hue angle value to set in the range of 0 - 360 degrees.</p>\n","desc":"<p>The hue field in setHsb() and in setHue() represents hue as a range between 0 and\n255 because the hue value has a range that matches the base data type,\nsetHueAngle() sets hue using the conventional way to represent hue: with the\nrange between 0 and 360.</p>\n<p><img src=\"hue_circle.jpg\" alt=\"hc\"></p>\n"},{"syntax":"setSaturation(saturation)","name":"setSaturation","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> saturation","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the saturation of this color.</p>\n<p>This method uses HSB not HSL. So red desaturated is white, not gray</p>\n<p><strong>Parameters:</strong></p>\n<p>saturation A saturation value value in the range of 0 - limit().</p>\n<p><strong>See also</strong>: http://en.wikipedia.org/wiki/HSL_and_HSV</p>\n","desc":"<p>Change the current saturation, leaving hue and brightness intact.</p>\n<pre><code>    ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Vibrant blue ...</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">setSaturation</span><span class=\"token punctuation\">(</span> <span class=\"token number\">128</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// ... pale blue.</span>\n</code></pre>\n<p>Refer the <a href=\"#HSB\">discussion of HSB</a> above.</p>\n<p>See also: http://en.wikipedia.org/wiki/HSL_and_HSV</p>\n"},{"name":"a","type":"PixelType","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>&lt; The alpha color component.</p>\n","desc":"<p>The alpha value (transparency) of a color. 0 is completely transparent, 255 is completely opaque.</p>\n<pre><code>    ofColor c <span class=\"token operator\">=</span> <span class=\"token function\">ofColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Bright red with default limit() value (this case its 255)</span>\n    c<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now the color is bright red with the opacity set to 50 (mostly see through)</span>\n</code></pre>\n"},{"name":"aliceBlue","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"antiqueWhite","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"aqua","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"aquamarine","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"azure","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"b","type":"PixelType","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>&lt; The blue color component.</p>\n","desc":"<p>The blue component of this color.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>cyan<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> blue <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 255</span>\n</code></pre>\n"},{"name":"beige","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"bisque","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"black","type":"ofColor","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":"<p>Pre-iniatilized black color.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>black<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0, 0, 0)</span>\n</code></pre>\n"},{"name":"blanchedAlmond","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"blue","type":"ofColor","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":"<p>Pre-iniatilized blue color.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>blue<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0, 0, 255)</span>\n</code></pre>\n"},{"name":"blueSteel","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"blueViolet","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"brown","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"burlyWood","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"cadetBlue","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"chartreuse","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"chocolate","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"coral","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"cornflowerBlue","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"cornsilk","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"crimson","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"cyan","type":"ofColor","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":"<p>Pre-iniatilized cyan color.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>cyan<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0, 255, 255)</span>\n</code></pre>\n"},{"name":"darkBlue","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"darkCyan","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"darkGoldenRod","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"darkGray","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"darkGreen","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"darkGrey","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"darkKhaki","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"darkMagenta","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"darkOliveGreen","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"darkOrchid","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"darkRed","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"darkSalmon","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"darkSeaGreen","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"darkSlateBlue","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"darkSlateGray","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"darkSlateGrey","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"darkTurquoise","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"darkViolet","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"darkorange","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"deepPink","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"deepSkyBlue","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"dimGray","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"dimGrey","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"dodgerBlue","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"fireBrick","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"floralWhite","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"forestGreen","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"fuchsia","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"g","type":"PixelType","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>&lt; The green color component.</p>\n","desc":"<p>The green component of this color.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>yellow<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> green <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 255</span>\n</code></pre>\n"},{"name":"gainsboro","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"ghostWhite","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"gold","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"goldenRod","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"gray","type":"ofColor","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":"<p>Pre-iniatilized gray color.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>gray<span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"name":"green","type":"ofColor","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":"<p>Pre-iniatilized green color.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>green<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0, 255, 0)</span>\n</code></pre>\n"},{"name":"greenYellow","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"grey","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"honeyDew","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"hotPink","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"indianRed","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"indigo","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"ivory","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"khaki","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"lavender","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"lavenderBlush","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"lawnGreen","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"lemonChiffon","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"lightBlue","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"lightCoral","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"lightCyan","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"lightGoldenRodYellow","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"lightGray","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"lightGreen","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"lightGrey","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"lightPink","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"lightSalmon","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"lightSeaGreen","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"lightSkyBlue","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"lightSlateGray","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"lightSlateGrey","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"lightSteelBlue","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"lightYellow","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"lime","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"limeGreen","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"linen","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"magenta","type":"ofColor","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":"<p>Pre-iniatilized magenta color.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>magenta<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (255, 0, 255)</span>\n</code></pre>\n"},{"name":"maroon","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"mediumAquaMarine","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"mediumBlue","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"mediumOrchid","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"mediumPurple","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"mediumSeaGreen","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"mediumSlateBlue","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"mediumSpringGreen","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"mediumTurquoise","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"mediumVioletRed","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"midnightBlue","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"mintCream","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"mistyRose","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"moccasin","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"navajoWhite","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"navy","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"oldLace","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"olive","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"oliveDrab","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"orange","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"orangeRed","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"orchid","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"paleGoldenRod","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"paleGreen","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"paleTurquoise","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"paleVioletRed","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"papayaWhip","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"peachPuff","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"peru","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"pink","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"plum","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"powderBlue","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"purple","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"r","type":"PixelType","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>&lt; The red color component.</p>\n","desc":"<p>The red component of this color.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>red<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> red <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 255</span>\n</code></pre>\n"},{"name":"red","type":"ofColor","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":"<p>Pre-iniatilized red color.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>red<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (255, 0, 0)</span>\n</code></pre>\n"},{"name":"rosyBrown","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"royalBlue","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"saddleBrown","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"salmon","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"sandyBrown","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"seaGreen","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"seaShell","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"sienna","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"silver","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"skyBlue","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"slateBlue","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"slateGray","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"slateGrey","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"snow","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"springGreen","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"steelBlue","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"tan","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"teal","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"thistle","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"tomato","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"turquoise","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"v","type":"PixelType","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"True","short":"<p>&lt; The pixel values as an array.</p>\n","desc":"<p>Array/pointer access. Allows the r, g, b, a components to be accessed as a pointer to an array of PixelType.</p>\n"},{"name":"violet","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"wheat","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"white","type":"ofColor","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":"<p>Pre-iniatilized white color.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"name":"whiteSmoke","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{"name":"yellow","type":"ofColor","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":"<p>Pre-iniatilized yellow color.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>yellow<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (255, 255, 0)</span>\n</code></pre>\n"},{"name":"yellowGreen","type":"ofColor_","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n","desc":""},{}],"document":"<p>#class ofColor_</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: True</em>\n_extends: _\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>ofColor represents a color in openFrameworks.</p>\n<p>The default ofColor uses unsigned char values [0,255], but use\nofFloatColor for floating point values [0.0,1.0], or ofShortColor for\nunsigned short ints [0,[65,535]]. ofColor can be represented by an RGB\nvalue, an HSB value or a hex value.</p>\n<p>\\tparam PixelType The data type used to represent a single pixel value.</p>\n<p>##Description</p>\n<p>ofColor represents a color in openFrameworks.\nColors are usually defined by specifying a red, green, blue and optionally\nan alpha value (r,g,b,[a]), or a hue, saturation, brightness and optionally\nan alpha value (h,s,b,[a]) or hexadecimal value with an optional alpha\nvalue (0x________, a).</p>\n<p>For example:</p>\n<pre><code><span class=\"token comment\" spellcheck=\"true\">// set red, component by component</span>\nofColor red<span class=\"token punctuation\">;</span>\nred<span class=\"token punctuation\">.</span>r<span class=\"token operator\">=</span><span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\nred<span class=\"token punctuation\">.</span>g<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nred<span class=\"token punctuation\">.</span>b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// draw color is now red</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// shorter notation is also possible</span>\nofColor <span class=\"token function\">green</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span>green<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// draw color is now green</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// or even shorter</span>\n<span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span> <span class=\"token function\">ofColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// draw color is now a random blue</span>\n</code></pre>\n<p>ofColor also enables a lot of extra functionality like using HSB instead of\ncolor spectrums, lerping or linearly interpolating between colors, and\ninverting colors, among other things.</p>\n<p>ofColor is templated, which means that it has several different ways it can\nbe created. These are probably best to leave as they are because there's\nalready a few kinds typedefed for you. The default ofColor uses unsigned\nchar values (0 to 255), but you can make an ofFloatColor if you want to work\nwith floating point numbers between 0 and 1, or ofShortColor if you want to\nwork with integers between 0 and 65,535.</p>\n<table>\n<thead>\n<tr>\n<th>Typedef</th>\n<th>PixelType</th>\n<th>Bit Depth</th>\n<th>Min. Value</th>\n<th>Max. Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ofColor</code></td>\n<td><code><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span></code></td>\n<td>8</td>\n<td>0</td>\n<td>255</td>\n</tr>\n<tr>\n<td><code>ofShortColor</code></td>\n<td><code><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span></code></td>\n<td>16</td>\n<td>0</td>\n<td>65535</td>\n</tr>\n<tr>\n<td><code>ofFloatColor</code></td>\n<td><code><span class=\"token keyword\">float</span></code></td>\n<td><em>varies</em></td>\n<td>0.0</td>\n<td>1.0</td>\n</tr>\n</tbody>\n</table>\n<h4>HSB</h4>\n<p>You're probably familiar with RGB colors already, but HSB is a big part of\nofColor. It uses a <em>hue</em> value (for the standard ofColor the range for this\nvalue is between 0 and 255) to determine what the hue (the 'color' in the\nsense of a color in the rainbow) will be:</p>\n<p><img src=\"hsb.png\" alt=\"HSB\"></p>\n<p>Approximate hues for some common colors:</p>\n<ul>\n<li>Red: 0 (wrapped round from 255)</li>\n<li>Orange: 25</li>\n<li>Yellow: 42</li>\n<li>Green: 85</li>\n<li>Blue: 170</li>\n<li>Purple: 205</li>\n<li>Red: 255 (wraps round to 0)</li>\n</ul>\n<p>Once you've selected a hue, you can use the <em>saturation</em> and <em>brightness</em>\nvalues to further refine the color. The saturation determines how much of\nthe hue versus white is present and brightness determines how much hue\nversus black is present:</p>\n<p><img src=\"hsb-cone.jpg\" alt=\"SB\"></p>\n<p>In other words, saturation refers to the intensity of the color: high\nsaturation means intense color, low saturation means washed out or black and\nwhite. Brightness refers to how light or dark the color is: high brightness\nmeans a bright color, low brightness means a dark color. If the brightness\nis 0 the resulting color will be black, regardless of the values of hue or\nsaturation.</p>\n<p>\\tparam PixelType The data type used to represent a single pixel value.</p>\n<p>##Methods</p>\n<p>###ofColor_&lt; PixelType &gt; &amp; clamp()</p>\n<p>&lt;!--\n<em>syntax: clamp()</em>\n<em>name: clamp</em>\n<em>returns: ofColor</em>&lt; PixelType &gt; &amp;_\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clamp values between 0 and the limit().</p>\n<p>Clamps the value of each component, R, G, B and A to a maximum of\nlimit() and a minimum of zero.</p>\n<p><strong>Returns</strong>: A reference to itself.</p>\n<p>_description: _</p>\n<p>This clamps the values of your color in case they're too high or low for their\ntypes, in case you go negative or too use values that are too high, like\nanything &lt; 0 or &gt;1.0 in the case of ofFloatColor.</p>\n<pre><code>ofFloatColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc<span class=\"token punctuation\">.</span>g <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// g now has 2: this is usually invalid!</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">clamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// c.g has now been clamped so its value is 1.</span>\n</code></pre>\n<p>Also for ofColor anything &lt;0 or &gt;255.</p>\n<pre><code>    ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// r component is above the limit() of 255.</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">clamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// c.r has now been clamped so its value is 255.</span>\n</code></pre>\n<p>Returns: A reference to itself.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void copyFrom(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: copyFrom(&amp;mom)</em>\n<em>name: copyFrom</em>\n<em>returns: void</em>\n<em>returns_description: _\n<em>parameters: const ofColor</em>&lt; SrcType &gt; &amp;mom</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>}</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; fromHex(hexColor, alpha)</p>\n<p>&lt;!--\n<em>syntax: fromHex(hexColor, alpha)</em>\n<em>name: fromHex</em>\n<em>returns: ofColor</em>&lt; PixelType &gt;_\n_returns_description: _\n<em>parameters: int hexColor, float alpha</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Create an ofColor_ from a hexadecimal value.</p>\n<p><strong>Parameters:</strong></p>\n<p>hexColor A color in hexadecimal form.</p>\n<p>alpha The alpha value of the color.</p>\n<p>_description: _</p>\n<p>Convenience method to construct an ofColor from a 24 bit hex value.\nIn some cases, it is convenient to represent colors using a hexadecimal\nnumber. In this case, red, green, and blue values are packed into a\nsingle integer.</p>\n<p>The alpha channel is specified separately and will default to the\nPixelType's maximum, resulting in an opaque color.</p>\n<pre><code>    ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span><span class=\"token function\">fromHex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFFFF00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// c is yellow.</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; fromHsb(hue, saturation, brightness, alpha)</p>\n<p>&lt;!--\n<em>syntax: fromHsb(hue, saturation, brightness, alpha)</em>\n<em>name: fromHsb</em>\n<em>returns: ofColor</em>&lt; PixelType &gt;_\n_returns_description: _\n<em>parameters: float hue, float saturation, float brightness, float alpha</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Create an ofColor_ from an HSB representation.</p>\n<p><strong>Parameters:</strong></p>\n<p>hue The hue of the color.</p>\n<p>saturation The saturation of the color.</p>\n<p>brightness The brightness of the color.</p>\n<p>alpha The alpha value of the color.</p>\n<p>_description: _</p>\n<p>Convenience method to construct an ofColor from Hsb values.</p>\n<p>While ofColor_ represents color using R, G, B, and A components, other\nrepresentations are available.  This method allows the user to construct\nan ofColor_ from a Hue (H), Saturation (S), and Brightness (B) and an\noptional alpha value.</p>\n<p>The alpha channel is specified separately and will default to the\nPixelType's maximum, resulting in an opaque color.</p>\n<p>For more information about HSB, see:\nhttp://en.wikipedia.org/wiki/HSV_color_space</p>\n<pre><code>    ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span><span class=\"token function\">fromHsb</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c is bright saturated cyan.</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getBrightness()</p>\n<p>&lt;!--\n<em>syntax: getBrightness()</em>\n<em>name: getBrightness</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Calculate the brightness of of the R, G and B components.</p>\n<p>Brightness is simply the maximum of the three color components. This\nmethod of calculating brightness is used by Photoshop (HSB) and\nProcessing (HSB).  Note that brightness is also called &quot;Value&quot;.</p>\n<p><strong>Returns</strong>: the brightness in the range 0 - limit().</p>\n<p>_description: _</p>\n<p>Return the brightness component of the HSB representation of this color.\nRefer the <a href=\"#HSB\">discussion of HSB</a> above.</p>\n<p>Brightness is simply the maximum of the three color components. This\nmethod of calculating brightness is used by Photoshop (HSB) and\nProcessing (HSB).  Note that brightness is also called &quot;Value&quot;.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; getClamped()</p>\n<p>&lt;!--\n<em>syntax: getClamped()</em>\n<em>name: getClamped</em>\n<em>returns: ofColor</em>&lt; PixelType &gt;_\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>A non-destructive version of clamp().</p>\n<p><strong>See also</strong>: clamp()</p>\n<p><strong>Returns</strong>: A copy of this color, clamped.</p>\n<p>_description: _</p>\n<p>Returns a clamped version of this color, without modifying the original.\nSee <a href=\"#clamp\">clamp</a> for more info.</p>\n<pre><code>    ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// r component is above the limit() of 255.</span>\n    ofColor g <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getClamped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// c.r is still 300.</span>\n    <span class=\"token comment\" spellcheck=\"true\">//g has the RGB value (255, 200, 0)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getHex()</p>\n<p>&lt;!--\n<em>syntax: getHex()</em>\n<em>name: getHex</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get a 24-bit hexadecimal representation of the RGB color.</p>\n<p><strong>Warning</strong>: This method does <em>not</em> encode the alpha component.</p>\n<p><strong>Returns</strong>: An integer representing an RGB color.</p>\n<p>_description: _</p>\n<p>Return a 24 bit hexidecimal number representing this color.</p>\n<pre><code>ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// yellow</span>\n<span class=\"token keyword\">int</span> hex <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getHex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// hex is 0xffff00 (or 16776960 in decimal)</span>\n</code></pre>\n<p>Usually when we look at these colors in print they're hex, so don't be\nsurprised if they don't look familiar when you print them as decimal.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void getHsb(&amp;hue, &amp;saturation, &amp;brightness)</p>\n<p>&lt;!--\n<em>syntax: getHsb(&amp;hue, &amp;saturation, &amp;brightness)</em>\n<em>name: getHsb</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float &amp;hue, float &amp;saturation, float &amp;brightness</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Extract the hue, saturation and brightness (HSB) from this color.</p>\n<p><strong>Parameters:</strong></p>\n<p>hue A reference to the hue to fill. Will be in the range of\n0 - limit().</p>\n<p>saturation A reference to the saturation to fill. Will be in the\nrange of 0 - limit().</p>\n<p>brightness A reference to the brightness to fill. Will be in the\nrange of 0 - limit().</p>\n<p>_description: _</p>\n<p>Return all three components of the HSB representation of this color\nat the same time.</p>\n<pre><code>    ofColor <span class=\"token function\">red</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> hue <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// The hue value to set.</span>\n    <span class=\"token keyword\">float</span> saturation <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// The saturation value to set.</span>\n    <span class=\"token keyword\">float</span> brightness <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// The brightness value to set.</span>\n    red<span class=\"token punctuation\">.</span><span class=\"token function\">getHsb</span><span class=\"token punctuation\">(</span>hue<span class=\"token punctuation\">,</span> saturation<span class=\"token punctuation\">,</span> brightness<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Hue is now 0 (for red), saturation is 255, brightness is 255.</span>\n</code></pre>\n<p>Refer the <a href=\"#HSB\">discussion of HSB</a> above.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getHue()</p>\n<p>&lt;!--\n<em>syntax: getHue()</em>\n<em>name: getHue</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the Hue of this color.</p>\n<p>The color is converted from the default RGB to an HSB color space and\nthe resulting Hue value is returned.  The resulting hue value will\nalways be returned in the range 0 - limit().</p>\n<p><strong>Returns</strong>: The Hue value in the range 0 - limit().</p>\n<p>_description: _</p>\n<p>Return the hue component of the HSB representation of this color.\nRefer the <a href=\"#HSB\">discussion of HSB</a> above.</p>\n<p>The color is converted from the default RGB to an HSB color space and\nthe resulting hue value is returned.  The resulting hue value will\nalways be returned in the range 0 - limit().</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getHueAngle()</p>\n<p>&lt;!--\n<em>syntax: getHueAngle()</em>\n<em>name: getHueAngle</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the Hue angle of this color.</p>\n<p>The color is converted from the default RGB to an HSB color space and\nthe resulting Hue angle is returned.  The resulting hue value will\nalways be returned in degrees in the range 0 - 360.</p>\n<p><strong>Returns</strong>: The Hue angle in the range 0 - 360.</p>\n<p>_description: _</p>\n<p>The color is converted from the default RGB to an HSB color space and\nthe resulting hue angle is returned.  The resulting hue value will\nalways be returned in degrees in the range 0 - 360.</p>\n<p><img src=\"hue_circle.jpg\" alt=\"hc\"></p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; getInverted()</p>\n<p>&lt;!--\n<em>syntax: getInverted()</em>\n<em>name: getInverted</em>\n<em>returns: ofColor</em>&lt; PixelType &gt;_\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>A non-destructive version of invert().</p>\n<p><strong>See also</strong>: invert()</p>\n<p><strong>Returns</strong>: A copy of this color, inverted.</p>\n<p>_description: _</p>\n<p>Returns the color that is the inverted version (complement) to this color,\nwithout modifying the original. See <a href=\"#invert\">invert</a> for more info.</p>\n<pre><code>    ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor i <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getInverted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c still has RGB value of (255,200,0)</span>\n    <span class=\"token comment\" spellcheck=\"true\">// i has the RGB value (0, 55, 255)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; getLerped(&amp;target, amount)</p>\n<p>&lt;!--\n<em>syntax: getLerped(&amp;target, amount)</em>\n<em>name: getLerped</em>\n<em>returns: ofColor</em>&lt; PixelType &gt;_\n<em>returns_description: _\n<em>parameters: const ofColor</em>&lt; PixelType &gt; &amp;target, float amount</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>A non-destructive version of lerp().</p>\n<p><strong>Parameters:</strong></p>\n<p>target The target color corresponding to an amount of 1.0.</p>\n<p>amount The amount (between 0.0 and 1.0) to interpolate.\nA value of 0.0 will yield an unchanged color.  A value of 1.0\nwill yield the target color.</p>\n<p><strong>Returns</strong>: A copy of this color, lerped.</p>\n<p><strong>See also</strong>: lerp()</p>\n<p>_description: _</p>\n<p>Returns this color lerped towards target by amount, without modifying the original.\nSee <a href=\"#lerp\">lerp</a> for more info.</p>\n<pre><code>    ofColor r <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>red<span class=\"token punctuation\">;</span>\n    ofColor b <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>blue<span class=\"token punctuation\">;</span>\n    ofColor p <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getLerped</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// p is purple, r is still red and b is still blue</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getLightness()</p>\n<p>&lt;!--\n<em>syntax: getLightness()</em>\n<em>name: getLightness</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Calculate the lightness of the R, G and B components.</p>\n<p>Lightness is simply the average of the three color components. This\nmethod of calculating lightness is used by the Lab and HSL color spaces.</p>\n<p><strong>Returns</strong>: the lightness in the range 0 - limit().</p>\n<p>_description: _</p>\n<p>Return a float that is the average of the three color components. This is used by\nthe Lab and HSL color spaces.</p>\n<pre><code>    ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> l <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getLightness</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// l is 100.f</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; getNormalized()</p>\n<p>&lt;!--\n<em>syntax: getNormalized()</em>\n<em>name: getNormalized</em>\n<em>returns: ofColor</em>&lt; PixelType &gt;_\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>A non-destructive version of normalize().</p>\n<p><strong>See also</strong>: normalize()</p>\n<p><strong>Returns</strong>: A copy of this color, normalized.</p>\n<p>_description: _</p>\n<p>Returns the normalized version of this color, without modifying the original.\nSee <a href=\"#normalize\">normalize</a> for more info.</p>\n<pre><code>    ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor n <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Returns c / (200/255)</span>\n    <span class=\"token comment\" spellcheck=\"true\">// n now has RGB value of (153,255,0)</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c still has the RGB value of (120, 200, 0)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getSaturation()</p>\n<p>&lt;!--\n<em>syntax: getSaturation()</em>\n<em>name: getSaturation</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the Saturation of this color.</p>\n<p>The color is converted from the default RGB to an HSB color space and\nthe resulting saturation is returned.  The resulting saturation value\nwill always be returned in the range 0 - limit().</p>\n<p><strong>Returns</strong>: The saturation in the range 0 - limit().</p>\n<p>_description: _</p>\n<p>Return the saturation component of the HSB representation of this color.\nThe resulting saturation value will always be returned in the range 0 - limit().\nRefer the <a href=\"#HSB\">discussion of HSB</a> above.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; &amp; invert()</p>\n<p>&lt;!--\n<em>syntax: invert()</em>\n<em>name: invert</em>\n<em>returns: ofColor</em>&lt; PixelType &gt; &amp;_\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Invert the R, G and B components.</p>\n<p>Performs an inversion operation on the color by replacing the red, green\nand blue components with their original value subtracted from the\nlimit().</p>\n<p><strong>Returns</strong>: A reference to itself.</p>\n<p>_description: _</p>\n<p>Performs an inversion operation on the color by replacing the red, green\nand blue components with their original value subtracted from the\nlimit().  For example, an ofColor value of:</p>\n<pre><code>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> maxValue <span class=\"token operator\">=</span> <span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// would return 255</span>\n\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> r <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> g <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> rNew <span class=\"token operator\">=</span> maxValue <span class=\"token operator\">-</span> r<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 255 - 255 = 0</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> gNew <span class=\"token operator\">=</span> maxValue <span class=\"token operator\">-</span> g<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 255 - 255 = 0</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> bNew <span class=\"token operator\">=</span> maxValue <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 255 - 0   = 255;</span>\n</code></pre>\n<p>Example usage:</p>\n<pre><code>    ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Blue.</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">invert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c is now (255,255,0), or yellow, which is blue's complement.</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; &amp; lerp(&amp;target, amount)</p>\n<p>&lt;!--\n<em>syntax: lerp(&amp;target, amount)</em>\n<em>name: lerp</em>\n<em>returns: ofColor</em>&lt; PixelType &gt; &amp;_\n<em>returns_description: _\n<em>parameters: const ofColor</em>&lt; PixelType &gt; &amp;target, float amount</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>A linear interpolation between all components of two colors.</p>\n<p>The linear interpolation is carried out\non <em>all</em> components, R, G, B <em>and</em> A.</p>\n<p><strong>Parameters:</strong></p>\n<p>target The target color corresponding to an amount of 1.0.</p>\n<p>amount The amount (between 0.0 and 1.0) to interpolate.\nA value of 0.0 will yield an unchanged color.  A value of 1.0\nwill yield the target color.</p>\n<p><strong>Returns</strong>: A reference to itself.</p>\n<p>_description: _</p>\n<p>The lerp method performs a linear interpolation (or <a href=\"http://en.wikipedia.org/wiki/Lerp_(computing)\" title=\"Lerp\">lerp</a>) between\nthis color and a target color.  In contrast to many of the mathematical\nfunctions found in ofColor_, The linear interpolation is carried out\non <em>all</em> components, R, G, B <em>and</em> A.  The amount is typically a value\nbetween 0.0 and 1.0, with 0.0 yielding an unchanged color and 1.0\nyielding a color identical to the target color.</p>\n<p>This function allows to blend between colors. For instance, if you have\nred and you want halfway between red and blue, you can do this:</p>\n<pre><code>ofColor r <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>red<span class=\"token punctuation\">;</span>\nofColor b <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>blue<span class=\"token punctuation\">;</span>\nb<span class=\"token punctuation\">.</span><span class=\"token function\">lerp</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now purple!</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float limit()</p>\n<p>&lt;!--\n<em>syntax: limit()</em>\n<em>name: limit</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the maximum value of a color component.</p>\n<p><strong>Returns</strong>: The value associated with a fully saturated color component.</p>\n<p>_description: _</p>\n<p>Based on the type of PixelType (whether its a ofColor, ofFloatColor or\nofShortColor), the maximum value different. For a ofFloatColor the\nmaximum is <code><span class=\"token number\">1.0</span></code>, but for a ofColor it's <code><span class=\"token number\">255</span></code>, and for ofShortColor\nreturns <code><span class=\"token number\">65</span><span class=\"token punctuation\">,</span><span class=\"token number\">536</span></code>.</p>\n<p>Use this function to get this maximum number.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; &amp; normalize()</p>\n<p>&lt;!--\n<em>syntax: normalize()</em>\n<em>name: normalize</em>\n<em>returns: ofColor</em>&lt; PixelType &gt; &amp;_\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Normalize the R, G and B components.</p>\n<p>Performs a normalization operation on the red, green and blue components\nby scaling them by brightness of the original color divided by the\nlimit().  The brightness is calculated by finding the maximum of\noriginal red, green and blue components.\nIn short: ofColor / (brightness / limit())</p>\n<p><strong>Returns</strong>: A reference to itself.</p>\n<p>_description: _</p>\n<p>Divide all color components by brightness. This has the effect of conforming\nthe color to the outer surface of the hue/saturation/brightness spherical\ncolor space, by forcing a unit radius (brightness).</p>\n<p>This operation is equivalent to the following:</p>\n<pre><code>    ofColor <span class=\"token function\">myColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">float</span> brightness <span class=\"token operator\">=</span> myColor<span class=\"token punctuation\">.</span><span class=\"token function\">getBrightness</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Returns 127.</span>\n    <span class=\"token keyword\">float</span> scaleFactor <span class=\"token operator\">=</span> brightness <span class=\"token operator\">/</span> <span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// Returns 127 / 255.</span>\n\n    ofColor myNormalizedColor <span class=\"token operator\">=</span> myColor <span class=\"token operator\">/</span> scaleFactor<span class=\"token punctuation\">;</span>\n                                <span class=\"token comment\" spellcheck=\"true\">// Divides the red, green and blue</span>\n                                <span class=\"token comment\" spellcheck=\"true\">// components by the scale factor.</span>\n</code></pre>\n<p>The following:</p>\n<pre><code>\tofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">122</span><span class=\"token punctuation\">,</span> <span class=\"token number\">122</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>will create this:</p>\n<p><img src=\"../types/ofNormalize.png\" alt=\"ofNorm\"></p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofColor_(&amp;color)</h3>\n<p>&lt;!--\n<em>syntax: ofColor</em>(&amp;color)_\n<em>name: ofColor</em>_\n_returns: _\n<em>returns_description: _\n<em>parameters: const ofColor</em>&lt; SrcType &gt; &amp;color</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Construct an ofColor_ from an existing ofColor_.</p>\n<p><strong>Warning</strong>: Depending on the PixelType and SrcType used, color precision\nmay be lost when converting a higher precision to a lower\nprecision representation.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The ofColor_ to copy.</p>\n<p>_description: _</p>\n<p>Creates a color by copying another color with a different type (for example when copying from a standard ofColor using unsigned chars to an ofFloatColor):</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// orange</span>\n    ofFloatColor <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> g <span class=\"token operator\">=</span> c2<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// g is now 0.5</span>\n</code></pre>\n<pre><code>    ofColor <span class=\"token function\">colorA</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor <span class=\"token function\">colorB</span><span class=\"token punctuation\">(</span>colorA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// colorB is now equal to colorA.</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofColor_(&amp;color, alpha)</h3>\n<p>&lt;!--\n<em>syntax: ofColor</em>(&amp;color, alpha)_\n<em>name: ofColor</em>_\n_returns: _\n<em>returns_description: _\n<em>parameters: const ofColor</em>&lt; PixelType &gt; &amp;color, float alpha</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Construct an ofColor_ from an existing ofColor_.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The ofColor_ to copy.</p>\n<p>alpha The new alpha value to replace the alpha value in color.</p>\n<p>_description: _</p>\n<p>Creates a color by copying another color, overriding the existing alpha value with the given alpha value.</p>\n<pre><code>ofColor <span class=\"token function\">mom</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// red</span>\nofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now c is red with 50% alpha</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofColor_()</h3>\n<p>&lt;!--\n<em>syntax: ofColor</em>()_\n<em>name: ofColor</em>_\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Construct a default white color.</p>\n<p>_description: _</p>\n<p>Creates a color and sets it to white.</p>\n<pre><code>    ofColor c<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Draw color is now white.</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofColor_(gray, alpha)</h3>\n<p>&lt;!--\n<em>syntax: ofColor</em>(gray, alpha)_\n<em>name: ofColor</em>_\n_returns: _\n_returns_description: _\n<em>parameters: float gray, float alpha</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Construct a grayscale ofColor_ by specifying a single number.</p>\n<p><strong>Parameters:</strong></p>\n<p>gray A grayscale value.</p>\n<p>alpha The opacity of the color.</p>\n<p>_description: _</p>\n<p>Creates a gray color from a single value to describe a grayscale color.\nThis single value will be taken by each of the R, G and B components.\nAlpha value defaults to completely opaque.</p>\n<pre><code>    ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// c is now gray.</span>\n</code></pre>\n<pre><code>    ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">122</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now c is 50% alpha gray, ooh, dismal</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofColor_(red, green, blue, alpha)</h3>\n<p>&lt;!--\n<em>syntax: ofColor</em>(red, green, blue, alpha)_\n<em>name: ofColor</em>_\n_returns: _\n_returns_description: _\n<em>parameters: float red, float green, float blue, float alpha</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Construct an ofColor_ by using channel values.</p>\n<p><strong>Parameters:</strong></p>\n<p>red The red component.</p>\n<p>green The green component.</p>\n<p>blue The blue component.</p>\n<p>alpha The alpha component.</p>\n<p>_description: _</p>\n<p>Creates a color using RGB values and optional alpha value. The default alpha\nvalue makes a completely opaque color:</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Red with 100% alpha.</span>\n    ofColor <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Red with 50% alpha.</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool operator!=(&amp;color)</p>\n<p>&lt;!--\n<em>syntax: operator!=(&amp;color)</em>\n<em>name: operator!=</em>\n<em>returns: bool</em>\n<em>returns_description: _\n<em>parameters: const ofColor</em>&lt; PixelType &gt; &amp;color</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Test two colors for inequality.</p>\n<p><strong>Returns</strong>: true iff any of the R, G, B or A components are not equal.</p>\n<p>_description: _</p>\n<p>Returns true iff any of the R, G, B or A components are not equal.</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Red with 100% alpha.</span>\n    ofColor <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Red with 50% alpha.</span>\n    <span class=\"token keyword\">bool</span> not_equal <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">!=</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// not_equal is true</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; operator*(&amp;color)</p>\n<p>&lt;!--\n<em>syntax: operator*(&amp;color)</em>\n<em>name: operator*</em>\n<em>returns: ofColor</em>&lt; PixelType &gt;_\n<em>returns_description: _\n<em>parameters: const ofColor</em>&lt; PixelType &gt; &amp;color</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clamped multiplication operator.</p>\n<p>Multiply two colors by multiplying and clamping their R, G and B\ncomponents.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The color to multiply.</p>\n<p><strong>Returns</strong>: The new clamped color.</p>\n<p>_description: _</p>\n<p>Creates a new color by taking two colors and multiplying and clamping their R,\nG and B components. The alpha component is ignored.</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor c3 <span class=\"token operator\">=</span> c1 <span class=\"token operator\">*</span> c2<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c3 has the RGB value of (255,30,40)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; operator*(value)</p>\n<p>&lt;!--\n<em>syntax: operator*(value)</em>\n<em>name: operator*</em>\n<em>returns: ofColor</em>&lt; PixelType &gt;_\n_returns_description: _\n<em>parameters: float value</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clamped scalar multiplication operator.</p>\n<p>Multiply the R, G and B components by a scaler and clamp each.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The value to multiply.</p>\n<p><strong>Returns</strong>: The new clamped color.</p>\n<p>_description: _</p>\n<p>Multiplys R, G and B components by a scaler and clamps each to be &gt; 0 and &lt; limit().</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor c2 <span class=\"token operator\">=</span> c1 <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c2 has the RGB value of (255,60,40)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; &amp; operator*=(&amp;color)</p>\n<p>&lt;!--\n<em>syntax: operator*=(&amp;color)</em>\n<em>name: operator*=</em>\n<em>returns: ofColor</em>&lt; PixelType &gt; &amp;_\n<em>returns_description: _\n<em>parameters: const ofColor</em>&lt; PixelType &gt; &amp;color</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clamped multiplication operator.</p>\n<p>Multiply two colors by multiplying and clamping their R, G and B\ncomponents.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The color to multiply.</p>\n<p><strong>Returns</strong>: A reference to itself, the new clamped color.</p>\n<p>_description: _</p>\n<p>Set a color to the cumulative product of that color and another color's R, G\nand B components, then clamps each to be &gt; 0 and &lt; limit().</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor c2 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> c1<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c2 has the RGB value of (0,255,200)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; &amp; operator*=(value)</p>\n<p>&lt;!--\n<em>syntax: operator*=(value)</em>\n<em>name: operator*=</em>\n<em>returns: ofColor</em>&lt; PixelType &gt; &amp;_\n_returns_description: _\n<em>parameters: float value</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clamped scalar multiplication operator.</p>\n<p>Multiply the R, G and B components by a scaler and clamp each.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The scaler value.</p>\n<p><strong>Returns</strong>: A reference to itself, the new clamped color.</p>\n<p>_description: _</p>\n<p>Set a color to the cumulative product of that color and a scaler,\nthen clamps each to be &gt; 0 and &lt; limit().</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor c1 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c1 has the RGB value of (255,0,200)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; operator+(&amp;color)</p>\n<p>&lt;!--\n<em>syntax: operator+(&amp;color)</em>\n<em>name: operator+</em>\n<em>returns: ofColor</em>&lt; PixelType &gt;_\n<em>returns_description: _\n<em>parameters: const ofColor</em>&lt; PixelType &gt; &amp;color</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clamped addition operator.</p>\n<p>Add two colors by summing and clamping their R, G and B components.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The color to add.</p>\n<p><strong>Returns</strong>: The new clamped color.</p>\n<p>_description: _</p>\n<p>Creates a color that is a sum of two color's R, G and B components,\nthen clamps each to be &gt; 0 and &lt; limit().</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor c3 <span class=\"token operator\">=</span> c2 <span class=\"token operator\">+</span> c1<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c3 has the RGB value of (255,60,30)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; operator+(color)</p>\n<p>&lt;!--\n<em>syntax: operator+(color)</em>\n<em>name: operator+</em>\n<em>returns: ofColor</em>&lt; PixelType &gt;_\n_returns_description: _\n<em>parameters: float color</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clamped addition operator.</p>\n<p>Add a value to each of the R, G and B components and clamp each.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The value to add.</p>\n<p><strong>Returns</strong>: The new clamped color.</p>\n<p>_description: _</p>\n<p>Creates a color that is a sum of one color's R, G and B components and a value,\nthen clamps each to be &gt; 0 and &lt; limit().</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor c2 <span class=\"token operator\">=</span> c1 <span class=\"token operator\">+</span> <span class=\"token number\">30</span><span class=\"token punctuation\">.</span>f\n    <span class=\"token comment\" spellcheck=\"true\">// c2 has the RGB value of (130,255,50)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; &amp; operator+=(&amp;color)</p>\n<p>&lt;!--\n<em>syntax: operator+=(&amp;color)</em>\n<em>name: operator+=</em>\n<em>returns: ofColor</em>&lt; PixelType &gt; &amp;_\n<em>returns_description: _\n<em>parameters: const ofColor</em>&lt; PixelType &gt; &amp;color</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clamped addition operator.</p>\n<p>Add two colors by summing and clamping their R, G and B components.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The color to add.</p>\n<p><strong>Returns</strong>: A reference to itself, the new clamped color.</p>\n<p>_description: _</p>\n<p>Set a color to the cumulative sum of that color and another color's R, G\nand B components, then clamps each to be &gt; 0 and &lt; limit().</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor c2 <span class=\"token operator\">+</span><span class=\"token operator\">=</span> c1<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c2 has the RGB value of (255,60,30)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; &amp; operator+=(color)</p>\n<p>&lt;!--\n<em>syntax: operator+=(color)</em>\n<em>name: operator+=</em>\n<em>returns: ofColor</em>&lt; PixelType &gt; &amp;_\n_returns_description: _\n<em>parameters: float color</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clamped addition operator.</p>\n<p>Add a value to each of the R, G and B components and clamp each.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The value to add.</p>\n<p><strong>Returns</strong>: A reference to itself, the new clamped color.</p>\n<p>_description: _</p>\n<p>Set a color to the cumulative sum of that color's R, G and B components\nand a value, then clamps each to be &gt; 0 and &lt; limit().</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor c1 <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c1 has the RGB value of (255,40,30)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; operator-(&amp;color)</p>\n<p>&lt;!--\n<em>syntax: operator-(&amp;color)</em>\n<em>name: operator-</em>\n<em>returns: ofColor</em>&lt; PixelType &gt;_\n<em>returns_description: _\n<em>parameters: const ofColor</em>&lt; PixelType &gt; &amp;color</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clamped subtraction operator.</p>\n<p>Subtract two colors by subtracting and clamping their R, G and B\ncomponents.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The color to subtract.</p>\n<p><strong>Returns</strong>: The new clamped color.</p>\n<p>_description: _</p>\n<p>Creates a color that is the difference between two color's R, G and B components,\nthen clamps each to be &gt; 0 and &lt; limit().</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor c3 <span class=\"token operator\">=</span> c1 <span class=\"token operator\">-</span> c2<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c3 has the RGB value of (254, 0, 10)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; operator-(value)</p>\n<p>&lt;!--\n<em>syntax: operator-(value)</em>\n<em>name: operator-</em>\n<em>returns: ofColor</em>&lt; PixelType &gt;_\n_returns_description: _\n<em>parameters: float value</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clamped subtraction operator.</p>\n<p>Subtract a value from each of the R, G and B components and clamp each.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The value to subtract.</p>\n<p><strong>Returns</strong>: The new clamped color.</p>\n<p>_description: _</p>\n<p>Creates a color that is the difference between one color's R, G and B components\nand a value, then clamps each to be &gt; 0 and &lt; limit().</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor c2 <span class=\"token operator\">=</span> c1 <span class=\"token operator\">-</span> <span class=\"token number\">25</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c2 has the RGB value of (230, 5, 0)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; &amp; operator-=(&amp;color)</p>\n<p>&lt;!--\n<em>syntax: operator-=(&amp;color)</em>\n<em>name: operator-=</em>\n<em>returns: ofColor</em>&lt; PixelType &gt; &amp;_\n<em>returns_description: _\n<em>parameters: const ofColor</em>&lt; PixelType &gt; &amp;color</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clamped subtraction operator.</p>\n<p>Add two colors by subtracting and clamping their R, G and B components.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The color to subtract.</p>\n<p><strong>Returns</strong>: A reference to itself, the new clamped color.</p>\n<p>_description: _</p>\n<p>sets a color to the difference between that color's R, G and B\ncomponents and another color's R, G and B components, then\nclamps each to be &gt; 0 and &lt; limit().</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor c1 <span class=\"token operator\">-</span><span class=\"token operator\">=</span> c2<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c1 has the RGB value of (254, 0, 10)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; &amp; operator-=(color)</p>\n<p>&lt;!--\n<em>syntax: operator-=(color)</em>\n<em>name: operator-=</em>\n<em>returns: ofColor</em>&lt; PixelType &gt; &amp;_\n_returns_description: _\n<em>parameters: float color</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clamped subtraction operator.</p>\n<p>Subtract a value to each of the R, G and B components and clamp each.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The value to subtract.</p>\n<p><strong>Returns</strong>: A reference to itself, the new clamped color.</p>\n<p>_description: _</p>\n<p>Sets a color's R, G and B components to the difference between each component\nand a value, then clamps each to be &gt; 0 and &lt; limit().</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor c1 <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c1 has the RGB value of (230, 5, 0)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; operator/(&amp;color)</p>\n<p>&lt;!--\n<em>syntax: operator/(&amp;color)</em>\n<em>name: operator/</em>\n<em>returns: ofColor</em>&lt; PixelType &gt;_\n<em>returns_description: _\n<em>parameters: const ofColor</em>&lt; PixelType &gt; &amp;color</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clamped division operator.</p>\n<p>Divide two colors by treating the passed color components as divisors.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The divisor color.</p>\n<p><strong>Returns</strong>: The new clamped color.</p>\n<p>_description: _</p>\n<p>Creates a new color by taking two colors and dividing and clamping their R,\nG and B components. The alpha component is ignored.</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor c3 <span class=\"token operator\">=</span> c1 <span class=\"token operator\">/</span> c2<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c3 has the RGB value of (10,10,10)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; operator/(value)</p>\n<p>&lt;!--\n<em>syntax: operator/(value)</em>\n<em>name: operator/</em>\n<em>returns: ofColor</em>&lt; PixelType &gt;_\n_returns_description: _\n<em>parameters: float value</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clamped scalar division operator.</p>\n<p>Divide each of the R, G and B components by a scalar and clamp each.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The divisor value.</p>\n<p><strong>Returns</strong>: The new clamped color.</p>\n<p>_description: _</p>\n<p>Creates a new color that is the quotient of a color's R, G and B\ncomponents and a divisor value and clamps each to be &gt; 0 and &lt; limit().</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor c2 <span class=\"token operator\">=</span> c1 <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c2 has the RGB value of (100,15,10)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; &amp; operator/=(&amp;color)</p>\n<p>&lt;!--\n<em>syntax: operator/=(&amp;color)</em>\n<em>name: operator/=</em>\n<em>returns: ofColor</em>&lt; PixelType &gt; &amp;_\n<em>returns_description: _\n<em>parameters: const ofColor</em>&lt; PixelType &gt; &amp;color</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clamped division operator.</p>\n<p>Divide two colors by treating the passed color components as divisors.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The divisor color.</p>\n<p><strong>Returns</strong>: A reference to itself, the new clamped color.</p>\n<p>_description: _</p>\n<p>Set a color to the quotient of that color's and another color's R, G\nand B components, then clamps each to be &gt; 0 and &lt; limit().</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor c2 <span class=\"token operator\">/</span><span class=\"token operator\">=</span> c1<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c2 has the RGB value of (100,15,2)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; &amp; operator/=(value)</p>\n<p>&lt;!--\n<em>syntax: operator/=(value)</em>\n<em>name: operator/=</em>\n<em>returns: ofColor</em>&lt; PixelType &gt; &amp;_\n_returns_description: _\n<em>parameters: float value</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clamped scalar division operator.</p>\n<p>Divide each of the R, G and B components by a scalar and clamp each.</p>\n<p><strong>Warning</strong>: The alpha component is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The divisor value.</p>\n<p><strong>Returns</strong>: A reference to itself, the new clamped color.</p>\n<p>_description: _</p>\n<p>Set a color to the cumulative product of that color and a scaler,\nthen clamps each to be &gt; 0 and &lt; limit().</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor c1 <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c1 has the RGB value of (20,0,2)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; &amp; operator=(&amp;color)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;color)</em>\n<em>name: operator=</em>\n<em>returns: ofColor</em>&lt; PixelType &gt; &amp;_\n<em>returns_description: _\n<em>parameters: const ofColor</em>&lt; SrcType &gt; &amp;color</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Assign a color using an existing color.</p>\n<p>R, G, B and A components are set to the the values of the assigned\ncolor.</p>\n<p><strong>Warning</strong>: Depending on the PixelType and SrcType used, color precision\nmay be lost when converting a higher precision to a lower precision\nrepresentation.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The color to assign.</p>\n<p><strong>Returns</strong>: A reference to itself.</p>\n<p>_description: _</p>\n<p>R, G, B and A components are set to the the values of the assigned\ncolor.</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofColor c2 <span class=\"token operator\">=</span> c1<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// c2 has the RGB value of (255, 30, 20)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; &amp; operator=(value)</p>\n<p>&lt;!--\n<em>syntax: operator=(value)</em>\n<em>name: operator=</em>\n<em>returns: ofColor</em>&lt; PixelType &gt; &amp;_\n_returns_description: _\n<em>parameters: float value</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Assign a color using a grayscale value.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The grayscale value.</p>\n<p><strong>Returns</strong>: A reference to itself.</p>\n<p>_description: _</p>\n<p>R, G and B components are set to the grayscale value and alpha is\nset to limit().</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>is equivalent to:</p>\n<pre><code>    ofColor <span class=\"token function\">myColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool operator==(&amp;color)</p>\n<p>&lt;!--\n<em>syntax: operator==(&amp;color)</em>\n<em>name: operator==</em>\n<em>returns: bool</em>\n<em>returns_description: _\n<em>parameters: const ofColor</em>&lt; PixelType &gt; &amp;color</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Test two colors for equality.</p>\n<p><strong>Returns</strong>: true iff the R, G, B and A components are all equal.</p>\n<p>_description: _</p>\n<pre><code>    ofColor <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Red with 100% alpha.</span>\n    ofColor <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Red with 50% alpha.</span>\n    <span class=\"token keyword\">bool</span> is_equal <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">==</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// is_equal is false</span>\n    c2<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n    is_equal <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">==</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// is_equal is true</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const PixelType &amp; operator<a href=\"n\"></a></p>\n<p>&lt;!--\n<em>syntax: operator<a href=\"n\"></a></em>\n<em>name: operator[]</em>\n<em>returns: const PixelType &amp;</em>\n_returns_description: _\n<em>parameters: size_t n</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Array subscript operator.</p>\n<p>If n is 0 returns .r, if 1 returns .g, if 2 returns .b, if 3 returns\nalpha.</p>\n<p><strong>Parameters:</strong></p>\n<p>n An index 0-3 of the component to get.</p>\n<p><strong>Returns</strong>: The value of the requested component.</p>\n<p>_description: _</p>\n<p>If n is 0 returns .r, if 1 returns .g, if 2 returns .b, if 3 returns\nalpha.</p>\n<pre><code>    ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> red <span class=\"token operator\">=</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Red is 128.</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###PixelType &amp; operator<a href=\"n\"></a></p>\n<p>&lt;!--\n<em>syntax: operator<a href=\"n\"></a></em>\n<em>name: operator[]</em>\n<em>returns: PixelType &amp;</em>\n_returns_description: _\n<em>parameters: size_t n</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Array subscript operator.</p>\n<p>If n is 0 returns .r, if 1 returns .g, if 2 returns .b, if 3 returns\nalpha.</p>\n<p><strong>Parameters:</strong></p>\n<p>n An index 0-3 of the component to get.</p>\n<p><strong>Returns</strong>: The value of the requested component.</p>\n<p>_description: _</p>\n<p>Array subscript operator. If n is 0 returns .r, if 1 returns .g, if 2 returns .b, if 3 returns alpha.</p>\n<pre><code>\tofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> red <span class=\"token operator\">=</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// red is 128</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(&amp;color)</p>\n<p>&lt;!--\n<em>syntax: set(&amp;color)</em>\n<em>name: set</em>\n<em>returns: void</em>\n<em>returns_description: _\n<em>parameters: const ofColor</em>&lt; PixelType &gt; &amp;color</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set an ofColor_ from an existing ofColor_.</p>\n<p>This will use the R, G, B and A components from the passed color.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The ofColor_ to copy.</p>\n<p>_description: _</p>\n<p>This will use the R, G, B and A components from the passed color.</p>\n<pre><code>    ofColor <span class=\"token function\">r</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Red</span>\n    ofColor <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Blue</span>\n    r<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now the RGB value of r is (0,0,255)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(gray, alpha)</p>\n<p>&lt;!--\n<em>syntax: set(gray, alpha)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float gray, float alpha</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set a grayscale ofColor_ by specifying a single number.</p>\n<p><strong>Parameters:</strong></p>\n<p>gray A grayscale value.</p>\n<p>alpha The opacity of the color.</p>\n<p>_description: _</p>\n<p>Creates a gray color from the value of gray. This single value will be taken by each of the R, G and B components. The alpha value defaults to completely opaque.</p>\n<pre><code>    ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Red ...</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// ... and now 50% gray with 50% alpha.</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(red, green, blue, alpha)</p>\n<p>&lt;!--\n<em>syntax: set(red, green, blue, alpha)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float red, float green, float blue, float alpha</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set an ofColor_ by using RGB values.</p>\n<p><strong>Parameters:</strong></p>\n<p>red The red component.</p>\n<p>green The green component.</p>\n<p>blue The blue component.</p>\n<p>alpha The alpha component.</p>\n<p>_description: _</p>\n<p>Creates a color using RGB values and optional alpha value. The default\nalpha value makes a completely opaque color. By default, the alpha\ncomponent will take the PixelType's maximum, producing an opaque color.\nThe channel values must fall within the range represented by the PixelType</p>\n<pre><code>    ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Red ...</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// ... and now green.</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setBrightness(brightness)</p>\n<p>&lt;!--\n<em>syntax: setBrightness(brightness)</em>\n<em>name: setBrightness</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float brightness</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the brightness of this color.</p>\n<p><strong>Parameters:</strong></p>\n<p>brightness A brightness value to set in the range of 0 - limit().</p>\n<p>_description: _</p>\n<p>Change the current brightness, leaving hue and saturation the same.</p>\n<pre><code>    ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Bright blue ...</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">setBrightness</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// ... dark blue.</span>\n</code></pre>\n<p>Refer the <a href=\"#HSB\">discussion of HSB</a>.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setHex(hexColor, alpha)</p>\n<p>&lt;!--\n<em>syntax: setHex(hexColor, alpha)</em>\n<em>name: setHex</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int hexColor, float alpha</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set an ofColor_ from a hexadecimal representation.</p>\n<p><strong>Warning</strong>: The alpha value <em>should not</em> be packed in the hexColor and\nmust be specified separately.</p>\n<p><strong>Parameters:</strong></p>\n<p>hexColor An RGB color in hexadecimal form.</p>\n<p>alpha The alpha value of the color.</p>\n<p>_description: _</p>\n<p>In some cases, it is convenient to represent colors using a hexadecimal\nnumber. In this case, red, green and blue values are packed into a\ninteger.</p>\n<p>Set this color to hexColor using a 24 bit hex-style color as normally\nused in web development. The alpha channel is specified separately\nand will default to the PixelType's maximum, resulting in an opaque color.</p>\n<pre><code>    ofColor c<span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">setHex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFFFFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// White.</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">setHex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00FF00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Green.</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">setHex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFF8000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Orange, 50% alpha.</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setHsb(hue, saturation, brightness, alpha)</p>\n<p>&lt;!--\n<em>syntax: setHsb(hue, saturation, brightness, alpha)</em>\n<em>name: setHsb</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float hue, float saturation, float brightness, float alpha</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the color using HSB components.</p>\n<p><strong>Parameters:</strong></p>\n<p>hue A hue value to set in the range of 0 - limit().</p>\n<p>saturation A saturation value to set in the range of 0 - limit().</p>\n<p>brightness A brightness value to set in the range of 0 - limit().</p>\n<p>alpha An alpha value to set in the range of 0 - limit().</p>\n<p>_description: _</p>\n<p>In some cases, it is convenient to represent colors using a HSB\nvalue. In this case, red, green and blue values are represented by their hue,\nsaturation and brightness.</p>\n<p>Set this color using a HSB representation. Refer the <a href=\"#HSB\">discussion of HSB</a>\nabove. <strong>Note</strong> that the hue value has a range that matches the base data type\n(ie <strong>0 to 255</strong> for the standard ofColor), rather than 0 to 360, 0 to 100 or\nfloat 0 to 1, as may be expected. The alpha channel is specified separately\nand will default to the PixelType's maximum, resulting in an opaque color.</p>\n<pre><code>    ofColor c <span class=\"token operator\">=</span> <span class=\"token function\">ofColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// c is black</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">setHsb</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// c is now bright red</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">setHsb</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// c is still bright red (colors wrap around)</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">setHsb</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// c is dark red</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">setHsb</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// c is dull light red</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setHue(hue)</p>\n<p>&lt;!--\n<em>syntax: setHue(hue)</em>\n<em>name: setHue</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float hue</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the hue of this color.</p>\n<p><strong>Parameters:</strong></p>\n<p>hue A hue value to set in the range of 0 - limit().</p>\n<p>_description: _</p>\n<p>Change the current hue, leaving saturation and brightness the same.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span><span class=\"token function\">fromHsb</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// bright red</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">setHue</span><span class=\"token punctuation\">(</span> <span class=\"token number\">128</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now bright cyan</span>\n</code></pre>\n<p>Refer the <a href=\"#HSB\">discussion of HSB</a> above.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setHueAngle(angle)</p>\n<p>&lt;!--\n<em>syntax: setHueAngle(angle)</em>\n<em>name: setHueAngle</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float angle</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the hue angle of this color.</p>\n<p><strong>Parameters:</strong></p>\n<p>angle A hue angle value to set in the range of 0 - 360 degrees.</p>\n<p>_description: _</p>\n<p>The hue field in setHsb() and in setHue() represents hue as a range between 0 and\n255 because the hue value has a range that matches the base data type,\nsetHueAngle() sets hue using the conventional way to represent hue: with the\nrange between 0 and 360.</p>\n<p><img src=\"hue_circle.jpg\" alt=\"hc\"></p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setSaturation(saturation)</p>\n<p>&lt;!--\n<em>syntax: setSaturation(saturation)</em>\n<em>name: setSaturation</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float saturation</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the saturation of this color.</p>\n<p>This method uses HSB not HSL. So red desaturated is white, not gray</p>\n<p><strong>Parameters:</strong></p>\n<p>saturation A saturation value value in the range of 0 - limit().</p>\n<p><strong>See also</strong>: http://en.wikipedia.org/wiki/HSL_and_HSV</p>\n<p>_description: _</p>\n<p>Change the current saturation, leaving hue and brightness intact.</p>\n<pre><code>    ofColor <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Vibrant blue ...</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">setSaturation</span><span class=\"token punctuation\">(</span> <span class=\"token number\">128</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// ... pale blue.</span>\n</code></pre>\n<p>Refer the <a href=\"#HSB\">discussion of HSB</a> above.</p>\n<p>See also: http://en.wikipedia.org/wiki/HSL_and_HSV</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###PixelType a</p>\n<p>&lt;!--\n<em>name: a</em>\n<em>type: PixelType</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>&lt; The alpha color component.</p>\n<p>_description: _</p>\n<p>The alpha value (transparency) of a color. 0 is completely transparent, 255 is completely opaque.</p>\n<pre><code>    ofColor c <span class=\"token operator\">=</span> <span class=\"token function\">ofColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Bright red with default limit() value (this case its 255)</span>\n    c<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now the color is bright red with the opacity set to 50 (mostly see through)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ aliceBlue</p>\n<p>&lt;!--\n<em>name: aliceBlue</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ antiqueWhite</p>\n<p>&lt;!--\n<em>name: antiqueWhite</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ aqua</p>\n<p>&lt;!--\n<em>name: aqua</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ aquamarine</p>\n<p>&lt;!--\n<em>name: aquamarine</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ azure</p>\n<p>&lt;!--\n<em>name: azure</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###PixelType b</p>\n<p>&lt;!--\n<em>name: b</em>\n<em>type: PixelType</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>&lt; The blue color component.</p>\n<p>_description: _</p>\n<p>The blue component of this color.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>cyan<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> blue <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 255</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ beige</p>\n<p>&lt;!--\n<em>name: beige</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ bisque</p>\n<p>&lt;!--\n<em>name: bisque</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor black</p>\n<p>&lt;!--\n<em>name: black</em>\n<em>type: ofColor</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>Pre-iniatilized black color.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>black<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0, 0, 0)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ blanchedAlmond</p>\n<p>&lt;!--\n<em>name: blanchedAlmond</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor blue</p>\n<p>&lt;!--\n<em>name: blue</em>\n<em>type: ofColor</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>Pre-iniatilized blue color.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>blue<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0, 0, 255)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ blueSteel</p>\n<p>&lt;!--\n<em>name: blueSteel</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ blueViolet</p>\n<p>&lt;!--\n<em>name: blueViolet</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ brown</p>\n<p>&lt;!--\n<em>name: brown</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ burlyWood</p>\n<p>&lt;!--\n<em>name: burlyWood</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ cadetBlue</p>\n<p>&lt;!--\n<em>name: cadetBlue</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ chartreuse</p>\n<p>&lt;!--\n<em>name: chartreuse</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ chocolate</p>\n<p>&lt;!--\n<em>name: chocolate</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ coral</p>\n<p>&lt;!--\n<em>name: coral</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ cornflowerBlue</p>\n<p>&lt;!--\n<em>name: cornflowerBlue</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ cornsilk</p>\n<p>&lt;!--\n<em>name: cornsilk</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ crimson</p>\n<p>&lt;!--\n<em>name: crimson</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor cyan</p>\n<p>&lt;!--\n<em>name: cyan</em>\n<em>type: ofColor</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>Pre-iniatilized cyan color.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>cyan<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0, 255, 255)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ darkBlue</p>\n<p>&lt;!--\n<em>name: darkBlue</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ darkCyan</p>\n<p>&lt;!--\n<em>name: darkCyan</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ darkGoldenRod</p>\n<p>&lt;!--\n<em>name: darkGoldenRod</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ darkGray</p>\n<p>&lt;!--\n<em>name: darkGray</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ darkGreen</p>\n<p>&lt;!--\n<em>name: darkGreen</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ darkGrey</p>\n<p>&lt;!--\n<em>name: darkGrey</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ darkKhaki</p>\n<p>&lt;!--\n<em>name: darkKhaki</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ darkMagenta</p>\n<p>&lt;!--\n<em>name: darkMagenta</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ darkOliveGreen</p>\n<p>&lt;!--\n<em>name: darkOliveGreen</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ darkOrchid</p>\n<p>&lt;!--\n<em>name: darkOrchid</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ darkRed</p>\n<p>&lt;!--\n<em>name: darkRed</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ darkSalmon</p>\n<p>&lt;!--\n<em>name: darkSalmon</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ darkSeaGreen</p>\n<p>&lt;!--\n<em>name: darkSeaGreen</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ darkSlateBlue</p>\n<p>&lt;!--\n<em>name: darkSlateBlue</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ darkSlateGray</p>\n<p>&lt;!--\n<em>name: darkSlateGray</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ darkSlateGrey</p>\n<p>&lt;!--\n<em>name: darkSlateGrey</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ darkTurquoise</p>\n<p>&lt;!--\n<em>name: darkTurquoise</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ darkViolet</p>\n<p>&lt;!--\n<em>name: darkViolet</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ darkorange</p>\n<p>&lt;!--\n<em>name: darkorange</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ deepPink</p>\n<p>&lt;!--\n<em>name: deepPink</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ deepSkyBlue</p>\n<p>&lt;!--\n<em>name: deepSkyBlue</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ dimGray</p>\n<p>&lt;!--\n<em>name: dimGray</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ dimGrey</p>\n<p>&lt;!--\n<em>name: dimGrey</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ dodgerBlue</p>\n<p>&lt;!--\n<em>name: dodgerBlue</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ fireBrick</p>\n<p>&lt;!--\n<em>name: fireBrick</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ floralWhite</p>\n<p>&lt;!--\n<em>name: floralWhite</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ forestGreen</p>\n<p>&lt;!--\n<em>name: forestGreen</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ fuchsia</p>\n<p>&lt;!--\n<em>name: fuchsia</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###PixelType g</p>\n<p>&lt;!--\n<em>name: g</em>\n<em>type: PixelType</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>&lt; The green color component.</p>\n<p>_description: _</p>\n<p>The green component of this color.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>yellow<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> green <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 255</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ gainsboro</p>\n<p>&lt;!--\n<em>name: gainsboro</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ ghostWhite</p>\n<p>&lt;!--\n<em>name: ghostWhite</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ gold</p>\n<p>&lt;!--\n<em>name: gold</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ goldenRod</p>\n<p>&lt;!--\n<em>name: goldenRod</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor gray</p>\n<p>&lt;!--\n<em>name: gray</em>\n<em>type: ofColor</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>Pre-iniatilized gray color.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>gray<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor green</p>\n<p>&lt;!--\n<em>name: green</em>\n<em>type: ofColor</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>Pre-iniatilized green color.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>green<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0, 255, 0)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ greenYellow</p>\n<p>&lt;!--\n<em>name: greenYellow</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ grey</p>\n<p>&lt;!--\n<em>name: grey</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ honeyDew</p>\n<p>&lt;!--\n<em>name: honeyDew</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ hotPink</p>\n<p>&lt;!--\n<em>name: hotPink</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ indianRed</p>\n<p>&lt;!--\n<em>name: indianRed</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ indigo</p>\n<p>&lt;!--\n<em>name: indigo</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ ivory</p>\n<p>&lt;!--\n<em>name: ivory</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ khaki</p>\n<p>&lt;!--\n<em>name: khaki</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ lavender</p>\n<p>&lt;!--\n<em>name: lavender</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ lavenderBlush</p>\n<p>&lt;!--\n<em>name: lavenderBlush</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ lawnGreen</p>\n<p>&lt;!--\n<em>name: lawnGreen</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ lemonChiffon</p>\n<p>&lt;!--\n<em>name: lemonChiffon</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ lightBlue</p>\n<p>&lt;!--\n<em>name: lightBlue</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ lightCoral</p>\n<p>&lt;!--\n<em>name: lightCoral</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ lightCyan</p>\n<p>&lt;!--\n<em>name: lightCyan</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ lightGoldenRodYellow</p>\n<p>&lt;!--\n<em>name: lightGoldenRodYellow</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ lightGray</p>\n<p>&lt;!--\n<em>name: lightGray</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ lightGreen</p>\n<p>&lt;!--\n<em>name: lightGreen</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ lightGrey</p>\n<p>&lt;!--\n<em>name: lightGrey</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ lightPink</p>\n<p>&lt;!--\n<em>name: lightPink</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ lightSalmon</p>\n<p>&lt;!--\n<em>name: lightSalmon</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ lightSeaGreen</p>\n<p>&lt;!--\n<em>name: lightSeaGreen</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ lightSkyBlue</p>\n<p>&lt;!--\n<em>name: lightSkyBlue</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ lightSlateGray</p>\n<p>&lt;!--\n<em>name: lightSlateGray</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ lightSlateGrey</p>\n<p>&lt;!--\n<em>name: lightSlateGrey</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ lightSteelBlue</p>\n<p>&lt;!--\n<em>name: lightSteelBlue</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ lightYellow</p>\n<p>&lt;!--\n<em>name: lightYellow</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ lime</p>\n<p>&lt;!--\n<em>name: lime</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ limeGreen</p>\n<p>&lt;!--\n<em>name: limeGreen</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ linen</p>\n<p>&lt;!--\n<em>name: linen</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor magenta</p>\n<p>&lt;!--\n<em>name: magenta</em>\n<em>type: ofColor</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>Pre-iniatilized magenta color.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>magenta<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (255, 0, 255)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ maroon</p>\n<p>&lt;!--\n<em>name: maroon</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ mediumAquaMarine</p>\n<p>&lt;!--\n<em>name: mediumAquaMarine</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ mediumBlue</p>\n<p>&lt;!--\n<em>name: mediumBlue</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ mediumOrchid</p>\n<p>&lt;!--\n<em>name: mediumOrchid</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ mediumPurple</p>\n<p>&lt;!--\n<em>name: mediumPurple</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ mediumSeaGreen</p>\n<p>&lt;!--\n<em>name: mediumSeaGreen</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ mediumSlateBlue</p>\n<p>&lt;!--\n<em>name: mediumSlateBlue</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ mediumSpringGreen</p>\n<p>&lt;!--\n<em>name: mediumSpringGreen</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ mediumTurquoise</p>\n<p>&lt;!--\n<em>name: mediumTurquoise</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ mediumVioletRed</p>\n<p>&lt;!--\n<em>name: mediumVioletRed</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ midnightBlue</p>\n<p>&lt;!--\n<em>name: midnightBlue</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ mintCream</p>\n<p>&lt;!--\n<em>name: mintCream</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ mistyRose</p>\n<p>&lt;!--\n<em>name: mistyRose</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ moccasin</p>\n<p>&lt;!--\n<em>name: moccasin</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ navajoWhite</p>\n<p>&lt;!--\n<em>name: navajoWhite</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ navy</p>\n<p>&lt;!--\n<em>name: navy</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ oldLace</p>\n<p>&lt;!--\n<em>name: oldLace</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ olive</p>\n<p>&lt;!--\n<em>name: olive</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ oliveDrab</p>\n<p>&lt;!--\n<em>name: oliveDrab</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ orange</p>\n<p>&lt;!--\n<em>name: orange</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ orangeRed</p>\n<p>&lt;!--\n<em>name: orangeRed</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ orchid</p>\n<p>&lt;!--\n<em>name: orchid</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ paleGoldenRod</p>\n<p>&lt;!--\n<em>name: paleGoldenRod</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ paleGreen</p>\n<p>&lt;!--\n<em>name: paleGreen</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ paleTurquoise</p>\n<p>&lt;!--\n<em>name: paleTurquoise</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ paleVioletRed</p>\n<p>&lt;!--\n<em>name: paleVioletRed</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ papayaWhip</p>\n<p>&lt;!--\n<em>name: papayaWhip</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ peachPuff</p>\n<p>&lt;!--\n<em>name: peachPuff</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ peru</p>\n<p>&lt;!--\n<em>name: peru</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ pink</p>\n<p>&lt;!--\n<em>name: pink</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ plum</p>\n<p>&lt;!--\n<em>name: plum</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ powderBlue</p>\n<p>&lt;!--\n<em>name: powderBlue</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ purple</p>\n<p>&lt;!--\n<em>name: purple</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###PixelType r</p>\n<p>&lt;!--\n<em>name: r</em>\n<em>type: PixelType</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>&lt; The red color component.</p>\n<p>_description: _</p>\n<p>The red component of this color.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>red<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> red <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 255</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor red</p>\n<p>&lt;!--\n<em>name: red</em>\n<em>type: ofColor</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>Pre-iniatilized red color.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>red<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (255, 0, 0)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ rosyBrown</p>\n<p>&lt;!--\n<em>name: rosyBrown</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ royalBlue</p>\n<p>&lt;!--\n<em>name: royalBlue</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ saddleBrown</p>\n<p>&lt;!--\n<em>name: saddleBrown</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ salmon</p>\n<p>&lt;!--\n<em>name: salmon</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ sandyBrown</p>\n<p>&lt;!--\n<em>name: sandyBrown</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ seaGreen</p>\n<p>&lt;!--\n<em>name: seaGreen</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ seaShell</p>\n<p>&lt;!--\n<em>name: seaShell</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ sienna</p>\n<p>&lt;!--\n<em>name: sienna</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ silver</p>\n<p>&lt;!--\n<em>name: silver</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ skyBlue</p>\n<p>&lt;!--\n<em>name: skyBlue</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ slateBlue</p>\n<p>&lt;!--\n<em>name: slateBlue</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ slateGray</p>\n<p>&lt;!--\n<em>name: slateGray</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ slateGrey</p>\n<p>&lt;!--\n<em>name: slateGrey</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ snow</p>\n<p>&lt;!--\n<em>name: snow</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ springGreen</p>\n<p>&lt;!--\n<em>name: springGreen</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ steelBlue</p>\n<p>&lt;!--\n<em>name: steelBlue</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ tan</p>\n<p>&lt;!--\n<em>name: tan</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ teal</p>\n<p>&lt;!--\n<em>name: teal</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ thistle</p>\n<p>&lt;!--\n<em>name: thistle</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ tomato</p>\n<p>&lt;!--\n<em>name: tomato</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ turquoise</p>\n<p>&lt;!--\n<em>name: turquoise</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###PixelType v</p>\n<p>&lt;!--\n<em>name: v</em>\n<em>type: PixelType</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>&lt; The pixel values as an array.</p>\n<p>_description: _</p>\n<p>Array/pointer access. Allows the r, g, b, a components to be accessed as a pointer to an array of PixelType.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ violet</p>\n<p>&lt;!--\n<em>name: violet</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ wheat</p>\n<p>&lt;!--\n<em>name: wheat</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor white</p>\n<p>&lt;!--\n<em>name: white</em>\n<em>type: ofColor</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>Pre-iniatilized white color.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ whiteSmoke</p>\n<p>&lt;!--\n<em>name: whiteSmoke</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor yellow</p>\n<p>&lt;!--\n<em>name: yellow</em>\n<em>type: ofColor</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>Pre-iniatilized yellow color.</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>yellow<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (255, 255, 0)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_ yellowGreen</p>\n<p>&lt;!--\n<em>name: yellowGreen</em>\n<em>type: ofColor</em>_\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Predefined Colors</p>\n<p>A collection of static colors defined by name.</p>\n<p>These constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:</p>\n<pre><code>    ofColor myColor <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>white<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// myColor is now full white (255,255,255,255).</span>\n</code></pre>\n<p>The list of colors is based upon the CSS names colors and can be viewed\n<a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">here</a>.</p>\n<p>{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofColor_\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: True_\n_extends: _\n-->\n\n##InlineDescription\n\n\n\nofColor represents a color in openFrameworks.\n\nThe default ofColor uses unsigned char values [0,255], but use\nofFloatColor for floating point values [0.0,1.0], or ofShortColor for\nunsigned short ints [0,[65,535]]. ofColor can be represented by an RGB\nvalue, an HSB value or a hex value.\n\n\\tparam PixelType The data type used to represent a single pixel value.\n\n\n\n\n\n##Description\n\nofColor represents a color in openFrameworks.\nColors are usually defined by specifying a red, green, blue and optionally\nan alpha value (r,g,b,[a]), or a hue, saturation, brightness and optionally\nan alpha value (h,s,b,[a]) or hexadecimal value with an optional alpha\nvalue (0x________, a).\n\nFor example:\n\n~~~~{.cpp}\n// set red, component by component\nofColor red;\nred.r=255;\nred.g=0;\nred.b=0;\nofSetColor(red);\n// draw color is now red\n\n// shorter notation is also possible\nofColor green(0, 255, 0);\nofSetColor(green);\n// draw color is now green\n\n// or even shorter\nofSetColor( ofColor(0, 0, ofRandom( 128, 255 ) );\n// draw color is now a random blue\n~~~~\n\nofColor also enables a lot of extra functionality like using HSB instead of\ncolor spectrums, lerping or linearly interpolating between colors, and\ninverting colors, among other things.\n\nofColor is templated, which means that it has several different ways it can\nbe created. These are probably best to leave as they are because there's\nalready a few kinds typedefed for you. The default ofColor uses unsigned\nchar values (0 to 255), but you can make an ofFloatColor if you want to work\nwith floating point numbers between 0 and 1, or ofShortColor if you want to\nwork with integers between 0 and 65,535.\n\n|   Typedef     |    PixelType     | Bit Depth | Min. Value | Max. Value  |\n| ------------- | ---------------- | --------- | ---------- | ----------- |\n| `ofColor`     | `unsigned char`  | 8         | 0          | 255         |\n| `ofShortColor`| `unsigned short` | 16        | 0          | 65535       |\n| `ofFloatColor`| `float`          | _varies_  | 0.0        | 1.0         |\n\n#### HSB\n\nYou're probably familiar with RGB colors already, but HSB is a big part of\nofColor. It uses a *hue* value (for the standard ofColor the range for this\nvalue is between 0 and 255) to determine what the hue (the 'color' in the\nsense of a color in the rainbow) will be:\n\n![HSB](hsb.png)\n\nApproximate hues for some common colors:\n\n* Red: 0 (wrapped round from 255)\n* Orange: 25\n* Yellow: 42\n* Green: 85\n* Blue: 170\n* Purple: 205\n* Red: 255 (wraps round to 0)\n\nOnce you've selected a hue, you can use the *saturation* and *brightness*\nvalues to further refine the color. The saturation determines how much of\nthe hue versus white is present and brightness determines how much hue\nversus black is present:\n\n![SB](hsb-cone.jpg)\n\nIn other words, saturation refers to the intensity of the color: high\nsaturation means intense color, low saturation means washed out or black and\nwhite. Brightness refers to how light or dark the color is: high brightness\nmeans a bright color, low brightness means a dark color. If the brightness\nis 0 the resulting color will be black, regardless of the values of hue or\nsaturation.\n\n\\tparam PixelType The data type used to represent a single pixel value.\n\n\n\n\n\n##Methods\n\n\n\n###ofColor_< PixelType > & clamp()\n\n<!--\n_syntax: clamp()_\n_name: clamp_\n_returns: ofColor_< PixelType > &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClamp values between 0 and the limit().\n\nClamps the value of each component, R, G, B and A to a maximum of\nlimit() and a minimum of zero.\n\n\n**Returns**: A reference to itself.\n\n\n\n\n\n_description: _\n\nThis clamps the values of your color in case they're too high or low for their\ntypes, in case you go negative or too use values that are too high, like\nanything < 0 or >1.0 in the case of ofFloatColor.\n\n~~~~{.cpp}\nofFloatColor c( 1, 0, 0 );\nc.g = 2; // g now has 2: this is usually invalid!\nc.clamp(); // c.g has now been clamped so its value is 1.\n~~~~\nAlso for ofColor anything <0 or >255.\n\n~~~~{.cpp}\n    ofColor c( 300, 0, 0 );\n    // r component is above the limit() of 255.\n    c.clamp(); // c.r has now been clamped so its value is 255.\n~~~~\n\nReturns: A reference to itself.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void copyFrom(&mom)\n\n<!--\n_syntax: copyFrom(&mom)_\n_name: copyFrom_\n_returns: void_\n_returns_description: _\n_parameters: const ofColor_< SrcType > &mom_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\}\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > fromHex(hexColor, alpha)\n\n<!--\n_syntax: fromHex(hexColor, alpha)_\n_name: fromHex_\n_returns: ofColor_< PixelType >_\n_returns_description: _\n_parameters: int hexColor, float alpha_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreate an ofColor_ from a hexadecimal value.\n\n\n**Parameters:**\n\nhexColor A color in hexadecimal form.\n\nalpha The alpha value of the color.\n\n\n\n\n\n_description: _\n\nConvenience method to construct an ofColor from a 24 bit hex value.\nIn some cases, it is convenient to represent colors using a hexadecimal\nnumber. In this case, red, green, and blue values are packed into a\nsingle integer.\n\nThe alpha channel is specified separately and will default to the\nPixelType's maximum, resulting in an opaque color.\n\n~~~~{.cpp}\n    ofColor c = ofColor::fromHex(0xFFFF00); // c is yellow.\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > fromHsb(hue, saturation, brightness, alpha)\n\n<!--\n_syntax: fromHsb(hue, saturation, brightness, alpha)_\n_name: fromHsb_\n_returns: ofColor_< PixelType >_\n_returns_description: _\n_parameters: float hue, float saturation, float brightness, float alpha_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreate an ofColor_ from an HSB representation.\n\n\n**Parameters:**\n\nhue The hue of the color.\n\nsaturation The saturation of the color.\n\nbrightness The brightness of the color.\n\nalpha The alpha value of the color.\n\n\n\n\n\n_description: _\n\nConvenience method to construct an ofColor from Hsb values.\n\nWhile ofColor_ represents color using R, G, B, and A components, other\nrepresentations are available.  This method allows the user to construct\nan ofColor_ from a Hue (H), Saturation (S), and Brightness (B) and an\noptional alpha value.\n\nThe alpha channel is specified separately and will default to the\nPixelType's maximum, resulting in an opaque color.\n\nFor more information about HSB, see:\n    http://en.wikipedia.org/wiki/HSV_color_space\n\n~~~~{.cpp}\n    ofColor c = ofColor::fromHsb(128, 255, 255);\n    // c is bright saturated cyan.\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getBrightness()\n\n<!--\n_syntax: getBrightness()_\n_name: getBrightness_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCalculate the brightness of of the R, G and B components.\n\nBrightness is simply the maximum of the three color components. This\nmethod of calculating brightness is used by Photoshop (HSB) and\nProcessing (HSB).  Note that brightness is also called \"Value\".\n\n\n**Returns**: the brightness in the range 0 - limit().\n\n\n\n\n\n_description: _\n\nReturn the brightness component of the HSB representation of this color.\nRefer the [discussion of HSB](#HSB) above.\n\nBrightness is simply the maximum of the three color components. This\nmethod of calculating brightness is used by Photoshop (HSB) and\nProcessing (HSB).  Note that brightness is also called \"Value\".\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > getClamped()\n\n<!--\n_syntax: getClamped()_\n_name: getClamped_\n_returns: ofColor_< PixelType >_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nA non-destructive version of clamp().\n\n\n**See also**: clamp()\n\n**Returns**: A copy of this color, clamped.\n\n\n\n\n\n_description: _\n\nReturns a clamped version of this color, without modifying the original.\nSee [clamp](#clamp) for more info.\n\n~~~~{.cpp}\n    ofColor c( 300, 200, 0 );\n    // r component is above the limit() of 255.\n    ofColor g = c.getClamped(); // c.r is still 300.\n    //g has the RGB value (255, 200, 0)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getHex()\n\n<!--\n_syntax: getHex()_\n_name: getHex_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet a 24-bit hexadecimal representation of the RGB color.\n\n\n**Warning**: This method does _not_ encode the alpha component.\n\n\n**Returns**: An integer representing an RGB color.\n\n\n\n\n\n_description: _\n\nReturn a 24 bit hexidecimal number representing this color.\n\n~~~~{.cpp}\nofColor c( 255, 255, 0 ); // yellow\nint hex = c.getHex(); // hex is 0xffff00 (or 16776960 in decimal)\n~~~~\n\nUsually when we look at these colors in print they're hex, so don't be\nsurprised if they don't look familiar when you print them as decimal.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void getHsb(&hue, &saturation, &brightness)\n\n<!--\n_syntax: getHsb(&hue, &saturation, &brightness)_\n_name: getHsb_\n_returns: void_\n_returns_description: _\n_parameters: float &hue, float &saturation, float &brightness_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nExtract the hue, saturation and brightness (HSB) from this color.\n\n\n**Parameters:**\n\nhue A reference to the hue to fill. Will be in the range of\n    0 - limit().\n\nsaturation A reference to the saturation to fill. Will be in the\n\t\trange of 0 - limit().\n\nbrightness A reference to the brightness to fill. Will be in the\n    range of 0 - limit().\n\n\n\n\n\n_description: _\n\nReturn all three components of the HSB representation of this color\nat the same time.\n\n~~~~{.cpp}\n    ofColor red(255,0,0);\n    float hue = 0;  // The hue value to set.\n    float saturation = 0; // The saturation value to set.\n    float brightness = 0; // The brightness value to set.\n    red.getHsb(hue, saturation, brightness);\n    // Hue is now 0 (for red), saturation is 255, brightness is 255.\n~~~~\n\nRefer the [discussion of HSB](#HSB) above.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getHue()\n\n<!--\n_syntax: getHue()_\n_name: getHue_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the Hue of this color.\n\nThe color is converted from the default RGB to an HSB color space and\nthe resulting Hue value is returned.  The resulting hue value will\nalways be returned in the range 0 - limit().\n\n\n**Returns**: The Hue value in the range 0 - limit().\n\n\n\n\n\n_description: _\n\nReturn the hue component of the HSB representation of this color.\nRefer the [discussion of HSB](#HSB) above.\n\nThe color is converted from the default RGB to an HSB color space and\nthe resulting hue value is returned.  The resulting hue value will\nalways be returned in the range 0 - limit().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getHueAngle()\n\n<!--\n_syntax: getHueAngle()_\n_name: getHueAngle_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the Hue angle of this color.\n\nThe color is converted from the default RGB to an HSB color space and\nthe resulting Hue angle is returned.  The resulting hue value will\nalways be returned in degrees in the range 0 - 360.\n\n\n**Returns**: The Hue angle in the range 0 - 360.\n\n\n\n\n\n_description: _\n\nThe color is converted from the default RGB to an HSB color space and\nthe resulting hue angle is returned.  The resulting hue value will\nalways be returned in degrees in the range 0 - 360.\n\n![hc](hue_circle.jpg)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > getInverted()\n\n<!--\n_syntax: getInverted()_\n_name: getInverted_\n_returns: ofColor_< PixelType >_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nA non-destructive version of invert().\n\n\n**See also**: invert()\n\n**Returns**: A copy of this color, inverted.\n\n\n\n\n\n_description: _\n\nReturns the color that is the inverted version (complement) to this color,\nwithout modifying the original. See [invert](#invert) for more info.\n\n~~~~{cpp.}\n    ofColor c(255, 200, 0);\n    ofColor i = c.getInverted();\n    // c still has RGB value of (255,200,0)\n    // i has the RGB value (0, 55, 255)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > getLerped(&target, amount)\n\n<!--\n_syntax: getLerped(&target, amount)_\n_name: getLerped_\n_returns: ofColor_< PixelType >_\n_returns_description: _\n_parameters: const ofColor_< PixelType > &target, float amount_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nA non-destructive version of lerp().\n\n\n**Parameters:**\n\ntarget The target color corresponding to an amount of 1.0.\n\namount The amount (between 0.0 and 1.0) to interpolate.\n    A value of 0.0 will yield an unchanged color.  A value of 1.0\n    will yield the target color.\n\n**Returns**: A copy of this color, lerped.\n\n**See also**: lerp()\n\n\n\n\n\n_description: _\n\nReturns this color lerped towards target by amount, without modifying the original.\nSee [lerp](#lerp) for more info.\n\n~~~~{.cpp}\n    ofColor r = ofColor::red;\n    ofColor b = ofColor::blue;\n    ofColor p = b.getLerped(r, 0.5);\n    // p is purple, r is still red and b is still blue\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getLightness()\n\n<!--\n_syntax: getLightness()_\n_name: getLightness_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCalculate the lightness of the R, G and B components.\n\nLightness is simply the average of the three color components. This\nmethod of calculating lightness is used by the Lab and HSL color spaces.\n\n\n**Returns**: the lightness in the range 0 - limit().\n\n\n\n\n\n_description: _\n\nReturn a float that is the average of the three color components. This is used by\nthe Lab and HSL color spaces.\n\n~~~~{.cpp}\n    ofColor c( 100, 200, 0 );\n    float l = c.getLightness();\n    // l is 100.f\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > getNormalized()\n\n<!--\n_syntax: getNormalized()_\n_name: getNormalized_\n_returns: ofColor_< PixelType >_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\nA non-destructive version of normalize().\n\n\n**See also**: normalize()\n\n**Returns**: A copy of this color, normalized.\n\n\n\n\n\n_description: _\n\nReturns the normalized version of this color, without modifying the original.\nSee [normalize](#normalize) for more info.\n\n~~~~{.cpp}\n    ofColor c(120, 200, 0);\n    ofColor n = c.getNormalized(); // Returns c / (200/255)\n    // n now has RGB value of (153,255,0)\n    // c still has the RGB value of (120, 200, 0)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getSaturation()\n\n<!--\n_syntax: getSaturation()_\n_name: getSaturation_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the Saturation of this color.\n\nThe color is converted from the default RGB to an HSB color space and\nthe resulting saturation is returned.  The resulting saturation value\nwill always be returned in the range 0 - limit().\n\n\n**Returns**: The saturation in the range 0 - limit().\n\n\n\n\n\n_description: _\n\nReturn the saturation component of the HSB representation of this color.\nThe resulting saturation value will always be returned in the range 0 - limit().\nRefer the [discussion of HSB](#HSB) above.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > & invert()\n\n<!--\n_syntax: invert()_\n_name: invert_\n_returns: ofColor_< PixelType > &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nInvert the R, G and B components.\n\nPerforms an inversion operation on the color by replacing the red, green\nand blue components with their original value subtracted from the\nlimit().\n\n\n**Returns**: A reference to itself.\n\n\n\n\n\n_description: _\n\nPerforms an inversion operation on the color by replacing the red, green\nand blue components with their original value subtracted from the\nlimit().  For example, an ofColor value of:\n\n~~~~~{.cpp}\n    unsigned char maxValue = limit(); // would return 255\n\n    unsigned char r = 255;\n    unsigned char g = 255;\n    unsigned char b = 0;\n\n    unsigned char rNew = maxValue - r; // 255 - 255 = 0\n    unsigned char gNew = maxValue - g; // 255 - 255 = 0\n    unsigned char bNew = maxValue - b; // 255 - 0   = 255;\n~~~~~\n\nExample usage:\n~~~~{.cpp}\n    ofColor c(0, 0, 255); // Blue.\n    c.invert();\n    // c is now (255,255,0), or yellow, which is blue's complement.\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > & lerp(&target, amount)\n\n<!--\n_syntax: lerp(&target, amount)_\n_name: lerp_\n_returns: ofColor_< PixelType > &_\n_returns_description: _\n_parameters: const ofColor_< PixelType > &target, float amount_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nA linear interpolation between all components of two colors.\n\nThe linear interpolation is carried out\non _all_ components, R, G, B _and_ A.\n\n\n**Parameters:**\n\ntarget The target color corresponding to an amount of 1.0.\n\namount The amount (between 0.0 and 1.0) to interpolate.\n    A value of 0.0 will yield an unchanged color.  A value of 1.0\n    will yield the target color.\n\n**Returns**: A reference to itself.\n\n\n\n\n\n_description: _\n\nThe lerp method performs a linear interpolation (or [lerp][1]) between\nthis color and a target color.  In contrast to many of the mathematical\nfunctions found in ofColor_, The linear interpolation is carried out\non _all_ components, R, G, B _and_ A.  The amount is typically a value\nbetween 0.0 and 1.0, with 0.0 yielding an unchanged color and 1.0\nyielding a color identical to the target color.\n\nThis function allows to blend between colors. For instance, if you have\nred and you want halfway between red and blue, you can do this:\n\n~~~~{.cpp}\nofColor r = ofColor::red;\nofColor b = ofColor::blue;\nb.lerp(r, 0.5); // now purple!\n~~~~\n\n[1]: http://en.wikipedia.org/wiki/Lerp_(computing) \"Lerp\"\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float limit()\n\n<!--\n_syntax: limit()_\n_name: limit_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the maximum value of a color component.\n\n\n**Returns**: The value associated with a fully saturated color component.\n\n\n\n\n\n_description: _\n\nBased on the type of PixelType (whether its a ofColor, ofFloatColor or\nofShortColor), the maximum value different. For a ofFloatColor the\nmaximum is `1.0`, but for a ofColor it's `255`, and for ofShortColor\nreturns `65,536`.\n\nUse this function to get this maximum number.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > & normalize()\n\n<!--\n_syntax: normalize()_\n_name: normalize_\n_returns: ofColor_< PixelType > &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\nNormalize the R, G and B components.\n\nPerforms a normalization operation on the red, green and blue components\nby scaling them by brightness of the original color divided by the\nlimit().  The brightness is calculated by finding the maximum of\noriginal red, green and blue components.\nIn short: ofColor / (brightness / limit())\n\n\n**Returns**: A reference to itself.\n\n\n\n\n\n_description: _\n\nDivide all color components by brightness. This has the effect of conforming\nthe color to the outer surface of the hue/saturation/brightness spherical\ncolor space, by forcing a unit radius (brightness).\n\nThis operation is equivalent to the following:\n\n~~~~~{.cpp}\n    ofColor myColor(127, 0, 0, 127);\n\n    float brightness = myColor.getBrightness(); // Returns 127.\n    float scaleFactor = brightness / limit();   // Returns 127 / 255.\n\n    ofColor myNormalizedColor = myColor / scaleFactor;\n                                // Divides the red, green and blue\n                                // components by the scale factor.\n~~~~~\n\nThe following:\n~~~~{.cpp}\n\tofColor c(122, 122, 0);\n\tofSetColor(c);\n\tofDrawCircle(100, 100, 100);\n\tc.normalize();\n\tofSetColor(c);\n\tofDrawCircle(300, 100, 100);\n~~~~\n\nwill create this:\n\n![ofNorm](../types/ofNormalize.png)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofColor_(&color)\n\n<!--\n_syntax: ofColor_(&color)_\n_name: ofColor__\n_returns: _\n_returns_description: _\n_parameters: const ofColor_< SrcType > &color_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConstruct an ofColor_ from an existing ofColor_.\n\n\n**Warning**: Depending on the PixelType and SrcType used, color precision\n         may be lost when converting a higher precision to a lower\n         precision representation.\n\n\n**Parameters:**\n\ncolor The ofColor_ to copy.\n\n\n\n\n\n_description: _\n\nCreates a color by copying another color with a different type (for example when copying from a standard ofColor using unsigned chars to an ofFloatColor):\n\n~~~~{.cpp}\n    ofColor c1(255, 128, 0); // orange\n    ofFloatColor c2(c1);\n    float g = c2.g; // g is now 0.5\n~~~~\n\n~~~~{.cpp}\n    ofColor colorA(255, 0, 0);\n    ofColor colorB(colorA); // colorB is now equal to colorA.\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofColor_(&color, alpha)\n\n<!--\n_syntax: ofColor_(&color, alpha)_\n_name: ofColor__\n_returns: _\n_returns_description: _\n_parameters: const ofColor_< PixelType > &color, float alpha_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConstruct an ofColor_ from an existing ofColor_.\n\n\n**Parameters:**\n\ncolor The ofColor_ to copy.\n\nalpha The new alpha value to replace the alpha value in color.\n\n\n\n\n\n_description: _\n\nCreates a color by copying another color, overriding the existing alpha value with the given alpha value.\n\n~~~~{.cpp}\nofColor mom(255, 0, 0); // red\nofColor c(mom, 128); // now c is red with 50% alpha\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofColor_()\n\n<!--\n_syntax: ofColor_()_\n_name: ofColor__\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConstruct a default white color.\n\n\n\n\n\n_description: _\n\nCreates a color and sets it to white.\n\n~~~~{.cpp}\n    ofColor c;\n    ofSetColor(c); // Draw color is now white.\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofColor_(gray, alpha)\n\n<!--\n_syntax: ofColor_(gray, alpha)_\n_name: ofColor__\n_returns: _\n_returns_description: _\n_parameters: float gray, float alpha_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConstruct a grayscale ofColor_ by specifying a single number.\n\n\n**Parameters:**\n\ngray A grayscale value.\n\nalpha The opacity of the color.\n\n\n\n\n\n_description: _\n\nCreates a gray color from a single value to describe a grayscale color.\nThis single value will be taken by each of the R, G and B components.\nAlpha value defaults to completely opaque.\n\n~~~~{.cpp}\n    ofColor c(0.5); // c is now gray.\n~~~~\n\n~~~~{.cpp}\n    ofColor c(0.5, 122); // now c is 50% alpha gray, ooh, dismal\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofColor_(red, green, blue, alpha)\n\n<!--\n_syntax: ofColor_(red, green, blue, alpha)_\n_name: ofColor__\n_returns: _\n_returns_description: _\n_parameters: float red, float green, float blue, float alpha_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConstruct an ofColor_ by using channel values.\n\n\n**Parameters:**\n\nred The red component.\n\ngreen The green component.\n\nblue The blue component.\n\nalpha The alpha component.\n\n\n\n\n\n_description: _\n\nCreates a color using RGB values and optional alpha value. The default alpha\nvalue makes a completely opaque color:\n\n~~~~{.cpp}\n    ofColor c1(255, 0, 0); // Red with 100% alpha.\n    ofColor c2(255, 0, 0, 128); // Red with 50% alpha.\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool operator!=(&color)\n\n<!--\n_syntax: operator!=(&color)_\n_name: operator!=_\n_returns: bool_\n_returns_description: _\n_parameters: const ofColor_< PixelType > &color_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTest two colors for inequality.\n\n**Returns**: true iff any of the R, G, B or A components are not equal.\n\n\n\n\n\n_description: _\n\nReturns true iff any of the R, G, B or A components are not equal.\n\n~~~~{cpp.}\n    ofColor c1(255, 0, 0); // Red with 100% alpha.\n    ofColor c2(255, 0, 0, 128); // Red with 50% alpha.\n    bool not_equal = (c1 != c2);\n    // not_equal is true\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > operator*(&color)\n\n<!--\n_syntax: operator*(&color)_\n_name: operator*_\n_returns: ofColor_< PixelType >_\n_returns_description: _\n_parameters: const ofColor_< PixelType > &color_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClamped multiplication operator.\n\nMultiply two colors by multiplying and clamping their R, G and B\ncomponents.\n\n\n**Warning**: The alpha component is ignored.\n\n\n**Parameters:**\n\ncolor The color to multiply.\n\n**Returns**: The new clamped color.\n\n\n\n\n\n_description: _\n\nCreates a new color by taking two colors and multiplying and clamping their R,\nG and B components. The alpha component is ignored.\n\n~~~~{cpp.}\n    ofColor c1(100, 1, 2);\n    ofColor c2(255, 30, 20);\n    ofColor c3 = c1 * c2;\n    // c3 has the RGB value of (255,30,40)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > operator*(value)\n\n<!--\n_syntax: operator*(value)_\n_name: operator*_\n_returns: ofColor_< PixelType >_\n_returns_description: _\n_parameters: float value_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClamped scalar multiplication operator.\n\nMultiply the R, G and B components by a scaler and clamp each.\n\n\n**Warning**: The alpha component is ignored.\n\n\n**Parameters:**\n\nvalue The value to multiply.\n\n**Returns**: The new clamped color.\n\n\n\n\n\n_description: _\n\nMultiplys R, G and B components by a scaler and clamps each to be > 0 and < limit().\n\n~~~~{cpp.}\n    ofColor c1(255, 30, 20);\n    ofColor c2 = c1 * 2.f;\n    // c2 has the RGB value of (255,60,40)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > & operator*=(&color)\n\n<!--\n_syntax: operator*=(&color)_\n_name: operator*=_\n_returns: ofColor_< PixelType > &_\n_returns_description: _\n_parameters: const ofColor_< PixelType > &color_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClamped multiplication operator.\n\nMultiply two colors by multiplying and clamping their R, G and B\ncomponents.\n\n\n**Warning**: The alpha component is ignored.\n\n\n**Parameters:**\n\ncolor The color to multiply.\n\n**Returns**: A reference to itself, the new clamped color.\n\n\n\n\n\n_description: _\n\nSet a color to the cumulative product of that color and another color's R, G\nand B components, then clamps each to be > 0 and < limit().\n\n~~~~{cpp.}\n    ofColor c1(255, 30, 20);\n    ofColor c2(0,30,10);\n    ofColor c2 *= c1;\n    // c2 has the RGB value of (0,255,200)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > & operator*=(value)\n\n<!--\n_syntax: operator*=(value)_\n_name: operator*=_\n_returns: ofColor_< PixelType > &_\n_returns_description: _\n_parameters: float value_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClamped scalar multiplication operator.\n\nMultiply the R, G and B components by a scaler and clamp each.\n\n\n**Warning**: The alpha component is ignored.\n\n\n**Parameters:**\n\nvalue The scaler value.\n\n**Returns**: A reference to itself, the new clamped color.\n\n\n\n\n\n_description: _\n\nSet a color to the cumulative product of that color and a scaler,\nthen clamps each to be > 0 and < limit().\n\n~~~~{cpp.}\n    ofColor c1(255, 0, 20);\n    ofColor c1 *= 10.f;\n    // c1 has the RGB value of (255,0,200)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > operator+(&color)\n\n<!--\n_syntax: operator+(&color)_\n_name: operator+_\n_returns: ofColor_< PixelType >_\n_returns_description: _\n_parameters: const ofColor_< PixelType > &color_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClamped addition operator.\n\nAdd two colors by summing and clamping their R, G and B components.\n\n\n**Warning**: The alpha component is ignored.\n\n\n**Parameters:**\n\ncolor The color to add.\n\n**Returns**: The new clamped color.\n\n\n\n\n\n_description: _\n\nCreates a color that is a sum of two color's R, G and B components,\nthen clamps each to be > 0 and < limit().\n\n~~~~{cpp.}\n    ofColor c1(255, 30, 20);\n    ofColor c2(1,30,10);\n    ofColor c3 = c2 + c1;\n    // c3 has the RGB value of (255,60,30)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > operator+(color)\n\n<!--\n_syntax: operator+(color)_\n_name: operator+_\n_returns: ofColor_< PixelType >_\n_returns_description: _\n_parameters: float color_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClamped addition operator.\n\nAdd a value to each of the R, G and B components and clamp each.\n\n\n**Warning**: The alpha component is ignored.\n\n\n**Parameters:**\n\ncolor The value to add.\n\n**Returns**: The new clamped color.\n\n\n\n\n\n_description: _\n\nCreates a color that is a sum of one color's R, G and B components and a value,\nthen clamps each to be > 0 and < limit().\n\n~~~~{cpp.}\n    ofColor c1(100, 255, 20);\n    ofColor c2 = c1 + 30.f\n    // c2 has the RGB value of (130,255,50)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > & operator+=(&color)\n\n<!--\n_syntax: operator+=(&color)_\n_name: operator+=_\n_returns: ofColor_< PixelType > &_\n_returns_description: _\n_parameters: const ofColor_< PixelType > &color_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClamped addition operator.\n\nAdd two colors by summing and clamping their R, G and B components.\n\n\n**Warning**: The alpha component is ignored.\n\n\n**Parameters:**\n\ncolor The color to add.\n\n**Returns**: A reference to itself, the new clamped color.\n\n\n\n\n\n_description: _\n\nSet a color to the cumulative sum of that color and another color's R, G\nand B components, then clamps each to be > 0 and < limit().\n\n~~~~{cpp.}\n    ofColor c1(255, 30, 20);\n    ofColor c2(0,30,10);\n    ofColor c2 += c1;\n    // c2 has the RGB value of (255,60,30)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > & operator+=(color)\n\n<!--\n_syntax: operator+=(color)_\n_name: operator+=_\n_returns: ofColor_< PixelType > &_\n_returns_description: _\n_parameters: float color_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClamped addition operator.\n\nAdd a value to each of the R, G and B components and clamp each.\n\n\n**Warning**: The alpha component is ignored.\n\n\n**Parameters:**\n\ncolor The value to add.\n\n**Returns**: A reference to itself, the new clamped color.\n\n\n\n\n\n_description: _\n\nSet a color to the cumulative sum of that color's R, G and B components\nand a value, then clamps each to be > 0 and < limit().\n\n~~~~{cpp.}\n    ofColor c1(255, 30, 20);\n    ofColor c1 += 10.f;\n    // c1 has the RGB value of (255,40,30)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > operator-(&color)\n\n<!--\n_syntax: operator-(&color)_\n_name: operator-_\n_returns: ofColor_< PixelType >_\n_returns_description: _\n_parameters: const ofColor_< PixelType > &color_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClamped subtraction operator.\n\nSubtract two colors by subtracting and clamping their R, G and B\ncomponents.\n\n\n**Warning**: The alpha component is ignored.\n\n\n**Parameters:**\n\ncolor The color to subtract.\n\n**Returns**: The new clamped color.\n\n\n\n\n\n_description: _\n\nCreates a color that is the difference between two color's R, G and B components,\nthen clamps each to be > 0 and < limit().\n\n~~~~{cpp.}\n    ofColor c1(255, 30, 20);\n    ofColor c2(1, 40, 10);\n    ofColor c3 = c1 - c2;\n    // c3 has the RGB value of (254, 0, 10)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > operator-(value)\n\n<!--\n_syntax: operator-(value)_\n_name: operator-_\n_returns: ofColor_< PixelType >_\n_returns_description: _\n_parameters: float value_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClamped subtraction operator.\n\nSubtract a value from each of the R, G and B components and clamp each.\n\n\n**Warning**: The alpha component is ignored.\n\n\n**Parameters:**\n\nvalue The value to subtract.\n\n**Returns**: The new clamped color.\n\n\n\n\n\n_description: _\n\nCreates a color that is the difference between one color's R, G and B components\nand a value, then clamps each to be > 0 and < limit().\n\n~~~~{cpp.}\n    ofColor c1(255, 30, 20);\n    ofColor c2 = c1 - 25.f;\n    // c2 has the RGB value of (230, 5, 0)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > & operator-=(&color)\n\n<!--\n_syntax: operator-=(&color)_\n_name: operator-=_\n_returns: ofColor_< PixelType > &_\n_returns_description: _\n_parameters: const ofColor_< PixelType > &color_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClamped subtraction operator.\n\nAdd two colors by subtracting and clamping their R, G and B components.\n\n\n**Parameters:**\n\ncolor The color to subtract.\n\n**Returns**: A reference to itself, the new clamped color.\n\n\n\n\n\n_description: _\n\nsets a color to the difference between that color's R, G and B\ncomponents and another color's R, G and B components, then\nclamps each to be > 0 and < limit().\n\n~~~~{cpp.}\n    ofColor c1(255, 30, 20);\n    ofColor c2(1, 40, 10);\n    ofColor c1 -= c2;\n    // c1 has the RGB value of (254, 0, 10)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > & operator-=(color)\n\n<!--\n_syntax: operator-=(color)_\n_name: operator-=_\n_returns: ofColor_< PixelType > &_\n_returns_description: _\n_parameters: float color_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClamped subtraction operator.\n\nSubtract a value to each of the R, G and B components and clamp each.\n\n\n**Warning**: The alpha component is ignored.\n\n\n**Parameters:**\n\ncolor The value to subtract.\n\n**Returns**: A reference to itself, the new clamped color.\n\n\n\n\n\n_description: _\n\nSets a color's R, G and B components to the difference between each component\nand a value, then clamps each to be > 0 and < limit().\n\n~~~~{cpp.}\n    ofColor c1(255, 30, 20);\n    ofColor c1 -= 25.f;\n    // c1 has the RGB value of (230, 5, 0)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > operator/(&color)\n\n<!--\n_syntax: operator/(&color)_\n_name: operator/_\n_returns: ofColor_< PixelType >_\n_returns_description: _\n_parameters: const ofColor_< PixelType > &color_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClamped division operator.\n\nDivide two colors by treating the passed color components as divisors.\n\n\n**Warning**: The alpha component is ignored.\n\n\n**Parameters:**\n\ncolor The divisor color.\n\n**Returns**: The new clamped color.\n\n\n\n\n\n_description: _\n\nCreates a new color by taking two colors and dividing and clamping their R,\nG and B components. The alpha component is ignored.\n\n~~~~{cpp.}\n    ofColor c1(100, 200, 20);\n    ofColor c2(10, 20, 2);\n    ofColor c3 = c1 / c2;\n    // c3 has the RGB value of (10,10,10)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > operator/(value)\n\n<!--\n_syntax: operator/(value)_\n_name: operator/_\n_returns: ofColor_< PixelType >_\n_returns_description: _\n_parameters: float value_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClamped scalar division operator.\n\nDivide each of the R, G and B components by a scalar and clamp each.\n\n\n**Warning**: The alpha component is ignored.\n\n\n**Parameters:**\n\nvalue The divisor value.\n\n**Returns**: The new clamped color.\n\n\n\n\n\n_description: _\n\nCreates a new color that is the quotient of a color's R, G and B\ncomponents and a divisor value and clamps each to be > 0 and < limit().\n\n~~~~{cpp.}\n    ofColor c1(200, 30, 20);\n    ofColor c2 = c1 / 2.f;\n    // c2 has the RGB value of (100,15,10)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > & operator/=(&color)\n\n<!--\n_syntax: operator/=(&color)_\n_name: operator/=_\n_returns: ofColor_< PixelType > &_\n_returns_description: _\n_parameters: const ofColor_< PixelType > &color_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClamped division operator.\n\nDivide two colors by treating the passed color components as divisors.\n\n\n**Parameters:**\n\ncolor The divisor color.\n\n**Returns**: A reference to itself, the new clamped color.\n\n\n\n\n\n_description: _\n\nSet a color to the quotient of that color's and another color's R, G\nand B components, then clamps each to be > 0 and < limit().\n\n~~~~{cpp.}\n    ofColor c1(200, 30, 20);\n    ofColor c2(2,2,10);\n    ofColor c2 /= c1;\n    // c2 has the RGB value of (100,15,2)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > & operator/=(value)\n\n<!--\n_syntax: operator/=(value)_\n_name: operator/=_\n_returns: ofColor_< PixelType > &_\n_returns_description: _\n_parameters: float value_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClamped scalar division operator.\n\nDivide each of the R, G and B components by a scalar and clamp each.\n\n\n**Warning**: The alpha component is ignored.\n\n\n**Parameters:**\n\nvalue The divisor value.\n\n**Returns**: A reference to itself, the new clamped color.\n\n\n\n\n\n_description: _\n\nSet a color to the cumulative product of that color and a scaler,\nthen clamps each to be > 0 and < limit().\n\n~~~~{cpp.}\n    ofColor c1(200, 0, 20);\n    ofColor c1 /= 10.f;\n    // c1 has the RGB value of (20,0,2)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > & operator=(&color)\n\n<!--\n_syntax: operator=(&color)_\n_name: operator=_\n_returns: ofColor_< PixelType > &_\n_returns_description: _\n_parameters: const ofColor_< SrcType > &color_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAssign a color using an existing color.\n\nR, G, B and A components are set to the the values of the assigned\ncolor.\n\n\n**Warning**: Depending on the PixelType and SrcType used, color precision\n    may be lost when converting a higher precision to a lower precision\n    representation.\n\n\n**Parameters:**\n\ncolor The color to assign.\n\n**Returns**: A reference to itself.\n\n\n\n\n\n_description: _\n\nR, G, B and A components are set to the the values of the assigned\ncolor.\n\n~~~~{cpp.}\n    ofColor c1(255, 30, 20);\n    ofColor c2(0,30,10);\n    ofColor c2 = c1;\n    // c2 has the RGB value of (255, 30, 20)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > & operator=(value)\n\n<!--\n_syntax: operator=(value)_\n_name: operator=_\n_returns: ofColor_< PixelType > &_\n_returns_description: _\n_parameters: float value_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAssign a color using a grayscale value.\n\n\n**Parameters:**\n\nvalue The grayscale value.\n\n**Returns**: A reference to itself.\n\n\n\n\n\n_description: _\n\nR, G and B components are set to the grayscale value and alpha is\nset to limit().\n\n~~~~~{.cpp}\n    ofColor myColor = 127;\n~~~~~\n\nis equivalent to:\n\n~~~~~{.cpp}\n    ofColor myColor(127, 127, 127, 255);\n~~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool operator==(&color)\n\n<!--\n_syntax: operator==(&color)_\n_name: operator==_\n_returns: bool_\n_returns_description: _\n_parameters: const ofColor_< PixelType > &color_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTest two colors for equality.\n\n\n**Returns**: true iff the R, G, B and A components are all equal.\n\n\n\n\n\n_description: _\n\n~~~~{cpp.}\n    ofColor c1(255, 0, 0); // Red with 100% alpha.\n    ofColor c2(255, 0, 0, 128); // Red with 50% alpha.\n    bool is_equal = (c1 == c2);\n    // is_equal is false\n    c2.a = 255;\n    is_equal = (c1 == c2);\n    // is_equal is true\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const PixelType & operator[](n)\n\n<!--\n_syntax: operator[](n)_\n_name: operator[]_\n_returns: const PixelType &_\n_returns_description: _\n_parameters: size_t n_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nArray subscript operator.\n\nIf n is 0 returns .r, if 1 returns .g, if 2 returns .b, if 3 returns\nalpha.\n\n\n**Parameters:**\n\nn An index 0-3 of the component to get.\n\n**Returns**: The value of the requested component.\n\n\n\n\n\n_description: _\n\nIf n is 0 returns .r, if 1 returns .g, if 2 returns .b, if 3 returns\nalpha.\n\n~~~~{.cpp}\n    ofColor c(128, 64, 255);\n    float red = c[0]; // Red is 128.\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###PixelType & operator[](n)\n\n<!--\n_syntax: operator[](n)_\n_name: operator[]_\n_returns: PixelType &_\n_returns_description: _\n_parameters: size_t n_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nArray subscript operator.\n\nIf n is 0 returns .r, if 1 returns .g, if 2 returns .b, if 3 returns\nalpha.\n\n\n**Parameters:**\n\nn An index 0-3 of the component to get.\n\n**Returns**: The value of the requested component.\n\n\n\n\n\n_description: _\n\nArray subscript operator. If n is 0 returns .r, if 1 returns .g, if 2 returns .b, if 3 returns alpha.\n\n~~~~{.cpp}\n\tofColor c(128, 64, 255);\n\tfloat red = c[0]; // red is 128\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(&color)\n\n<!--\n_syntax: set(&color)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: const ofColor_< PixelType > &color_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet an ofColor_ from an existing ofColor_.\n\nThis will use the R, G, B and A components from the passed color.\n\n\n**Parameters:**\n\ncolor The ofColor_ to copy.\n\n\n\n\n\n_description: _\n\nThis will use the R, G, B and A components from the passed color.\n\n~~~~{.cpp}\n    ofColor r(255, 0, 0); // Red\n    ofColor b(0,0,255); // Blue\n    r.set(b); // now the RGB value of r is (0,0,255)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(gray, alpha)\n\n<!--\n_syntax: set(gray, alpha)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float gray, float alpha_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet a grayscale ofColor_ by specifying a single number.\n\n\n**Parameters:**\n\ngray A grayscale value.\n\nalpha The opacity of the color.\n\n\n\n\n\n_description: _\n\nCreates a gray color from the value of gray. This single value will be taken by each of the R, G and B components. The alpha value defaults to completely opaque.\n\n~~~~{.cpp}\n    ofColor c(255, 0, 0); // Red ...\n    c.set(128, 128); // ... and now 50% gray with 50% alpha.\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(red, green, blue, alpha)\n\n<!--\n_syntax: set(red, green, blue, alpha)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float red, float green, float blue, float alpha_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet an ofColor_ by using RGB values.\n\n\n**Parameters:**\n\nred The red component.\n\ngreen The green component.\n\nblue The blue component.\n\nalpha The alpha component.\n\n\n\n\n\n_description: _\n\nCreates a color using RGB values and optional alpha value. The default\nalpha value makes a completely opaque color. By default, the alpha\ncomponent will take the PixelType's maximum, producing an opaque color.\nThe channel values must fall within the range represented by the PixelType\n\n~~~~{.cpp}\n    ofColor c(255, 0, 0); // Red ...\n    c.set(0, 255, 0); // ... and now green.\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setBrightness(brightness)\n\n<!--\n_syntax: setBrightness(brightness)_\n_name: setBrightness_\n_returns: void_\n_returns_description: _\n_parameters: float brightness_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the brightness of this color.\n\n\n**Parameters:**\n\nbrightness A brightness value to set in the range of 0 - limit().\n\n\n\n\n\n_description: _\n\nChange the current brightness, leaving hue and saturation the same.\n\n~~~~{.cpp}\n    ofColor c(0, 0, 255); // Bright blue ...\n    c.setBrightness(128); // ... dark blue.\n~~~~\n\nRefer the [discussion of HSB](#HSB).\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setHex(hexColor, alpha)\n\n<!--\n_syntax: setHex(hexColor, alpha)_\n_name: setHex_\n_returns: void_\n_returns_description: _\n_parameters: int hexColor, float alpha_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet an ofColor_ from a hexadecimal representation.\n\n\n**Warning**: The alpha value _should not_ be packed in the hexColor and\n    must be specified separately.\n\n\n**Parameters:**\n\nhexColor An RGB color in hexadecimal form.\n\nalpha The alpha value of the color.\n\n\n\n\n\n_description: _\n\nIn some cases, it is convenient to represent colors using a hexadecimal\nnumber. In this case, red, green and blue values are packed into a\ninteger.\n\nSet this color to hexColor using a 24 bit hex-style color as normally\nused in web development. The alpha channel is specified separately\nand will default to the PixelType's maximum, resulting in an opaque color.\n\n~~~~{.cpp}\n    ofColor c;\n    c.setHex(0xFFFFFF); // White.\n    c.setHex(0x00FF00); // Green.\n    c.setHex(0xFF8000, 128); // Orange, 50% alpha.\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setHsb(hue, saturation, brightness, alpha)\n\n<!--\n_syntax: setHsb(hue, saturation, brightness, alpha)_\n_name: setHsb_\n_returns: void_\n_returns_description: _\n_parameters: float hue, float saturation, float brightness, float alpha_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the color using HSB components.\n\n\n**Parameters:**\n\nhue A hue value to set in the range of 0 - limit().\n\nsaturation A saturation value to set in the range of 0 - limit().\n\nbrightness A brightness value to set in the range of 0 - limit().\n\nalpha An alpha value to set in the range of 0 - limit().\n\n\n\n\n\n_description: _\n\nIn some cases, it is convenient to represent colors using a HSB\nvalue. In this case, red, green and blue values are represented by their hue,\nsaturation and brightness.\n\nSet this color using a HSB representation. Refer the [discussion of HSB](#HSB)\nabove. **Note** that the hue value has a range that matches the base data type\n(ie **0 to 255** for the standard ofColor), rather than 0 to 360, 0 to 100 or\nfloat 0 to 1, as may be expected. The alpha channel is specified separately\nand will default to the PixelType's maximum, resulting in an opaque color.\n\n~~~~{.cpp}\n    ofColor c = ofColor(0); // c is black\n    c.setHsb(0, 255, 255); // c is now bright red\n    c.setHsb(255, 255, 255); // c is still bright red (colors wrap around)\n    c.setHsb(255, 255, 100); // c is dark red\n    c.setHsb(255, 100, 255); // c is dull light red\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setHue(hue)\n\n<!--\n_syntax: setHue(hue)_\n_name: setHue_\n_returns: void_\n_returns_description: _\n_parameters: float hue_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the hue of this color.\n\n\n**Parameters:**\n\nhue A hue value to set in the range of 0 - limit().\n\n\n\n\n\n_description: _\n\nChange the current hue, leaving saturation and brightness the same.\n\n~~~~{.cpp}\nofColor c = ofColor::fromHsb( 0, 255, 255 ); // bright red\nc.setHue( 128 ); // now bright cyan\n~~~~\n\nRefer the [discussion of HSB](#HSB) above.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setHueAngle(angle)\n\n<!--\n_syntax: setHueAngle(angle)_\n_name: setHueAngle_\n_returns: void_\n_returns_description: _\n_parameters: float angle_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the hue angle of this color.\n\n\n**Parameters:**\n\nangle A hue angle value to set in the range of 0 - 360 degrees.\n\n\n\n\n\n_description: _\n\nThe hue field in setHsb() and in setHue() represents hue as a range between 0 and\n255 because the hue value has a range that matches the base data type,\nsetHueAngle() sets hue using the conventional way to represent hue: with the\nrange between 0 and 360.\n\n![hc](hue_circle.jpg)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setSaturation(saturation)\n\n<!--\n_syntax: setSaturation(saturation)_\n_name: setSaturation_\n_returns: void_\n_returns_description: _\n_parameters: float saturation_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the saturation of this color.\n\nThis method uses HSB not HSL. So red desaturated is white, not gray\n\n\n**Parameters:**\n\nsaturation A saturation value value in the range of 0 - limit().\n\n**See also**: http://en.wikipedia.org/wiki/HSL_and_HSV\n\n\n\n\n\n_description: _\n\nChange the current saturation, leaving hue and brightness intact.\n\n~~~~{.cpp}\n    ofColor c(0, 0, 255); // Vibrant blue ...\n    c.setSaturation( 128 ); // ... pale blue.\n~~~~\n\nRefer the [discussion of HSB](#HSB) above.\n\nSee also: http://en.wikipedia.org/wiki/HSL_and_HSV\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###PixelType a\n\n<!--\n_name: a_\n_type: PixelType_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n< The alpha color component.\n\n\n\n\n\n_description: _\n\nThe alpha value (transparency) of a color. 0 is completely transparent, 255 is completely opaque.\n\n~~~~{cpp.}\n    ofColor c = ofColor(255,0,0); // Bright red with default limit() value (this case its 255)\n    c.a = 50; // now the color is bright red with the opacity set to 50 (mostly see through)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ aliceBlue\n\n<!--\n_name: aliceBlue_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ antiqueWhite\n\n<!--\n_name: antiqueWhite_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ aqua\n\n<!--\n_name: aqua_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ aquamarine\n\n<!--\n_name: aquamarine_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ azure\n\n<!--\n_name: azure_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###PixelType b\n\n<!--\n_name: b_\n_type: PixelType_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n< The blue color component.\n\n\n\n\n\n_description: _\n\nThe blue component of this color.\n\n~~~~{.cpp}\nofColor c = ofColor::cyan;\nfloat blue = c.b; // 255\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ beige\n\n<!--\n_name: beige_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ bisque\n\n<!--\n_name: bisque_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor black\n\n<!--\n_name: black_\n_type: ofColor_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\nPre-iniatilized black color.\n\n~~~~{.cpp}\nofColor c = ofColor::black; // (0, 0, 0)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ blanchedAlmond\n\n<!--\n_name: blanchedAlmond_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor blue\n\n<!--\n_name: blue_\n_type: ofColor_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\nPre-iniatilized blue color.\n\n~~~~{.cpp}\nofColor c = ofColor::blue; // (0, 0, 255)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ blueSteel\n\n<!--\n_name: blueSteel_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ blueViolet\n\n<!--\n_name: blueViolet_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ brown\n\n<!--\n_name: brown_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ burlyWood\n\n<!--\n_name: burlyWood_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ cadetBlue\n\n<!--\n_name: cadetBlue_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ chartreuse\n\n<!--\n_name: chartreuse_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ chocolate\n\n<!--\n_name: chocolate_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ coral\n\n<!--\n_name: coral_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ cornflowerBlue\n\n<!--\n_name: cornflowerBlue_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ cornsilk\n\n<!--\n_name: cornsilk_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ crimson\n\n<!--\n_name: crimson_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor cyan\n\n<!--\n_name: cyan_\n_type: ofColor_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\nPre-iniatilized cyan color.\n\n~~~~{.cpp}\nofColor c = ofColor::cyan; // (0, 255, 255)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ darkBlue\n\n<!--\n_name: darkBlue_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ darkCyan\n\n<!--\n_name: darkCyan_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ darkGoldenRod\n\n<!--\n_name: darkGoldenRod_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ darkGray\n\n<!--\n_name: darkGray_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ darkGreen\n\n<!--\n_name: darkGreen_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ darkGrey\n\n<!--\n_name: darkGrey_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ darkKhaki\n\n<!--\n_name: darkKhaki_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ darkMagenta\n\n<!--\n_name: darkMagenta_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ darkOliveGreen\n\n<!--\n_name: darkOliveGreen_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ darkOrchid\n\n<!--\n_name: darkOrchid_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ darkRed\n\n<!--\n_name: darkRed_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ darkSalmon\n\n<!--\n_name: darkSalmon_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ darkSeaGreen\n\n<!--\n_name: darkSeaGreen_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ darkSlateBlue\n\n<!--\n_name: darkSlateBlue_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ darkSlateGray\n\n<!--\n_name: darkSlateGray_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ darkSlateGrey\n\n<!--\n_name: darkSlateGrey_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ darkTurquoise\n\n<!--\n_name: darkTurquoise_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ darkViolet\n\n<!--\n_name: darkViolet_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ darkorange\n\n<!--\n_name: darkorange_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ deepPink\n\n<!--\n_name: deepPink_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ deepSkyBlue\n\n<!--\n_name: deepSkyBlue_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ dimGray\n\n<!--\n_name: dimGray_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ dimGrey\n\n<!--\n_name: dimGrey_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ dodgerBlue\n\n<!--\n_name: dodgerBlue_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ fireBrick\n\n<!--\n_name: fireBrick_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ floralWhite\n\n<!--\n_name: floralWhite_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ forestGreen\n\n<!--\n_name: forestGreen_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ fuchsia\n\n<!--\n_name: fuchsia_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###PixelType g\n\n<!--\n_name: g_\n_type: PixelType_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n< The green color component.\n\n\n\n\n\n_description: _\n\nThe green component of this color.\n\n~~~~{.cpp}\nofColor c = ofColor::yellow;\nfloat green = c.g; // 255\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ gainsboro\n\n<!--\n_name: gainsboro_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ ghostWhite\n\n<!--\n_name: ghostWhite_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ gold\n\n<!--\n_name: gold_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ goldenRod\n\n<!--\n_name: goldenRod_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor gray\n\n<!--\n_name: gray_\n_type: ofColor_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\nPre-iniatilized gray color.\n\n~~~~{.cpp}\nofColor c = ofColor::gray;\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor green\n\n<!--\n_name: green_\n_type: ofColor_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\nPre-iniatilized green color.\n\n~~~~{.cpp}\nofColor c = ofColor::green; // (0, 255, 0)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ greenYellow\n\n<!--\n_name: greenYellow_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ grey\n\n<!--\n_name: grey_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ honeyDew\n\n<!--\n_name: honeyDew_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ hotPink\n\n<!--\n_name: hotPink_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ indianRed\n\n<!--\n_name: indianRed_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ indigo\n\n<!--\n_name: indigo_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ ivory\n\n<!--\n_name: ivory_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ khaki\n\n<!--\n_name: khaki_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ lavender\n\n<!--\n_name: lavender_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ lavenderBlush\n\n<!--\n_name: lavenderBlush_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ lawnGreen\n\n<!--\n_name: lawnGreen_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ lemonChiffon\n\n<!--\n_name: lemonChiffon_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ lightBlue\n\n<!--\n_name: lightBlue_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ lightCoral\n\n<!--\n_name: lightCoral_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ lightCyan\n\n<!--\n_name: lightCyan_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ lightGoldenRodYellow\n\n<!--\n_name: lightGoldenRodYellow_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ lightGray\n\n<!--\n_name: lightGray_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ lightGreen\n\n<!--\n_name: lightGreen_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ lightGrey\n\n<!--\n_name: lightGrey_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ lightPink\n\n<!--\n_name: lightPink_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ lightSalmon\n\n<!--\n_name: lightSalmon_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ lightSeaGreen\n\n<!--\n_name: lightSeaGreen_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ lightSkyBlue\n\n<!--\n_name: lightSkyBlue_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ lightSlateGray\n\n<!--\n_name: lightSlateGray_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ lightSlateGrey\n\n<!--\n_name: lightSlateGrey_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ lightSteelBlue\n\n<!--\n_name: lightSteelBlue_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ lightYellow\n\n<!--\n_name: lightYellow_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ lime\n\n<!--\n_name: lime_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ limeGreen\n\n<!--\n_name: limeGreen_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ linen\n\n<!--\n_name: linen_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor magenta\n\n<!--\n_name: magenta_\n_type: ofColor_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\nPre-iniatilized magenta color.\n\n~~~~{.cpp}\nofColor c = ofColor::magenta; // (255, 0, 255)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ maroon\n\n<!--\n_name: maroon_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ mediumAquaMarine\n\n<!--\n_name: mediumAquaMarine_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ mediumBlue\n\n<!--\n_name: mediumBlue_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ mediumOrchid\n\n<!--\n_name: mediumOrchid_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ mediumPurple\n\n<!--\n_name: mediumPurple_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ mediumSeaGreen\n\n<!--\n_name: mediumSeaGreen_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ mediumSlateBlue\n\n<!--\n_name: mediumSlateBlue_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ mediumSpringGreen\n\n<!--\n_name: mediumSpringGreen_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ mediumTurquoise\n\n<!--\n_name: mediumTurquoise_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ mediumVioletRed\n\n<!--\n_name: mediumVioletRed_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ midnightBlue\n\n<!--\n_name: midnightBlue_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ mintCream\n\n<!--\n_name: mintCream_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ mistyRose\n\n<!--\n_name: mistyRose_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ moccasin\n\n<!--\n_name: moccasin_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ navajoWhite\n\n<!--\n_name: navajoWhite_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ navy\n\n<!--\n_name: navy_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ oldLace\n\n<!--\n_name: oldLace_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ olive\n\n<!--\n_name: olive_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ oliveDrab\n\n<!--\n_name: oliveDrab_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ orange\n\n<!--\n_name: orange_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ orangeRed\n\n<!--\n_name: orangeRed_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ orchid\n\n<!--\n_name: orchid_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ paleGoldenRod\n\n<!--\n_name: paleGoldenRod_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ paleGreen\n\n<!--\n_name: paleGreen_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ paleTurquoise\n\n<!--\n_name: paleTurquoise_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ paleVioletRed\n\n<!--\n_name: paleVioletRed_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ papayaWhip\n\n<!--\n_name: papayaWhip_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ peachPuff\n\n<!--\n_name: peachPuff_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ peru\n\n<!--\n_name: peru_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ pink\n\n<!--\n_name: pink_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ plum\n\n<!--\n_name: plum_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ powderBlue\n\n<!--\n_name: powderBlue_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ purple\n\n<!--\n_name: purple_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###PixelType r\n\n<!--\n_name: r_\n_type: PixelType_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n< The red color component.\n\n\n\n\n\n_description: _\n\nThe red component of this color.\n\n~~~~{.cpp}\nofColor c = ofColor::red;\nfloat red = c.r; // 255\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor red\n\n<!--\n_name: red_\n_type: ofColor_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\nPre-iniatilized red color.\n\n~~~~{.cpp}\nofColor c = ofColor::red; // (255, 0, 0)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ rosyBrown\n\n<!--\n_name: rosyBrown_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ royalBlue\n\n<!--\n_name: royalBlue_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ saddleBrown\n\n<!--\n_name: saddleBrown_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ salmon\n\n<!--\n_name: salmon_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ sandyBrown\n\n<!--\n_name: sandyBrown_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ seaGreen\n\n<!--\n_name: seaGreen_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ seaShell\n\n<!--\n_name: seaShell_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ sienna\n\n<!--\n_name: sienna_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ silver\n\n<!--\n_name: silver_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ skyBlue\n\n<!--\n_name: skyBlue_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ slateBlue\n\n<!--\n_name: slateBlue_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ slateGray\n\n<!--\n_name: slateGray_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ slateGrey\n\n<!--\n_name: slateGrey_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ snow\n\n<!--\n_name: snow_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ springGreen\n\n<!--\n_name: springGreen_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ steelBlue\n\n<!--\n_name: steelBlue_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ tan\n\n<!--\n_name: tan_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ teal\n\n<!--\n_name: teal_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ thistle\n\n<!--\n_name: thistle_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ tomato\n\n<!--\n_name: tomato_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ turquoise\n\n<!--\n_name: turquoise_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###PixelType v\n\n<!--\n_name: v_\n_type: PixelType_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n< The pixel values as an array.\n\n\n\n\n\n_description: _\n\nArray/pointer access. Allows the r, g, b, a components to be accessed as a pointer to an array of PixelType.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ violet\n\n<!--\n_name: violet_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ wheat\n\n<!--\n_name: wheat_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor white\n\n<!--\n_name: white_\n_type: ofColor_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\nPre-iniatilized white color.\n\n~~~~{.cpp}\nofColor c = ofColor::white;\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ whiteSmoke\n\n<!--\n_name: whiteSmoke_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor yellow\n\n<!--\n_name: yellow_\n_type: ofColor_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\nPre-iniatilized yellow color.\n\n~~~~{.cpp}\nofColor c = ofColor::yellow; // (255, 255, 0)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_ yellowGreen\n\n<!--\n_name: yellowGreen_\n_type: ofColor__\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Predefined Colors\n\nA collection of static colors defined by name.\n\nThese constants allow the user to access colors by name.  For example,\nif using ofColor, one might set a color in the following way:\n\n~~~~{.cpp}\n    ofColor myColor = ofColor::white;\n    // myColor is now full white (255,255,255,255).\n~~~~\n\nThe list of colors is based upon the CSS names colors and can be viewed\n[here](http://www.w3schools.com/cssref/css_colornames.asp).\n\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}