{"entry":{"name":"ofPixels_","filename":"ofPixels_.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/graphics/ofPixels_.markdown","path":"/documentation/graphics/ofPixels_","route":"/documentation/graphics/ofPixels_.markdown","dir":"../ofSite/documentation/graphics","ext":"markdown","type":"page","id":377,"parent":358,"breadcrumbs":[358,1],"siblings":[],"translations":{}},"description":{"short":"<p>A class representing a collection of pixels.</p>\n","full":"<p>ofPixels is an object for working with blocks of pixels, those pixels can be copied from an image that you've loaded, something that you've drawn using ofGraphics, or a ofVideoGrabber instance. You can create an image from pixels, using on ofPixels object like so:</p>\n<pre><code>ofPixels p<span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLoadImage</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>pathToImage<span class=\"token punctuation\">.</span>jpg<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>ofPixels represents pixels data on the CPU as opposed to an ofTexture which represents pixel data on the GPU. They can easily be made inter-operational though:</p>\n<pre><code>ofTexture tex<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// do some stuff with t</span>\nofPixels pix<span class=\"token punctuation\">;</span>\ntex<span class=\"token punctuation\">.</span><span class=\"token function\">readToPixels</span><span class=\"token punctuation\">(</span>pix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now all the pixels from tex are in pix</span>\n</code></pre>\n<p>You can access the pixels in an ofPixels object with the [] operator.</p>\n<pre><code>ofPixels pix<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// put some stuff in the pixels</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> i <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> pix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>You can think of the ofPixels as the CPU side representation of pixel data that can be sent to the GPU as an ofTexture object. To draw pixels, you need to put them into an ofTexture and to manipulate an ofTextures pixel data you need an ofPixels object.</p>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"True","extends":null},"methods":[{"syntax":"allocate(w, h, channels)","name":"allocate","returns":"void","returns_description":null,"parameters":"size_t w<span class=\"token punctuation\">,</span> size_t h<span class=\"token punctuation\">,</span> size_t channels","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Allocates space for pixel data</p>\n<p><strong>Parameters:</strong></p>\n<p>w Width of pixel array</p>\n<p>h Height of pixel array</p>\n<p>channels Number of channels per pixel</p>\n","desc":"<p>Allocates space for pixel data of the given width (w), height (h) and number of channels (channels). If an ofImageType or ofPixelFormat is passed in, it will allocate based on the required number of channels.</p>\n"},{"syntax":"allocate(w, h, imageType)","name":"allocate","returns":"void","returns_description":null,"parameters":"size_t w<span class=\"token punctuation\">,</span> size_t h<span class=\"token punctuation\">,</span> ofImageType imageType","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Allocates space for pixel data</p>\n<p>The imageType can be one of the following:</p>\n<pre><code>OF_IMAGE_GRAYSCALE\nOF_IMAGE_COLOR\nOF_IMAGE_COLOR_ALPHA\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>w Width of pixel array</p>\n<p>h Height of pixel array</p>\n<p>imageType ofImageType defining number of channels per pixel</p>\n","desc":"<p>ofImageType:</p>\n<pre><code>OF_IMAGE_GRAYSCALE\n\nOF_IMAGE_COLOR\n\nOF_IMAGE_COLOR_ALPHA\n</code></pre>\n"},{"syntax":"allocate(w, h, pixelFormat)","name":"allocate","returns":"void","returns_description":null,"parameters":"size_t w<span class=\"token punctuation\">,</span> size_t h<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Allocates space for pixel data</p>\n<p>The pixelFormat can be one of the following:</p>\n<pre><code>OF_PIXELS_RGB\nOF_PIXELS_RGBA\nOF_PIXELS_BGRA\nOF_PIXELS_MONO\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>w Width of pixel array</p>\n<p>h Height of pixel array</p>\n<p>pixelFormat ofPixelFormat defining number of channels per pixel</p>\n","desc":"<p>ofPixelFormat:</p>\n<pre><code>OF_PIXELS_RGB\n\nOF_PIXELS_RGBA\n\nOF_PIXELS_BGRA\n\nOF_PIXELS_MONO\n</code></pre>\n"},{"syntax":"begin()","name":"begin","returns":"ofPixels_::iterator","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"begin()","name":"begin","returns":"ofPixels_::const_iterator","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"bicubicInterpolate(*patch, x, y, x2, y2, x3, y3)","name":"bicubicInterpolate","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>patch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y3","access":"private","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p>\\endcond</p>\n","desc":""},{"short":"","desc":""},{"syntax":"bytesFromPixelFormat(w, h, format)","name":"bytesFromPixelFormat","returns":"size_t","returns_description":null,"parameters":"size_t w<span class=\"token punctuation\">,</span> size_t h<span class=\"token punctuation\">,</span> ofPixelFormat format","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"clear()","name":"clear","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Clear all the data from the ofPixels objects.\nAfter calling this you'll need to allocate()\nthe ofPixels object again to use it.</p>\n","desc":"<p>This clears all the data from the ofPixels objects. After calling this you'll need to allocate the ofPixels object again to use it.</p>\n"},{"short":"","desc":""},{"short":"","desc":""},{"syntax":"crop(x, y, width, height)","name":"crop","returns":"void","returns_description":null,"parameters":"size_t x<span class=\"token punctuation\">,</span> size_t y<span class=\"token punctuation\">,</span> size_t width<span class=\"token punctuation\">,</span> size_t height","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Crop the pixels to a new width and height.</p>\n<p>As a word of caution this reallocates memory and can be a bit\nexpensive if done a lot.</p>\n","desc":"<p>This crops the pixels to a new width and height. As a word of caution this reallocates memory and can be a bit expensive if done a lot.</p>\n"},{"short":"<p>Crop the pixels into the ofPixels reference passed in by <code>toPix<span class=\"token punctuation\">.</span> at the </code>x<code><span class=\"token operator\">and</span></code>y` and width the new width and height.</p>\n<p>As a word of caution this reallocates memory and can be a bit\nexpensive if done a lot.</p>\n","desc":"<p>This crops the pixels into the ofPixels reference passed in by toPix. at the x and y and with the new width and height. As a word of caution this reallocates memory and can be a bit expensive if done a lot.</p>\n"},{"syntax":"end()","name":"end","returns":"ofPixels_::iterator","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"end()","name":"end","returns":"ofPixels_::const_iterator","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getBitsPerChannel()","name":"getBitsPerChannel","returns":"size_t","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"<p>This is how large each channel of a pixels is, ofPixels objects that store pixel data as unsigned char are smaller than  ofPixels objects that store pixel data as floats.\nThis returns bit, not bytes, so you'll probably see ofPixels&lt;float</p>\n"},{"syntax":"getBitsPerPixel()","name":"getBitsPerPixel","returns":"size_t","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get number of bits per pixel</p>\n<p>If you have RGB pixel data, this will return 24, if you have RGBA,\nyou'll have 32, if you have grayscale, this will return 8.</p>\n","desc":""},{"syntax":"getBytesPerChannel()","name":"getBytesPerChannel","returns":"size_t","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"<p>This is how large each channel of a pixels is, ofPixels objects that store pixel data as unsigned char are smaller than  ofPixels objects that store pixel data as floats.\nThis returns bytes, not bits, so you'll probably see ofPixels&lt;float</p>\n"},{"syntax":"getBytesPerPixel()","name":"getBytesPerPixel","returns":"size_t","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the number of bytes per pixel</p>\n","desc":"<p>Returns the number of the pixels.</p>\n"},{"syntax":"getBytesStride()","name":"getBytesStride","returns":"size_t","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"short":"<p>Get all values of one channel</p>\n<p>For instance, the Red pixel values, from the\nofPixels object, this gives you a grayscale representation of the\nspecific channel</p>\n<pre><code>    <span class=\"token comment\" spellcheck=\"true\">// Get red pixels</span>\n\tofPixels rpix <span class=\"token operator\">=</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Get green pixels</span>\n\tofPixels gpix <span class=\"token operator\">=</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Get blue pixels</span>\n\tofPixels bpix <span class=\"token operator\">=</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n","desc":"<p>This returns a single channel, for instance, the Red pixel values, from the ofPixels object, this gives you a grayscale representation of that one channel.</p>\n<pre><code>\tofPixels rpix <span class=\"token operator\">=</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofPixels gpix <span class=\"token operator\">=</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofPixels bpix <span class=\"token operator\">=</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"short":"<p>Get the color at a specific index</p>\n","desc":""},{"short":"<p>Get the color at a x,y position</p>\n","desc":"<p>This method returns the ofColor that the pixels contains at an x, y pair:</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"syntax":"getConstLine(line)","name":"getConstLine","returns":"ofPixels_::ConstLine","returns_description":null,"parameters":"size_t line","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getConstLines()","name":"getConstLines","returns":"ofPixels_::ConstLines","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getConstLines(first, numLines)","name":"getConstLines","returns":"ofPixels_::ConstLines","returns_description":null,"parameters":"size_t first<span class=\"token punctuation\">,</span> size_t numLines","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getConstPixelsIter()","name":"getConstPixelsIter","returns":"ofPixels_::ConstPixels","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getData()","name":"getData","returns":"PixelType *","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Retrieves pixel data from the ofPixel object.</p>\n<p><strong>Returns</strong>: A raw pointer to the pixel data.</p>\n","desc":""},{"syntax":"getData()","name":"getData","returns":"const PixelType *","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getHeight()","name":"getHeight","returns":"size_t","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the height of the pixel array.</p>\n","desc":"<p>Returns the height of the pixels.</p>\n"},{"syntax":"getImageType()","name":"getImageType","returns":"ofImageType","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the type of the image</p>\n<p><strong>Returns</strong>: One of the following types: <code>OF_IMAGE_GRAYSCALE</code>,\n<code>OF_IMAGE_COLOR</code>, <code>OF_IMAGE_COLOR_ALPHA</code></p>\n","desc":"<p>Returns what image type the ofPixels object is.</p>\n"},{"syntax":"getLine(line)","name":"getLine","returns":"ofPixels_::Line","returns_description":null,"parameters":"size_t line","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getLines()","name":"getLines","returns":"ofPixels_::Lines","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getLines(first, numLines)","name":"getLines","returns":"ofPixels_::Lines","returns_description":null,"parameters":"size_t first<span class=\"token punctuation\">,</span> size_t numLines","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getNumChannels()","name":"getNumChannels","returns":"size_t","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the number of channels that the ofPixels object contains.\nRGB is 3 channels, RGBA is 4, and grayscale is 1.</p>\n","desc":"<p>This returns the number of channels that the ofPixels object contains. RGB is 3 channels, RGBA is 4, and grayscale is 1.</p>\n"},{"syntax":"getNumPlanes()","name":"getNumPlanes","returns":"size_t","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getPixelFormat()","name":"getPixelFormat","returns":"ofPixelFormat","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getPixelIndex(x, y)","name":"getPixelIndex","returns":"size_t","returns_description":null,"parameters":"size_t x<span class=\"token punctuation\">,</span> size_t y","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the pixel index at a x,y position</p>\n<pre><code>ofColor yellow <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>yellow<span class=\"token punctuation\">;</span>\nsize_t ind <span class=\"token operator\">=</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getPixelIndex</span><span class=\"token punctuation\">(</span>mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npix<span class=\"token punctuation\">.</span><span class=\"token function\">setPixel</span><span class=\"token punctuation\">(</span>ind<span class=\"token punctuation\">,</span> yellow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n","desc":"<p>This method gives you the index of the pixel at x,y. For instance:</p>\n<pre><code>ofColor yellow <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>yellow<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> ind <span class=\"token operator\">=</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getPixelIndex</span><span class=\"token punctuation\">(</span>mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npix<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>ind<span class=\"token punctuation\">,</span> yellow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"syntax":"getPixelsIter()","name":"getPixelsIter","returns":"ofPixels_::Pixels","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"short":"","desc":""},{"syntax":"getTotalBytes()","name":"getTotalBytes","returns":"size_t","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getWidth()","name":"getWidth","returns":"size_t","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the width of the pixel array.</p>\n","desc":"<p>Returns the width of the pixels.</p>\n"},{"syntax":"isAllocated()","name":"isAllocated","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get whether memory has been allocated for an ofPixels object or not</p>\n<p>Many operations like copying pixels, etc, automatically allocate\nthe memory needed, but it's sometimes good to check.</p>\n","desc":"<p>Returns whether memory has been allocated for an ofPixels object or not. Many operations like copying pixels, etc, automatically allocate the memory needed, but it's sometimes good to check.</p>\n"},{"syntax":"mirror(vertically, horizontal)","name":"mirror","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> vertically<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> horizontal","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Mirror the pixels across the vertical and/or horizontal axis.</p>\n<p><strong>Parameters:</strong></p>\n<p>vertically Set to true to mirror vertically</p>\n<p>horizontal Set to true to mirror horizontal</p>\n","desc":"<p>This reflects the pixels across the vertical and/or horizontal axis.</p>\n"},{"short":"","desc":""},{"short":"","desc":""},{"short":"","desc":""},{"short":"","desc":""},{"syntax":"ofPixels_()","name":"ofPixels_","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\name Construction And Allocation\n{</p>\n","desc":""},{"short":"","desc":""},{"short":"","desc":""},{"short":"","desc":""},{"syntax":"operator[](pos)","name":"operator[]","returns":"const PixelType &","returns_description":null,"parameters":"size_t pos","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Provides access to each channel of each pixel. If you have RGB pixel\ndata, then you'll have 3 values for each pixel, if you have RGBA,\nyou'll have 4</p>\n","desc":""},{"syntax":"operator[](pos)","name":"operator[]","returns":"PixelType &","returns_description":null,"parameters":"size_t pos","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Provides access to each channel of each pixel. If you have RGB pixel data, then you'll have 3 values for each pixel, if you have RGBA, you'll have 4.</p>\n"},{"short":"<p>Paste the ofPixels object into another ofPixels object at the\nspecified index, copying data from the ofPixels that the method is\nbeing called on to the ofPixels object at <code><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>dst</code>. If the data being\ncopied doesn't fit into the destination then the image is cropped.</p>\n","desc":"<p>This pastes the ofPixels object into another ofPixels object at the specified index, copying data from the ofPixels that the method is being called on to the ofPixels object at &amp;dst. If the data being copied doesn't fit into the dst then the image is cropped.</p>\n<pre><code><span class=\"token function\">ofLoadImage</span><span class=\"token punctuation\">(</span>footballPixels<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>two<span class=\"token punctuation\">.</span>jpg<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLoadImage</span><span class=\"token punctuation\">(</span>fujiPixels<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>one<span class=\"token punctuation\">.</span>jpg<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfujiTex<span class=\"token punctuation\">.</span><span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span>footballPixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfootballTex<span class=\"token punctuation\">.</span><span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span>fujiPixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfootballPixels<span class=\"token punctuation\">.</span><span class=\"token function\">pasteInto</span><span class=\"token punctuation\">(</span>fujiPixels<span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now fujiPixels is altered</span>\nmixtureTex<span class=\"token punctuation\">.</span><span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span>fujiPixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Drawing the three textures here you can see the ball cropped into the mountain:\n<img src=\"ofPixels_crop.png\" alt=\"crop_demo\"></p>\n"},{"syntax":"pixelBitsFromPixelFormat(format)","name":"pixelBitsFromPixelFormat","returns":"size_t","returns_description":null,"parameters":"ofPixelFormat format","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"rbegin()","name":"rbegin","returns":"ofPixels_::reverse_iterator","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"rbegin()","name":"rbegin","returns":"ofPixels_::const_reverse_iterator","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"rend()","name":"rend","returns":"ofPixels_::reverse_iterator","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"rend()","name":"rend","returns":"ofPixels_::const_reverse_iterator","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"resize(dstWidth, dstHeight, interpMethod = OF_INTERPOLATE_NEAREST_NEIGHBOR)","name":"resize","returns":"bool","returns_description":null,"parameters":"size_t dstWidth<span class=\"token punctuation\">,</span> size_t dstHeight<span class=\"token punctuation\">,</span> ofInterpolationMethod interpMethod<span class=\"token operator\">=</span>OF_INTERPOLATE_NEAREST_NEIGHBOR","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Resize the ofPixels instance to the dstHeight and dstWidth.</p>\n<p>The options for the interpolation methods are as follows:</p>\n<pre><code>OF_INTERPOLATE_NEAREST_NEIGHBOR\nOF_INTERPOLATE_BILINEAR\nOF_INTERPOLATE_BICUBIC\n</code></pre>\n","desc":"<p>This resizes the ofPixels instance to the dstHeight and dstWidth. The options for the interpolation methods are as follows:\nOF_INTERPOLATE_NEAREST_NEIGHBOR =1\nOF_INTERPOLATE_BILINEAR\t\t\t=2\nOF_INTERPOLATE_BICUBIC\t\t\t=3</p>\n"},{"short":"<p>Resize the ofPixels instance to the size of the ofPixels object passed in dst.</p>\n<p>The options for the interpolation methods are as follows:</p>\n<pre><code>OF_INTERPOLATE_NEAREST_NEIGHBOR\nOF_INTERPOLATE_BILINEAR\nOF_INTERPOLATE_BICUBIC\n</code></pre>\n","desc":"<p>This resizes the ofPixels instance to the size of the ofPixels object passed in dst. The options for the interpolation methods are as follows:\nOF_INTERPOLATE_NEAREST_NEIGHBOR =1\nOF_INTERPOLATE_BILINEAR\t\t\t=2\nOF_INTERPOLATE_BICUBIC\t\t\t=3</p>\n"},{"syntax":"rotate90(nClockwiseRotations)","name":"rotate90","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> nClockwiseRotations","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>crop to a new width and height, this reallocates memory.</p>\n"},{"short":"","desc":""},{"syntax":"set(channel, val)","name":"set","returns":"void","returns_description":null,"parameters":"size_t channel<span class=\"token punctuation\">,</span> PixelType val","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"set(val)","name":"set","returns":"void","returns_description":null,"parameters":"PixelType val","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>}\n\\name Set Pixel Data\n{</p>\n","desc":""},{"short":"<p>Set all the pixel data for a single channel, for instance, the\nRed pixel values, from an ofPixels object assumed to be a grayscale\nrepresentation of the data that should go into that one channel.</p>\n","desc":"<p>This sets all the pixel data for a single channel, for instance, the Red pixel values, from an ofPixels object assumed to be a grayscale representation of the data that should go into that one channel.</p>\n"},{"short":"<p>Set the color of all pixels</p>\n","desc":""},{"short":"<p>Set the color of the pixel at a specific index</p>\n","desc":""},{"short":"<p>Set the color of the pixel at the x,y location</p>\n","desc":"<p>Sets the color of the pixel at the x,y location.</p>\n"},{"syntax":"setFromAlignedPixels(*newPixels, width, height, channels, stride)","name":"setFromAlignedPixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span>newPixels<span class=\"token punctuation\">,</span> size_t width<span class=\"token punctuation\">,</span> size_t height<span class=\"token punctuation\">,</span> size_t channels<span class=\"token punctuation\">,</span> size_t stride","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setFromAlignedPixels(*newPixels, width, height, pixelFormat, stride)","name":"setFromAlignedPixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span>newPixels<span class=\"token punctuation\">,</span> size_t width<span class=\"token punctuation\">,</span> size_t height<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat<span class=\"token punctuation\">,</span> size_t stride","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setFromAlignedPixels(*newPixels, width, height, pixelFormat, strides)","name":"setFromAlignedPixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span>newPixels<span class=\"token punctuation\">,</span> size_t width<span class=\"token punctuation\">,</span> size_t height<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> strides","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>used to copy i420 pixels from gstreamer when (width % 4) != 0</p>\n","desc":""},{"syntax":"setFromExternalPixels(*newPixels, w, h, channels)","name":"setFromExternalPixels","returns":"void","returns_description":null,"parameters":"PixelType <span class=\"token operator\">*</span>newPixels<span class=\"token punctuation\">,</span> size_t w<span class=\"token punctuation\">,</span> size_t h<span class=\"token punctuation\">,</span> size_t channels","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setFromExternalPixels(*newPixels, w, h, pixelFormat)","name":"setFromExternalPixels","returns":"void","returns_description":null,"parameters":"PixelType <span class=\"token operator\">*</span>newPixels<span class=\"token punctuation\">,</span> size_t w<span class=\"token punctuation\">,</span> size_t h<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setFromPixels(*newPixels, w, h, channels)","name":"setFromPixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span>newPixels<span class=\"token punctuation\">,</span> size_t w<span class=\"token punctuation\">,</span> size_t h<span class=\"token punctuation\">,</span> size_t channels","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setFromPixels(*newPixels, w, h, pixelFormat)","name":"setFromPixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span>newPixels<span class=\"token punctuation\">,</span> size_t w<span class=\"token punctuation\">,</span> size_t h<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setFromPixels(*newPixels, w, h, type)","name":"setFromPixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span>newPixels<span class=\"token punctuation\">,</span> size_t w<span class=\"token punctuation\">,</span> size_t h<span class=\"token punctuation\">,</span> ofImageType type","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setImageType(imageType)","name":"setImageType","returns":"void","returns_description":null,"parameters":"ofImageType imageType","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Changes the image type for the ofPixels object</p>\n<p><strong>Parameters:</strong></p>\n<p>imageType Can be one of the following: OF_IMAGE_GRAYSCALE, OF_IMAGE_COLOR, OF_IMAGE_COLOR_ALPHA</p>\n","desc":""},{"syntax":"setNumChannels(numChannels)","name":"setNumChannels","returns":"void","returns_description":null,"parameters":"size_t numChannels","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"size()","name":"size","returns":"size_t","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the number of values that the ofPixels object\ncontains, so an RGB data 400x400 would be 480,000, whereas RGBA data\nof the same dimensions would be 640,000.</p>\n","desc":"<p>This gives you the number of values that the ofPixels object contains, so an RGB data 400x400 would be 480,000, whereas RGBA data of the same dimensions would be 640,000.</p>\n"},{"short":"","desc":""},{"syntax":"swapRgb()","name":"swapRgb","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Swaps the R and B channels of an\nimage, leaving the G and A channels as is.</p>\n","desc":"<p>As implemented right now, this method swaps the R and B channels of an image, leaving the G and A channels as is.</p>\n"},{"syntax":"~ofPixels_()","name":"~ofPixels_","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"name":"bAllocated","type":"bool","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"height","type":"int","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"pixelFormat","type":"ofPixelFormat","access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"pixels","type":"PixelType *","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"pixelsOwner","type":"bool","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"pixelsSize","type":"int","access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"width","type":"int","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofPixels_</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: True</em>\n_extends: _\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>A class representing a collection of pixels.</p>\n<p>##Description</p>\n<p>ofPixels is an object for working with blocks of pixels, those pixels can be copied from an image that you've loaded, something that you've drawn using ofGraphics, or a ofVideoGrabber instance. You can create an image from pixels, using on ofPixels object like so:</p>\n<pre><code>ofPixels p<span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLoadImage</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>pathToImage<span class=\"token punctuation\">.</span>jpg<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>ofPixels represents pixels data on the CPU as opposed to an ofTexture which represents pixel data on the GPU. They can easily be made inter-operational though:</p>\n<pre><code>ofTexture tex<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// do some stuff with t</span>\nofPixels pix<span class=\"token punctuation\">;</span>\ntex<span class=\"token punctuation\">.</span><span class=\"token function\">readToPixels</span><span class=\"token punctuation\">(</span>pix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now all the pixels from tex are in pix</span>\n</code></pre>\n<p>You can access the pixels in an ofPixels object with the [] operator.</p>\n<pre><code>ofPixels pix<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// put some stuff in the pixels</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> i <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> pix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>You can think of the ofPixels as the CPU side representation of pixel data that can be sent to the GPU as an ofTexture object. To draw pixels, you need to put them into an ofTexture and to manipulate an ofTextures pixel data you need an ofPixels object.</p>\n<p>##Methods</p>\n<p>###void allocate(w, h, channels)</p>\n<p>&lt;!--\n<em>syntax: allocate(w, h, channels)</em>\n<em>name: allocate</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: size_t w, size_t h, size_t channels</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Allocates space for pixel data</p>\n<p><strong>Parameters:</strong></p>\n<p>w Width of pixel array</p>\n<p>h Height of pixel array</p>\n<p>channels Number of channels per pixel</p>\n<p>_description: _</p>\n<p>Allocates space for pixel data of the given width (w), height (h) and number of channels (channels). If an ofImageType or ofPixelFormat is passed in, it will allocate based on the required number of channels.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void allocate(w, h, imageType)</p>\n<p>&lt;!--\n<em>syntax: allocate(w, h, imageType)</em>\n<em>name: allocate</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: size_t w, size_t h, ofImageType imageType</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Allocates space for pixel data</p>\n<p>The imageType can be one of the following:</p>\n<pre><code>OF_IMAGE_GRAYSCALE\nOF_IMAGE_COLOR\nOF_IMAGE_COLOR_ALPHA\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>w Width of pixel array</p>\n<p>h Height of pixel array</p>\n<p>imageType ofImageType defining number of channels per pixel</p>\n<p>_description: _</p>\n<p>ofImageType:</p>\n<pre><code>OF_IMAGE_GRAYSCALE\n\nOF_IMAGE_COLOR\n\nOF_IMAGE_COLOR_ALPHA\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void allocate(w, h, pixelFormat)</p>\n<p>&lt;!--\n<em>syntax: allocate(w, h, pixelFormat)</em>\n<em>name: allocate</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: size_t w, size_t h, ofPixelFormat pixelFormat</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Allocates space for pixel data</p>\n<p>The pixelFormat can be one of the following:</p>\n<pre><code>OF_PIXELS_RGB\nOF_PIXELS_RGBA\nOF_PIXELS_BGRA\nOF_PIXELS_MONO\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>w Width of pixel array</p>\n<p>h Height of pixel array</p>\n<p>pixelFormat ofPixelFormat defining number of channels per pixel</p>\n<p>_description: _</p>\n<p>ofPixelFormat:</p>\n<pre><code>OF_PIXELS_RGB\n\nOF_PIXELS_RGBA\n\nOF_PIXELS_BGRA\n\nOF_PIXELS_MONO\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels_::iterator begin()</p>\n<p>&lt;!--\n<em>syntax: begin()</em>\n<em>name: begin</em>\n<em>returns: ofPixels</em>::iterator_\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels_::const_iterator begin()</p>\n<p>&lt;!--\n<em>syntax: begin()</em>\n<em>name: begin</em>\n<em>returns: ofPixels</em>::const_iterator_\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float bicubicInterpolate(*patch, x, y, x2, y2, x3, y3)</p>\n<p>&lt;!--\n<em>syntax: bicubicInterpolate(*patch, x, y, x2, y2, x3, y3)</em>\n<em>name: bicubicInterpolate</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: const float *patch, float x, float y, float x2, float y2, float x3, float y3</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\endcond</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool blendInto(&amp;dst, x, y)</p>\n<p>&lt;!--\n<em>syntax: blendInto(&amp;dst, x, y)</em>\n<em>name: blendInto</em>\n<em>returns: bool</em>\n<em>returns_description: _\n<em>parameters: ofPixels</em>&lt; PixelType &gt; &amp;dst, size_t x, size_t y</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###size_t bytesFromPixelFormat(w, h, format)</p>\n<p>&lt;!--\n<em>syntax: bytesFromPixelFormat(w, h, format)</em>\n<em>name: bytesFromPixelFormat</em>\n<em>returns: size_t</em>\n_returns_description: _\n<em>parameters: size_t w, size_t h, ofPixelFormat format</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void clear()</p>\n<p>&lt;!--\n<em>syntax: clear()</em>\n<em>name: clear</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clear all the data from the ofPixels objects.\nAfter calling this you'll need to allocate()\nthe ofPixels object again to use it.</p>\n<p>_description: _</p>\n<p>This clears all the data from the ofPixels objects. After calling this you'll need to allocate the ofPixels object again to use it.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void copyFrom(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: copyFrom(&amp;mom)</em>\n<em>name: copyFrom</em>\n<em>returns: void</em>\n<em>returns_description: _\n<em>parameters: const ofPixels</em>&lt; PixelType &gt; &amp;mom</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void copyFrom(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: copyFrom(&amp;mom)</em>\n<em>name: copyFrom</em>\n<em>returns: void</em>\n<em>returns_description: _\n<em>parameters: const ofPixels</em>&lt; SrcType &gt; &amp;mom</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void crop(x, y, width, height)</p>\n<p>&lt;!--\n<em>syntax: crop(x, y, width, height)</em>\n<em>name: crop</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: size_t x, size_t y, size_t width, size_t height</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Crop the pixels to a new width and height.</p>\n<p>As a word of caution this reallocates memory and can be a bit\nexpensive if done a lot.</p>\n<p>_description: _</p>\n<p>This crops the pixels to a new width and height. As a word of caution this reallocates memory and can be a bit expensive if done a lot.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void cropTo(&amp;toPix, x, y, width, height)</p>\n<p>&lt;!--\n<em>syntax: cropTo(&amp;toPix, x, y, width, height)</em>\n<em>name: cropTo</em>\n<em>returns: void</em>\n<em>returns_description: _\n<em>parameters: ofPixels</em>&lt; PixelType &gt; &amp;toPix, size_t x, size_t y, size_t width, size_t height</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Crop the pixels into the ofPixels reference passed in by <code>toPix<span class=\"token punctuation\">.</span> at the </code>x<code><span class=\"token operator\">and</span></code>y` and width the new width and height.</p>\n<p>As a word of caution this reallocates memory and can be a bit\nexpensive if done a lot.</p>\n<p>_description: _</p>\n<p>This crops the pixels into the ofPixels reference passed in by toPix. at the x and y and with the new width and height. As a word of caution this reallocates memory and can be a bit expensive if done a lot.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels_::iterator end()</p>\n<p>&lt;!--\n<em>syntax: end()</em>\n<em>name: end</em>\n<em>returns: ofPixels</em>::iterator_\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels_::const_iterator end()</p>\n<p>&lt;!--\n<em>syntax: end()</em>\n<em>name: end</em>\n<em>returns: ofPixels</em>::const_iterator_\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###size_t getBitsPerChannel()</p>\n<p>&lt;!--\n<em>syntax: getBitsPerChannel()</em>\n<em>name: getBitsPerChannel</em>\n<em>returns: size_t</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get how large each channel of a pixels is.</p>\n<p>ofPixels objects that store pixel data as <code><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span></code> are smaller\nthan ofPixels objects that store pixel data as 'float`.</p>\n<p>\\note This returns bits, not bytes, so you should see ofPixels&lt;float&gt;\nreturn 32 and ofPixels&lt;unsigned char&gt; return 8.</p>\n<p>_description: _</p>\n<p>This is how large each channel of a pixels is, ofPixels objects that store pixel data as unsigned char are smaller than  ofPixels objects that store pixel data as floats.\nThis returns bit, not bytes, so you'll probably see ofPixels&lt;float&gt; as 32 and ofPixels&lt;unsigned char&gt; as 8.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###size_t getBitsPerPixel()</p>\n<p>&lt;!--\n<em>syntax: getBitsPerPixel()</em>\n<em>name: getBitsPerPixel</em>\n<em>returns: size_t</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get number of bits per pixel</p>\n<p>If you have RGB pixel data, this will return 24, if you have RGBA,\nyou'll have 32, if you have grayscale, this will return 8.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###size_t getBytesPerChannel()</p>\n<p>&lt;!--\n<em>syntax: getBytesPerChannel()</em>\n<em>name: getBytesPerChannel</em>\n<em>returns: size_t</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get how large each channel of a pixel is</p>\n<p>ofPixels objects that store pixel data as unsigned char are smaller\nthan  ofPixels objects that store pixel data as floats.</p>\n<p>\\note This returns bytes, not bits, so you should see ofPixels&lt;float&gt;\nreturn 4 and ofPixels&lt;unsigned char&gt; return 1.</p>\n<p>_description: _</p>\n<p>This is how large each channel of a pixels is, ofPixels objects that store pixel data as unsigned char are smaller than  ofPixels objects that store pixel data as floats.\nThis returns bytes, not bits, so you'll probably see ofPixels&lt;float&gt; as 4 and ofPixels&lt;unsigned char&gt; as 1.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###size_t getBytesPerPixel()</p>\n<p>&lt;!--\n<em>syntax: getBytesPerPixel()</em>\n<em>name: getBytesPerPixel</em>\n<em>returns: size_t</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the number of bytes per pixel</p>\n<p>_description: _</p>\n<p>Returns the number of the pixels.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###size_t getBytesStride()</p>\n<p>&lt;!--\n<em>syntax: getBytesStride()</em>\n<em>name: getBytesStride</em>\n<em>returns: size_t</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels_&lt; PixelType &gt; getChannel(channel)</p>\n<p>&lt;!--\n<em>syntax: getChannel(channel)</em>\n<em>name: getChannel</em>\n<em>returns: ofPixels</em>&lt; PixelType &gt;_\n_returns_description: _\n<em>parameters: size_t channel</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get all values of one channel</p>\n<p>For instance, the Red pixel values, from the\nofPixels object, this gives you a grayscale representation of the\nspecific channel</p>\n<pre><code>    <span class=\"token comment\" spellcheck=\"true\">// Get red pixels</span>\n\tofPixels rpix <span class=\"token operator\">=</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Get green pixels</span>\n\tofPixels gpix <span class=\"token operator\">=</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Get blue pixels</span>\n\tofPixels bpix <span class=\"token operator\">=</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>_description: _</p>\n<p>This returns a single channel, for instance, the Red pixel values, from the ofPixels object, this gives you a grayscale representation of that one channel.</p>\n<pre><code>\tofPixels rpix <span class=\"token operator\">=</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofPixels gpix <span class=\"token operator\">=</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofPixels bpix <span class=\"token operator\">=</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; getColor(index)</p>\n<p>&lt;!--\n<em>syntax: getColor(index)</em>\n<em>name: getColor</em>\n<em>returns: ofColor</em>&lt; PixelType &gt;_\n_returns_description: _\n<em>parameters: size_t index</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the color at a specific index</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; getColor(x, y)</p>\n<p>&lt;!--\n<em>syntax: getColor(x, y)</em>\n<em>name: getColor</em>\n<em>returns: ofColor</em>&lt; PixelType &gt;_\n_returns_description: _\n<em>parameters: size_t x, size_t y</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the color at a x,y position</p>\n<p>_description: _</p>\n<p>This method returns the ofColor that the pixels contains at an x, y pair:</p>\n<pre><code>ofColor c <span class=\"token operator\">=</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels_::ConstLine getConstLine(line)</p>\n<p>&lt;!--\n<em>syntax: getConstLine(line)</em>\n<em>name: getConstLine</em>\n<em>returns: ofPixels</em>::ConstLine_\n_returns_description: _\n<em>parameters: size_t line</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels_::ConstLines getConstLines()</p>\n<p>&lt;!--\n<em>syntax: getConstLines()</em>\n<em>name: getConstLines</em>\n<em>returns: ofPixels</em>::ConstLines_\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels_::ConstLines getConstLines(first, numLines)</p>\n<p>&lt;!--\n<em>syntax: getConstLines(first, numLines)</em>\n<em>name: getConstLines</em>\n<em>returns: ofPixels</em>::ConstLines_\n_returns_description: _\n<em>parameters: size_t first, size_t numLines</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels_::ConstPixels getConstPixelsIter()</p>\n<p>&lt;!--\n<em>syntax: getConstPixelsIter()</em>\n<em>name: getConstPixelsIter</em>\n<em>returns: ofPixels</em>::ConstPixels_\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###PixelType * getData()</p>\n<p>&lt;!--\n<em>syntax: getData()</em>\n<em>name: getData</em>\n<em>returns: PixelType *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Retrieves pixel data from the ofPixel object.</p>\n<p><strong>Returns</strong>: A raw pointer to the pixel data.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const PixelType * getData()</p>\n<p>&lt;!--\n<em>syntax: getData()</em>\n<em>name: getData</em>\n<em>returns: const PixelType *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###size_t getHeight()</p>\n<p>&lt;!--\n<em>syntax: getHeight()</em>\n<em>name: getHeight</em>\n<em>returns: size_t</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the height of the pixel array.</p>\n<p>_description: _</p>\n<p>Returns the height of the pixels.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofImageType getImageType()</p>\n<p>&lt;!--\n<em>syntax: getImageType()</em>\n<em>name: getImageType</em>\n<em>returns: ofImageType</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the type of the image</p>\n<p><strong>Returns</strong>: One of the following types: <code>OF_IMAGE_GRAYSCALE</code>,\n<code>OF_IMAGE_COLOR</code>, <code>OF_IMAGE_COLOR_ALPHA</code></p>\n<p>_description: _</p>\n<p>Returns what image type the ofPixels object is.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels_::Line getLine(line)</p>\n<p>&lt;!--\n<em>syntax: getLine(line)</em>\n<em>name: getLine</em>\n<em>returns: ofPixels</em>::Line_\n_returns_description: _\n<em>parameters: size_t line</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels_::Lines getLines()</p>\n<p>&lt;!--\n<em>syntax: getLines()</em>\n<em>name: getLines</em>\n<em>returns: ofPixels</em>::Lines_\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels_::Lines getLines(first, numLines)</p>\n<p>&lt;!--\n<em>syntax: getLines(first, numLines)</em>\n<em>name: getLines</em>\n<em>returns: ofPixels</em>::Lines_\n_returns_description: _\n<em>parameters: size_t first, size_t numLines</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###size_t getNumChannels()</p>\n<p>&lt;!--\n<em>syntax: getNumChannels()</em>\n<em>name: getNumChannels</em>\n<em>returns: size_t</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the number of channels that the ofPixels object contains.\nRGB is 3 channels, RGBA is 4, and grayscale is 1.</p>\n<p>_description: _</p>\n<p>This returns the number of channels that the ofPixels object contains. RGB is 3 channels, RGBA is 4, and grayscale is 1.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###size_t getNumPlanes()</p>\n<p>&lt;!--\n<em>syntax: getNumPlanes()</em>\n<em>name: getNumPlanes</em>\n<em>returns: size_t</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixelFormat getPixelFormat()</p>\n<p>&lt;!--\n<em>syntax: getPixelFormat()</em>\n<em>name: getPixelFormat</em>\n<em>returns: ofPixelFormat</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###size_t getPixelIndex(x, y)</p>\n<p>&lt;!--\n<em>syntax: getPixelIndex(x, y)</em>\n<em>name: getPixelIndex</em>\n<em>returns: size_t</em>\n_returns_description: _\n<em>parameters: size_t x, size_t y</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the pixel index at a x,y position</p>\n<pre><code>ofColor yellow <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>yellow<span class=\"token punctuation\">;</span>\nsize_t ind <span class=\"token operator\">=</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getPixelIndex</span><span class=\"token punctuation\">(</span>mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npix<span class=\"token punctuation\">.</span><span class=\"token function\">setPixel</span><span class=\"token punctuation\">(</span>ind<span class=\"token punctuation\">,</span> yellow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>_description: _</p>\n<p>This method gives you the index of the pixel at x,y. For instance:</p>\n<pre><code>ofColor yellow <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span>yellow<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> ind <span class=\"token operator\">=</span> pix<span class=\"token punctuation\">.</span><span class=\"token function\">getPixelIndex</span><span class=\"token punctuation\">(</span>mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npix<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>ind<span class=\"token punctuation\">,</span> yellow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels_::Pixels getPixelsIter()</p>\n<p>&lt;!--\n<em>syntax: getPixelsIter()</em>\n<em>name: getPixelsIter</em>\n<em>returns: ofPixels</em>::Pixels_\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels_&lt; PixelType &gt; getPlane(plane)</p>\n<p>&lt;!--\n<em>syntax: getPlane(plane)</em>\n<em>name: getPlane</em>\n<em>returns: ofPixels</em>&lt; PixelType &gt;_\n_returns_description: _\n<em>parameters: size_t plane</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###size_t getTotalBytes()</p>\n<p>&lt;!--\n<em>syntax: getTotalBytes()</em>\n<em>name: getTotalBytes</em>\n<em>returns: size_t</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###size_t getWidth()</p>\n<p>&lt;!--\n<em>syntax: getWidth()</em>\n<em>name: getWidth</em>\n<em>returns: size_t</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the width of the pixel array.</p>\n<p>_description: _</p>\n<p>Returns the width of the pixels.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isAllocated()</p>\n<p>&lt;!--\n<em>syntax: isAllocated()</em>\n<em>name: isAllocated</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get whether memory has been allocated for an ofPixels object or not</p>\n<p>Many operations like copying pixels, etc, automatically allocate\nthe memory needed, but it's sometimes good to check.</p>\n<p>_description: _</p>\n<p>Returns whether memory has been allocated for an ofPixels object or not. Many operations like copying pixels, etc, automatically allocate the memory needed, but it's sometimes good to check.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void mirror(vertically, horizontal)</p>\n<p>&lt;!--\n<em>syntax: mirror(vertically, horizontal)</em>\n<em>name: mirror</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool vertically, bool horizontal</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Mirror the pixels across the vertical and/or horizontal axis.</p>\n<p><strong>Parameters:</strong></p>\n<p>vertically Set to true to mirror vertically</p>\n<p>horizontal Set to true to mirror horizontal</p>\n<p>_description: _</p>\n<p>This reflects the pixels across the vertical and/or horizontal axis.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void mirrorTo(&amp;dst, vertically, horizontal)</p>\n<p>&lt;!--\n<em>syntax: mirrorTo(&amp;dst, vertically, horizontal)</em>\n<em>name: mirrorTo</em>\n<em>returns: void</em>\n<em>returns_description: _\n<em>parameters: ofPixels</em>&lt; PixelType &gt; &amp;dst, bool vertically, bool horizontal</em>\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofPixels_(&amp;&amp;mom)</h3>\n<p>&lt;!--\n<em>syntax: ofPixels</em>(&amp;&amp;mom)_\n<em>name: ofPixels</em>_\n_returns: _\n<em>returns_description: _\n<em>parameters: ofPixels</em>&lt; PixelType &gt; &amp;&amp;mom</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofPixels_(&amp;mom)</h3>\n<p>&lt;!--\n<em>syntax: ofPixels</em>(&amp;mom)_\n<em>name: ofPixels</em>_\n_returns: _\n<em>returns_description: _\n<em>parameters: const ofPixels</em>&lt; PixelType &gt; &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofPixels_(&amp;mom)</h3>\n<p>&lt;!--\n<em>syntax: ofPixels</em>(&amp;mom)_\n<em>name: ofPixels</em>_\n_returns: _\n<em>returns_description: _\n<em>parameters: const ofPixels</em>&lt; SrcType &gt; &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofPixels_()</h3>\n<p>&lt;!--\n<em>syntax: ofPixels</em>()_\n<em>name: ofPixels</em>_\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Construction And Allocation\n{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels_&lt; PixelType &gt; &amp; operator=(&amp;&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;&amp;mom)</em>\n<em>name: operator=</em>\n<em>returns: ofPixels</em>&lt; PixelType &gt; &amp;_\n<em>returns_description: _\n<em>parameters: ofPixels</em>&lt; PixelType &gt; &amp;&amp;mom</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels_&lt; PixelType &gt; &amp; operator=(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;mom)</em>\n<em>name: operator=</em>\n<em>returns: ofPixels</em>&lt; PixelType &gt; &amp;_\n<em>returns_description: _\n<em>parameters: const ofPixels</em>&lt; PixelType &gt; &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels_&lt; PixelType &gt; &amp; operator=(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;mom)</em>\n<em>name: operator=</em>\n<em>returns: ofPixels</em>&lt; PixelType &gt; &amp;_\n<em>returns_description: _\n<em>parameters: const ofPixels</em>&lt; SrcType &gt; &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const PixelType &amp; operator<a href=\"pos\"></a></p>\n<p>&lt;!--\n<em>syntax: operator<a href=\"pos\"></a></em>\n<em>name: operator[]</em>\n<em>returns: const PixelType &amp;</em>\n_returns_description: _\n<em>parameters: size_t pos</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Provides access to each channel of each pixel. If you have RGB pixel\ndata, then you'll have 3 values for each pixel, if you have RGBA,\nyou'll have 4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###PixelType &amp; operator<a href=\"pos\"></a></p>\n<p>&lt;!--\n<em>syntax: operator<a href=\"pos\"></a></em>\n<em>name: operator[]</em>\n<em>returns: PixelType &amp;</em>\n_returns_description: _\n<em>parameters: size_t pos</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Provides access to each channel of each pixel. If you have RGB pixel data, then you'll have 3 values for each pixel, if you have RGBA, you'll have 4.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool pasteInto(&amp;dst, x, y)</p>\n<p>&lt;!--\n<em>syntax: pasteInto(&amp;dst, x, y)</em>\n<em>name: pasteInto</em>\n<em>returns: bool</em>\n<em>returns_description: _\n<em>parameters: ofPixels</em>&lt; PixelType &gt; &amp;dst, size_t x, size_t y</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Paste the ofPixels object into another ofPixels object at the\nspecified index, copying data from the ofPixels that the method is\nbeing called on to the ofPixels object at <code><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>dst</code>. If the data being\ncopied doesn't fit into the destination then the image is cropped.</p>\n<p>_description: _</p>\n<p>This pastes the ofPixels object into another ofPixels object at the specified index, copying data from the ofPixels that the method is being called on to the ofPixels object at &amp;dst. If the data being copied doesn't fit into the dst then the image is cropped.</p>\n<pre><code><span class=\"token function\">ofLoadImage</span><span class=\"token punctuation\">(</span>footballPixels<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>two<span class=\"token punctuation\">.</span>jpg<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLoadImage</span><span class=\"token punctuation\">(</span>fujiPixels<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>one<span class=\"token punctuation\">.</span>jpg<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfujiTex<span class=\"token punctuation\">.</span><span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span>footballPixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfootballTex<span class=\"token punctuation\">.</span><span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span>fujiPixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfootballPixels<span class=\"token punctuation\">.</span><span class=\"token function\">pasteInto</span><span class=\"token punctuation\">(</span>fujiPixels<span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now fujiPixels is altered</span>\nmixtureTex<span class=\"token punctuation\">.</span><span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span>fujiPixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Drawing the three textures here you can see the ball cropped into the mountain:\n<img src=\"ofPixels_crop.png\" alt=\"crop_demo\"></p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###size_t pixelBitsFromPixelFormat(format)</p>\n<p>&lt;!--\n<em>syntax: pixelBitsFromPixelFormat(format)</em>\n<em>name: pixelBitsFromPixelFormat</em>\n<em>returns: size_t</em>\n_returns_description: _\n<em>parameters: ofPixelFormat format</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels_::reverse_iterator rbegin()</p>\n<p>&lt;!--\n<em>syntax: rbegin()</em>\n<em>name: rbegin</em>\n<em>returns: ofPixels</em>::reverse_iterator_\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels_::const_reverse_iterator rbegin()</p>\n<p>&lt;!--\n<em>syntax: rbegin()</em>\n<em>name: rbegin</em>\n<em>returns: ofPixels</em>::const_reverse_iterator_\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels_::reverse_iterator rend()</p>\n<p>&lt;!--\n<em>syntax: rend()</em>\n<em>name: rend</em>\n<em>returns: ofPixels</em>::reverse_iterator_\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels_::const_reverse_iterator rend()</p>\n<p>&lt;!--\n<em>syntax: rend()</em>\n<em>name: rend</em>\n<em>returns: ofPixels</em>::const_reverse_iterator_\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool resize(dstWidth, dstHeight, interpMethod = OF_INTERPOLATE_NEAREST_NEIGHBOR)</p>\n<p>&lt;!--\n<em>syntax: resize(dstWidth, dstHeight, interpMethod = OF_INTERPOLATE_NEAREST_NEIGHBOR)</em>\n<em>name: resize</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: size_t dstWidth, size_t dstHeight, ofInterpolationMethod interpMethod=OF_INTERPOLATE_NEAREST_NEIGHBOR</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Resize the ofPixels instance to the dstHeight and dstWidth.</p>\n<p>The options for the interpolation methods are as follows:</p>\n<pre><code>OF_INTERPOLATE_NEAREST_NEIGHBOR\nOF_INTERPOLATE_BILINEAR\nOF_INTERPOLATE_BICUBIC\n</code></pre>\n<p>_description: _</p>\n<p>This resizes the ofPixels instance to the dstHeight and dstWidth. The options for the interpolation methods are as follows:\nOF_INTERPOLATE_NEAREST_NEIGHBOR =1\nOF_INTERPOLATE_BILINEAR\t\t\t=2\nOF_INTERPOLATE_BICUBIC\t\t\t=3</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool resizeTo(&amp;dst, interpMethod = OF_INTERPOLATE_NEAREST_NEIGHBOR)</p>\n<p>&lt;!--\n<em>syntax: resizeTo(&amp;dst, interpMethod = OF_INTERPOLATE_NEAREST_NEIGHBOR)</em>\n<em>name: resizeTo</em>\n<em>returns: bool</em>\n<em>returns_description: _\n<em>parameters: ofPixels</em>&lt; PixelType &gt; &amp;dst, ofInterpolationMethod interpMethod=OF_INTERPOLATE_NEAREST_NEIGHBOR</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Resize the ofPixels instance to the size of the ofPixels object passed in dst.</p>\n<p>The options for the interpolation methods are as follows:</p>\n<pre><code>OF_INTERPOLATE_NEAREST_NEIGHBOR\nOF_INTERPOLATE_BILINEAR\nOF_INTERPOLATE_BICUBIC\n</code></pre>\n<p>_description: _</p>\n<p>This resizes the ofPixels instance to the size of the ofPixels object passed in dst. The options for the interpolation methods are as follows:\nOF_INTERPOLATE_NEAREST_NEIGHBOR =1\nOF_INTERPOLATE_BILINEAR\t\t\t=2\nOF_INTERPOLATE_BICUBIC\t\t\t=3</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rotate90(nClockwiseRotations)</p>\n<p>&lt;!--\n<em>syntax: rotate90(nClockwiseRotations)</em>\n<em>name: rotate90</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int nClockwiseRotations</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>crop to a new width and height, this reallocates memory.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rotate90To(&amp;dst, nClockwiseRotations)</p>\n<p>&lt;!--\n<em>syntax: rotate90To(&amp;dst, nClockwiseRotations)</em>\n<em>name: rotate90To</em>\n<em>returns: void</em>\n<em>returns_description: _\n<em>parameters: ofPixels</em>&lt; PixelType &gt; &amp;dst, int nClockwiseRotations</em>\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(channel, val)</p>\n<p>&lt;!--\n<em>syntax: set(channel, val)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: size_t channel, PixelType val</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(val)</p>\n<p>&lt;!--\n<em>syntax: set(val)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: PixelType val</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>}\n\\name Set Pixel Data\n{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setChannel(channel, channelPixels)</p>\n<p>&lt;!--\n<em>syntax: setChannel(channel, channelPixels)</em>\n<em>name: setChannel</em>\n<em>returns: void</em>\n<em>returns_description: _\n<em>parameters: size_t channel, const ofPixels</em>&lt; PixelType &gt; channelPixels</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set all the pixel data for a single channel, for instance, the\nRed pixel values, from an ofPixels object assumed to be a grayscale\nrepresentation of the data that should go into that one channel.</p>\n<p>_description: _</p>\n<p>This sets all the pixel data for a single channel, for instance, the Red pixel values, from an ofPixels object assumed to be a grayscale representation of the data that should go into that one channel.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setColor(&amp;color)</p>\n<p>&lt;!--\n<em>syntax: setColor(&amp;color)</em>\n<em>name: setColor</em>\n<em>returns: void</em>\n<em>returns_description: _\n<em>parameters: const ofColor</em>&lt; PixelType &gt; &amp;color</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the color of all pixels</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setColor(index, &amp;color)</p>\n<p>&lt;!--\n<em>syntax: setColor(index, &amp;color)</em>\n<em>name: setColor</em>\n<em>returns: void</em>\n<em>returns_description: _\n<em>parameters: size_t index, const ofColor</em>&lt; PixelType &gt; &amp;color</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the color of the pixel at a specific index</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setColor(x, y, &amp;color)</p>\n<p>&lt;!--\n<em>syntax: setColor(x, y, &amp;color)</em>\n<em>name: setColor</em>\n<em>returns: void</em>\n<em>returns_description: _\n<em>parameters: size_t x, size_t y, const ofColor</em>&lt; PixelType &gt; &amp;color</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the color of the pixel at the x,y location</p>\n<p>_description: _</p>\n<p>Sets the color of the pixel at the x,y location.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setFromAlignedPixels(*newPixels, width, height, channels, stride)</p>\n<p>&lt;!--\n<em>syntax: setFromAlignedPixels(*newPixels, width, height, channels, stride)</em>\n<em>name: setFromAlignedPixels</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const PixelType *newPixels, size_t width, size_t height, size_t channels, size_t stride</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setFromAlignedPixels(*newPixels, width, height, pixelFormat, stride)</p>\n<p>&lt;!--\n<em>syntax: setFromAlignedPixels(*newPixels, width, height, pixelFormat, stride)</em>\n<em>name: setFromAlignedPixels</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const PixelType *newPixels, size_t width, size_t height, ofPixelFormat pixelFormat, size_t stride</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setFromAlignedPixels(*newPixels, width, height, pixelFormat, strides)</p>\n<p>&lt;!--\n<em>syntax: setFromAlignedPixels(*newPixels, width, height, pixelFormat, strides)</em>\n<em>name: setFromAlignedPixels</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const PixelType *newPixels, size_t width, size_t height, ofPixelFormat pixelFormat, int strides</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>used to copy i420 pixels from gstreamer when (width % 4) != 0</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setFromExternalPixels(*newPixels, w, h, channels)</p>\n<p>&lt;!--\n<em>syntax: setFromExternalPixels(*newPixels, w, h, channels)</em>\n<em>name: setFromExternalPixels</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: PixelType *newPixels, size_t w, size_t h, size_t channels</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setFromExternalPixels(*newPixels, w, h, pixelFormat)</p>\n<p>&lt;!--\n<em>syntax: setFromExternalPixels(*newPixels, w, h, pixelFormat)</em>\n<em>name: setFromExternalPixels</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: PixelType *newPixels, size_t w, size_t h, ofPixelFormat pixelFormat</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setFromPixels(*newPixels, w, h, channels)</p>\n<p>&lt;!--\n<em>syntax: setFromPixels(*newPixels, w, h, channels)</em>\n<em>name: setFromPixels</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const PixelType *newPixels, size_t w, size_t h, size_t channels</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setFromPixels(*newPixels, w, h, pixelFormat)</p>\n<p>&lt;!--\n<em>syntax: setFromPixels(*newPixels, w, h, pixelFormat)</em>\n<em>name: setFromPixels</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const PixelType *newPixels, size_t w, size_t h, ofPixelFormat pixelFormat</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setFromPixels(*newPixels, w, h, type)</p>\n<p>&lt;!--\n<em>syntax: setFromPixels(*newPixels, w, h, type)</em>\n<em>name: setFromPixels</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const PixelType *newPixels, size_t w, size_t h, ofImageType type</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setImageType(imageType)</p>\n<p>&lt;!--\n<em>syntax: setImageType(imageType)</em>\n<em>name: setImageType</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofImageType imageType</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Changes the image type for the ofPixels object</p>\n<p><strong>Parameters:</strong></p>\n<p>imageType Can be one of the following: OF_IMAGE_GRAYSCALE, OF_IMAGE_COLOR, OF_IMAGE_COLOR_ALPHA</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setNumChannels(numChannels)</p>\n<p>&lt;!--\n<em>syntax: setNumChannels(numChannels)</em>\n<em>name: setNumChannels</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: size_t numChannels</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###size_t size()</p>\n<p>&lt;!--\n<em>syntax: size()</em>\n<em>name: size</em>\n<em>returns: size_t</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the number of values that the ofPixels object\ncontains, so an RGB data 400x400 would be 480,000, whereas RGBA data\nof the same dimensions would be 640,000.</p>\n<p>_description: _</p>\n<p>This gives you the number of values that the ofPixels object contains, so an RGB data 400x400 would be 480,000, whereas RGBA data of the same dimensions would be 640,000.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void swap(&amp;pix)</p>\n<p>&lt;!--\n<em>syntax: swap(&amp;pix)</em>\n<em>name: swap</em>\n<em>returns: void</em>\n<em>returns_description: _\n<em>parameters: ofPixels</em>&lt; PixelType &gt; &amp;pix</em>\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void swapRgb()</p>\n<p>&lt;!--\n<em>syntax: swapRgb()</em>\n<em>name: swapRgb</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Swaps the R and B channels of an\nimage, leaving the G and A channels as is.</p>\n<p>_description: _</p>\n<p>As implemented right now, this method swaps the R and B channels of an image, leaving the G and A channels as is.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>~ofPixels_()</h3>\n<p>&lt;!--\n<em>syntax: ~ofPixels</em>()_\n<em>name: ~ofPixels</em>_\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###bool bAllocated</p>\n<p>&lt;!--\n<em>name: bAllocated</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int height</p>\n<p>&lt;!--\n<em>name: height</em>\n<em>type: int</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixelFormat pixelFormat</p>\n<p>&lt;!--\n<em>name: pixelFormat</em>\n<em>type: ofPixelFormat</em>\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###PixelType * pixels</p>\n<p>&lt;!--\n<em>name: pixels</em>\n<em>type: PixelType *</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool pixelsOwner</p>\n<p>&lt;!--\n<em>name: pixelsOwner</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int pixelsSize</p>\n<p>&lt;!--\n<em>name: pixelsSize</em>\n<em>type: int</em>\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int width</p>\n<p>&lt;!--\n<em>name: width</em>\n<em>type: int</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofPixels_\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: True_\n_extends: _\n-->\n\n##InlineDescription\n\nA class representing a collection of pixels.\n\n\n\n\n\n##Description\n\nofPixels is an object for working with blocks of pixels, those pixels can be copied from an image that you've loaded, something that you've drawn using ofGraphics, or a ofVideoGrabber instance. You can create an image from pixels, using on ofPixels object like so:\n~~~~{.cpp}\nofPixels p;\nofLoadImage(p, \"pathToImage.jpg\");\n~~~~\nofPixels represents pixels data on the CPU as opposed to an ofTexture which represents pixel data on the GPU. They can easily be made inter-operational though:\n~~~~{.cpp}\nofTexture tex;\n// do some stuff with t\nofPixels pix;\ntex.readToPixels(pix); // now all the pixels from tex are in pix\n~~~~\nYou can access the pixels in an ofPixels object with the [] operator.\n~~~~{.cpp}\nofPixels pix;\n// put some stuff in the pixels\nint i = 0;\nwhile( i < pix.size()) {\n\tchar c = pix[i];\n\ti++;\n}\n~~~~\n\nYou can think of the ofPixels as the CPU side representation of pixel data that can be sent to the GPU as an ofTexture object. To draw pixels, you need to put them into an ofTexture and to manipulate an ofTextures pixel data you need an ofPixels object.\n\n\n\n\n\n##Methods\n\n\n\n###void allocate(w, h, channels)\n\n<!--\n_syntax: allocate(w, h, channels)_\n_name: allocate_\n_returns: void_\n_returns_description: _\n_parameters: size_t w, size_t h, size_t channels_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAllocates space for pixel data\n\n**Parameters:**\n\nw Width of pixel array\n\nh Height of pixel array\n\nchannels Number of channels per pixel\n\n\n\n\n\n_description: _\n\nAllocates space for pixel data of the given width (w), height (h) and number of channels (channels). If an ofImageType or ofPixelFormat is passed in, it will allocate based on the required number of channels.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void allocate(w, h, imageType)\n\n<!--\n_syntax: allocate(w, h, imageType)_\n_name: allocate_\n_returns: void_\n_returns_description: _\n_parameters: size_t w, size_t h, ofImageType imageType_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAllocates space for pixel data\n\nThe imageType can be one of the following:\n\n    OF_IMAGE_GRAYSCALE\n    OF_IMAGE_COLOR\n    OF_IMAGE_COLOR_ALPHA\n\n\n**Parameters:**\n\nw Width of pixel array\n\nh Height of pixel array\n\nimageType ofImageType defining number of channels per pixel\n\n\n\n\n\n_description: _\n\nofImageType:\n\n\tOF_IMAGE_GRAYSCALE\n\n\tOF_IMAGE_COLOR\n\n\tOF_IMAGE_COLOR_ALPHA\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void allocate(w, h, pixelFormat)\n\n<!--\n_syntax: allocate(w, h, pixelFormat)_\n_name: allocate_\n_returns: void_\n_returns_description: _\n_parameters: size_t w, size_t h, ofPixelFormat pixelFormat_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAllocates space for pixel data\n\nThe pixelFormat can be one of the following:\n\n    OF_PIXELS_RGB\n    OF_PIXELS_RGBA\n    OF_PIXELS_BGRA\n    OF_PIXELS_MONO\n\n\n**Parameters:**\n\nw Width of pixel array\n\nh Height of pixel array\n\npixelFormat ofPixelFormat defining number of channels per pixel\n\n\n\n\n\n_description: _\n\nofPixelFormat:\n\n\tOF_PIXELS_RGB\n\n\tOF_PIXELS_RGBA\n\n\tOF_PIXELS_BGRA\n\n\tOF_PIXELS_MONO\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels_::iterator begin()\n\n<!--\n_syntax: begin()_\n_name: begin_\n_returns: ofPixels_::iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels_::const_iterator begin()\n\n<!--\n_syntax: begin()_\n_name: begin_\n_returns: ofPixels_::const_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float bicubicInterpolate(*patch, x, y, x2, y2, x3, y3)\n\n<!--\n_syntax: bicubicInterpolate(*patch, x, y, x2, y2, x3, y3)_\n_name: bicubicInterpolate_\n_returns: float_\n_returns_description: _\n_parameters: const float *patch, float x, float y, float x2, float y2, float x3, float y3_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\endcond\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool blendInto(&dst, x, y)\n\n<!--\n_syntax: blendInto(&dst, x, y)_\n_name: blendInto_\n_returns: bool_\n_returns_description: _\n_parameters: ofPixels_< PixelType > &dst, size_t x, size_t y_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t bytesFromPixelFormat(w, h, format)\n\n<!--\n_syntax: bytesFromPixelFormat(w, h, format)_\n_name: bytesFromPixelFormat_\n_returns: size_t_\n_returns_description: _\n_parameters: size_t w, size_t h, ofPixelFormat format_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clear()\n\n<!--\n_syntax: clear()_\n_name: clear_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClear all the data from the ofPixels objects.\nAfter calling this you'll need to allocate()\nthe ofPixels object again to use it.\n\n\n\n\n\n_description: _\n\nThis clears all the data from the ofPixels objects. After calling this you'll need to allocate the ofPixels object again to use it.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void copyFrom(&mom)\n\n<!--\n_syntax: copyFrom(&mom)_\n_name: copyFrom_\n_returns: void_\n_returns_description: _\n_parameters: const ofPixels_< PixelType > &mom_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void copyFrom(&mom)\n\n<!--\n_syntax: copyFrom(&mom)_\n_name: copyFrom_\n_returns: void_\n_returns_description: _\n_parameters: const ofPixels_< SrcType > &mom_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void crop(x, y, width, height)\n\n<!--\n_syntax: crop(x, y, width, height)_\n_name: crop_\n_returns: void_\n_returns_description: _\n_parameters: size_t x, size_t y, size_t width, size_t height_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCrop the pixels to a new width and height.\n\nAs a word of caution this reallocates memory and can be a bit\nexpensive if done a lot.\n\n\n\n\n\n_description: _\n\nThis crops the pixels to a new width and height. As a word of caution this reallocates memory and can be a bit expensive if done a lot.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void cropTo(&toPix, x, y, width, height)\n\n<!--\n_syntax: cropTo(&toPix, x, y, width, height)_\n_name: cropTo_\n_returns: void_\n_returns_description: _\n_parameters: ofPixels_< PixelType > &toPix, size_t x, size_t y, size_t width, size_t height_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCrop the pixels into the ofPixels reference passed in by `toPix.\nat the `x` and `y` and width the new width and height.\n\nAs a word of caution this reallocates memory and can be a bit\nexpensive if done a lot.\n\n\n\n\n\n_description: _\n\nThis crops the pixels into the ofPixels reference passed in by toPix. at the x and y and with the new width and height. As a word of caution this reallocates memory and can be a bit expensive if done a lot.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels_::iterator end()\n\n<!--\n_syntax: end()_\n_name: end_\n_returns: ofPixels_::iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels_::const_iterator end()\n\n<!--\n_syntax: end()_\n_name: end_\n_returns: ofPixels_::const_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t getBitsPerChannel()\n\n<!--\n_syntax: getBitsPerChannel()_\n_name: getBitsPerChannel_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet how large each channel of a pixels is.\n\nofPixels objects that store pixel data as `unsigned char` are smaller\nthan ofPixels objects that store pixel data as 'float`.\n\n\\note This returns bits, not bytes, so you should see ofPixels<float>\nreturn 32 and ofPixels<unsigned char> return 8.\n\n\n\n\n\n_description: _\n\nThis is how large each channel of a pixels is, ofPixels objects that store pixel data as unsigned char are smaller than  ofPixels objects that store pixel data as floats.\nThis returns bit, not bytes, so you'll probably see ofPixels<float> as 32 and ofPixels<unsigned char> as 8.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t getBitsPerPixel()\n\n<!--\n_syntax: getBitsPerPixel()_\n_name: getBitsPerPixel_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet number of bits per pixel\n\nIf you have RGB pixel data, this will return 24, if you have RGBA,\nyou'll have 32, if you have grayscale, this will return 8.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t getBytesPerChannel()\n\n<!--\n_syntax: getBytesPerChannel()_\n_name: getBytesPerChannel_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet how large each channel of a pixel is\n\nofPixels objects that store pixel data as unsigned char are smaller\nthan  ofPixels objects that store pixel data as floats.\n\n\\note This returns bytes, not bits, so you should see ofPixels<float>\nreturn 4 and ofPixels<unsigned char> return 1.\n\n\n\n\n\n_description: _\n\nThis is how large each channel of a pixels is, ofPixels objects that store pixel data as unsigned char are smaller than  ofPixels objects that store pixel data as floats.\nThis returns bytes, not bits, so you'll probably see ofPixels<float> as 4 and ofPixels<unsigned char> as 1.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t getBytesPerPixel()\n\n<!--\n_syntax: getBytesPerPixel()_\n_name: getBytesPerPixel_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the number of bytes per pixel\n\n\n\n\n\n_description: _\n\nReturns the number of the pixels.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t getBytesStride()\n\n<!--\n_syntax: getBytesStride()_\n_name: getBytesStride_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels_< PixelType > getChannel(channel)\n\n<!--\n_syntax: getChannel(channel)_\n_name: getChannel_\n_returns: ofPixels_< PixelType >_\n_returns_description: _\n_parameters: size_t channel_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet all values of one channel\n\nFor instance, the Red pixel values, from the\nofPixels object, this gives you a grayscale representation of the\nspecific channel\n\n~~~~{.cpp}\n    // Get red pixels\n\tofPixels rpix = pix.getChannel(0);\n    // Get green pixels\n\tofPixels gpix = pix.getChannel(1);\n    // Get blue pixels\n\tofPixels bpix = pix.getChannel(2);\n~~~~\n\n\n\n\n\n_description: _\n\nThis returns a single channel, for instance, the Red pixel values, from the ofPixels object, this gives you a grayscale representation of that one channel.\n~~~~{.cpp}\n\tofPixels rpix = pix.getChannel(0);\n\tofPixels gpix = pix.getChannel(1);\n\tofPixels bpix = pix.getChannel(2);\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > getColor(index)\n\n<!--\n_syntax: getColor(index)_\n_name: getColor_\n_returns: ofColor_< PixelType >_\n_returns_description: _\n_parameters: size_t index_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the color at a specific index\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > getColor(x, y)\n\n<!--\n_syntax: getColor(x, y)_\n_name: getColor_\n_returns: ofColor_< PixelType >_\n_returns_description: _\n_parameters: size_t x, size_t y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the color at a x,y position\n\n\n\n\n\n_description: _\n\nThis method returns the ofColor that the pixels contains at an x, y pair:\n~~~~{.cpp}\nofColor c = pix.getColor(mouseX, mouseY);\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels_::ConstLine getConstLine(line)\n\n<!--\n_syntax: getConstLine(line)_\n_name: getConstLine_\n_returns: ofPixels_::ConstLine_\n_returns_description: _\n_parameters: size_t line_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels_::ConstLines getConstLines()\n\n<!--\n_syntax: getConstLines()_\n_name: getConstLines_\n_returns: ofPixels_::ConstLines_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels_::ConstLines getConstLines(first, numLines)\n\n<!--\n_syntax: getConstLines(first, numLines)_\n_name: getConstLines_\n_returns: ofPixels_::ConstLines_\n_returns_description: _\n_parameters: size_t first, size_t numLines_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels_::ConstPixels getConstPixelsIter()\n\n<!--\n_syntax: getConstPixelsIter()_\n_name: getConstPixelsIter_\n_returns: ofPixels_::ConstPixels_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###PixelType * getData()\n\n<!--\n_syntax: getData()_\n_name: getData_\n_returns: PixelType *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRetrieves pixel data from the ofPixel object.\n\n\n**Returns**: A raw pointer to the pixel data.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const PixelType * getData()\n\n<!--\n_syntax: getData()_\n_name: getData_\n_returns: const PixelType *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t getHeight()\n\n<!--\n_syntax: getHeight()_\n_name: getHeight_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the height of the pixel array.\n\n\n\n\n\n_description: _\n\nReturns the height of the pixels.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofImageType getImageType()\n\n<!--\n_syntax: getImageType()_\n_name: getImageType_\n_returns: ofImageType_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the type of the image\n\n**Returns**: One of the following types: `OF_IMAGE_GRAYSCALE`,\n`OF_IMAGE_COLOR`, `OF_IMAGE_COLOR_ALPHA`\n\n\n\n\n\n_description: _\n\nReturns what image type the ofPixels object is.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels_::Line getLine(line)\n\n<!--\n_syntax: getLine(line)_\n_name: getLine_\n_returns: ofPixels_::Line_\n_returns_description: _\n_parameters: size_t line_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels_::Lines getLines()\n\n<!--\n_syntax: getLines()_\n_name: getLines_\n_returns: ofPixels_::Lines_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels_::Lines getLines(first, numLines)\n\n<!--\n_syntax: getLines(first, numLines)_\n_name: getLines_\n_returns: ofPixels_::Lines_\n_returns_description: _\n_parameters: size_t first, size_t numLines_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t getNumChannels()\n\n<!--\n_syntax: getNumChannels()_\n_name: getNumChannels_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the number of channels that the ofPixels object contains.\nRGB is 3 channels, RGBA is 4, and grayscale is 1.\n\n\n\n\n\n_description: _\n\nThis returns the number of channels that the ofPixels object contains. RGB is 3 channels, RGBA is 4, and grayscale is 1.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t getNumPlanes()\n\n<!--\n_syntax: getNumPlanes()_\n_name: getNumPlanes_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixelFormat getPixelFormat()\n\n<!--\n_syntax: getPixelFormat()_\n_name: getPixelFormat_\n_returns: ofPixelFormat_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t getPixelIndex(x, y)\n\n<!--\n_syntax: getPixelIndex(x, y)_\n_name: getPixelIndex_\n_returns: size_t_\n_returns_description: _\n_parameters: size_t x, size_t y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the pixel index at a x,y position\n\n~~~~{.cpp}\nofColor yellow = ofColor::yellow;\nsize_t ind = pix.getPixelIndex(mouseX, mouseY);\npix.setPixel(ind, yellow);\n~~~~\n\n\n\n\n\n_description: _\n\nThis method gives you the index of the pixel at x,y. For instance:\n~~~~{.cpp}\nofColor yellow = ofColor::yellow;\nint ind = pix.getPixelIndex(mouseX, mouseY);\npix.setColor(ind, yellow);\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels_::Pixels getPixelsIter()\n\n<!--\n_syntax: getPixelsIter()_\n_name: getPixelsIter_\n_returns: ofPixels_::Pixels_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels_< PixelType > getPlane(plane)\n\n<!--\n_syntax: getPlane(plane)_\n_name: getPlane_\n_returns: ofPixels_< PixelType >_\n_returns_description: _\n_parameters: size_t plane_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t getTotalBytes()\n\n<!--\n_syntax: getTotalBytes()_\n_name: getTotalBytes_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t getWidth()\n\n<!--\n_syntax: getWidth()_\n_name: getWidth_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the width of the pixel array.\n\n\n\n\n\n_description: _\n\nReturns the width of the pixels.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isAllocated()\n\n<!--\n_syntax: isAllocated()_\n_name: isAllocated_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet whether memory has been allocated for an ofPixels object or not\n\nMany operations like copying pixels, etc, automatically allocate\nthe memory needed, but it's sometimes good to check.\n\n\n\n\n\n_description: _\n\nReturns whether memory has been allocated for an ofPixels object or not. Many operations like copying pixels, etc, automatically allocate the memory needed, but it's sometimes good to check.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void mirror(vertically, horizontal)\n\n<!--\n_syntax: mirror(vertically, horizontal)_\n_name: mirror_\n_returns: void_\n_returns_description: _\n_parameters: bool vertically, bool horizontal_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMirror the pixels across the vertical and/or horizontal axis.\n\n**Parameters:**\n\nvertically Set to true to mirror vertically\n\nhorizontal Set to true to mirror horizontal\n\n\n\n\n\n_description: _\n\nThis reflects the pixels across the vertical and/or horizontal axis.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void mirrorTo(&dst, vertically, horizontal)\n\n<!--\n_syntax: mirrorTo(&dst, vertically, horizontal)_\n_name: mirrorTo_\n_returns: void_\n_returns_description: _\n_parameters: ofPixels_< PixelType > &dst, bool vertically, bool horizontal_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofPixels_(&&mom)\n\n<!--\n_syntax: ofPixels_(&&mom)_\n_name: ofPixels__\n_returns: _\n_returns_description: _\n_parameters: ofPixels_< PixelType > &&mom_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofPixels_(&mom)\n\n<!--\n_syntax: ofPixels_(&mom)_\n_name: ofPixels__\n_returns: _\n_returns_description: _\n_parameters: const ofPixels_< PixelType > &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofPixels_(&mom)\n\n<!--\n_syntax: ofPixels_(&mom)_\n_name: ofPixels__\n_returns: _\n_returns_description: _\n_parameters: const ofPixels_< SrcType > &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofPixels_()\n\n<!--\n_syntax: ofPixels_()_\n_name: ofPixels__\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Construction And Allocation\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels_< PixelType > & operator=(&&mom)\n\n<!--\n_syntax: operator=(&&mom)_\n_name: operator=_\n_returns: ofPixels_< PixelType > &_\n_returns_description: _\n_parameters: ofPixels_< PixelType > &&mom_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels_< PixelType > & operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: ofPixels_< PixelType > &_\n_returns_description: _\n_parameters: const ofPixels_< PixelType > &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels_< PixelType > & operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: ofPixels_< PixelType > &_\n_returns_description: _\n_parameters: const ofPixels_< SrcType > &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const PixelType & operator[](pos)\n\n<!--\n_syntax: operator[](pos)_\n_name: operator[]_\n_returns: const PixelType &_\n_returns_description: _\n_parameters: size_t pos_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nProvides access to each channel of each pixel. If you have RGB pixel\ndata, then you'll have 3 values for each pixel, if you have RGBA,\nyou'll have 4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###PixelType & operator[](pos)\n\n<!--\n_syntax: operator[](pos)_\n_name: operator[]_\n_returns: PixelType &_\n_returns_description: _\n_parameters: size_t pos_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nProvides access to each channel of each pixel. If you have RGB pixel data, then you'll have 3 values for each pixel, if you have RGBA, you'll have 4.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool pasteInto(&dst, x, y)\n\n<!--\n_syntax: pasteInto(&dst, x, y)_\n_name: pasteInto_\n_returns: bool_\n_returns_description: _\n_parameters: ofPixels_< PixelType > &dst, size_t x, size_t y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nPaste the ofPixels object into another ofPixels object at the\nspecified index, copying data from the ofPixels that the method is\nbeing called on to the ofPixels object at `&dst`. If the data being\ncopied doesn't fit into the destination then the image is cropped.\n\n\n\n\n\n_description: _\n\nThis pastes the ofPixels object into another ofPixels object at the specified index, copying data from the ofPixels that the method is being called on to the ofPixels object at &dst. If the data being copied doesn't fit into the dst then the image is cropped.\n~~~~{.cpp}\nofLoadImage(footballPixels, \"two.jpg\");\nofLoadImage(fujiPixels, \"one.jpg\");\nfujiTex.loadData(footballPixels);\nfootballTex.loadData(fujiPixels);\nfootballPixels.pasteInto(fujiPixels, 150, 100); // now fujiPixels is altered\nmixtureTex.loadData(fujiPixels);\n~~~~\nDrawing the three textures here you can see the ball cropped into the mountain:\n![crop_demo](ofPixels_crop.png)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t pixelBitsFromPixelFormat(format)\n\n<!--\n_syntax: pixelBitsFromPixelFormat(format)_\n_name: pixelBitsFromPixelFormat_\n_returns: size_t_\n_returns_description: _\n_parameters: ofPixelFormat format_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels_::reverse_iterator rbegin()\n\n<!--\n_syntax: rbegin()_\n_name: rbegin_\n_returns: ofPixels_::reverse_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels_::const_reverse_iterator rbegin()\n\n<!--\n_syntax: rbegin()_\n_name: rbegin_\n_returns: ofPixels_::const_reverse_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels_::reverse_iterator rend()\n\n<!--\n_syntax: rend()_\n_name: rend_\n_returns: ofPixels_::reverse_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels_::const_reverse_iterator rend()\n\n<!--\n_syntax: rend()_\n_name: rend_\n_returns: ofPixels_::const_reverse_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool resize(dstWidth, dstHeight, interpMethod = OF_INTERPOLATE_NEAREST_NEIGHBOR)\n\n<!--\n_syntax: resize(dstWidth, dstHeight, interpMethod = OF_INTERPOLATE_NEAREST_NEIGHBOR)_\n_name: resize_\n_returns: bool_\n_returns_description: _\n_parameters: size_t dstWidth, size_t dstHeight, ofInterpolationMethod interpMethod=OF_INTERPOLATE_NEAREST_NEIGHBOR_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nResize the ofPixels instance to the dstHeight and dstWidth.\n\nThe options for the interpolation methods are as follows:\n\n    OF_INTERPOLATE_NEAREST_NEIGHBOR\n    OF_INTERPOLATE_BILINEAR\n    OF_INTERPOLATE_BICUBIC\n\n\n\n\n\n_description: _\n\nThis resizes the ofPixels instance to the dstHeight and dstWidth. The options for the interpolation methods are as follows:\nOF_INTERPOLATE_NEAREST_NEIGHBOR =1\nOF_INTERPOLATE_BILINEAR\t\t\t=2\nOF_INTERPOLATE_BICUBIC\t\t\t=3\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool resizeTo(&dst, interpMethod = OF_INTERPOLATE_NEAREST_NEIGHBOR)\n\n<!--\n_syntax: resizeTo(&dst, interpMethod = OF_INTERPOLATE_NEAREST_NEIGHBOR)_\n_name: resizeTo_\n_returns: bool_\n_returns_description: _\n_parameters: ofPixels_< PixelType > &dst, ofInterpolationMethod interpMethod=OF_INTERPOLATE_NEAREST_NEIGHBOR_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nResize the ofPixels instance to the size of the ofPixels object passed in dst.\n\nThe options for the interpolation methods are as follows:\n\n    OF_INTERPOLATE_NEAREST_NEIGHBOR\n    OF_INTERPOLATE_BILINEAR\n    OF_INTERPOLATE_BICUBIC\n\n\n\n\n\n_description: _\n\nThis resizes the ofPixels instance to the size of the ofPixels object passed in dst. The options for the interpolation methods are as follows:\nOF_INTERPOLATE_NEAREST_NEIGHBOR =1\nOF_INTERPOLATE_BILINEAR\t\t\t=2\nOF_INTERPOLATE_BICUBIC\t\t\t=3\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotate90(nClockwiseRotations)\n\n<!--\n_syntax: rotate90(nClockwiseRotations)_\n_name: rotate90_\n_returns: void_\n_returns_description: _\n_parameters: int nClockwiseRotations_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\ncrop to a new width and height, this reallocates memory.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotate90To(&dst, nClockwiseRotations)\n\n<!--\n_syntax: rotate90To(&dst, nClockwiseRotations)_\n_name: rotate90To_\n_returns: void_\n_returns_description: _\n_parameters: ofPixels_< PixelType > &dst, int nClockwiseRotations_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(channel, val)\n\n<!--\n_syntax: set(channel, val)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: size_t channel, PixelType val_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(val)\n\n<!--\n_syntax: set(val)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: PixelType val_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\}\n\\name Set Pixel Data\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setChannel(channel, channelPixels)\n\n<!--\n_syntax: setChannel(channel, channelPixels)_\n_name: setChannel_\n_returns: void_\n_returns_description: _\n_parameters: size_t channel, const ofPixels_< PixelType > channelPixels_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet all the pixel data for a single channel, for instance, the\nRed pixel values, from an ofPixels object assumed to be a grayscale\nrepresentation of the data that should go into that one channel.\n\n\n\n\n\n_description: _\n\nThis sets all the pixel data for a single channel, for instance, the Red pixel values, from an ofPixels object assumed to be a grayscale representation of the data that should go into that one channel.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setColor(&color)\n\n<!--\n_syntax: setColor(&color)_\n_name: setColor_\n_returns: void_\n_returns_description: _\n_parameters: const ofColor_< PixelType > &color_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the color of all pixels\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setColor(index, &color)\n\n<!--\n_syntax: setColor(index, &color)_\n_name: setColor_\n_returns: void_\n_returns_description: _\n_parameters: size_t index, const ofColor_< PixelType > &color_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the color of the pixel at a specific index\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setColor(x, y, &color)\n\n<!--\n_syntax: setColor(x, y, &color)_\n_name: setColor_\n_returns: void_\n_returns_description: _\n_parameters: size_t x, size_t y, const ofColor_< PixelType > &color_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the color of the pixel at the x,y location\n\n\n\n\n\n_description: _\n\nSets the color of the pixel at the x,y location.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFromAlignedPixels(*newPixels, width, height, channels, stride)\n\n<!--\n_syntax: setFromAlignedPixels(*newPixels, width, height, channels, stride)_\n_name: setFromAlignedPixels_\n_returns: void_\n_returns_description: _\n_parameters: const PixelType *newPixels, size_t width, size_t height, size_t channels, size_t stride_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFromAlignedPixels(*newPixels, width, height, pixelFormat, stride)\n\n<!--\n_syntax: setFromAlignedPixels(*newPixels, width, height, pixelFormat, stride)_\n_name: setFromAlignedPixels_\n_returns: void_\n_returns_description: _\n_parameters: const PixelType *newPixels, size_t width, size_t height, ofPixelFormat pixelFormat, size_t stride_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFromAlignedPixels(*newPixels, width, height, pixelFormat, strides)\n\n<!--\n_syntax: setFromAlignedPixels(*newPixels, width, height, pixelFormat, strides)_\n_name: setFromAlignedPixels_\n_returns: void_\n_returns_description: _\n_parameters: const PixelType *newPixels, size_t width, size_t height, ofPixelFormat pixelFormat, int strides_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nused to copy i420 pixels from gstreamer when (width % 4) != 0\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFromExternalPixels(*newPixels, w, h, channels)\n\n<!--\n_syntax: setFromExternalPixels(*newPixels, w, h, channels)_\n_name: setFromExternalPixels_\n_returns: void_\n_returns_description: _\n_parameters: PixelType *newPixels, size_t w, size_t h, size_t channels_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFromExternalPixels(*newPixels, w, h, pixelFormat)\n\n<!--\n_syntax: setFromExternalPixels(*newPixels, w, h, pixelFormat)_\n_name: setFromExternalPixels_\n_returns: void_\n_returns_description: _\n_parameters: PixelType *newPixels, size_t w, size_t h, ofPixelFormat pixelFormat_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFromPixels(*newPixels, w, h, channels)\n\n<!--\n_syntax: setFromPixels(*newPixels, w, h, channels)_\n_name: setFromPixels_\n_returns: void_\n_returns_description: _\n_parameters: const PixelType *newPixels, size_t w, size_t h, size_t channels_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFromPixels(*newPixels, w, h, pixelFormat)\n\n<!--\n_syntax: setFromPixels(*newPixels, w, h, pixelFormat)_\n_name: setFromPixels_\n_returns: void_\n_returns_description: _\n_parameters: const PixelType *newPixels, size_t w, size_t h, ofPixelFormat pixelFormat_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFromPixels(*newPixels, w, h, type)\n\n<!--\n_syntax: setFromPixels(*newPixels, w, h, type)_\n_name: setFromPixels_\n_returns: void_\n_returns_description: _\n_parameters: const PixelType *newPixels, size_t w, size_t h, ofImageType type_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setImageType(imageType)\n\n<!--\n_syntax: setImageType(imageType)_\n_name: setImageType_\n_returns: void_\n_returns_description: _\n_parameters: ofImageType imageType_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nChanges the image type for the ofPixels object\n\n\n**Parameters:**\n\nimageType Can be one of the following: OF_IMAGE_GRAYSCALE, OF_IMAGE_COLOR, OF_IMAGE_COLOR_ALPHA\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setNumChannels(numChannels)\n\n<!--\n_syntax: setNumChannels(numChannels)_\n_name: setNumChannels_\n_returns: void_\n_returns_description: _\n_parameters: size_t numChannels_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t size()\n\n<!--\n_syntax: size()_\n_name: size_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the number of values that the ofPixels object\ncontains, so an RGB data 400x400 would be 480,000, whereas RGBA data\nof the same dimensions would be 640,000.\n\n\n\n\n\n_description: _\n\nThis gives you the number of values that the ofPixels object contains, so an RGB data 400x400 would be 480,000, whereas RGBA data of the same dimensions would be 640,000.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void swap(&pix)\n\n<!--\n_syntax: swap(&pix)_\n_name: swap_\n_returns: void_\n_returns_description: _\n_parameters: ofPixels_< PixelType > &pix_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void swapRgb()\n\n<!--\n_syntax: swapRgb()_\n_name: swapRgb_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSwaps the R and B channels of an\nimage, leaving the G and A channels as is.\n\n\n\n\n\n_description: _\n\nAs implemented right now, this method swaps the R and B channels of an image, leaving the G and A channels as is.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofPixels_()\n\n<!--\n_syntax: ~ofPixels_()_\n_name: ~ofPixels__\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###bool bAllocated\n\n<!--\n_name: bAllocated_\n_type: bool_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int height\n\n<!--\n_name: height_\n_type: int_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixelFormat pixelFormat\n\n<!--\n_name: pixelFormat_\n_type: ofPixelFormat_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###PixelType * pixels\n\n<!--\n_name: pixels_\n_type: PixelType *_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool pixelsOwner\n\n<!--\n_name: pixelsOwner_\n_type: bool_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int pixelsSize\n\n<!--\n_name: pixelsSize_\n_type: int_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int width\n\n<!--\n_name: width_\n_type: int_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}