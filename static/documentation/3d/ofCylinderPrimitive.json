{"entry":{"name":"ofCylinderPrimitive","filename":"ofCylinderPrimitive.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/3d/ofCylinderPrimitive.markdown","path":"/documentation/3d/ofCylinderPrimitive","route":"/documentation/3d/ofCylinderPrimitive.markdown","dir":"../ofSite/documentation/3d","ext":"markdown","type":"page","id":16,"parent":0,"breadcrumbs":[0,1],"siblings":[],"translations":{}},"description":{"short":null,"full":"<p>The ofCylinderPrimitive allows you to create an cylinder mesh.</p>\n<p>Like all primitives it allows you to set the size, for the cylinder a radius and height, draw it, set positions, etc, as a simple example:</p>\n<pre><code>\n<span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n\tcylinder<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> cylinderRadius<span class=\"token punctuation\">,</span> cylinderHeight <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n\tcylinder<span class=\"token punctuation\">.</span><span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcylinder<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>spinX<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcylinder<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>spinY<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// get all the faces from the icoSphere, handy when you want to copy</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// individual vertices or tweak them a little ;)</span>\n\tvector<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>ofMeshFace</code></pre>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":"of3dPrimitive"},"methods":[{"syntax":"getBottomCapIndices()","name":"getBottomCapIndices","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getBottomCapMesh()","name":"getBottomCapMesh","returns":"ofMesh","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getCapped()","name":"getCapped","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getCylinderIndices()","name":"getCylinderIndices","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getCylinderMesh()","name":"getCylinderMesh","returns":"ofMesh","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getHeight()","name":"getHeight","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getRadius()","name":"getRadius","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getResolution()","name":"getResolution","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getResolutionCap()","name":"getResolutionCap","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getResolutionHeight()","name":"getResolutionHeight","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getResolutionRadius()","name":"getResolutionRadius","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getTopCapIndices()","name":"getTopCapIndices","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getTopCapMesh()","name":"getTopCapMesh","returns":"ofMesh","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofCylinderPrimitive()","name":"ofCylinderPrimitive","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofCylinderPrimitive(radius, height, radiusSegments, heightSegments, capSegments = 2, bCapped = true, mode = OF_PRIMITIVE_TRIANGLE_STRIP)","name":"ofCylinderPrimitive","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> radiusSegments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightSegments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> capSegments<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bCapped<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> ofPrimitiveMode mode<span class=\"token operator\">=</span>OF_PRIMITIVE_TRIANGLE_STRIP","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"set(radius, height, bCapped = true)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bCapped<span class=\"token operator\">=</span><span class=\"token boolean\">true</span>","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"set(radius, height, radiusSegments, heightSegments, capSegments = 2, bCapped = true, mode = OF_PRIMITIVE_TRIANGLE_STRIP)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> radiusSegments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightSegments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> capSegments<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bCapped<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> ofPrimitiveMode mode<span class=\"token operator\">=</span>OF_PRIMITIVE_TRIANGLE_STRIP","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setBottomCapColor(color)","name":"setBottomCapColor","returns":"void","returns_description":null,"parameters":"ofColor color","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setCapped(bCapped)","name":"setCapped","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> bCapped","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setCylinderColor(color)","name":"setCylinderColor","returns":"void","returns_description":null,"parameters":"ofColor color","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setHeight(height)","name":"setHeight","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> height","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setMode(mode)","name":"setMode","returns":"void","returns_description":null,"parameters":"ofPrimitiveMode mode","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setRadius(radius)","name":"setRadius","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radius","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setResolution(radiusSegments, heightSegments, capSegments = 2)","name":"setResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> radiusSegments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightSegments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> capSegments<span class=\"token operator\">=</span><span class=\"token number\">2</span>","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setResolutionCap(capRes)","name":"setResolutionCap","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> capRes","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setResolutionHeight(heightRes)","name":"setResolutionHeight","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> heightRes","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setResolutionRadius(radiusRes)","name":"setResolutionRadius","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> radiusRes","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setTopCapColor(color)","name":"setTopCapColor","returns":"void","returns_description":null,"parameters":"ofColor color","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"~ofCylinderPrimitive()","name":"~ofCylinderPrimitive","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"name":"bCapped","type":"bool","access":"protected","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"height","type":"float","access":"protected","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"radius","type":"float","access":"protected","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"resolution","type":"ofVec3f","access":"protected","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"strides","type":"int","access":"protected","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"vertices","type":"int","access":"protected","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofCylinderPrimitive</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n<em>extends: of3dPrimitive</em>\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>The ofCylinderPrimitive allows you to create an cylinder mesh.</p>\n<p>Like all primitives it allows you to set the size, for the cylinder\na radius and height, draw it, set positions, etc, as a simple example:</p>\n<pre><code>\n<span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n    cylinder<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> cylinderRadius<span class=\"token punctuation\">,</span> cylinderHeight <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n    cylinder<span class=\"token punctuation\">.</span><span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cylinder<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>spinX<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cylinder<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>spinY<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// get all the faces from the icoSphere, handy when you want to copy</span>\n    <span class=\"token comment\" spellcheck=\"true\">// individual vertices or tweak them a little ;)</span>\n    vector<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>ofMeshFace<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> triangles <span class=\"token operator\">=</span> cylinder<span class=\"token punctuation\">.</span><span class=\"token function\">getMesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUniqueFaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// now draw</span>\n    cylinder<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>To draw a texture over any primitive, simply bind the ofTexture instance\nand then draw your primitive:</p>\n<pre><code>\ntexture<span class=\"token punctuation\">.</span><span class=\"token function\">getTextureReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// now draw</span>\ncylinder<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>##Description</p>\n<p>The ofCylinderPrimitive allows you to create an cylinder mesh.</p>\n<p>Like all primitives it allows you to set the size, for the cylinder a radius and height, draw it, set positions, etc, as a simple example:</p>\n<pre><code>\n<span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n\tcylinder<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> cylinderRadius<span class=\"token punctuation\">,</span> cylinderHeight <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n\tcylinder<span class=\"token punctuation\">.</span><span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcylinder<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>spinX<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcylinder<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>spinY<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// get all the faces from the icoSphere, handy when you want to copy</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// individual vertices or tweak them a little ;)</span>\n\tvector<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>ofMeshFace<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> triangles <span class=\"token operator\">=</span> cylinder<span class=\"token punctuation\">.</span><span class=\"token function\">getMesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUniqueFaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// now draw</span>\n\tcylinder<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>To draw a texture over any primitive, simply bind the ofTexture instance and then draw your primitive:</p>\n<pre><code>\ntexture<span class=\"token punctuation\">.</span><span class=\"token function\">getTextureReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// now draw</span>\ncylinder<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>##Methods</p>\n<p>###int getBottomCapIndices()</p>\n<p>&lt;!--\n<em>syntax: getBottomCapIndices()</em>\n<em>name: getBottomCapIndices</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofMesh getBottomCapMesh()</p>\n<p>&lt;!--\n<em>syntax: getBottomCapMesh()</em>\n<em>name: getBottomCapMesh</em>\n<em>returns: ofMesh</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool getCapped()</p>\n<p>&lt;!--\n<em>syntax: getCapped()</em>\n<em>name: getCapped</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getCylinderIndices()</p>\n<p>&lt;!--\n<em>syntax: getCylinderIndices()</em>\n<em>name: getCylinderIndices</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofMesh getCylinderMesh()</p>\n<p>&lt;!--\n<em>syntax: getCylinderMesh()</em>\n<em>name: getCylinderMesh</em>\n<em>returns: ofMesh</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getHeight()</p>\n<p>&lt;!--\n<em>syntax: getHeight()</em>\n<em>name: getHeight</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getRadius()</p>\n<p>&lt;!--\n<em>syntax: getRadius()</em>\n<em>name: getRadius</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getResolution()</p>\n<p>&lt;!--\n<em>syntax: getResolution()</em>\n<em>name: getResolution</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getResolutionCap()</p>\n<p>&lt;!--\n<em>syntax: getResolutionCap()</em>\n<em>name: getResolutionCap</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getResolutionHeight()</p>\n<p>&lt;!--\n<em>syntax: getResolutionHeight()</em>\n<em>name: getResolutionHeight</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getResolutionRadius()</p>\n<p>&lt;!--\n<em>syntax: getResolutionRadius()</em>\n<em>name: getResolutionRadius</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getTopCapIndices()</p>\n<p>&lt;!--\n<em>syntax: getTopCapIndices()</em>\n<em>name: getTopCapIndices</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofMesh getTopCapMesh()</p>\n<p>&lt;!--\n<em>syntax: getTopCapMesh()</em>\n<em>name: getTopCapMesh</em>\n<em>returns: ofMesh</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofCylinderPrimitive()</h3>\n<p>&lt;!--\n<em>syntax: ofCylinderPrimitive()</em>\n<em>name: ofCylinderPrimitive</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofCylinderPrimitive(radius, height, radiusSegments, heightSegments, capSegments = 2, bCapped = true, mode = OF_PRIMITIVE_TRIANGLE_STRIP)</h3>\n<p>&lt;!--\n<em>syntax: ofCylinderPrimitive(radius, height, radiusSegments, heightSegments, capSegments = 2, bCapped = true, mode = OF_PRIMITIVE_TRIANGLE_STRIP)</em>\n<em>name: ofCylinderPrimitive</em>\n_returns: _\n_returns_description: _\n<em>parameters: float radius, float height, int radiusSegments, int heightSegments, int capSegments=2, bool bCapped=true, ofPrimitiveMode mode=OF_PRIMITIVE_TRIANGLE_STRIP</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(radius, height, bCapped = true)</p>\n<p>&lt;!--\n<em>syntax: set(radius, height, bCapped = true)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float radius, float height, bool bCapped=true</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(radius, height, radiusSegments, heightSegments, capSegments = 2, bCapped = true, mode = OF_PRIMITIVE_TRIANGLE_STRIP)</p>\n<p>&lt;!--\n<em>syntax: set(radius, height, radiusSegments, heightSegments, capSegments = 2, bCapped = true, mode = OF_PRIMITIVE_TRIANGLE_STRIP)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float radius, float height, int radiusSegments, int heightSegments, int capSegments=2, bool bCapped=true, ofPrimitiveMode mode=OF_PRIMITIVE_TRIANGLE_STRIP</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setBottomCapColor(color)</p>\n<p>&lt;!--\n<em>syntax: setBottomCapColor(color)</em>\n<em>name: setBottomCapColor</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofColor color</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setCapped(bCapped)</p>\n<p>&lt;!--\n<em>syntax: setCapped(bCapped)</em>\n<em>name: setCapped</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool bCapped</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setCylinderColor(color)</p>\n<p>&lt;!--\n<em>syntax: setCylinderColor(color)</em>\n<em>name: setCylinderColor</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofColor color</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setHeight(height)</p>\n<p>&lt;!--\n<em>syntax: setHeight(height)</em>\n<em>name: setHeight</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float height</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setMode(mode)</p>\n<p>&lt;!--\n<em>syntax: setMode(mode)</em>\n<em>name: setMode</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofPrimitiveMode mode</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setRadius(radius)</p>\n<p>&lt;!--\n<em>syntax: setRadius(radius)</em>\n<em>name: setRadius</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float radius</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setResolution(radiusSegments, heightSegments, capSegments = 2)</p>\n<p>&lt;!--\n<em>syntax: setResolution(radiusSegments, heightSegments, capSegments = 2)</em>\n<em>name: setResolution</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int radiusSegments, int heightSegments, int capSegments=2</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setResolutionCap(capRes)</p>\n<p>&lt;!--\n<em>syntax: setResolutionCap(capRes)</em>\n<em>name: setResolutionCap</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int capRes</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setResolutionHeight(heightRes)</p>\n<p>&lt;!--\n<em>syntax: setResolutionHeight(heightRes)</em>\n<em>name: setResolutionHeight</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int heightRes</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setResolutionRadius(radiusRes)</p>\n<p>&lt;!--\n<em>syntax: setResolutionRadius(radiusRes)</em>\n<em>name: setResolutionRadius</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int radiusRes</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setTopCapColor(color)</p>\n<p>&lt;!--\n<em>syntax: setTopCapColor(color)</em>\n<em>name: setTopCapColor</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofColor color</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>~ofCylinderPrimitive()</h3>\n<p>&lt;!--\n<em>syntax: ~ofCylinderPrimitive()</em>\n<em>name: ~ofCylinderPrimitive</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###bool bCapped</p>\n<p>&lt;!--\n<em>name: bCapped</em>\n<em>type: bool</em>\n<em>access: protected</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float height</p>\n<p>&lt;!--\n<em>name: height</em>\n<em>type: float</em>\n<em>access: protected</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float radius</p>\n<p>&lt;!--\n<em>name: radius</em>\n<em>type: float</em>\n<em>access: protected</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f resolution</p>\n<p>&lt;!--\n<em>name: resolution</em>\n<em>type: ofVec3f</em>\n<em>access: protected</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int strides</p>\n<p>&lt;!--\n<em>name: strides</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int vertices</p>\n<p>&lt;!--\n<em>name: vertices</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofCylinderPrimitive\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: of3dPrimitive_\n-->\n\n##InlineDescription\n\nThe ofCylinderPrimitive allows you to create an cylinder mesh.\n\nLike all primitives it allows you to set the size, for the cylinder\na radius and height, draw it, set positions, etc, as a simple example:\n\n~~~~{.cpp}\n\nvoid setup()\n{\n\n    cylinder.set( cylinderRadius, cylinderHeight );\n}\n\nvoid draw()\n{\n\n    cylinder.setPosition(ofGetWidth()*.2, ofGetHeight()*.75, 0);\n    cylinder.rotate(spinX, 1.0, 0.0, 0.0);\n    cylinder.rotate(spinY, 0, 1.0, 0.0);\n\n    // get all the faces from the icoSphere, handy when you want to copy\n    // individual vertices or tweak them a little ;)\n    vector<ofMeshFace> triangles = cylinder.getMesh().getUniqueFaces();\n\n    // now draw\n    cylinder.draw();\n}\n~~~~\n\nTo draw a texture over any primitive, simply bind the ofTexture instance\nand then draw your primitive:\n\n~~~~{.cpp}\n\ntexture.getTextureReference().bind();\n// now draw\ncylinder.draw();\n\n~~~~\n\n\n\n\n\n##Description\n\nThe ofCylinderPrimitive allows you to create an cylinder mesh.\n\nLike all primitives it allows you to set the size, for the cylinder a radius and height, draw it, set positions, etc, as a simple example:\n\n~~~~{.cpp}\n\nvoid setup()\n{\n\n\tcylinder.set( cylinderRadius, cylinderHeight );\n}\n\nvoid draw()\n{\n\n\tcylinder.setPosition(ofGetWidth()*.2, ofGetHeight()*.75, 0);\n\tcylinder.rotate(spinX, 1.0, 0.0, 0.0);\n\tcylinder.rotate(spinY, 0, 1.0, 0.0);\n\n\t// get all the faces from the icoSphere, handy when you want to copy\n\t// individual vertices or tweak them a little ;)\n\tvector<ofMeshFace> triangles = cylinder.getMesh().getUniqueFaces();\n\n\t// now draw\n\tcylinder.draw();\n}\n~~~~\n\nTo draw a texture over any primitive, simply bind the ofTexture instance and then draw your primitive:\n\n~~~~{.cpp}\n\ntexture.getTextureReference().bind();\n// now draw\ncylinder.draw();\n\n~~~~\n\n\n\n\n\n##Methods\n\n\n\n###int getBottomCapIndices()\n\n<!--\n_syntax: getBottomCapIndices()_\n_name: getBottomCapIndices_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMesh getBottomCapMesh()\n\n<!--\n_syntax: getBottomCapMesh()_\n_name: getBottomCapMesh_\n_returns: ofMesh_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool getCapped()\n\n<!--\n_syntax: getCapped()_\n_name: getCapped_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getCylinderIndices()\n\n<!--\n_syntax: getCylinderIndices()_\n_name: getCylinderIndices_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMesh getCylinderMesh()\n\n<!--\n_syntax: getCylinderMesh()_\n_name: getCylinderMesh_\n_returns: ofMesh_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getHeight()\n\n<!--\n_syntax: getHeight()_\n_name: getHeight_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getRadius()\n\n<!--\n_syntax: getRadius()_\n_name: getRadius_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getResolution()\n\n<!--\n_syntax: getResolution()_\n_name: getResolution_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getResolutionCap()\n\n<!--\n_syntax: getResolutionCap()_\n_name: getResolutionCap_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getResolutionHeight()\n\n<!--\n_syntax: getResolutionHeight()_\n_name: getResolutionHeight_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getResolutionRadius()\n\n<!--\n_syntax: getResolutionRadius()_\n_name: getResolutionRadius_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getTopCapIndices()\n\n<!--\n_syntax: getTopCapIndices()_\n_name: getTopCapIndices_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMesh getTopCapMesh()\n\n<!--\n_syntax: getTopCapMesh()_\n_name: getTopCapMesh_\n_returns: ofMesh_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofCylinderPrimitive()\n\n<!--\n_syntax: ofCylinderPrimitive()_\n_name: ofCylinderPrimitive_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofCylinderPrimitive(radius, height, radiusSegments, heightSegments, capSegments = 2, bCapped = true, mode = OF_PRIMITIVE_TRIANGLE_STRIP)\n\n<!--\n_syntax: ofCylinderPrimitive(radius, height, radiusSegments, heightSegments, capSegments = 2, bCapped = true, mode = OF_PRIMITIVE_TRIANGLE_STRIP)_\n_name: ofCylinderPrimitive_\n_returns: _\n_returns_description: _\n_parameters: float radius, float height, int radiusSegments, int heightSegments, int capSegments=2, bool bCapped=true, ofPrimitiveMode mode=OF_PRIMITIVE_TRIANGLE_STRIP_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(radius, height, bCapped = true)\n\n<!--\n_syntax: set(radius, height, bCapped = true)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float radius, float height, bool bCapped=true_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(radius, height, radiusSegments, heightSegments, capSegments = 2, bCapped = true, mode = OF_PRIMITIVE_TRIANGLE_STRIP)\n\n<!--\n_syntax: set(radius, height, radiusSegments, heightSegments, capSegments = 2, bCapped = true, mode = OF_PRIMITIVE_TRIANGLE_STRIP)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float radius, float height, int radiusSegments, int heightSegments, int capSegments=2, bool bCapped=true, ofPrimitiveMode mode=OF_PRIMITIVE_TRIANGLE_STRIP_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setBottomCapColor(color)\n\n<!--\n_syntax: setBottomCapColor(color)_\n_name: setBottomCapColor_\n_returns: void_\n_returns_description: _\n_parameters: ofColor color_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setCapped(bCapped)\n\n<!--\n_syntax: setCapped(bCapped)_\n_name: setCapped_\n_returns: void_\n_returns_description: _\n_parameters: bool bCapped_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setCylinderColor(color)\n\n<!--\n_syntax: setCylinderColor(color)_\n_name: setCylinderColor_\n_returns: void_\n_returns_description: _\n_parameters: ofColor color_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setHeight(height)\n\n<!--\n_syntax: setHeight(height)_\n_name: setHeight_\n_returns: void_\n_returns_description: _\n_parameters: float height_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setMode(mode)\n\n<!--\n_syntax: setMode(mode)_\n_name: setMode_\n_returns: void_\n_returns_description: _\n_parameters: ofPrimitiveMode mode_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setRadius(radius)\n\n<!--\n_syntax: setRadius(radius)_\n_name: setRadius_\n_returns: void_\n_returns_description: _\n_parameters: float radius_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setResolution(radiusSegments, heightSegments, capSegments = 2)\n\n<!--\n_syntax: setResolution(radiusSegments, heightSegments, capSegments = 2)_\n_name: setResolution_\n_returns: void_\n_returns_description: _\n_parameters: int radiusSegments, int heightSegments, int capSegments=2_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setResolutionCap(capRes)\n\n<!--\n_syntax: setResolutionCap(capRes)_\n_name: setResolutionCap_\n_returns: void_\n_returns_description: _\n_parameters: int capRes_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setResolutionHeight(heightRes)\n\n<!--\n_syntax: setResolutionHeight(heightRes)_\n_name: setResolutionHeight_\n_returns: void_\n_returns_description: _\n_parameters: int heightRes_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setResolutionRadius(radiusRes)\n\n<!--\n_syntax: setResolutionRadius(radiusRes)_\n_name: setResolutionRadius_\n_returns: void_\n_returns_description: _\n_parameters: int radiusRes_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setTopCapColor(color)\n\n<!--\n_syntax: setTopCapColor(color)_\n_name: setTopCapColor_\n_returns: void_\n_returns_description: _\n_parameters: ofColor color_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofCylinderPrimitive()\n\n<!--\n_syntax: ~ofCylinderPrimitive()_\n_name: ~ofCylinderPrimitive_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###bool bCapped\n\n<!--\n_name: bCapped_\n_type: bool_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float height\n\n<!--\n_name: height_\n_type: float_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float radius\n\n<!--\n_name: radius_\n_type: float_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f resolution\n\n<!--\n_name: resolution_\n_type: ofVec3f_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int strides\n\n<!--\n_name: strides_\n_type: int_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int vertices\n\n<!--\n_name: vertices_\n_type: int_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}