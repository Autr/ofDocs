{"entry":{"name":"gtx_integer_functions","filename":"gtx_integer_functions.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/glm/gtx_integer_functions.markdown","path":"/documentation/glm/gtx_integer_functions","route":"/documentation/glm/gtx_integer_functions.markdown","dir":"../ofSite/documentation/glm","ext":"markdown","type":"page","id":326,"parent":268,"breadcrumbs":[268,1],"siblings":[],"translations":{}},"description":{},"methods":[null,{"syntax":"glm::factorial(&x)","name":"glm::factorial","returns":"genType","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> genType <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Return the factorial value of a number (!12 max, integer only)\nFrom GLM_GTX_integer extension.</p>\n","desc":""},{"syntax":"glm::floor_log2(x)","name":"glm::floor_log2","returns":"unsigned int","returns_description":null,"parameters":"<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the floor log2 of x.\nFrom GLM_GTX_integer extension.</p>\n","desc":""},{"syntax":"glm::mod(x, y)","name":"glm::mod","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Modulus. Returns x - y * floor(x / y) for each component in x using the floating point value y.\nFrom GLM_GTX_integer extension.</p>\n","desc":""},{"syntax":"glm::mod(x, y)","name":"glm::mod","returns":"glm::uint","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint x<span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span>uint y","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Modulus. Returns x - y * floor(x / y) for each component in x using the floating point value y.\nFrom GLM_GTX_integer extension.</p>\n","desc":""},{"syntax":"glm::nlz(x)","name":"glm::nlz","returns":"glm::uint","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the number of leading zeros.\nFrom GLM_GTX_integer extension.</p>\n","desc":""},{"syntax":"glm::pow(x, y)","name":"glm::pow","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns x raised to the y power.\nFrom GLM_GTX_integer extension.</p>\n","desc":""},{"syntax":"glm::pow(x, y)","name":"glm::pow","returns":"glm::uint","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint x<span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span>uint y","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns x raised to the y power.\nFrom GLM_GTX_integer extension.</p>\n","desc":""},{"syntax":"glm::sqrt(x)","name":"glm::sqrt","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the positive square root of x.\nFrom GLM_GTX_integer extension.</p>\n","desc":""},{"syntax":"glm::sqrt(x)","name":"glm::sqrt","returns":"glm::uint","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the positive square root of x.\nFrom GLM_GTX_integer extension.</p>\n","desc":""},{}],"document":"<p>#functions</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>##Description</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###genType glm::factorial(&amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::factorial(&amp;x)</em>\n<em>name: glm::factorial</em>\n<em>returns: genType</em>\n_returns_description: _\n<em>parameters: const genType &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return the factorial value of a number (!12 max, integer only)\nFrom GLM_GTX_integer extension.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###unsigned int glm::floor_log2(x)</p>\n<p>&lt;!--\n<em>syntax: glm::floor_log2(x)</em>\n<em>name: glm::floor_log2</em>\n<em>returns: unsigned int</em>\n_returns_description: _\n<em>parameters: unsigned int x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the floor log2 of x.\nFrom GLM_GTX_integer extension.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int glm::mod(x, y)</p>\n<p>&lt;!--\n<em>syntax: glm::mod(x, y)</em>\n<em>name: glm::mod</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: int x, int y</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Modulus. Returns x - y * floor(x / y) for each component in x using the floating point value y.\nFrom GLM_GTX_integer extension.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uint glm::mod(x, y)</p>\n<p>&lt;!--\n<em>syntax: glm::mod(x, y)</em>\n<em>name: glm::mod</em>\n<em>returns: glm::uint</em>\n_returns_description: _\n<em>parameters: glm::uint x, glm::uint y</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Modulus. Returns x - y * floor(x / y) for each component in x using the floating point value y.\nFrom GLM_GTX_integer extension.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uint glm::nlz(x)</p>\n<p>&lt;!--\n<em>syntax: glm::nlz(x)</em>\n<em>name: glm::nlz</em>\n<em>returns: glm::uint</em>\n_returns_description: _\n<em>parameters: glm::uint x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the number of leading zeros.\nFrom GLM_GTX_integer extension.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int glm::pow(x, y)</p>\n<p>&lt;!--\n<em>syntax: glm::pow(x, y)</em>\n<em>name: glm::pow</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: int x, int y</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns x raised to the y power.\nFrom GLM_GTX_integer extension.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uint glm::pow(x, y)</p>\n<p>&lt;!--\n<em>syntax: glm::pow(x, y)</em>\n<em>name: glm::pow</em>\n<em>returns: glm::uint</em>\n_returns_description: _\n<em>parameters: glm::uint x, glm::uint y</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns x raised to the y power.\nFrom GLM_GTX_integer extension.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int glm::sqrt(x)</p>\n<p>&lt;!--\n<em>syntax: glm::sqrt(x)</em>\n<em>name: glm::sqrt</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: int x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the positive square root of x.\nFrom GLM_GTX_integer extension.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uint glm::sqrt(x)</p>\n<p>&lt;!--\n<em>syntax: glm::sqrt(x)</em>\n<em>name: glm::sqrt</em>\n<em>returns: glm::uint</em>\n_returns_description: _\n<em>parameters: glm::uint x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the positive square root of x.\nFrom GLM_GTX_integer extension.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#functions\n\n\n<!--\n_visible: True_\n_advanced: False_\n-->\n\n##Description\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###genType glm::factorial(&x)\n\n<!--\n_syntax: glm::factorial(&x)_\n_name: glm::factorial_\n_returns: genType_\n_returns_description: _\n_parameters: const genType &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Return the factorial value of a number (!12 max, integer only)\n From GLM_GTX_integer extension.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###unsigned int glm::floor_log2(x)\n\n<!--\n_syntax: glm::floor_log2(x)_\n_name: glm::floor_log2_\n_returns: unsigned int_\n_returns_description: _\n_parameters: unsigned int x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns the floor log2 of x.\n From GLM_GTX_integer extension.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int glm::mod(x, y)\n\n<!--\n_syntax: glm::mod(x, y)_\n_name: glm::mod_\n_returns: int_\n_returns_description: _\n_parameters: int x, int y_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Modulus. Returns x - y * floor(x / y) for each component in x using the floating point value y.\n From GLM_GTX_integer extension.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint glm::mod(x, y)\n\n<!--\n_syntax: glm::mod(x, y)_\n_name: glm::mod_\n_returns: glm::uint_\n_returns_description: _\n_parameters: glm::uint x, glm::uint y_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Modulus. Returns x - y * floor(x / y) for each component in x using the floating point value y.\n From GLM_GTX_integer extension.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint glm::nlz(x)\n\n<!--\n_syntax: glm::nlz(x)_\n_name: glm::nlz_\n_returns: glm::uint_\n_returns_description: _\n_parameters: glm::uint x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns the number of leading zeros.\n From GLM_GTX_integer extension.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int glm::pow(x, y)\n\n<!--\n_syntax: glm::pow(x, y)_\n_name: glm::pow_\n_returns: int_\n_returns_description: _\n_parameters: int x, int y_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns x raised to the y power.\n From GLM_GTX_integer extension.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint glm::pow(x, y)\n\n<!--\n_syntax: glm::pow(x, y)_\n_name: glm::pow_\n_returns: glm::uint_\n_returns_description: _\n_parameters: glm::uint x, glm::uint y_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns x raised to the y power.\n From GLM_GTX_integer extension.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int glm::sqrt(x)\n\n<!--\n_syntax: glm::sqrt(x)_\n_name: glm::sqrt_\n_returns: int_\n_returns_description: _\n_parameters: int x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns the positive square root of x.\n From GLM_GTX_integer extension.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint glm::sqrt(x)\n\n<!--\n_syntax: glm::sqrt(x)_\n_name: glm::sqrt_\n_returns: glm::uint_\n_returns_description: _\n_parameters: glm::uint x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns the positive square root of x.\n From GLM_GTX_integer extension.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}