{"entry":{"name":"gtc_packing_functions","filename":"gtc_packing_functions.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/glm/gtc_packing_functions.markdown","path":"/documentation/glm/gtc_packing_functions","route":"/documentation/glm/gtc_packing_functions.markdown","dir":"../ofSite/documentation/glm","ext":"markdown","type":"page","id":301,"parent":268,"breadcrumbs":[268,1],"siblings":[],"translations":{}},"description":{},"methods":[null,{"syntax":"glm::packF2x11_1x10(&v)","name":"glm::packF2x11_1x10","returns":"glm::uint32","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>First, converts the first two components of the normalized floating-point value v into 11-bit signless floating-point values.\nThen, converts the third component of the normalized floating-point value v into a 10-bit signless floating-point value.\nThen, the results are packed into the returned 32-bit unsigned integer.</p>\n<p>The first vector component specifies the 11 least-significant bits of the result;\nthe last component specifies the 10 most-significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vec3 unpackF2x11_1x10(uint32 const &amp; p)</p>\n","desc":""},{"syntax":"glm::packF3x9_E1x5(&v)","name":"glm::packF3x9_E1x5","returns":"glm::uint32","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>First, converts the first two components of the normalized floating-point value v into 11-bit signless floating-point values.\nThen, converts the third component of the normalized floating-point value v into a 10-bit signless floating-point value.\nThen, the results are packed into the returned 32-bit unsigned integer.</p>\n<p>The first vector component specifies the 11 least-significant bits of the result;\nthe last component specifies the 10 most-significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vec3 unpackF3x9_E1x5(uint32 const &amp; p)</p>\n","desc":""},{"desc":""},{"syntax":"glm::packHalf1x16(v)","name":"glm::packHalf1x16","returns":"glm::uint16","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::packHalf4x16(&v)","name":"glm::packHalf4x16","returns":"glm::uint64","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec4 <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::packI3x10_1x2(&v)","name":"glm::packI3x10_1x2","returns":"glm::uint32","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>ivec4 <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns an unsigned integer obtained by converting the components of a four-component signed integer vector\nto the 10-10-10-2-bit signed integer representation found in the OpenGL Specification,\nand then packing these four values into a 32-bit unsigned integer.\nThe first vector component specifies the 10 least-significant bits of the result;\nthe forth component specifies the 2 most-significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint32 packI3x10_1x2(uvec4 const &amp; v)</p>\n<p><strong>See also</strong>: uint32 packSnorm3x10_1x2(vec4 const &amp; v)</p>\n<p><strong>See also</strong>: uint32 packUnorm3x10_1x2(vec4 const &amp; v)</p>\n<p><strong>See also</strong>: ivec4 unpackI3x10_1x2(uint32 const &amp; p)</p>\n","desc":""},{"desc":""},{"syntax":"glm::packSnorm1x16(v)","name":"glm::packSnorm1x16","returns":"glm::uint16","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::packSnorm1x8(s)","name":"glm::packSnorm1x8","returns":"glm::uint8","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> s","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::packSnorm2x8(&v)","name":"glm::packSnorm2x8","returns":"glm::uint16","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::packSnorm3x10_1x2(&v)","name":"glm::packSnorm3x10_1x2","returns":"glm::uint32","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec4 <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>First, converts the first three components of the normalized floating-point value v into 10-bit signed integer values.\nThen, converts the forth component of the normalized floating-point value v into 2-bit signed integer values.\nThen, the results are packed into the returned 32-bit unsigned integer.</p>\n<p>The conversion for component c of v to fixed point is done as follows:\npackSnorm3x10_1x2(xyz):\tround(clamp(c, -1, +1) * 511.0)\npackSnorm3x10_1x2(w):\tround(clamp(c, -1, +1) * 1.0)</p>\n<p>The first vector component specifies the 10 least-significant bits of the result;\nthe forth component specifies the 2 most-significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vec4 unpackSnorm3x10_1x2(uint32 const &amp; p)</p>\n<p><strong>See also</strong>: uint32 packUnorm3x10_1x2(vec4 const &amp; v)</p>\n<p><strong>See also</strong>: uint32 packU3x10_1x2(uvec4 const &amp; v)</p>\n<p><strong>See also</strong>: uint32 packI3x10_1x2(ivec4 const &amp; v)</p>\n","desc":""},{"syntax":"glm::packSnorm4x16(&v)","name":"glm::packSnorm4x16","returns":"glm::uint64","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec4 <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::packU3x10_1x2(&v)","name":"glm::packU3x10_1x2","returns":"glm::uint32","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>uvec4 <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns an unsigned integer obtained by converting the components of a four-component unsigned integer vector\nto the 10-10-10-2-bit unsigned integer representation found in the OpenGL Specification,\nand then packing these four values into a 32-bit unsigned integer.\nThe first vector component specifies the 10 least-significant bits of the result;\nthe forth component specifies the 2 most-significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint32 packI3x10_1x2(ivec4 const &amp; v)</p>\n<p><strong>See also</strong>: uint32 packSnorm3x10_1x2(vec4 const &amp; v)</p>\n<p><strong>See also</strong>: uint32 packUnorm3x10_1x2(vec4 const &amp; v)</p>\n<p><strong>See also</strong>: ivec4 unpackU3x10_1x2(uint32 const &amp; p)</p>\n","desc":""},{"desc":""},{"syntax":"glm::packUnorm1x16(v)","name":"glm::packUnorm1x16","returns":"glm::uint16","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::packUnorm1x5_1x6_1x5(&v)","name":"glm::packUnorm1x5_1x6_1x5","returns":"glm::uint16","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert each component of the normalized floating-point vector into unsigned integer values.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vec3 unpackUnorm1x5_1x6_1x5(uint16 p)</p>\n","desc":""},{"syntax":"glm::packUnorm1x8(v)","name":"glm::packUnorm1x8","returns":"glm::uint8","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::packUnorm2x3_1x2(&v)","name":"glm::packUnorm2x3_1x2","returns":"glm::uint8","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert each component of the normalized floating-point vector into unsigned integer values.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vec3 unpackUnorm2x3_1x2(uint8 p)</p>\n","desc":""},{"syntax":"glm::packUnorm2x4(&v)","name":"glm::packUnorm2x4","returns":"glm::uint8","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert each component of the normalized floating-point vector into unsigned integer values.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vec2 unpackUnorm2x4(uint8 p)</p>\n","desc":""},{"syntax":"glm::packUnorm2x8(&v)","name":"glm::packUnorm2x8","returns":"glm::uint16","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::packUnorm3x10_1x2(&v)","name":"glm::packUnorm3x10_1x2","returns":"glm::uint32","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec4 <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>First, converts the first three components of the normalized floating-point value v into 10-bit unsigned integer values.\nThen, converts the forth component of the normalized floating-point value v into 2-bit signed uninteger values.\nThen, the results are packed into the returned 32-bit unsigned integer.</p>\n<p>The conversion for component c of v to fixed point is done as follows:\npackUnorm3x10_1x2(xyz):\tround(clamp(c, 0, +1) * 1023.0)\npackUnorm3x10_1x2(w):\tround(clamp(c, 0, +1) * 3.0)</p>\n<p>The first vector component specifies the 10 least-significant bits of the result;\nthe forth component specifies the 2 most-significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vec4 unpackUnorm3x10_1x2(uint32 const &amp; p)</p>\n<p><strong>See also</strong>: uint32 packUnorm3x10_1x2(vec4 const &amp; v)</p>\n<p><strong>See also</strong>: uint32 packU3x10_1x2(uvec4 const &amp; v)</p>\n<p><strong>See also</strong>: uint32 packI3x10_1x2(ivec4 const &amp; v)</p>\n","desc":""},{"syntax":"glm::packUnorm3x5_1x1(&v)","name":"glm::packUnorm3x5_1x1","returns":"glm::uint16","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec4 <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert each component of the normalized floating-point vector into unsigned integer values.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vec4 unpackUnorm3x5_1x1(uint16 p)</p>\n","desc":""},{"syntax":"glm::packUnorm4x16(&v)","name":"glm::packUnorm4x16","returns":"glm::uint64","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec4 <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::packUnorm4x4(&v)","name":"glm::packUnorm4x4","returns":"glm::uint16","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec4 <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert each component of the normalized floating-point vector into unsigned integer values.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vec4 unpackUnorm4x4(uint16 p)</p>\n","desc":""},{"syntax":"glm::unpackF2x11_1x10(p)","name":"glm::unpackF2x11_1x10","returns":"glm::vec3","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint32 p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>First, unpacks a single 32-bit unsigned integer p into two 11-bit signless floating-point values and one 10-bit signless floating-point value .\nThen, each component is converted to a normalized floating-point value to generate the returned three-component vector.</p>\n<p>The first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint32 packF2x11_1x10(vec3 const &amp; v)</p>\n","desc":""},{"syntax":"glm::unpackF3x9_E1x5(p)","name":"glm::unpackF3x9_E1x5","returns":"glm::vec3","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint32 p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>First, unpacks a single 32-bit unsigned integer p into two 11-bit signless floating-point values and one 10-bit signless floating-point value .\nThen, each component is converted to a normalized floating-point value to generate the returned three-component vector.</p>\n<p>The first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint32 packF3x9_E1x5(vec3 const &amp; v)</p>\n","desc":""},{"desc":""},{"syntax":"glm::unpackHalf1x16(v)","name":"glm::unpackHalf1x16","returns":"float","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint16 v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::unpackHalf4x16(p)","name":"glm::unpackHalf4x16","returns":"glm::vec4","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint64 p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::unpackI3x10_1x2(p)","name":"glm::unpackI3x10_1x2","returns":"glm::ivec4","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint32 p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Unpacks a single 32-bit unsigned integer p into three 10-bit and one 2-bit signed integers.</p>\n<p>The first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint32 packU3x10_1x2(uvec4 const &amp; v)</p>\n<p><strong>See also</strong>: vec4 unpackSnorm3x10_1x2(uint32 const &amp; p);</p>\n<p><strong>See also</strong>: uvec4 unpackI3x10_1x2(uint32 const &amp; p);</p>\n","desc":""},{"desc":""},{"syntax":"glm::unpackSnorm1x16(p)","name":"glm::unpackSnorm1x16","returns":"float","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint16 p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::unpackSnorm1x8(p)","name":"glm::unpackSnorm1x8","returns":"float","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint8 p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::unpackSnorm2x8(p)","name":"glm::unpackSnorm2x8","returns":"glm::vec2","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint16 p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::unpackSnorm3x10_1x2(p)","name":"glm::unpackSnorm3x10_1x2","returns":"glm::vec4","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint32 p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>First, unpacks a single 32-bit unsigned integer p into four 16-bit signed integers.\nThen, each component is converted to a normalized floating-point value to generate the returned four-component vector.</p>\n<p>The conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackSnorm3x10_1x2(xyz): clamp(f / 511.0, -1, +1)\nunpackSnorm3x10_1x2(w): clamp(f / 511.0, -1, +1)</p>\n<p>The first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint32 packSnorm3x10_1x2(vec4 const &amp; v)</p>\n<p><strong>See also</strong>: vec4 unpackUnorm3x10_1x2(uint32 const &amp; p))</p>\n<p><strong>See also</strong>: uvec4 unpackI3x10_1x2(uint32 const &amp; p)</p>\n<p><strong>See also</strong>: uvec4 unpackU3x10_1x2(uint32 const &amp; p)</p>\n","desc":""},{"syntax":"glm::unpackSnorm4x16(p)","name":"glm::unpackSnorm4x16","returns":"glm::vec4","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint64 p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::unpackU3x10_1x2(p)","name":"glm::unpackU3x10_1x2","returns":"glm::uvec4","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint32 p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Unpacks a single 32-bit unsigned integer p into three 10-bit and one 2-bit unsigned integers.</p>\n<p>The first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint32 packU3x10_1x2(uvec4 const &amp; v)</p>\n<p><strong>See also</strong>: vec4 unpackSnorm3x10_1x2(uint32 const &amp; p);</p>\n<p><strong>See also</strong>: uvec4 unpackI3x10_1x2(uint32 const &amp; p);</p>\n","desc":""},{"desc":""},{"syntax":"glm::unpackUnorm1x16(p)","name":"glm::unpackUnorm1x16","returns":"float","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint16 p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::unpackUnorm1x5_1x6_1x5(p)","name":"glm::unpackUnorm1x5_1x6_1x5","returns":"glm::vec3","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint16 p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert each unsigned integer components of a vector to normalized floating-point values.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint16 packUnorm1x5_1x6_1x5(vec3 const &amp; v)</p>\n","desc":""},{"syntax":"glm::unpackUnorm1x8(p)","name":"glm::unpackUnorm1x8","returns":"float","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint8 p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::unpackUnorm2x3_1x2(p)","name":"glm::unpackUnorm2x3_1x2","returns":"glm::vec3","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint8 p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert each unsigned integer components of a vector to normalized floating-point values.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint8 packUnorm2x3_1x2(vec3 const &amp; v)</p>\n","desc":""},{"syntax":"glm::unpackUnorm2x4(p)","name":"glm::unpackUnorm2x4","returns":"glm::vec2","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint8 p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert each unsigned integer components of a vector to normalized floating-point values.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint8 packUnorm2x4(vec2 const &amp; v)</p>\n","desc":""},{"syntax":"glm::unpackUnorm2x8(p)","name":"glm::unpackUnorm2x8","returns":"glm::vec2","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint16 p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::unpackUnorm3x10_1x2(p)","name":"glm::unpackUnorm3x10_1x2","returns":"glm::vec4","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint32 p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>First, unpacks a single 32-bit unsigned integer p into four 16-bit signed integers.\nThen, each component is converted to a normalized floating-point value to generate the returned four-component vector.</p>\n<p>The conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackSnorm3x10_1x2(xyz): clamp(f / 1023.0, 0, +1)\nunpackSnorm3x10_1x2(w): clamp(f / 3.0, 0, +1)</p>\n<p>The first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint32 packSnorm3x10_1x2(vec4 const &amp; v)</p>\n<p><strong>See also</strong>: vec4 unpackInorm3x10_1x2(uint32 const &amp; p))</p>\n<p><strong>See also</strong>: uvec4 unpackI3x10_1x2(uint32 const &amp; p)</p>\n<p><strong>See also</strong>: uvec4 unpackU3x10_1x2(uint32 const &amp; p)</p>\n","desc":""},{"syntax":"glm::unpackUnorm3x5_1x1(p)","name":"glm::unpackUnorm3x5_1x1","returns":"glm::vec4","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint16 p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert each unsigned integer components of a vector to normalized floating-point values.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint16 packUnorm3x5_1x1(vec4 const &amp; v)</p>\n","desc":""},{"syntax":"glm::unpackUnorm4x16(p)","name":"glm::unpackUnorm4x16","returns":"glm::vec4","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint64 p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::unpackUnorm4x4(p)","name":"glm::unpackUnorm4x4","returns":"glm::vec4","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint16 p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert each unsigned integer components of a vector to normalized floating-point values.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint16 packUnorm4x4(vec4 const &amp; v)</p>\n","desc":""},{}],"document":"<p>#functions</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>##Description</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uint32 glm::packF2x11_1x10(&amp;v)</p>\n<p>&lt;!--\n<em>syntax: glm::packF2x11_1x10(&amp;v)</em>\n<em>name: glm::packF2x11_1x10</em>\n<em>returns: glm::uint32</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>First, converts the first two components of the normalized floating-point value v into 11-bit signless floating-point values.\nThen, converts the third component of the normalized floating-point value v into a 10-bit signless floating-point value.\nThen, the results are packed into the returned 32-bit unsigned integer.</p>\n<p>The first vector component specifies the 11 least-significant bits of the result;\nthe last component specifies the 10 most-significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vec3 unpackF2x11_1x10(uint32 const &amp; p)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uint32 glm::packF3x9_E1x5(&amp;v)</p>\n<p>&lt;!--\n<em>syntax: glm::packF3x9_E1x5(&amp;v)</em>\n<em>name: glm::packF3x9_E1x5</em>\n<em>returns: glm::uint32</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>First, converts the first two components of the normalized floating-point value v into 11-bit signless floating-point values.\nThen, converts the third component of the normalized floating-point value v into a 10-bit signless floating-point value.\nThen, the results are packed into the returned 32-bit unsigned integer.</p>\n<p>The first vector component specifies the 11 least-significant bits of the result;\nthe last component specifies the 10 most-significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vec3 unpackF3x9_E1x5(uint32 const &amp; p)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vecType&lt; glm::uint16, P &gt; glm::packHalf(float, &amp;v = P)</p>\n<p>&lt;!--\n<em>syntax: glm::packHalf(float, &amp;v = P)</em>\n<em>name: glm::packHalf</em>\n<em>returns: vecType&lt; glm::uint16, P &gt;</em>\n_returns_description: _\n<em>parameters: const vecType&lt; float, P &gt; &amp;v=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns an unsigned integer vector obtained by converting the components of a floating-point vector\nto the 16-bit floating-point representation found in the OpenGL Specification.\nThe first vector component specifies the 16 least-significant bits of the result;\nthe forth component specifies the 16 most-significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vecType&lt;float, P&gt; unpackHalf(vecType&lt;uint16, P&gt; const &amp; p)</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uint16 glm::packHalf1x16(v)</p>\n<p>&lt;!--\n<em>syntax: glm::packHalf1x16(v)</em>\n<em>name: glm::packHalf1x16</em>\n<em>returns: glm::uint16</em>\n_returns_description: _\n<em>parameters: float v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns an unsigned integer obtained by converting the components of a floating-point scalar\nto the 16-bit floating-point representation found in the OpenGL Specification,\nand then packing this 16-bit value into a 16-bit unsigned integer.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint32 packHalf2x16(vec2 const &amp; v)</p>\n<p><strong>See also</strong>: uint64 packHalf4x16(vec4 const &amp; v)</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/packHalf2x16.xml&quot;&gt;GLSL packHalf2x16 man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uint64 glm::packHalf4x16(&amp;v)</p>\n<p>&lt;!--\n<em>syntax: glm::packHalf4x16(&amp;v)</em>\n<em>name: glm::packHalf4x16</em>\n<em>returns: glm::uint64</em>\n_returns_description: _\n<em>parameters: const glm::vec4 &amp;v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns an unsigned integer obtained by converting the components of a four-component floating-point vector\nto the 16-bit floating-point representation found in the OpenGL Specification,\nand then packing these four 16-bit values into a 64-bit unsigned integer.\nThe first vector component specifies the 16 least-significant bits of the result;\nthe forth component specifies the 16 most-significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint16 packHalf1x16(float const &amp; v)</p>\n<p><strong>See also</strong>: uint32 packHalf2x16(vec2 const &amp; v)</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/packHalf2x16.xml&quot;&gt;GLSL packHalf2x16 man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uint32 glm::packI3x10_1x2(&amp;v)</p>\n<p>&lt;!--\n<em>syntax: glm::packI3x10_1x2(&amp;v)</em>\n<em>name: glm::packI3x10_1x2</em>\n<em>returns: glm::uint32</em>\n_returns_description: _\n<em>parameters: const glm::ivec4 &amp;v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns an unsigned integer obtained by converting the components of a four-component signed integer vector\nto the 10-10-10-2-bit signed integer representation found in the OpenGL Specification,\nand then packing these four values into a 32-bit unsigned integer.\nThe first vector component specifies the 10 least-significant bits of the result;\nthe forth component specifies the 2 most-significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint32 packI3x10_1x2(uvec4 const &amp; v)</p>\n<p><strong>See also</strong>: uint32 packSnorm3x10_1x2(vec4 const &amp; v)</p>\n<p><strong>See also</strong>: uint32 packUnorm3x10_1x2(vec4 const &amp; v)</p>\n<p><strong>See also</strong>: ivec4 unpackI3x10_1x2(uint32 const &amp; p)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vecType&lt; intType, P &gt; glm::packSnorm(floatType, &amp;v = P)</p>\n<p>&lt;!--\n<em>syntax: glm::packSnorm(floatType, &amp;v = P)</em>\n<em>name: glm::packSnorm</em>\n<em>returns: vecType&lt; intType, P &gt;</em>\n_returns_description: _\n<em>parameters: const vecType&lt; floatType, P &gt; &amp;v=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Convert each component of the normalized floating-point vector into signed integer values.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vecType&lt;floatType, P&gt; unpackSnorm(vecType&lt;intType, P&gt; const &amp; p);</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uint16 glm::packSnorm1x16(v)</p>\n<p>&lt;!--\n<em>syntax: glm::packSnorm1x16(v)</em>\n<em>name: glm::packSnorm1x16</em>\n<em>returns: glm::uint16</em>\n_returns_description: _\n<em>parameters: float v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>First, converts the normalized floating-point value v into 16-bit integer value.\nThen, the results are packed into the returned 16-bit unsigned integer.</p>\n<p>The conversion to fixed point is done as follows:\npackSnorm1x8:\tround(clamp(s, -1, +1) * 32767.0)</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint32 packSnorm2x16(vec2 const &amp; v)</p>\n<p><strong>See also</strong>: uint64 packSnorm4x16(vec4 const &amp; v)</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/packSnorm4x8.xml&quot;&gt;GLSL packSnorm4x8 man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uint8 glm::packSnorm1x8(s)</p>\n<p>&lt;!--\n<em>syntax: glm::packSnorm1x8(s)</em>\n<em>name: glm::packSnorm1x8</em>\n<em>returns: glm::uint8</em>\n_returns_description: _\n<em>parameters: float s</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>First, converts the normalized floating-point value v into 8-bit integer value.\nThen, the results are packed into the returned 8-bit unsigned integer.</p>\n<p>The conversion to fixed point is done as follows:\npackSnorm1x8:\tround(clamp(s, -1, +1) * 127.0)</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint16 packSnorm2x8(vec2 const &amp; v)</p>\n<p><strong>See also</strong>: uint32 packSnorm4x8(vec4 const &amp; v)</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/packSnorm4x8.xml&quot;&gt;GLSL packSnorm4x8 man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uint16 glm::packSnorm2x8(&amp;v)</p>\n<p>&lt;!--\n<em>syntax: glm::packSnorm2x8(&amp;v)</em>\n<em>name: glm::packSnorm2x8</em>\n<em>returns: glm::uint16</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>First, converts each component of the normalized floating-point value v into 8-bit integer values.\nThen, the results are packed into the returned 16-bit unsigned integer.</p>\n<p>The conversion for component c of v to fixed point is done as follows:\npackSnorm2x8:\tround(clamp(c, -1, +1) * 127.0)</p>\n<p>The first component of the vector will be written to the least significant bits of the output;\nthe last component will be written to the most significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint8 packSnorm1x8(float const &amp; v)</p>\n<p><strong>See also</strong>: uint32 packSnorm4x8(vec4 const &amp; v)</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/packSnorm4x8.xml&quot;&gt;GLSL packSnorm4x8 man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uint32 glm::packSnorm3x10_1x2(&amp;v)</p>\n<p>&lt;!--\n<em>syntax: glm::packSnorm3x10_1x2(&amp;v)</em>\n<em>name: glm::packSnorm3x10_1x2</em>\n<em>returns: glm::uint32</em>\n_returns_description: _\n<em>parameters: const glm::vec4 &amp;v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>First, converts the first three components of the normalized floating-point value v into 10-bit signed integer values.\nThen, converts the forth component of the normalized floating-point value v into 2-bit signed integer values.\nThen, the results are packed into the returned 32-bit unsigned integer.</p>\n<p>The conversion for component c of v to fixed point is done as follows:\npackSnorm3x10_1x2(xyz):\tround(clamp(c, -1, +1) * 511.0)\npackSnorm3x10_1x2(w):\tround(clamp(c, -1, +1) * 1.0)</p>\n<p>The first vector component specifies the 10 least-significant bits of the result;\nthe forth component specifies the 2 most-significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vec4 unpackSnorm3x10_1x2(uint32 const &amp; p)</p>\n<p><strong>See also</strong>: uint32 packUnorm3x10_1x2(vec4 const &amp; v)</p>\n<p><strong>See also</strong>: uint32 packU3x10_1x2(uvec4 const &amp; v)</p>\n<p><strong>See also</strong>: uint32 packI3x10_1x2(ivec4 const &amp; v)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uint64 glm::packSnorm4x16(&amp;v)</p>\n<p>&lt;!--\n<em>syntax: glm::packSnorm4x16(&amp;v)</em>\n<em>name: glm::packSnorm4x16</em>\n<em>returns: glm::uint64</em>\n_returns_description: _\n<em>parameters: const glm::vec4 &amp;v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>First, converts each component of the normalized floating-point value v into 16-bit integer values.\nThen, the results are packed into the returned 64-bit unsigned integer.</p>\n<p>The conversion for component c of v to fixed point is done as follows:\npackSnorm2x8:\tround(clamp(c, -1, +1) * 32767.0)</p>\n<p>The first component of the vector will be written to the least significant bits of the output;\nthe last component will be written to the most significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint16 packSnorm1x16(float const &amp; v)</p>\n<p><strong>See also</strong>: uint32 packSnorm2x16(vec2 const &amp; v)</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/packSnorm4x8.xml&quot;&gt;GLSL packSnorm4x8 man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uint32 glm::packU3x10_1x2(&amp;v)</p>\n<p>&lt;!--\n<em>syntax: glm::packU3x10_1x2(&amp;v)</em>\n<em>name: glm::packU3x10_1x2</em>\n<em>returns: glm::uint32</em>\n_returns_description: _\n<em>parameters: const glm::uvec4 &amp;v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns an unsigned integer obtained by converting the components of a four-component unsigned integer vector\nto the 10-10-10-2-bit unsigned integer representation found in the OpenGL Specification,\nand then packing these four values into a 32-bit unsigned integer.\nThe first vector component specifies the 10 least-significant bits of the result;\nthe forth component specifies the 2 most-significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint32 packI3x10_1x2(ivec4 const &amp; v)</p>\n<p><strong>See also</strong>: uint32 packSnorm3x10_1x2(vec4 const &amp; v)</p>\n<p><strong>See also</strong>: uint32 packUnorm3x10_1x2(vec4 const &amp; v)</p>\n<p><strong>See also</strong>: ivec4 unpackU3x10_1x2(uint32 const &amp; p)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vecType&lt; uintType, P &gt; glm::packUnorm(floatType, &amp;v = P)</p>\n<p>&lt;!--\n<em>syntax: glm::packUnorm(floatType, &amp;v = P)</em>\n<em>name: glm::packUnorm</em>\n<em>returns: vecType&lt; uintType, P &gt;</em>\n_returns_description: _\n<em>parameters: const vecType&lt; floatType, P &gt; &amp;v=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Convert each component of the normalized floating-point vector into unsigned integer values.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vecType&lt;floatType, P&gt; unpackUnorm(vecType&lt;intType, P&gt; const &amp; p);</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uint16 glm::packUnorm1x16(v)</p>\n<p>&lt;!--\n<em>syntax: glm::packUnorm1x16(v)</em>\n<em>name: glm::packUnorm1x16</em>\n<em>returns: glm::uint16</em>\n_returns_description: _\n<em>parameters: float v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>First, converts the normalized floating-point value v into a 16-bit integer value.\nThen, the results are packed into the returned 16-bit unsigned integer.</p>\n<p>The conversion for component c of v to fixed point is done as follows:\npackUnorm1x16:\tround(clamp(c, 0, +1) * 65535.0)</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint16 packSnorm1x16(float const &amp; v)</p>\n<p><strong>See also</strong>: uint64 packSnorm4x16(vec4 const &amp; v)</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/packUnorm4x8.xml&quot;&gt;GLSL packUnorm4x8 man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uint16 glm::packUnorm1x5_1x6_1x5(&amp;v)</p>\n<p>&lt;!--\n<em>syntax: glm::packUnorm1x5_1x6_1x5(&amp;v)</em>\n<em>name: glm::packUnorm1x5_1x6_1x5</em>\n<em>returns: glm::uint16</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Convert each component of the normalized floating-point vector into unsigned integer values.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vec3 unpackUnorm1x5_1x6_1x5(uint16 p)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uint8 glm::packUnorm1x8(v)</p>\n<p>&lt;!--\n<em>syntax: glm::packUnorm1x8(v)</em>\n<em>name: glm::packUnorm1x8</em>\n<em>returns: glm::uint8</em>\n_returns_description: _\n<em>parameters: float v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>First, converts the normalized floating-point value v into a 8-bit integer value.\nThen, the results are packed into the returned 8-bit unsigned integer.</p>\n<p>The conversion for component c of v to fixed point is done as follows:\npackUnorm1x8:\tround(clamp(c, 0, +1) * 255.0)</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint16 packUnorm2x8(vec2 const &amp; v)</p>\n<p><strong>See also</strong>: uint32 packUnorm4x8(vec4 const &amp; v)</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/packUnorm4x8.xml&quot;&gt;GLSL packUnorm4x8 man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uint8 glm::packUnorm2x3_1x2(&amp;v)</p>\n<p>&lt;!--\n<em>syntax: glm::packUnorm2x3_1x2(&amp;v)</em>\n<em>name: glm::packUnorm2x3_1x2</em>\n<em>returns: glm::uint8</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Convert each component of the normalized floating-point vector into unsigned integer values.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vec3 unpackUnorm2x3_1x2(uint8 p)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uint8 glm::packUnorm2x4(&amp;v)</p>\n<p>&lt;!--\n<em>syntax: glm::packUnorm2x4(&amp;v)</em>\n<em>name: glm::packUnorm2x4</em>\n<em>returns: glm::uint8</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Convert each component of the normalized floating-point vector into unsigned integer values.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vec2 unpackUnorm2x4(uint8 p)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uint16 glm::packUnorm2x8(&amp;v)</p>\n<p>&lt;!--\n<em>syntax: glm::packUnorm2x8(&amp;v)</em>\n<em>name: glm::packUnorm2x8</em>\n<em>returns: glm::uint16</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>First, converts each component of the normalized floating-point value v into 8-bit integer values.\nThen, the results are packed into the returned 16-bit unsigned integer.</p>\n<p>The conversion for component c of v to fixed point is done as follows:\npackUnorm2x8:\tround(clamp(c, 0, +1) * 255.0)</p>\n<p>The first component of the vector will be written to the least significant bits of the output;\nthe last component will be written to the most significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint8 packUnorm1x8(float const &amp; v)</p>\n<p><strong>See also</strong>: uint32 packUnorm4x8(vec4 const &amp; v)</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/packUnorm4x8.xml&quot;&gt;GLSL packUnorm4x8 man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uint32 glm::packUnorm3x10_1x2(&amp;v)</p>\n<p>&lt;!--\n<em>syntax: glm::packUnorm3x10_1x2(&amp;v)</em>\n<em>name: glm::packUnorm3x10_1x2</em>\n<em>returns: glm::uint32</em>\n_returns_description: _\n<em>parameters: const glm::vec4 &amp;v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>First, converts the first three components of the normalized floating-point value v into 10-bit unsigned integer values.\nThen, converts the forth component of the normalized floating-point value v into 2-bit signed uninteger values.\nThen, the results are packed into the returned 32-bit unsigned integer.</p>\n<p>The conversion for component c of v to fixed point is done as follows:\npackUnorm3x10_1x2(xyz):\tround(clamp(c, 0, +1) * 1023.0)\npackUnorm3x10_1x2(w):\tround(clamp(c, 0, +1) * 3.0)</p>\n<p>The first vector component specifies the 10 least-significant bits of the result;\nthe forth component specifies the 2 most-significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vec4 unpackUnorm3x10_1x2(uint32 const &amp; p)</p>\n<p><strong>See also</strong>: uint32 packUnorm3x10_1x2(vec4 const &amp; v)</p>\n<p><strong>See also</strong>: uint32 packU3x10_1x2(uvec4 const &amp; v)</p>\n<p><strong>See also</strong>: uint32 packI3x10_1x2(ivec4 const &amp; v)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uint16 glm::packUnorm3x5_1x1(&amp;v)</p>\n<p>&lt;!--\n<em>syntax: glm::packUnorm3x5_1x1(&amp;v)</em>\n<em>name: glm::packUnorm3x5_1x1</em>\n<em>returns: glm::uint16</em>\n_returns_description: _\n<em>parameters: const glm::vec4 &amp;v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Convert each component of the normalized floating-point vector into unsigned integer values.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vec4 unpackUnorm3x5_1x1(uint16 p)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uint64 glm::packUnorm4x16(&amp;v)</p>\n<p>&lt;!--\n<em>syntax: glm::packUnorm4x16(&amp;v)</em>\n<em>name: glm::packUnorm4x16</em>\n<em>returns: glm::uint64</em>\n_returns_description: _\n<em>parameters: const glm::vec4 &amp;v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>First, converts each component of the normalized floating-point value v into 16-bit integer values.\nThen, the results are packed into the returned 64-bit unsigned integer.</p>\n<p>The conversion for component c of v to fixed point is done as follows:\npackUnorm4x16:\tround(clamp(c, 0, +1) * 65535.0)</p>\n<p>The first component of the vector will be written to the least significant bits of the output;\nthe last component will be written to the most significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint16 packUnorm1x16(float const &amp; v)</p>\n<p><strong>See also</strong>: uint32 packUnorm2x16(vec2 const &amp; v)</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/packUnorm4x8.xml&quot;&gt;GLSL packUnorm4x8 man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uint16 glm::packUnorm4x4(&amp;v)</p>\n<p>&lt;!--\n<em>syntax: glm::packUnorm4x4(&amp;v)</em>\n<em>name: glm::packUnorm4x4</em>\n<em>returns: glm::uint16</em>\n_returns_description: _\n<em>parameters: const glm::vec4 &amp;v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Convert each component of the normalized floating-point vector into unsigned integer values.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vec4 unpackUnorm4x4(uint16 p)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 glm::unpackF2x11_1x10(p)</p>\n<p>&lt;!--\n<em>syntax: glm::unpackF2x11_1x10(p)</em>\n<em>name: glm::unpackF2x11_1x10</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n<em>parameters: glm::uint32 p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>First, unpacks a single 32-bit unsigned integer p into two 11-bit signless floating-point values and one 10-bit signless floating-point value .\nThen, each component is converted to a normalized floating-point value to generate the returned three-component vector.</p>\n<p>The first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint32 packF2x11_1x10(vec3 const &amp; v)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 glm::unpackF3x9_E1x5(p)</p>\n<p>&lt;!--\n<em>syntax: glm::unpackF3x9_E1x5(p)</em>\n<em>name: glm::unpackF3x9_E1x5</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n<em>parameters: glm::uint32 p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>First, unpacks a single 32-bit unsigned integer p into two 11-bit signless floating-point values and one 10-bit signless floating-point value .\nThen, each component is converted to a normalized floating-point value to generate the returned three-component vector.</p>\n<p>The first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint32 packF3x9_E1x5(vec3 const &amp; v)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vecType&lt; float, P &gt; glm::unpackHalf(glm::uint16, &amp;p = P)</p>\n<p>&lt;!--\n<em>syntax: glm::unpackHalf(glm::uint16, &amp;p = P)</em>\n<em>name: glm::unpackHalf</em>\n<em>returns: vecType&lt; float, P &gt;</em>\n_returns_description: _\n<em>parameters: const vecType&lt; glm::uint16, P &gt; &amp;p=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a floating-point vector with components obtained by reinterpreting an integer vector as 16-bit floating-point numbers and converting them to 32-bit floating-point values.\nThe first component of the vector is obtained from the 16 least-significant bits of v;\nthe forth component is obtained from the 16 most-significant bits of v.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vecType&lt;uint16, P&gt; packHalf(vecType&lt;float, P&gt; const &amp; v)</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float glm::unpackHalf1x16(v)</p>\n<p>&lt;!--\n<em>syntax: glm::unpackHalf1x16(v)</em>\n<em>name: glm::unpackHalf1x16</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: glm::uint16 v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a floating-point scalar with components obtained by unpacking a 16-bit unsigned integer into a 16-bit value,\ninterpreted as a 16-bit floating-point number according to the OpenGL Specification,\nand converting it to 32-bit floating-point values.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vec2 unpackHalf2x16(uint32 const &amp; v)</p>\n<p><strong>See also</strong>: vec4 unpackHalf4x16(uint64 const &amp; v)</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackHalf2x16.xml&quot;&gt;GLSL unpackHalf2x16 man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec4 glm::unpackHalf4x16(p)</p>\n<p>&lt;!--\n<em>syntax: glm::unpackHalf4x16(p)</em>\n<em>name: glm::unpackHalf4x16</em>\n<em>returns: glm::vec4</em>\n_returns_description: _\n<em>parameters: glm::uint64 p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a four-component floating-point vector with components obtained by unpacking a 64-bit unsigned integer into four 16-bit values,\ninterpreting those values as 16-bit floating-point numbers according to the OpenGL Specification,\nand converting them to 32-bit floating-point values.\nThe first component of the vector is obtained from the 16 least-significant bits of v;\nthe forth component is obtained from the 16 most-significant bits of v.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: float unpackHalf1x16(uint16 const &amp; v)</p>\n<p><strong>See also</strong>: vec2 unpackHalf2x16(uint32 const &amp; v)</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackHalf2x16.xml&quot;&gt;GLSL unpackHalf2x16 man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::ivec4 glm::unpackI3x10_1x2(p)</p>\n<p>&lt;!--\n<em>syntax: glm::unpackI3x10_1x2(p)</em>\n<em>name: glm::unpackI3x10_1x2</em>\n<em>returns: glm::ivec4</em>\n_returns_description: _\n<em>parameters: glm::uint32 p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Unpacks a single 32-bit unsigned integer p into three 10-bit and one 2-bit signed integers.</p>\n<p>The first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint32 packU3x10_1x2(uvec4 const &amp; v)</p>\n<p><strong>See also</strong>: vec4 unpackSnorm3x10_1x2(uint32 const &amp; p);</p>\n<p><strong>See also</strong>: uvec4 unpackI3x10_1x2(uint32 const &amp; p);</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vecType&lt; floatType, P &gt; glm::unpackSnorm(intType, &amp;v = P)</p>\n<p>&lt;!--\n<em>syntax: glm::unpackSnorm(intType, &amp;v = P)</em>\n<em>name: glm::unpackSnorm</em>\n<em>returns: vecType&lt; floatType, P &gt;</em>\n_returns_description: _\n<em>parameters: const vecType&lt; intType, P &gt; &amp;v=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Convert each signed integer components of a vector to normalized floating-point values.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vecType&lt;intType, P&gt; packSnorm(vecType&lt;floatType, P&gt; const &amp; v)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float glm::unpackSnorm1x16(p)</p>\n<p>&lt;!--\n<em>syntax: glm::unpackSnorm1x16(p)</em>\n<em>name: glm::unpackSnorm1x16</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: glm::uint16 p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>First, unpacks a single 16-bit unsigned integer p into a single 16-bit signed integers.\nThen, each component is converted to a normalized floating-point value to generate the returned scalar.</p>\n<p>The conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackSnorm1x16: clamp(f / 32767.0, -1, +1)</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vec2 unpackSnorm2x16(uint32 p)</p>\n<p><strong>See also</strong>: vec4 unpackSnorm4x16(uint64 p)</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm1x16.xml&quot;&gt;GLSL unpackSnorm4x8 man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float glm::unpackSnorm1x8(p)</p>\n<p>&lt;!--\n<em>syntax: glm::unpackSnorm1x8(p)</em>\n<em>name: glm::unpackSnorm1x8</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: glm::uint8 p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>First, unpacks a single 8-bit unsigned integer p into a single 8-bit signed integers.\nThen, the value is converted to a normalized floating-point value to generate the returned scalar.</p>\n<p>The conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackSnorm1x8: clamp(f / 127.0, -1, +1)</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vec2 unpackSnorm2x8(uint16 p)</p>\n<p><strong>See also</strong>: vec4 unpackSnorm4x8(uint32 p)</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm4x8.xml&quot;&gt;GLSL unpackSnorm4x8 man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec2 glm::unpackSnorm2x8(p)</p>\n<p>&lt;!--\n<em>syntax: glm::unpackSnorm2x8(p)</em>\n<em>name: glm::unpackSnorm2x8</em>\n<em>returns: glm::vec2</em>\n_returns_description: _\n<em>parameters: glm::uint16 p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>First, unpacks a single 16-bit unsigned integer p into a pair of 8-bit signed integers.\nThen, each component is converted to a normalized floating-point value to generate the returned two-component vector.</p>\n<p>The conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackSnorm2x8: clamp(f / 127.0, -1, +1)</p>\n<p>The first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: float unpackSnorm1x8(uint8 p)</p>\n<p><strong>See also</strong>: vec4 unpackSnorm4x8(uint32 p)</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm4x8.xml&quot;&gt;GLSL unpackSnorm4x8 man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec4 glm::unpackSnorm3x10_1x2(p)</p>\n<p>&lt;!--\n<em>syntax: glm::unpackSnorm3x10_1x2(p)</em>\n<em>name: glm::unpackSnorm3x10_1x2</em>\n<em>returns: glm::vec4</em>\n_returns_description: _\n<em>parameters: glm::uint32 p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>First, unpacks a single 32-bit unsigned integer p into four 16-bit signed integers.\nThen, each component is converted to a normalized floating-point value to generate the returned four-component vector.</p>\n<p>The conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackSnorm3x10_1x2(xyz): clamp(f / 511.0, -1, +1)\nunpackSnorm3x10_1x2(w): clamp(f / 511.0, -1, +1)</p>\n<p>The first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint32 packSnorm3x10_1x2(vec4 const &amp; v)</p>\n<p><strong>See also</strong>: vec4 unpackUnorm3x10_1x2(uint32 const &amp; p))</p>\n<p><strong>See also</strong>: uvec4 unpackI3x10_1x2(uint32 const &amp; p)</p>\n<p><strong>See also</strong>: uvec4 unpackU3x10_1x2(uint32 const &amp; p)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec4 glm::unpackSnorm4x16(p)</p>\n<p>&lt;!--\n<em>syntax: glm::unpackSnorm4x16(p)</em>\n<em>name: glm::unpackSnorm4x16</em>\n<em>returns: glm::vec4</em>\n_returns_description: _\n<em>parameters: glm::uint64 p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>First, unpacks a single 64-bit unsigned integer p into four 16-bit signed integers.\nThen, each component is converted to a normalized floating-point value to generate the returned four-component vector.</p>\n<p>The conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackSnorm4x16: clamp(f / 32767.0, -1, +1)</p>\n<p>The first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: float unpackSnorm1x16(uint16 p)</p>\n<p><strong>See also</strong>: vec2 unpackSnorm2x16(uint32 p)</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm2x16.xml&quot;&gt;GLSL unpackSnorm4x8 man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::uvec4 glm::unpackU3x10_1x2(p)</p>\n<p>&lt;!--\n<em>syntax: glm::unpackU3x10_1x2(p)</em>\n<em>name: glm::unpackU3x10_1x2</em>\n<em>returns: glm::uvec4</em>\n_returns_description: _\n<em>parameters: glm::uint32 p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Unpacks a single 32-bit unsigned integer p into three 10-bit and one 2-bit unsigned integers.</p>\n<p>The first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint32 packU3x10_1x2(uvec4 const &amp; v)</p>\n<p><strong>See also</strong>: vec4 unpackSnorm3x10_1x2(uint32 const &amp; p);</p>\n<p><strong>See also</strong>: uvec4 unpackI3x10_1x2(uint32 const &amp; p);</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vecType&lt; floatType, P &gt; glm::unpackUnorm(uintType, &amp;v = P)</p>\n<p>&lt;!--\n<em>syntax: glm::unpackUnorm(uintType, &amp;v = P)</em>\n<em>name: glm::unpackUnorm</em>\n<em>returns: vecType&lt; floatType, P &gt;</em>\n_returns_description: _\n<em>parameters: const vecType&lt; uintType, P &gt; &amp;v=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Convert each unsigned integer components of a vector to normalized floating-point values.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vecType&lt;intType, P&gt; packUnorm(vecType&lt;floatType, P&gt; const &amp; v)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float glm::unpackUnorm1x16(p)</p>\n<p>&lt;!--\n<em>syntax: glm::unpackUnorm1x16(p)</em>\n<em>name: glm::unpackUnorm1x16</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: glm::uint16 p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>First, unpacks a single 16-bit unsigned integer p into a of 16-bit unsigned integers.\nThen, the value is converted to a normalized floating-point value to generate the returned scalar.</p>\n<p>The conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackUnorm1x16: f / 65535.0</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vec2 unpackUnorm2x16(uint32 p)</p>\n<p><strong>See also</strong>: vec4 unpackUnorm4x16(uint64 p)</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm2x16.xml&quot;&gt;GLSL unpackUnorm2x16 man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 glm::unpackUnorm1x5_1x6_1x5(p)</p>\n<p>&lt;!--\n<em>syntax: glm::unpackUnorm1x5_1x6_1x5(p)</em>\n<em>name: glm::unpackUnorm1x5_1x6_1x5</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n<em>parameters: glm::uint16 p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Convert each unsigned integer components of a vector to normalized floating-point values.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint16 packUnorm1x5_1x6_1x5(vec3 const &amp; v)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float glm::unpackUnorm1x8(p)</p>\n<p>&lt;!--\n<em>syntax: glm::unpackUnorm1x8(p)</em>\n<em>name: glm::unpackUnorm1x8</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: glm::uint8 p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Convert a single 8-bit integer to a normalized floating-point value.</p>\n<p>The conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackUnorm4x8: f / 255.0</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: vec2 unpackUnorm2x8(uint16 p)</p>\n<p><strong>See also</strong>: vec4 unpackUnorm4x8(uint32 p)</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm4x8.xml&quot;&gt;GLSL unpackUnorm4x8 man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 glm::unpackUnorm2x3_1x2(p)</p>\n<p>&lt;!--\n<em>syntax: glm::unpackUnorm2x3_1x2(p)</em>\n<em>name: glm::unpackUnorm2x3_1x2</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n<em>parameters: glm::uint8 p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Convert each unsigned integer components of a vector to normalized floating-point values.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint8 packUnorm2x3_1x2(vec3 const &amp; v)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec2 glm::unpackUnorm2x4(p)</p>\n<p>&lt;!--\n<em>syntax: glm::unpackUnorm2x4(p)</em>\n<em>name: glm::unpackUnorm2x4</em>\n<em>returns: glm::vec2</em>\n_returns_description: _\n<em>parameters: glm::uint8 p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Convert each unsigned integer components of a vector to normalized floating-point values.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint8 packUnorm2x4(vec2 const &amp; v)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec2 glm::unpackUnorm2x8(p)</p>\n<p>&lt;!--\n<em>syntax: glm::unpackUnorm2x8(p)</em>\n<em>name: glm::unpackUnorm2x8</em>\n<em>returns: glm::vec2</em>\n_returns_description: _\n<em>parameters: glm::uint16 p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>First, unpacks a single 16-bit unsigned integer p into a pair of 8-bit unsigned integers.\nThen, each component is converted to a normalized floating-point value to generate the returned two-component vector.</p>\n<p>The conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackUnorm4x8: f / 255.0</p>\n<p>The first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: float unpackUnorm1x8(uint8 v)</p>\n<p><strong>See also</strong>: vec4 unpackUnorm4x8(uint32 p)</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm4x8.xml&quot;&gt;GLSL unpackUnorm4x8 man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec4 glm::unpackUnorm3x10_1x2(p)</p>\n<p>&lt;!--\n<em>syntax: glm::unpackUnorm3x10_1x2(p)</em>\n<em>name: glm::unpackUnorm3x10_1x2</em>\n<em>returns: glm::vec4</em>\n_returns_description: _\n<em>parameters: glm::uint32 p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>First, unpacks a single 32-bit unsigned integer p into four 16-bit signed integers.\nThen, each component is converted to a normalized floating-point value to generate the returned four-component vector.</p>\n<p>The conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackSnorm3x10_1x2(xyz): clamp(f / 1023.0, 0, +1)\nunpackSnorm3x10_1x2(w): clamp(f / 3.0, 0, +1)</p>\n<p>The first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint32 packSnorm3x10_1x2(vec4 const &amp; v)</p>\n<p><strong>See also</strong>: vec4 unpackInorm3x10_1x2(uint32 const &amp; p))</p>\n<p><strong>See also</strong>: uvec4 unpackI3x10_1x2(uint32 const &amp; p)</p>\n<p><strong>See also</strong>: uvec4 unpackU3x10_1x2(uint32 const &amp; p)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec4 glm::unpackUnorm3x5_1x1(p)</p>\n<p>&lt;!--\n<em>syntax: glm::unpackUnorm3x5_1x1(p)</em>\n<em>name: glm::unpackUnorm3x5_1x1</em>\n<em>returns: glm::vec4</em>\n_returns_description: _\n<em>parameters: glm::uint16 p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Convert each unsigned integer components of a vector to normalized floating-point values.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint16 packUnorm3x5_1x1(vec4 const &amp; v)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec4 glm::unpackUnorm4x16(p)</p>\n<p>&lt;!--\n<em>syntax: glm::unpackUnorm4x16(p)</em>\n<em>name: glm::unpackUnorm4x16</em>\n<em>returns: glm::vec4</em>\n_returns_description: _\n<em>parameters: glm::uint64 p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>First, unpacks a single 64-bit unsigned integer p into four 16-bit unsigned integers.\nThen, each component is converted to a normalized floating-point value to generate the returned four-component vector.</p>\n<p>The conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackUnormx4x16: f / 65535.0</p>\n<p>The first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: float unpackUnorm1x16(uint16 p)</p>\n<p><strong>See also</strong>: vec2 unpackUnorm2x16(uint32 p)</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm2x16.xml&quot;&gt;GLSL unpackUnorm2x16 man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec4 glm::unpackUnorm4x4(p)</p>\n<p>&lt;!--\n<em>syntax: glm::unpackUnorm4x4(p)</em>\n<em>name: glm::unpackUnorm4x4</em>\n<em>returns: glm::vec4</em>\n_returns_description: _\n<em>parameters: glm::uint16 p</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Convert each unsigned integer components of a vector to normalized floating-point values.</p>\n<p><strong>See also</strong>: gtc_packing</p>\n<p><strong>See also</strong>: uint16 packUnorm4x4(vec4 const &amp; v)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#functions\n\n\n<!--\n_visible: True_\n_advanced: False_\n-->\n\n##Description\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint32 glm::packF2x11_1x10(&v)\n\n<!--\n_syntax: glm::packF2x11_1x10(&v)_\n_name: glm::packF2x11_1x10_\n_returns: glm::uint32_\n_returns_description: _\n_parameters: const glm::vec3 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, converts the first two components of the normalized floating-point value v into 11-bit signless floating-point values.\nThen, converts the third component of the normalized floating-point value v into a 10-bit signless floating-point value.\nThen, the results are packed into the returned 32-bit unsigned integer.\n\nThe first vector component specifies the 11 least-significant bits of the result;\nthe last component specifies the 10 most-significant bits.\n\n\n**See also**: gtc_packing\n\n**See also**: vec3 unpackF2x11_1x10(uint32 const & p)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint32 glm::packF3x9_E1x5(&v)\n\n<!--\n_syntax: glm::packF3x9_E1x5(&v)_\n_name: glm::packF3x9_E1x5_\n_returns: glm::uint32_\n_returns_description: _\n_parameters: const glm::vec3 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, converts the first two components of the normalized floating-point value v into 11-bit signless floating-point values.\nThen, converts the third component of the normalized floating-point value v into a 10-bit signless floating-point value.\nThen, the results are packed into the returned 32-bit unsigned integer.\n\nThe first vector component specifies the 11 least-significant bits of the result;\nthe last component specifies the 10 most-significant bits.\n\n\n**See also**: gtc_packing\n\n**See also**: vec3 unpackF3x9_E1x5(uint32 const & p)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< glm::uint16, P > glm::packHalf(float, &v = P)\n\n<!--\n_syntax: glm::packHalf(float, &v = P)_\n_name: glm::packHalf_\n_returns: vecType< glm::uint16, P >_\n_returns_description: _\n_parameters: const vecType< float, P > &v=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns an unsigned integer vector obtained by converting the components of a floating-point vector\nto the 16-bit floating-point representation found in the OpenGL Specification.\nThe first vector component specifies the 16 least-significant bits of the result;\nthe forth component specifies the 16 most-significant bits.\n\n\n**See also**: gtc_packing\n\n**See also**: vecType<float, P> unpackHalf(vecType<uint16, P> const & p)\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint16 glm::packHalf1x16(v)\n\n<!--\n_syntax: glm::packHalf1x16(v)_\n_name: glm::packHalf1x16_\n_returns: glm::uint16_\n_returns_description: _\n_parameters: float v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns an unsigned integer obtained by converting the components of a floating-point scalar\nto the 16-bit floating-point representation found in the OpenGL Specification,\nand then packing this 16-bit value into a 16-bit unsigned integer.\n\n\n**See also**: gtc_packing\n\n**See also**: uint32 packHalf2x16(vec2 const & v)\n\n**See also**: uint64 packHalf4x16(vec4 const & v)\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/packHalf2x16.xml\">GLSL packHalf2x16 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint64 glm::packHalf4x16(&v)\n\n<!--\n_syntax: glm::packHalf4x16(&v)_\n_name: glm::packHalf4x16_\n_returns: glm::uint64_\n_returns_description: _\n_parameters: const glm::vec4 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns an unsigned integer obtained by converting the components of a four-component floating-point vector\nto the 16-bit floating-point representation found in the OpenGL Specification,\nand then packing these four 16-bit values into a 64-bit unsigned integer.\nThe first vector component specifies the 16 least-significant bits of the result;\nthe forth component specifies the 16 most-significant bits.\n\n\n**See also**: gtc_packing\n\n**See also**: uint16 packHalf1x16(float const & v)\n\n**See also**: uint32 packHalf2x16(vec2 const & v)\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/packHalf2x16.xml\">GLSL packHalf2x16 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint32 glm::packI3x10_1x2(&v)\n\n<!--\n_syntax: glm::packI3x10_1x2(&v)_\n_name: glm::packI3x10_1x2_\n_returns: glm::uint32_\n_returns_description: _\n_parameters: const glm::ivec4 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns an unsigned integer obtained by converting the components of a four-component signed integer vector\nto the 10-10-10-2-bit signed integer representation found in the OpenGL Specification,\nand then packing these four values into a 32-bit unsigned integer.\nThe first vector component specifies the 10 least-significant bits of the result;\nthe forth component specifies the 2 most-significant bits.\n\n\n**See also**: gtc_packing\n\n**See also**: uint32 packI3x10_1x2(uvec4 const & v)\n\n**See also**: uint32 packSnorm3x10_1x2(vec4 const & v)\n\n**See also**: uint32 packUnorm3x10_1x2(vec4 const & v)\n\n**See also**: ivec4 unpackI3x10_1x2(uint32 const & p)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< intType, P > glm::packSnorm(floatType, &v = P)\n\n<!--\n_syntax: glm::packSnorm(floatType, &v = P)_\n_name: glm::packSnorm_\n_returns: vecType< intType, P >_\n_returns_description: _\n_parameters: const vecType< floatType, P > &v=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert each component of the normalized floating-point vector into signed integer values.\n\n\n**See also**: gtc_packing\n\n**See also**: vecType<floatType, P> unpackSnorm(vecType<intType, P> const & p);\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint16 glm::packSnorm1x16(v)\n\n<!--\n_syntax: glm::packSnorm1x16(v)_\n_name: glm::packSnorm1x16_\n_returns: glm::uint16_\n_returns_description: _\n_parameters: float v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, converts the normalized floating-point value v into 16-bit integer value.\nThen, the results are packed into the returned 16-bit unsigned integer.\n\nThe conversion to fixed point is done as follows:\npackSnorm1x8:\tround(clamp(s, -1, +1) * 32767.0)\n\n\n**See also**: gtc_packing\n\n**See also**: uint32 packSnorm2x16(vec2 const & v)\n\n**See also**: uint64 packSnorm4x16(vec4 const & v)\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/packSnorm4x8.xml\">GLSL packSnorm4x8 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint8 glm::packSnorm1x8(s)\n\n<!--\n_syntax: glm::packSnorm1x8(s)_\n_name: glm::packSnorm1x8_\n_returns: glm::uint8_\n_returns_description: _\n_parameters: float s_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, converts the normalized floating-point value v into 8-bit integer value.\nThen, the results are packed into the returned 8-bit unsigned integer.\n\nThe conversion to fixed point is done as follows:\npackSnorm1x8:\tround(clamp(s, -1, +1) * 127.0)\n\n\n**See also**: gtc_packing\n\n**See also**: uint16 packSnorm2x8(vec2 const & v)\n\n**See also**: uint32 packSnorm4x8(vec4 const & v)\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/packSnorm4x8.xml\">GLSL packSnorm4x8 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint16 glm::packSnorm2x8(&v)\n\n<!--\n_syntax: glm::packSnorm2x8(&v)_\n_name: glm::packSnorm2x8_\n_returns: glm::uint16_\n_returns_description: _\n_parameters: const glm::vec2 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, converts each component of the normalized floating-point value v into 8-bit integer values.\nThen, the results are packed into the returned 16-bit unsigned integer.\n\nThe conversion for component c of v to fixed point is done as follows:\npackSnorm2x8:\tround(clamp(c, -1, +1) * 127.0)\n\nThe first component of the vector will be written to the least significant bits of the output;\nthe last component will be written to the most significant bits.\n\n\n**See also**: gtc_packing\n\n**See also**: uint8 packSnorm1x8(float const & v)\n\n**See also**: uint32 packSnorm4x8(vec4 const & v)\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/packSnorm4x8.xml\">GLSL packSnorm4x8 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint32 glm::packSnorm3x10_1x2(&v)\n\n<!--\n_syntax: glm::packSnorm3x10_1x2(&v)_\n_name: glm::packSnorm3x10_1x2_\n_returns: glm::uint32_\n_returns_description: _\n_parameters: const glm::vec4 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, converts the first three components of the normalized floating-point value v into 10-bit signed integer values.\nThen, converts the forth component of the normalized floating-point value v into 2-bit signed integer values.\nThen, the results are packed into the returned 32-bit unsigned integer.\n\nThe conversion for component c of v to fixed point is done as follows:\npackSnorm3x10_1x2(xyz):\tround(clamp(c, -1, +1) * 511.0)\npackSnorm3x10_1x2(w):\tround(clamp(c, -1, +1) * 1.0)\n\nThe first vector component specifies the 10 least-significant bits of the result;\nthe forth component specifies the 2 most-significant bits.\n\n\n**See also**: gtc_packing\n\n**See also**: vec4 unpackSnorm3x10_1x2(uint32 const & p)\n\n**See also**: uint32 packUnorm3x10_1x2(vec4 const & v)\n\n**See also**: uint32 packU3x10_1x2(uvec4 const & v)\n\n**See also**: uint32 packI3x10_1x2(ivec4 const & v)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint64 glm::packSnorm4x16(&v)\n\n<!--\n_syntax: glm::packSnorm4x16(&v)_\n_name: glm::packSnorm4x16_\n_returns: glm::uint64_\n_returns_description: _\n_parameters: const glm::vec4 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, converts each component of the normalized floating-point value v into 16-bit integer values.\nThen, the results are packed into the returned 64-bit unsigned integer.\n\nThe conversion for component c of v to fixed point is done as follows:\npackSnorm2x8:\tround(clamp(c, -1, +1) * 32767.0)\n\nThe first component of the vector will be written to the least significant bits of the output;\nthe last component will be written to the most significant bits.\n\n\n**See also**: gtc_packing\n\n**See also**: uint16 packSnorm1x16(float const & v)\n\n**See also**: uint32 packSnorm2x16(vec2 const & v)\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/packSnorm4x8.xml\">GLSL packSnorm4x8 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint32 glm::packU3x10_1x2(&v)\n\n<!--\n_syntax: glm::packU3x10_1x2(&v)_\n_name: glm::packU3x10_1x2_\n_returns: glm::uint32_\n_returns_description: _\n_parameters: const glm::uvec4 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns an unsigned integer obtained by converting the components of a four-component unsigned integer vector\nto the 10-10-10-2-bit unsigned integer representation found in the OpenGL Specification,\nand then packing these four values into a 32-bit unsigned integer.\nThe first vector component specifies the 10 least-significant bits of the result;\nthe forth component specifies the 2 most-significant bits.\n\n\n**See also**: gtc_packing\n\n**See also**: uint32 packI3x10_1x2(ivec4 const & v)\n\n**See also**: uint32 packSnorm3x10_1x2(vec4 const & v)\n\n**See also**: uint32 packUnorm3x10_1x2(vec4 const & v)\n\n**See also**: ivec4 unpackU3x10_1x2(uint32 const & p)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< uintType, P > glm::packUnorm(floatType, &v = P)\n\n<!--\n_syntax: glm::packUnorm(floatType, &v = P)_\n_name: glm::packUnorm_\n_returns: vecType< uintType, P >_\n_returns_description: _\n_parameters: const vecType< floatType, P > &v=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert each component of the normalized floating-point vector into unsigned integer values.\n\n\n**See also**: gtc_packing\n\n**See also**: vecType<floatType, P> unpackUnorm(vecType<intType, P> const & p);\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint16 glm::packUnorm1x16(v)\n\n<!--\n_syntax: glm::packUnorm1x16(v)_\n_name: glm::packUnorm1x16_\n_returns: glm::uint16_\n_returns_description: _\n_parameters: float v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, converts the normalized floating-point value v into a 16-bit integer value.\nThen, the results are packed into the returned 16-bit unsigned integer.\n\nThe conversion for component c of v to fixed point is done as follows:\npackUnorm1x16:\tround(clamp(c, 0, +1) * 65535.0)\n\n\n**See also**: gtc_packing\n\n**See also**: uint16 packSnorm1x16(float const & v)\n\n**See also**: uint64 packSnorm4x16(vec4 const & v)\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/packUnorm4x8.xml\">GLSL packUnorm4x8 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint16 glm::packUnorm1x5_1x6_1x5(&v)\n\n<!--\n_syntax: glm::packUnorm1x5_1x6_1x5(&v)_\n_name: glm::packUnorm1x5_1x6_1x5_\n_returns: glm::uint16_\n_returns_description: _\n_parameters: const glm::vec3 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert each component of the normalized floating-point vector into unsigned integer values.\n\n\n**See also**: gtc_packing\n\n**See also**: vec3 unpackUnorm1x5_1x6_1x5(uint16 p)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint8 glm::packUnorm1x8(v)\n\n<!--\n_syntax: glm::packUnorm1x8(v)_\n_name: glm::packUnorm1x8_\n_returns: glm::uint8_\n_returns_description: _\n_parameters: float v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, converts the normalized floating-point value v into a 8-bit integer value.\nThen, the results are packed into the returned 8-bit unsigned integer.\n\nThe conversion for component c of v to fixed point is done as follows:\npackUnorm1x8:\tround(clamp(c, 0, +1) * 255.0)\n\n\n**See also**: gtc_packing\n\n**See also**: uint16 packUnorm2x8(vec2 const & v)\n\n**See also**: uint32 packUnorm4x8(vec4 const & v)\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/packUnorm4x8.xml\">GLSL packUnorm4x8 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint8 glm::packUnorm2x3_1x2(&v)\n\n<!--\n_syntax: glm::packUnorm2x3_1x2(&v)_\n_name: glm::packUnorm2x3_1x2_\n_returns: glm::uint8_\n_returns_description: _\n_parameters: const glm::vec3 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert each component of the normalized floating-point vector into unsigned integer values.\n\n\n**See also**: gtc_packing\n\n**See also**: vec3 unpackUnorm2x3_1x2(uint8 p)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint8 glm::packUnorm2x4(&v)\n\n<!--\n_syntax: glm::packUnorm2x4(&v)_\n_name: glm::packUnorm2x4_\n_returns: glm::uint8_\n_returns_description: _\n_parameters: const glm::vec2 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert each component of the normalized floating-point vector into unsigned integer values.\n\n\n**See also**: gtc_packing\n\n**See also**: vec2 unpackUnorm2x4(uint8 p)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint16 glm::packUnorm2x8(&v)\n\n<!--\n_syntax: glm::packUnorm2x8(&v)_\n_name: glm::packUnorm2x8_\n_returns: glm::uint16_\n_returns_description: _\n_parameters: const glm::vec2 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, converts each component of the normalized floating-point value v into 8-bit integer values.\nThen, the results are packed into the returned 16-bit unsigned integer.\n\nThe conversion for component c of v to fixed point is done as follows:\npackUnorm2x8:\tround(clamp(c, 0, +1) * 255.0)\n\nThe first component of the vector will be written to the least significant bits of the output;\nthe last component will be written to the most significant bits.\n\n\n**See also**: gtc_packing\n\n**See also**: uint8 packUnorm1x8(float const & v)\n\n**See also**: uint32 packUnorm4x8(vec4 const & v)\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/packUnorm4x8.xml\">GLSL packUnorm4x8 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint32 glm::packUnorm3x10_1x2(&v)\n\n<!--\n_syntax: glm::packUnorm3x10_1x2(&v)_\n_name: glm::packUnorm3x10_1x2_\n_returns: glm::uint32_\n_returns_description: _\n_parameters: const glm::vec4 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, converts the first three components of the normalized floating-point value v into 10-bit unsigned integer values.\nThen, converts the forth component of the normalized floating-point value v into 2-bit signed uninteger values.\nThen, the results are packed into the returned 32-bit unsigned integer.\n\nThe conversion for component c of v to fixed point is done as follows:\npackUnorm3x10_1x2(xyz):\tround(clamp(c, 0, +1) * 1023.0)\npackUnorm3x10_1x2(w):\tround(clamp(c, 0, +1) * 3.0)\n\nThe first vector component specifies the 10 least-significant bits of the result;\nthe forth component specifies the 2 most-significant bits.\n\n\n**See also**: gtc_packing\n\n**See also**: vec4 unpackUnorm3x10_1x2(uint32 const & p)\n\n**See also**: uint32 packUnorm3x10_1x2(vec4 const & v)\n\n**See also**: uint32 packU3x10_1x2(uvec4 const & v)\n\n**See also**: uint32 packI3x10_1x2(ivec4 const & v)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint16 glm::packUnorm3x5_1x1(&v)\n\n<!--\n_syntax: glm::packUnorm3x5_1x1(&v)_\n_name: glm::packUnorm3x5_1x1_\n_returns: glm::uint16_\n_returns_description: _\n_parameters: const glm::vec4 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert each component of the normalized floating-point vector into unsigned integer values.\n\n\n**See also**: gtc_packing\n\n**See also**: vec4 unpackUnorm3x5_1x1(uint16 p)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint64 glm::packUnorm4x16(&v)\n\n<!--\n_syntax: glm::packUnorm4x16(&v)_\n_name: glm::packUnorm4x16_\n_returns: glm::uint64_\n_returns_description: _\n_parameters: const glm::vec4 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, converts each component of the normalized floating-point value v into 16-bit integer values.\nThen, the results are packed into the returned 64-bit unsigned integer.\n\nThe conversion for component c of v to fixed point is done as follows:\npackUnorm4x16:\tround(clamp(c, 0, +1) * 65535.0)\n\nThe first component of the vector will be written to the least significant bits of the output;\nthe last component will be written to the most significant bits.\n\n\n**See also**: gtc_packing\n\n**See also**: uint16 packUnorm1x16(float const & v)\n\n**See also**: uint32 packUnorm2x16(vec2 const & v)\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/packUnorm4x8.xml\">GLSL packUnorm4x8 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint16 glm::packUnorm4x4(&v)\n\n<!--\n_syntax: glm::packUnorm4x4(&v)_\n_name: glm::packUnorm4x4_\n_returns: glm::uint16_\n_returns_description: _\n_parameters: const glm::vec4 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert each component of the normalized floating-point vector into unsigned integer values.\n\n\n**See also**: gtc_packing\n\n**See also**: vec4 unpackUnorm4x4(uint16 p)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 glm::unpackF2x11_1x10(p)\n\n<!--\n_syntax: glm::unpackF2x11_1x10(p)_\n_name: glm::unpackF2x11_1x10_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: glm::uint32 p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, unpacks a single 32-bit unsigned integer p into two 11-bit signless floating-point values and one 10-bit signless floating-point value .\nThen, each component is converted to a normalized floating-point value to generate the returned three-component vector.\n\nThe first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.\n\n\n**See also**: gtc_packing\n\n**See also**: uint32 packF2x11_1x10(vec3 const & v)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 glm::unpackF3x9_E1x5(p)\n\n<!--\n_syntax: glm::unpackF3x9_E1x5(p)_\n_name: glm::unpackF3x9_E1x5_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: glm::uint32 p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, unpacks a single 32-bit unsigned integer p into two 11-bit signless floating-point values and one 10-bit signless floating-point value .\nThen, each component is converted to a normalized floating-point value to generate the returned three-component vector.\n\nThe first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.\n\n\n**See also**: gtc_packing\n\n**See also**: uint32 packF3x9_E1x5(vec3 const & v)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< float, P > glm::unpackHalf(glm::uint16, &p = P)\n\n<!--\n_syntax: glm::unpackHalf(glm::uint16, &p = P)_\n_name: glm::unpackHalf_\n_returns: vecType< float, P >_\n_returns_description: _\n_parameters: const vecType< glm::uint16, P > &p=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a floating-point vector with components obtained by reinterpreting an integer vector as 16-bit floating-point numbers and converting them to 32-bit floating-point values.\nThe first component of the vector is obtained from the 16 least-significant bits of v;\nthe forth component is obtained from the 16 most-significant bits of v.\n\n\n**See also**: gtc_packing\n\n**See also**: vecType<uint16, P> packHalf(vecType<float, P> const & v)\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float glm::unpackHalf1x16(v)\n\n<!--\n_syntax: glm::unpackHalf1x16(v)_\n_name: glm::unpackHalf1x16_\n_returns: float_\n_returns_description: _\n_parameters: glm::uint16 v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a floating-point scalar with components obtained by unpacking a 16-bit unsigned integer into a 16-bit value,\ninterpreted as a 16-bit floating-point number according to the OpenGL Specification,\nand converting it to 32-bit floating-point values.\n\n\n**See also**: gtc_packing\n\n**See also**: vec2 unpackHalf2x16(uint32 const & v)\n\n**See also**: vec4 unpackHalf4x16(uint64 const & v)\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackHalf2x16.xml\">GLSL unpackHalf2x16 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec4 glm::unpackHalf4x16(p)\n\n<!--\n_syntax: glm::unpackHalf4x16(p)_\n_name: glm::unpackHalf4x16_\n_returns: glm::vec4_\n_returns_description: _\n_parameters: glm::uint64 p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a four-component floating-point vector with components obtained by unpacking a 64-bit unsigned integer into four 16-bit values,\ninterpreting those values as 16-bit floating-point numbers according to the OpenGL Specification,\nand converting them to 32-bit floating-point values.\nThe first component of the vector is obtained from the 16 least-significant bits of v;\nthe forth component is obtained from the 16 most-significant bits of v.\n\n\n**See also**: gtc_packing\n\n**See also**: float unpackHalf1x16(uint16 const & v)\n\n**See also**: vec2 unpackHalf2x16(uint32 const & v)\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackHalf2x16.xml\">GLSL unpackHalf2x16 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::ivec4 glm::unpackI3x10_1x2(p)\n\n<!--\n_syntax: glm::unpackI3x10_1x2(p)_\n_name: glm::unpackI3x10_1x2_\n_returns: glm::ivec4_\n_returns_description: _\n_parameters: glm::uint32 p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nUnpacks a single 32-bit unsigned integer p into three 10-bit and one 2-bit signed integers.\n\nThe first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.\n\n\n**See also**: gtc_packing\n\n**See also**: uint32 packU3x10_1x2(uvec4 const & v)\n\n**See also**: vec4 unpackSnorm3x10_1x2(uint32 const & p);\n\n**See also**: uvec4 unpackI3x10_1x2(uint32 const & p);\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< floatType, P > glm::unpackSnorm(intType, &v = P)\n\n<!--\n_syntax: glm::unpackSnorm(intType, &v = P)_\n_name: glm::unpackSnorm_\n_returns: vecType< floatType, P >_\n_returns_description: _\n_parameters: const vecType< intType, P > &v=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert each signed integer components of a vector to normalized floating-point values.\n\n\n**See also**: gtc_packing\n\n**See also**: vecType<intType, P> packSnorm(vecType<floatType, P> const & v)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float glm::unpackSnorm1x16(p)\n\n<!--\n_syntax: glm::unpackSnorm1x16(p)_\n_name: glm::unpackSnorm1x16_\n_returns: float_\n_returns_description: _\n_parameters: glm::uint16 p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, unpacks a single 16-bit unsigned integer p into a single 16-bit signed integers.\nThen, each component is converted to a normalized floating-point value to generate the returned scalar.\n\nThe conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackSnorm1x16: clamp(f / 32767.0, -1, +1)\n\n\n**See also**: gtc_packing\n\n**See also**: vec2 unpackSnorm2x16(uint32 p)\n\n**See also**: vec4 unpackSnorm4x16(uint64 p)\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm1x16.xml\">GLSL unpackSnorm4x8 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float glm::unpackSnorm1x8(p)\n\n<!--\n_syntax: glm::unpackSnorm1x8(p)_\n_name: glm::unpackSnorm1x8_\n_returns: float_\n_returns_description: _\n_parameters: glm::uint8 p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, unpacks a single 8-bit unsigned integer p into a single 8-bit signed integers.\nThen, the value is converted to a normalized floating-point value to generate the returned scalar.\n\nThe conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackSnorm1x8: clamp(f / 127.0, -1, +1)\n\n\n**See also**: gtc_packing\n\n**See also**: vec2 unpackSnorm2x8(uint16 p)\n\n**See also**: vec4 unpackSnorm4x8(uint32 p)\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm4x8.xml\">GLSL unpackSnorm4x8 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec2 glm::unpackSnorm2x8(p)\n\n<!--\n_syntax: glm::unpackSnorm2x8(p)_\n_name: glm::unpackSnorm2x8_\n_returns: glm::vec2_\n_returns_description: _\n_parameters: glm::uint16 p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, unpacks a single 16-bit unsigned integer p into a pair of 8-bit signed integers.\nThen, each component is converted to a normalized floating-point value to generate the returned two-component vector.\n\nThe conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackSnorm2x8: clamp(f / 127.0, -1, +1)\n\nThe first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.\n\n\n**See also**: gtc_packing\n\n**See also**: float unpackSnorm1x8(uint8 p)\n\n**See also**: vec4 unpackSnorm4x8(uint32 p)\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm4x8.xml\">GLSL unpackSnorm4x8 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec4 glm::unpackSnorm3x10_1x2(p)\n\n<!--\n_syntax: glm::unpackSnorm3x10_1x2(p)_\n_name: glm::unpackSnorm3x10_1x2_\n_returns: glm::vec4_\n_returns_description: _\n_parameters: glm::uint32 p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, unpacks a single 32-bit unsigned integer p into four 16-bit signed integers.\nThen, each component is converted to a normalized floating-point value to generate the returned four-component vector.\n\nThe conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackSnorm3x10_1x2(xyz): clamp(f / 511.0, -1, +1)\nunpackSnorm3x10_1x2(w): clamp(f / 511.0, -1, +1)\n\nThe first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.\n\n\n**See also**: gtc_packing\n\n**See also**: uint32 packSnorm3x10_1x2(vec4 const & v)\n\n**See also**: vec4 unpackUnorm3x10_1x2(uint32 const & p))\n\n**See also**: uvec4 unpackI3x10_1x2(uint32 const & p)\n\n**See also**: uvec4 unpackU3x10_1x2(uint32 const & p)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec4 glm::unpackSnorm4x16(p)\n\n<!--\n_syntax: glm::unpackSnorm4x16(p)_\n_name: glm::unpackSnorm4x16_\n_returns: glm::vec4_\n_returns_description: _\n_parameters: glm::uint64 p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, unpacks a single 64-bit unsigned integer p into four 16-bit signed integers.\nThen, each component is converted to a normalized floating-point value to generate the returned four-component vector.\n\nThe conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackSnorm4x16: clamp(f / 32767.0, -1, +1)\n\nThe first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.\n\n\n**See also**: gtc_packing\n\n**See also**: float unpackSnorm1x16(uint16 p)\n\n**See also**: vec2 unpackSnorm2x16(uint32 p)\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm2x16.xml\">GLSL unpackSnorm4x8 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uvec4 glm::unpackU3x10_1x2(p)\n\n<!--\n_syntax: glm::unpackU3x10_1x2(p)_\n_name: glm::unpackU3x10_1x2_\n_returns: glm::uvec4_\n_returns_description: _\n_parameters: glm::uint32 p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nUnpacks a single 32-bit unsigned integer p into three 10-bit and one 2-bit unsigned integers.\n\nThe first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.\n\n\n**See also**: gtc_packing\n\n**See also**: uint32 packU3x10_1x2(uvec4 const & v)\n\n**See also**: vec4 unpackSnorm3x10_1x2(uint32 const & p);\n\n**See also**: uvec4 unpackI3x10_1x2(uint32 const & p);\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< floatType, P > glm::unpackUnorm(uintType, &v = P)\n\n<!--\n_syntax: glm::unpackUnorm(uintType, &v = P)_\n_name: glm::unpackUnorm_\n_returns: vecType< floatType, P >_\n_returns_description: _\n_parameters: const vecType< uintType, P > &v=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert each unsigned integer components of a vector to normalized floating-point values.\n\n\n**See also**: gtc_packing\n\n**See also**: vecType<intType, P> packUnorm(vecType<floatType, P> const & v)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float glm::unpackUnorm1x16(p)\n\n<!--\n_syntax: glm::unpackUnorm1x16(p)_\n_name: glm::unpackUnorm1x16_\n_returns: float_\n_returns_description: _\n_parameters: glm::uint16 p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, unpacks a single 16-bit unsigned integer p into a of 16-bit unsigned integers.\nThen, the value is converted to a normalized floating-point value to generate the returned scalar.\n\nThe conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackUnorm1x16: f / 65535.0\n\n\n**See also**: gtc_packing\n\n**See also**: vec2 unpackUnorm2x16(uint32 p)\n\n**See also**: vec4 unpackUnorm4x16(uint64 p)\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm2x16.xml\">GLSL unpackUnorm2x16 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 glm::unpackUnorm1x5_1x6_1x5(p)\n\n<!--\n_syntax: glm::unpackUnorm1x5_1x6_1x5(p)_\n_name: glm::unpackUnorm1x5_1x6_1x5_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: glm::uint16 p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert each unsigned integer components of a vector to normalized floating-point values.\n\n\n**See also**: gtc_packing\n\n**See also**: uint16 packUnorm1x5_1x6_1x5(vec3 const & v)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float glm::unpackUnorm1x8(p)\n\n<!--\n_syntax: glm::unpackUnorm1x8(p)_\n_name: glm::unpackUnorm1x8_\n_returns: float_\n_returns_description: _\n_parameters: glm::uint8 p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a single 8-bit integer to a normalized floating-point value.\n\nThe conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackUnorm4x8: f / 255.0\n\n\n**See also**: gtc_packing\n\n**See also**: vec2 unpackUnorm2x8(uint16 p)\n\n**See also**: vec4 unpackUnorm4x8(uint32 p)\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm4x8.xml\">GLSL unpackUnorm4x8 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 glm::unpackUnorm2x3_1x2(p)\n\n<!--\n_syntax: glm::unpackUnorm2x3_1x2(p)_\n_name: glm::unpackUnorm2x3_1x2_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: glm::uint8 p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert each unsigned integer components of a vector to normalized floating-point values.\n\n\n**See also**: gtc_packing\n\n**See also**: uint8 packUnorm2x3_1x2(vec3 const & v)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec2 glm::unpackUnorm2x4(p)\n\n<!--\n_syntax: glm::unpackUnorm2x4(p)_\n_name: glm::unpackUnorm2x4_\n_returns: glm::vec2_\n_returns_description: _\n_parameters: glm::uint8 p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert each unsigned integer components of a vector to normalized floating-point values.\n\n\n**See also**: gtc_packing\n\n**See also**: uint8 packUnorm2x4(vec2 const & v)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec2 glm::unpackUnorm2x8(p)\n\n<!--\n_syntax: glm::unpackUnorm2x8(p)_\n_name: glm::unpackUnorm2x8_\n_returns: glm::vec2_\n_returns_description: _\n_parameters: glm::uint16 p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, unpacks a single 16-bit unsigned integer p into a pair of 8-bit unsigned integers.\nThen, each component is converted to a normalized floating-point value to generate the returned two-component vector.\n\nThe conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackUnorm4x8: f / 255.0\n\nThe first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.\n\n\n**See also**: gtc_packing\n\n**See also**: float unpackUnorm1x8(uint8 v)\n\n**See also**: vec4 unpackUnorm4x8(uint32 p)\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm4x8.xml\">GLSL unpackUnorm4x8 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec4 glm::unpackUnorm3x10_1x2(p)\n\n<!--\n_syntax: glm::unpackUnorm3x10_1x2(p)_\n_name: glm::unpackUnorm3x10_1x2_\n_returns: glm::vec4_\n_returns_description: _\n_parameters: glm::uint32 p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, unpacks a single 32-bit unsigned integer p into four 16-bit signed integers.\nThen, each component is converted to a normalized floating-point value to generate the returned four-component vector.\n\nThe conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackSnorm3x10_1x2(xyz): clamp(f / 1023.0, 0, +1)\nunpackSnorm3x10_1x2(w): clamp(f / 3.0, 0, +1)\n\nThe first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.\n\n\n**See also**: gtc_packing\n\n**See also**: uint32 packSnorm3x10_1x2(vec4 const & v)\n\n**See also**: vec4 unpackInorm3x10_1x2(uint32 const & p))\n\n**See also**: uvec4 unpackI3x10_1x2(uint32 const & p)\n\n**See also**: uvec4 unpackU3x10_1x2(uint32 const & p)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec4 glm::unpackUnorm3x5_1x1(p)\n\n<!--\n_syntax: glm::unpackUnorm3x5_1x1(p)_\n_name: glm::unpackUnorm3x5_1x1_\n_returns: glm::vec4_\n_returns_description: _\n_parameters: glm::uint16 p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert each unsigned integer components of a vector to normalized floating-point values.\n\n\n**See also**: gtc_packing\n\n**See also**: uint16 packUnorm3x5_1x1(vec4 const & v)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec4 glm::unpackUnorm4x16(p)\n\n<!--\n_syntax: glm::unpackUnorm4x16(p)_\n_name: glm::unpackUnorm4x16_\n_returns: glm::vec4_\n_returns_description: _\n_parameters: glm::uint64 p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, unpacks a single 64-bit unsigned integer p into four 16-bit unsigned integers.\nThen, each component is converted to a normalized floating-point value to generate the returned four-component vector.\n\nThe conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackUnormx4x16: f / 65535.0\n\nThe first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.\n\n\n**See also**: gtc_packing\n\n**See also**: float unpackUnorm1x16(uint16 p)\n\n**See also**: vec2 unpackUnorm2x16(uint32 p)\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm2x16.xml\">GLSL unpackUnorm2x16 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec4 glm::unpackUnorm4x4(p)\n\n<!--\n_syntax: glm::unpackUnorm4x4(p)_\n_name: glm::unpackUnorm4x4_\n_returns: glm::vec4_\n_returns_description: _\n_parameters: glm::uint16 p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert each unsigned integer components of a vector to normalized floating-point values.\n\n\n**See also**: gtc_packing\n\n**See also**: uint16 packUnorm4x4(vec4 const & v)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}