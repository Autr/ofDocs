{"entry":{"name":"ofQuaternion","filename":"ofQuaternion.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/math/ofQuaternion.markdown","path":"/documentation/math/ofQuaternion","route":"/documentation/math/ofQuaternion.markdown","dir":"../ofSite/documentation/math","ext":"markdown","type":"page","id":415,"parent":406,"breadcrumbs":[406,1],"siblings":[],"translations":{}},"description":{"short":"","full":"<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"asVec3()","name":"asVec3","returns":"ofVec3f","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"asVec4()","name":"asVec4","returns":"ofVec4f","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"conj()","name":"conj","returns":"ofQuaternion","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Conjugate</p>\n","desc":""},{"syntax":"get(&matrix)","name":"get","returns":"void","returns_description":null,"parameters":"ofMatrix4x4 <span class=\"token operator\">&amp;</span>matrix","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getEuler()","name":"getEuler","returns":"ofVec3f","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Calculate and return the rotation as euler angles</p>\n","desc":""},{"syntax":"getRotate(&angle, &vec)","name":"getRotate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>angle<span class=\"token punctuation\">,</span> ofVec3f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getRotate(&angle, &x, &y, &z)","name":"getRotate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Return the angle and vector components represented by the quaternion.</p>\n","desc":""},{"syntax":"inverse()","name":"inverse","returns":"const ofQuaternion","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Multiplicative inverse method</p>\n<pre><code>q<span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> q<span class=\"token operator\">^</span><span class=\"token operator\">*</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>q<span class=\"token operator\">^</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n</code></pre>\n","desc":""},{"syntax":"length()","name":"length","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Length of the quaternion = sqrt(vec . vec)</p>\n","desc":""},{"syntax":"length2()","name":"length2","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Length of the quaternion = vec . vec</p>\n","desc":""},{"syntax":"makeRotate(&vec1, &vec2)","name":"makeRotate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec2","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Make a rotation Quat which will rotate vec1 to vec2.\nGenerally take a dot product to get the angle between these\nand then use a cross product to get the rotation axis\nWatch out for the two special cases when the vectors\nare co-incident or opposite in direction.</p>\n","desc":""},{"syntax":"makeRotate(angle, &vec)","name":"makeRotate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"makeRotate(angle, x, y, z)","name":"makeRotate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\briefSet a quaternion which will perform a rotation of an\nangle around the axis given by the vector(x,y,z).</p>\n<p>Define Spherical Linear interpolation method also</p>\n","desc":""},{"syntax":"makeRotate(angle1, &axis1, angle2, &axis2, angle3, &axis3)","name":"makeRotate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>axis1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angle2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>axis2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angle3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>axis3","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"makeRotate_original(&vec1, &vec2)","name":"makeRotate_original","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec2","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"normalize()","name":"normalize","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofQuaternion(&q)","name":"ofQuaternion","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>q","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofQuaternion(&v)","name":"ofQuaternion","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofQuaternion()","name":"ofQuaternion","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\name Constructor\n{</p>\n","desc":""},{"syntax":"ofQuaternion(angle, &axis)","name":"ofQuaternion","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>axis","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofQuaternion(angle1, &axis1, angle2, &axis2, angle3, &axis3)","name":"ofQuaternion","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>axis1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angle2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>axis2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angle3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>axis3","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofQuaternion(x, y, z, w)","name":"ofQuaternion","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator!=(&q)","name":"operator!=","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofQuaternion <span class=\"token operator\">&amp;</span>q","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator*(&rhs)","name":"operator*","returns":"const ofQuaternion","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofQuaternion <span class=\"token operator\">&amp;</span>rhs","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator*(&v)","name":"operator*","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator*(rhs)","name":"operator*","returns":"const ofQuaternion","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> rhs","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator*=(&rhs)","name":"operator*=","returns":"ofQuaternion &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofQuaternion <span class=\"token operator\">&amp;</span>rhs","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator*=(rhs)","name":"operator*=","returns":"ofQuaternion &","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> rhs","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator+(&rhs)","name":"operator+","returns":"const ofQuaternion","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofQuaternion <span class=\"token operator\">&amp;</span>rhs","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator+=(&rhs)","name":"operator+=","returns":"ofQuaternion &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofQuaternion <span class=\"token operator\">&amp;</span>rhs","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator-(&rhs)","name":"operator-","returns":"const ofQuaternion","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofQuaternion <span class=\"token operator\">&amp;</span>rhs","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator-()","name":"operator-","returns":"const ofQuaternion","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator-=(&rhs)","name":"operator-=","returns":"ofQuaternion &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofQuaternion <span class=\"token operator\">&amp;</span>rhs","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator/(&denom)","name":"operator/","returns":"const ofQuaternion","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofQuaternion <span class=\"token operator\">&amp;</span>denom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator/(rhs)","name":"operator/","returns":"ofQuaternion","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> rhs","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator/=(&denom)","name":"operator/=","returns":"ofQuaternion &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofQuaternion <span class=\"token operator\">&amp;</span>denom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator/=(rhs)","name":"operator/=","returns":"ofQuaternion &","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> rhs","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator=(&q)","name":"operator=","returns":"ofQuaternion &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofQuaternion <span class=\"token operator\">&amp;</span>q","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\name Operators\n{</p>\n","desc":""},{"syntax":"operator==(&q)","name":"operator==","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofQuaternion <span class=\"token operator\">&amp;</span>q","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator[](i)","name":"operator[]","returns":"float &","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> i","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\name Getters\n{</p>\n","desc":""},{"syntax":"operator[](i)","name":"operator[]","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> i","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"set(&matrix)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMatrix4x4 <span class=\"token operator\">&amp;</span>matrix","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"set(&v)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"set(x, y, z, w)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\name Setters\n{</p>\n","desc":""},{"syntax":"slerp(t, &from, &to)","name":"slerp","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofQuaternion <span class=\"token operator\">&amp;</span>from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofQuaternion <span class=\"token operator\">&amp;</span>to","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Spherical Linear Interpolation.</p>\n<p>As t goes from 0 to 1, the Quat object goes from &quot;from&quot; to &quot;to&quot;.</p>\n","desc":""},{"syntax":"w()","name":"w","returns":"float &","returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"w()","name":"w","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"x()","name":"x","returns":"float &","returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"x()","name":"x","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"y()","name":"y","returns":"float &","returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"y()","name":"y","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"z()","name":"z","returns":"float &","returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"z()","name":"z","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"zeroRotation()","name":"zeroRotation","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>return true if the Quat represents a zero rotation,\nand therefore can be ignored in computations.</p>\n","desc":""},{"name":"_v","type":"ofVec4f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\cond INTERNAL</p>\n","desc":""},{}],"document":"<p>#class ofQuaternion</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n_extends: _\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>##Description</p>\n<p>##Methods</p>\n<p>###ofVec3f asVec3()</p>\n<p>&lt;!--\n<em>syntax: asVec3()</em>\n<em>name: asVec3</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f asVec4()</p>\n<p>&lt;!--\n<em>syntax: asVec4()</em>\n<em>name: asVec4</em>\n<em>returns: ofVec4f</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofQuaternion conj()</p>\n<p>&lt;!--\n<em>syntax: conj()</em>\n<em>name: conj</em>\n<em>returns: ofQuaternion</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Conjugate</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void get(&amp;matrix)</p>\n<p>&lt;!--\n<em>syntax: get(&amp;matrix)</em>\n<em>name: get</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofMatrix4x4 &amp;matrix</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f getEuler()</p>\n<p>&lt;!--\n<em>syntax: getEuler()</em>\n<em>name: getEuler</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Calculate and return the rotation as euler angles</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void getRotate(&amp;angle, &amp;vec)</p>\n<p>&lt;!--\n<em>syntax: getRotate(&amp;angle, &amp;vec)</em>\n<em>name: getRotate</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float &amp;angle, ofVec3f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void getRotate(&amp;angle, &amp;x, &amp;y, &amp;z)</p>\n<p>&lt;!--\n<em>syntax: getRotate(&amp;angle, &amp;x, &amp;y, &amp;z)</em>\n<em>name: getRotate</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float &amp;angle, float &amp;x, float &amp;y, float &amp;z</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return the angle and vector components represented by the quaternion.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const ofQuaternion inverse()</p>\n<p>&lt;!--\n<em>syntax: inverse()</em>\n<em>name: inverse</em>\n<em>returns: const ofQuaternion</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Multiplicative inverse method</p>\n<pre><code>q<span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> q<span class=\"token operator\">^</span><span class=\"token operator\">*</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>q<span class=\"token operator\">^</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float length()</p>\n<p>&lt;!--\n<em>syntax: length()</em>\n<em>name: length</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Length of the quaternion = sqrt(vec . vec)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float length2()</p>\n<p>&lt;!--\n<em>syntax: length2()</em>\n<em>name: length2</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Length of the quaternion = vec . vec</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void makeRotate(&amp;vec1, &amp;vec2)</p>\n<p>&lt;!--\n<em>syntax: makeRotate(&amp;vec1, &amp;vec2)</em>\n<em>name: makeRotate</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;vec1, const ofVec3f &amp;vec2</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Make a rotation Quat which will rotate vec1 to vec2.\nGenerally take a dot product to get the angle between these\nand then use a cross product to get the rotation axis\nWatch out for the two special cases when the vectors\nare co-incident or opposite in direction.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void makeRotate(angle, &amp;vec)</p>\n<p>&lt;!--\n<em>syntax: makeRotate(angle, &amp;vec)</em>\n<em>name: makeRotate</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float angle, const ofVec3f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void makeRotate(angle, x, y, z)</p>\n<p>&lt;!--\n<em>syntax: makeRotate(angle, x, y, z)</em>\n<em>name: makeRotate</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float angle, float x, float y, float z</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\briefSet a quaternion which will perform a rotation of an\nangle around the axis given by the vector(x,y,z).</p>\n<p>Define Spherical Linear interpolation method also</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void makeRotate(angle1, &amp;axis1, angle2, &amp;axis2, angle3, &amp;axis3)</p>\n<p>&lt;!--\n<em>syntax: makeRotate(angle1, &amp;axis1, angle2, &amp;axis2, angle3, &amp;axis3)</em>\n<em>name: makeRotate</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float angle1, const ofVec3f &amp;axis1, float angle2, const ofVec3f &amp;axis2, float angle3, const ofVec3f &amp;axis3</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void makeRotate_original(&amp;vec1, &amp;vec2)</p>\n<p>&lt;!--\n<em>syntax: makeRotate_original(&amp;vec1, &amp;vec2)</em>\n<em>name: makeRotate_original</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;vec1, const ofVec3f &amp;vec2</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void normalize()</p>\n<p>&lt;!--\n<em>syntax: normalize()</em>\n<em>name: normalize</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofQuaternion(&amp;q)</h3>\n<p>&lt;!--\n<em>syntax: ofQuaternion(&amp;q)</em>\n<em>name: ofQuaternion</em>\n_returns: _\n_returns_description: _\n<em>parameters: const glm::quat &amp;q</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofQuaternion(&amp;v)</h3>\n<p>&lt;!--\n<em>syntax: ofQuaternion(&amp;v)</em>\n<em>name: ofQuaternion</em>\n_returns: _\n_returns_description: _\n<em>parameters: const ofVec4f &amp;v</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofQuaternion()</h3>\n<p>&lt;!--\n<em>syntax: ofQuaternion()</em>\n<em>name: ofQuaternion</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Constructor\n{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofQuaternion(angle, &amp;axis)</h3>\n<p>&lt;!--\n<em>syntax: ofQuaternion(angle, &amp;axis)</em>\n<em>name: ofQuaternion</em>\n_returns: _\n_returns_description: _\n<em>parameters: float angle, const ofVec3f &amp;axis</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofQuaternion(angle1, &amp;axis1, angle2, &amp;axis2, angle3, &amp;axis3)</h3>\n<p>&lt;!--\n<em>syntax: ofQuaternion(angle1, &amp;axis1, angle2, &amp;axis2, angle3, &amp;axis3)</em>\n<em>name: ofQuaternion</em>\n_returns: _\n_returns_description: _\n<em>parameters: float angle1, const ofVec3f &amp;axis1, float angle2, const ofVec3f &amp;axis2, float angle3, const ofVec3f &amp;axis3</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofQuaternion(x, y, z, w)</h3>\n<p>&lt;!--\n<em>syntax: ofQuaternion(x, y, z, w)</em>\n<em>name: ofQuaternion</em>\n_returns: _\n_returns_description: _\n<em>parameters: float x, float y, float z, float w</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool operator!=(&amp;q)</p>\n<p>&lt;!--\n<em>syntax: operator!=(&amp;q)</em>\n<em>name: operator!=</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofQuaternion &amp;q</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const ofQuaternion operator*(&amp;rhs)</p>\n<p>&lt;!--\n<em>syntax: operator*(&amp;rhs)</em>\n<em>name: operator*</em>\n<em>returns: const ofQuaternion</em>\n_returns_description: _\n<em>parameters: const ofQuaternion &amp;rhs</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f operator*(&amp;v)</p>\n<p>&lt;!--\n<em>syntax: operator*(&amp;v)</em>\n<em>name: operator*</em>\n<em>returns: ofVec3f</em>\n_returns_description: _\n<em>parameters: const ofVec3f &amp;v</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const ofQuaternion operator*(rhs)</p>\n<p>&lt;!--\n<em>syntax: operator*(rhs)</em>\n<em>name: operator*</em>\n<em>returns: const ofQuaternion</em>\n_returns_description: _\n<em>parameters: float rhs</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofQuaternion &amp; operator*=(&amp;rhs)</p>\n<p>&lt;!--\n<em>syntax: operator*=(&amp;rhs)</em>\n<em>name: operator*=</em>\n<em>returns: ofQuaternion &amp;</em>\n_returns_description: _\n<em>parameters: const ofQuaternion &amp;rhs</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofQuaternion &amp; operator*=(rhs)</p>\n<p>&lt;!--\n<em>syntax: operator*=(rhs)</em>\n<em>name: operator*=</em>\n<em>returns: ofQuaternion &amp;</em>\n_returns_description: _\n<em>parameters: float rhs</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const ofQuaternion operator+(&amp;rhs)</p>\n<p>&lt;!--\n<em>syntax: operator+(&amp;rhs)</em>\n<em>name: operator+</em>\n<em>returns: const ofQuaternion</em>\n_returns_description: _\n<em>parameters: const ofQuaternion &amp;rhs</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofQuaternion &amp; operator+=(&amp;rhs)</p>\n<p>&lt;!--\n<em>syntax: operator+=(&amp;rhs)</em>\n<em>name: operator+=</em>\n<em>returns: ofQuaternion &amp;</em>\n_returns_description: _\n<em>parameters: const ofQuaternion &amp;rhs</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const ofQuaternion operator-(&amp;rhs)</p>\n<p>&lt;!--\n<em>syntax: operator-(&amp;rhs)</em>\n<em>name: operator-</em>\n<em>returns: const ofQuaternion</em>\n_returns_description: _\n<em>parameters: const ofQuaternion &amp;rhs</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const ofQuaternion operator-()</p>\n<p>&lt;!--\n<em>syntax: operator-()</em>\n<em>name: operator-</em>\n<em>returns: const ofQuaternion</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofQuaternion &amp; operator-=(&amp;rhs)</p>\n<p>&lt;!--\n<em>syntax: operator-=(&amp;rhs)</em>\n<em>name: operator-=</em>\n<em>returns: ofQuaternion &amp;</em>\n_returns_description: _\n<em>parameters: const ofQuaternion &amp;rhs</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const ofQuaternion operator/(&amp;denom)</p>\n<p>&lt;!--\n<em>syntax: operator/(&amp;denom)</em>\n<em>name: operator/</em>\n<em>returns: const ofQuaternion</em>\n_returns_description: _\n<em>parameters: const ofQuaternion &amp;denom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofQuaternion operator/(rhs)</p>\n<p>&lt;!--\n<em>syntax: operator/(rhs)</em>\n<em>name: operator/</em>\n<em>returns: ofQuaternion</em>\n_returns_description: _\n<em>parameters: float rhs</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofQuaternion &amp; operator/=(&amp;denom)</p>\n<p>&lt;!--\n<em>syntax: operator/=(&amp;denom)</em>\n<em>name: operator/=</em>\n<em>returns: ofQuaternion &amp;</em>\n_returns_description: _\n<em>parameters: const ofQuaternion &amp;denom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofQuaternion &amp; operator/=(rhs)</p>\n<p>&lt;!--\n<em>syntax: operator/=(rhs)</em>\n<em>name: operator/=</em>\n<em>returns: ofQuaternion &amp;</em>\n_returns_description: _\n<em>parameters: float rhs</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofQuaternion &amp; operator=(&amp;q)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;q)</em>\n<em>name: operator=</em>\n<em>returns: ofQuaternion &amp;</em>\n_returns_description: _\n<em>parameters: const ofQuaternion &amp;q</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Operators\n{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool operator==(&amp;q)</p>\n<p>&lt;!--\n<em>syntax: operator==(&amp;q)</em>\n<em>name: operator==</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofQuaternion &amp;q</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float &amp; operator<a href=\"i\"></a></p>\n<p>&lt;!--\n<em>syntax: operator<a href=\"i\"></a></em>\n<em>name: operator[]</em>\n<em>returns: float &amp;</em>\n_returns_description: _\n<em>parameters: int i</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Getters\n{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float operator<a href=\"i\"></a></p>\n<p>&lt;!--\n<em>syntax: operator<a href=\"i\"></a></em>\n<em>name: operator[]</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: int i</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(&amp;matrix)</p>\n<p>&lt;!--\n<em>syntax: set(&amp;matrix)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofMatrix4x4 &amp;matrix</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(&amp;v)</p>\n<p>&lt;!--\n<em>syntax: set(&amp;v)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofVec4f &amp;v</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(x, y, z, w)</p>\n<p>&lt;!--\n<em>syntax: set(x, y, z, w)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float w</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Setters\n{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void slerp(t, &amp;from, &amp;to)</p>\n<p>&lt;!--\n<em>syntax: slerp(t, &amp;from, &amp;to)</em>\n<em>name: slerp</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float t, const ofQuaternion &amp;from, const ofQuaternion &amp;to</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Spherical Linear Interpolation.</p>\n<p>As t goes from 0 to 1, the Quat object goes from &quot;from&quot; to &quot;to&quot;.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float &amp; w()</p>\n<p>&lt;!--\n<em>syntax: w()</em>\n<em>name: w</em>\n<em>returns: float &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float w()</p>\n<p>&lt;!--\n<em>syntax: w()</em>\n<em>name: w</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float &amp; x()</p>\n<p>&lt;!--\n<em>syntax: x()</em>\n<em>name: x</em>\n<em>returns: float &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float x()</p>\n<p>&lt;!--\n<em>syntax: x()</em>\n<em>name: x</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float &amp; y()</p>\n<p>&lt;!--\n<em>syntax: y()</em>\n<em>name: y</em>\n<em>returns: float &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float y()</p>\n<p>&lt;!--\n<em>syntax: y()</em>\n<em>name: y</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float &amp; z()</p>\n<p>&lt;!--\n<em>syntax: z()</em>\n<em>name: z</em>\n<em>returns: float &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float z()</p>\n<p>&lt;!--\n<em>syntax: z()</em>\n<em>name: z</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool zeroRotation()</p>\n<p>&lt;!--\n<em>syntax: zeroRotation()</em>\n<em>name: zeroRotation</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>return true if the Quat represents a zero rotation,\nand therefore can be ignored in computations.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###ofVec4f _v</p>\n<p>&lt;!--\n_name: <em>v</em>\n<em>type: ofVec4f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\cond INTERNAL</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofQuaternion\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\n\n\n\n\n\n##Description\n\n\n\n\n\n##Methods\n\n\n\n###ofVec3f asVec3()\n\n<!--\n_syntax: asVec3()_\n_name: asVec3_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f asVec4()\n\n<!--\n_syntax: asVec4()_\n_name: asVec4_\n_returns: ofVec4f_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofQuaternion conj()\n\n<!--\n_syntax: conj()_\n_name: conj_\n_returns: ofQuaternion_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConjugate\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void get(&matrix)\n\n<!--\n_syntax: get(&matrix)_\n_name: get_\n_returns: void_\n_returns_description: _\n_parameters: ofMatrix4x4 &matrix_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f getEuler()\n\n<!--\n_syntax: getEuler()_\n_name: getEuler_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCalculate and return the rotation as euler angles\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void getRotate(&angle, &vec)\n\n<!--\n_syntax: getRotate(&angle, &vec)_\n_name: getRotate_\n_returns: void_\n_returns_description: _\n_parameters: float &angle, ofVec3f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void getRotate(&angle, &x, &y, &z)\n\n<!--\n_syntax: getRotate(&angle, &x, &y, &z)_\n_name: getRotate_\n_returns: void_\n_returns_description: _\n_parameters: float &angle, float &x, float &y, float &z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn the angle and vector components represented by the quaternion.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofQuaternion inverse()\n\n<!--\n_syntax: inverse()_\n_name: inverse_\n_returns: const ofQuaternion_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMultiplicative inverse method\n\n    q^(-1) = q^*/(q.q^*)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float length()\n\n<!--\n_syntax: length()_\n_name: length_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nLength of the quaternion = sqrt(vec . vec)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float length2()\n\n<!--\n_syntax: length2()_\n_name: length2_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nLength of the quaternion = vec . vec\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void makeRotate(&vec1, &vec2)\n\n<!--\n_syntax: makeRotate(&vec1, &vec2)_\n_name: makeRotate_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &vec1, const ofVec3f &vec2_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMake a rotation Quat which will rotate vec1 to vec2.\nGenerally take a dot product to get the angle between these\nand then use a cross product to get the rotation axis\nWatch out for the two special cases when the vectors\nare co-incident or opposite in direction.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void makeRotate(angle, &vec)\n\n<!--\n_syntax: makeRotate(angle, &vec)_\n_name: makeRotate_\n_returns: void_\n_returns_description: _\n_parameters: float angle, const ofVec3f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void makeRotate(angle, x, y, z)\n\n<!--\n_syntax: makeRotate(angle, x, y, z)_\n_name: makeRotate_\n_returns: void_\n_returns_description: _\n_parameters: float angle, float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\briefSet a quaternion which will perform a rotation of an\nangle around the axis given by the vector(x,y,z).\n\nDefine Spherical Linear interpolation method also\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void makeRotate(angle1, &axis1, angle2, &axis2, angle3, &axis3)\n\n<!--\n_syntax: makeRotate(angle1, &axis1, angle2, &axis2, angle3, &axis3)_\n_name: makeRotate_\n_returns: void_\n_returns_description: _\n_parameters: float angle1, const ofVec3f &axis1, float angle2, const ofVec3f &axis2, float angle3, const ofVec3f &axis3_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void makeRotate_original(&vec1, &vec2)\n\n<!--\n_syntax: makeRotate_original(&vec1, &vec2)_\n_name: makeRotate_original_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &vec1, const ofVec3f &vec2_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void normalize()\n\n<!--\n_syntax: normalize()_\n_name: normalize_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofQuaternion(&q)\n\n<!--\n_syntax: ofQuaternion(&q)_\n_name: ofQuaternion_\n_returns: _\n_returns_description: _\n_parameters: const glm::quat &q_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofQuaternion(&v)\n\n<!--\n_syntax: ofQuaternion(&v)_\n_name: ofQuaternion_\n_returns: _\n_returns_description: _\n_parameters: const ofVec4f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofQuaternion()\n\n<!--\n_syntax: ofQuaternion()_\n_name: ofQuaternion_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Constructor\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofQuaternion(angle, &axis)\n\n<!--\n_syntax: ofQuaternion(angle, &axis)_\n_name: ofQuaternion_\n_returns: _\n_returns_description: _\n_parameters: float angle, const ofVec3f &axis_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofQuaternion(angle1, &axis1, angle2, &axis2, angle3, &axis3)\n\n<!--\n_syntax: ofQuaternion(angle1, &axis1, angle2, &axis2, angle3, &axis3)_\n_name: ofQuaternion_\n_returns: _\n_returns_description: _\n_parameters: float angle1, const ofVec3f &axis1, float angle2, const ofVec3f &axis2, float angle3, const ofVec3f &axis3_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofQuaternion(x, y, z, w)\n\n<!--\n_syntax: ofQuaternion(x, y, z, w)_\n_name: ofQuaternion_\n_returns: _\n_returns_description: _\n_parameters: float x, float y, float z, float w_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool operator!=(&q)\n\n<!--\n_syntax: operator!=(&q)_\n_name: operator!=_\n_returns: bool_\n_returns_description: _\n_parameters: const ofQuaternion &q_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofQuaternion operator*(&rhs)\n\n<!--\n_syntax: operator*(&rhs)_\n_name: operator*_\n_returns: const ofQuaternion_\n_returns_description: _\n_parameters: const ofQuaternion &rhs_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f operator*(&v)\n\n<!--\n_syntax: operator*(&v)_\n_name: operator*_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofQuaternion operator*(rhs)\n\n<!--\n_syntax: operator*(rhs)_\n_name: operator*_\n_returns: const ofQuaternion_\n_returns_description: _\n_parameters: float rhs_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofQuaternion & operator*=(&rhs)\n\n<!--\n_syntax: operator*=(&rhs)_\n_name: operator*=_\n_returns: ofQuaternion &_\n_returns_description: _\n_parameters: const ofQuaternion &rhs_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofQuaternion & operator*=(rhs)\n\n<!--\n_syntax: operator*=(rhs)_\n_name: operator*=_\n_returns: ofQuaternion &_\n_returns_description: _\n_parameters: float rhs_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofQuaternion operator+(&rhs)\n\n<!--\n_syntax: operator+(&rhs)_\n_name: operator+_\n_returns: const ofQuaternion_\n_returns_description: _\n_parameters: const ofQuaternion &rhs_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofQuaternion & operator+=(&rhs)\n\n<!--\n_syntax: operator+=(&rhs)_\n_name: operator+=_\n_returns: ofQuaternion &_\n_returns_description: _\n_parameters: const ofQuaternion &rhs_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofQuaternion operator-(&rhs)\n\n<!--\n_syntax: operator-(&rhs)_\n_name: operator-_\n_returns: const ofQuaternion_\n_returns_description: _\n_parameters: const ofQuaternion &rhs_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofQuaternion operator-()\n\n<!--\n_syntax: operator-()_\n_name: operator-_\n_returns: const ofQuaternion_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofQuaternion & operator-=(&rhs)\n\n<!--\n_syntax: operator-=(&rhs)_\n_name: operator-=_\n_returns: ofQuaternion &_\n_returns_description: _\n_parameters: const ofQuaternion &rhs_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofQuaternion operator/(&denom)\n\n<!--\n_syntax: operator/(&denom)_\n_name: operator/_\n_returns: const ofQuaternion_\n_returns_description: _\n_parameters: const ofQuaternion &denom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofQuaternion operator/(rhs)\n\n<!--\n_syntax: operator/(rhs)_\n_name: operator/_\n_returns: ofQuaternion_\n_returns_description: _\n_parameters: float rhs_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofQuaternion & operator/=(&denom)\n\n<!--\n_syntax: operator/=(&denom)_\n_name: operator/=_\n_returns: ofQuaternion &_\n_returns_description: _\n_parameters: const ofQuaternion &denom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofQuaternion & operator/=(rhs)\n\n<!--\n_syntax: operator/=(rhs)_\n_name: operator/=_\n_returns: ofQuaternion &_\n_returns_description: _\n_parameters: float rhs_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofQuaternion & operator=(&q)\n\n<!--\n_syntax: operator=(&q)_\n_name: operator=_\n_returns: ofQuaternion &_\n_returns_description: _\n_parameters: const ofQuaternion &q_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Operators\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool operator==(&q)\n\n<!--\n_syntax: operator==(&q)_\n_name: operator==_\n_returns: bool_\n_returns_description: _\n_parameters: const ofQuaternion &q_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float & operator[](i)\n\n<!--\n_syntax: operator[](i)_\n_name: operator[]_\n_returns: float &_\n_returns_description: _\n_parameters: int i_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Getters\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float operator[](i)\n\n<!--\n_syntax: operator[](i)_\n_name: operator[]_\n_returns: float_\n_returns_description: _\n_parameters: int i_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(&matrix)\n\n<!--\n_syntax: set(&matrix)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: const ofMatrix4x4 &matrix_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(&v)\n\n<!--\n_syntax: set(&v)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec4f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(x, y, z, w)\n\n<!--\n_syntax: set(x, y, z, w)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float w_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Setters\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void slerp(t, &from, &to)\n\n<!--\n_syntax: slerp(t, &from, &to)_\n_name: slerp_\n_returns: void_\n_returns_description: _\n_parameters: float t, const ofQuaternion &from, const ofQuaternion &to_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSpherical Linear Interpolation.\n\nAs t goes from 0 to 1, the Quat object goes from \"from\" to \"to\".\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float & w()\n\n<!--\n_syntax: w()_\n_name: w_\n_returns: float &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float w()\n\n<!--\n_syntax: w()_\n_name: w_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float & x()\n\n<!--\n_syntax: x()_\n_name: x_\n_returns: float &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float x()\n\n<!--\n_syntax: x()_\n_name: x_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float & y()\n\n<!--\n_syntax: y()_\n_name: y_\n_returns: float &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float y()\n\n<!--\n_syntax: y()_\n_name: y_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float & z()\n\n<!--\n_syntax: z()_\n_name: z_\n_returns: float &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float z()\n\n<!--\n_syntax: z()_\n_name: z_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool zeroRotation()\n\n<!--\n_syntax: zeroRotation()_\n_name: zeroRotation_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nreturn true if the Quat represents a zero rotation,\nand therefore can be ignored in computations.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###ofVec4f _v\n\n<!--\n_name: _v_\n_type: ofVec4f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\cond INTERNAL\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}