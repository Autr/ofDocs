{"entry":{"name":"ofBaseVideoGrabber","filename":"ofBaseVideoGrabber.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/types/ofBaseVideoGrabber.markdown","path":"/documentation/types/ofBaseVideoGrabber","route":"/documentation/types/ofBaseVideoGrabber.markdown","dir":"../ofSite/documentation/types","ext":"markdown","type":"page","id":466,"parent":439,"breadcrumbs":[439,1],"siblings":[],"translations":{}},"description":{"short":"<p>A base class representing a video device such as a camera.</p>\n","full":"<h1></h1>\n"},"config":{"visible":"True","advanced":"True","istemplated":"False","extends":"ofBaseVideo"},"methods":[{"syntax":"getHeight()","name":"getHeight","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the video grabber's height.</p>\n<p><strong>Returns</strong>: the video grabber's height.</p>\n","desc":""},{"syntax":"getTexturePtr()","name":"getTexturePtr","returns":"ofTexture *","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the video grabber's internal ofTexture pointer if available.</p>\n<p>\\note Subclasses should implement this method only if internal API can\nupload video grabber pixels directly to an ofTexture.</p>\n<p><strong>Returns</strong>: the internal ofTexture pointer or nullptr if not available.</p>\n","desc":""},{"syntax":"getWidth()","name":"getWidth","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the video grabber's width.</p>\n<p><strong>Returns</strong>: the video grabber's width.</p>\n","desc":""},{"short":"<p>Get a list of available video grabber devices.</p>\n<p><strong>Returns</strong>: a std::vector of ofVideoDevice objects.</p>\n","desc":""},{"syntax":"setDesiredFrameRate(framerate)","name":"setDesiredFrameRate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> framerate","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the video grabber's desired frame rate.</p>\n<p>Many video grabbers support user-specified frame rates.  This frame rate\nshould be considered a hint for the video grabber and is not guaranteed.</p>\n<p><strong>Parameters:</strong></p>\n<p>framerate the desired frame rate.</p>\n","desc":""},{"syntax":"setDeviceID(deviceID)","name":"setDeviceID","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> deviceID","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the video grabber's device ID.</p>\n<p>In most cases, a user can choose a specific grabber source by ID.  This\ndevice ID information should be available to the user via the\nlistDevices() method.</p>\n<p><strong>Parameters:</strong></p>\n<p>deviceID The device ID provided by listDevices().</p>\n","desc":""},{"syntax":"setVerbose(bTalkToMe)","name":"setVerbose","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> bTalkToMe","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the video grabber's hardware verbosity level.</p>\n<p><strong>Parameters:</strong></p>\n<p>bTalkToMe true if verbose grabber logging feedback is required.</p>\n","desc":""},{"syntax":"setup(w, h)","name":"setup","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set up the grabber with the requested width and height.</p>\n<p>Some video grabbers may take the requested width and height as\na hint and choose the closest dimensions to those requested.\nUsers can check the actual width and height by calling getWidth() and\ngetHeight() respectively after a successful setup.</p>\n<p><strong>Parameters:</strong></p>\n<p>w the requested width.</p>\n<p>h the requested height.</p>\n<p><strong>Returns</strong>: true if the video grabber was set up successfully.</p>\n","desc":""},{"syntax":"videoSettings()","name":"videoSettings","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Request a native GUI for video grabber settings.\n\\note This feature may not be implemented by all video grabbers.</p>\n","desc":""},{"syntax":"~ofBaseVideoGrabber()","name":"~ofBaseVideoGrabber","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Destroy the ofBaseVideoGrabber</p>\n","desc":""},{}],"document":"<p>#class ofBaseVideoGrabber</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: True</em>\n<em>istemplated: False</em>\n<em>extends: ofBaseVideo</em>\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>A base class representing a video device such as a camera.</p>\n<p>##Description</p>\n<p>##Methods</p>\n<p>###float getHeight()</p>\n<p>&lt;!--\n<em>syntax: getHeight()</em>\n<em>name: getHeight</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the video grabber's height.</p>\n<p><strong>Returns</strong>: the video grabber's height.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofTexture * getTexturePtr()</p>\n<p>&lt;!--\n<em>syntax: getTexturePtr()</em>\n<em>name: getTexturePtr</em>\n<em>returns: ofTexture *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the video grabber's internal ofTexture pointer if available.</p>\n<p>\\note Subclasses should implement this method only if internal API can\nupload video grabber pixels directly to an ofTexture.</p>\n<p><strong>Returns</strong>: the internal ofTexture pointer or nullptr if not available.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getWidth()</p>\n<p>&lt;!--\n<em>syntax: getWidth()</em>\n<em>name: getWidth</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the video grabber's width.</p>\n<p><strong>Returns</strong>: the video grabber's width.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vector&lt; ofVideoDevice &gt; listDevices()</p>\n<p>&lt;!--\n<em>syntax: listDevices()</em>\n<em>name: listDevices</em>\n<em>returns: vector&lt; ofVideoDevice &gt;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get a list of available video grabber devices.</p>\n<p><strong>Returns</strong>: a std::vector of ofVideoDevice objects.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setDesiredFrameRate(framerate)</p>\n<p>&lt;!--\n<em>syntax: setDesiredFrameRate(framerate)</em>\n<em>name: setDesiredFrameRate</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int framerate</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the video grabber's desired frame rate.</p>\n<p>Many video grabbers support user-specified frame rates.  This frame rate\nshould be considered a hint for the video grabber and is not guaranteed.</p>\n<p><strong>Parameters:</strong></p>\n<p>framerate the desired frame rate.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setDeviceID(deviceID)</p>\n<p>&lt;!--\n<em>syntax: setDeviceID(deviceID)</em>\n<em>name: setDeviceID</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int deviceID</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the video grabber's device ID.</p>\n<p>In most cases, a user can choose a specific grabber source by ID.  This\ndevice ID information should be available to the user via the\nlistDevices() method.</p>\n<p><strong>Parameters:</strong></p>\n<p>deviceID The device ID provided by listDevices().</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setVerbose(bTalkToMe)</p>\n<p>&lt;!--\n<em>syntax: setVerbose(bTalkToMe)</em>\n<em>name: setVerbose</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool bTalkToMe</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the video grabber's hardware verbosity level.</p>\n<p><strong>Parameters:</strong></p>\n<p>bTalkToMe true if verbose grabber logging feedback is required.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool setup(w, h)</p>\n<p>&lt;!--\n<em>syntax: setup(w, h)</em>\n<em>name: setup</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: int w, int h</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set up the grabber with the requested width and height.</p>\n<p>Some video grabbers may take the requested width and height as\na hint and choose the closest dimensions to those requested.\nUsers can check the actual width and height by calling getWidth() and\ngetHeight() respectively after a successful setup.</p>\n<p><strong>Parameters:</strong></p>\n<p>w the requested width.</p>\n<p>h the requested height.</p>\n<p><strong>Returns</strong>: true if the video grabber was set up successfully.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void videoSettings()</p>\n<p>&lt;!--\n<em>syntax: videoSettings()</em>\n<em>name: videoSettings</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Request a native GUI for video grabber settings.\n\\note This feature may not be implemented by all video grabbers.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>~ofBaseVideoGrabber()</h3>\n<p>&lt;!--\n<em>syntax: ~ofBaseVideoGrabber()</em>\n<em>name: ~ofBaseVideoGrabber</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Destroy the ofBaseVideoGrabber</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n","raw":"#class ofBaseVideoGrabber\n\n\n<!--\n_visible: True_\n_advanced: True_\n_istemplated: False_\n_extends: ofBaseVideo_\n-->\n\n##InlineDescription\n\nA base class representing a video device such as a camera.\n\n\n\n\n\n##Description\n\n\n\n\n\n##Methods\n\n\n\n###float getHeight()\n\n<!--\n_syntax: getHeight()_\n_name: getHeight_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the video grabber's height.\n\n**Returns**: the video grabber's height.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofTexture * getTexturePtr()\n\n<!--\n_syntax: getTexturePtr()_\n_name: getTexturePtr_\n_returns: ofTexture *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the video grabber's internal ofTexture pointer if available.\n\n\\note Subclasses should implement this method only if internal API can\nupload video grabber pixels directly to an ofTexture.\n\n\n**Returns**: the internal ofTexture pointer or nullptr if not available.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getWidth()\n\n<!--\n_syntax: getWidth()_\n_name: getWidth_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the video grabber's width.\n\n**Returns**: the video grabber's width.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< ofVideoDevice > listDevices()\n\n<!--\n_syntax: listDevices()_\n_name: listDevices_\n_returns: vector< ofVideoDevice >_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet a list of available video grabber devices.\n\n**Returns**: a std::vector of ofVideoDevice objects.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setDesiredFrameRate(framerate)\n\n<!--\n_syntax: setDesiredFrameRate(framerate)_\n_name: setDesiredFrameRate_\n_returns: void_\n_returns_description: _\n_parameters: int framerate_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the video grabber's desired frame rate.\n\nMany video grabbers support user-specified frame rates.  This frame rate\nshould be considered a hint for the video grabber and is not guaranteed.\n\n\n**Parameters:**\n\nframerate the desired frame rate.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setDeviceID(deviceID)\n\n<!--\n_syntax: setDeviceID(deviceID)_\n_name: setDeviceID_\n_returns: void_\n_returns_description: _\n_parameters: int deviceID_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the video grabber's device ID.\n\nIn most cases, a user can choose a specific grabber source by ID.  This\ndevice ID information should be available to the user via the\nlistDevices() method.\n\n\n**Parameters:**\n\ndeviceID The device ID provided by listDevices().\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setVerbose(bTalkToMe)\n\n<!--\n_syntax: setVerbose(bTalkToMe)_\n_name: setVerbose_\n_returns: void_\n_returns_description: _\n_parameters: bool bTalkToMe_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the video grabber's hardware verbosity level.\n\n**Parameters:**\n\nbTalkToMe true if verbose grabber logging feedback is required.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool setup(w, h)\n\n<!--\n_syntax: setup(w, h)_\n_name: setup_\n_returns: bool_\n_returns_description: _\n_parameters: int w, int h_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet up the grabber with the requested width and height.\n\nSome video grabbers may take the requested width and height as\na hint and choose the closest dimensions to those requested.\nUsers can check the actual width and height by calling getWidth() and\ngetHeight() respectively after a successful setup.\n\n\n**Parameters:**\n\nw the requested width.\n\nh the requested height.\n\n**Returns**: true if the video grabber was set up successfully.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void videoSettings()\n\n<!--\n_syntax: videoSettings()_\n_name: videoSettings_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRequest a native GUI for video grabber settings.\n\\note This feature may not be implemented by all video grabbers.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofBaseVideoGrabber()\n\n<!--\n_syntax: ~ofBaseVideoGrabber()_\n_name: ~ofBaseVideoGrabber_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDestroy the ofBaseVideoGrabber\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n","type":"page"}