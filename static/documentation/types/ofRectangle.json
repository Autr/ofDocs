{"entry":{"name":"ofRectangle","filename":"ofRectangle.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/types/ofRectangle.markdown","path":"/documentation/types/ofRectangle","route":"/documentation/types/ofRectangle.markdown","dir":"../ofSite/documentation/types","ext":"markdown","type":"page","id":476,"parent":439,"breadcrumbs":[439,1],"siblings":[],"translations":{}},"description":{"short":"<p>A class representing a 2D rectangle.</p>\n<p>ofRectangle is a simple container for describing the position and size of a\n2D rectangle. The ofRectangle::standardize() method can be used to ensure\nthat the origin is in the &quot;standard&quot; form.</p>\n<p><strong>Warning</strong>: While ofRectangle takes glm::vec3\nall ofRectangle operations are 2D only, ignoring the z-component.</p>\n<p>##Description</p>\n","full":"<p>##Description</p>\n<p>ofRectangle is a simple container for describing the position and size of a 2D rectangle. The ofRectangle class provides a data structure and a collection of useful helper methods for manipulating rectangles.</p>\n<p>Since the <code>width</code> and <code>height</code> variables can be negative, the x/y-position is not guaranteed to represent the upper right hand corner. For example, two visually identical rectangles can be represented in the following ways:</p>\n<pre><code>    ofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>or</p>\n<pre><code>    ofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>While both representations will yield the same visual results in all openFrameworks renderers, the results of some method operations that modify x, y, width and height (such as scaling) produce mathematically correct, but visually different results for each of the above representations.</p>\n<p>To avoid this ambiguity, users should prefer &quot;standardized&quot; rectangles. &quot;Standardized&quot; rectangles are rectangles whose width</p>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"alignTo(&targetPoint, thisHorzAnchor = OF_ALIGN_HORZ_CENTER, thisVertAnchor = OF_ALIGN_VERT_CENTER)","name":"alignTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>targetPoint<span class=\"token punctuation\">,</span> ofAlignHorz thisHorzAnchor<span class=\"token operator\">=</span>OF_ALIGN_HORZ_CENTER<span class=\"token punctuation\">,</span> ofAlignVert thisVertAnchor<span class=\"token operator\">=</span>OF_ALIGN_VERT_CENTER","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Align this ofRectangle to an glm::vec3 in both x- and y dimentions.</p>\n<p>Aligns the position of the ofRectangle to the given point using an\nofAlignHorz constant and an ofAlignVert constant. If neither constant is\npassed in, this will align the center of the rectangle.</p>\n<p><strong>Warning</strong>: The z-component of the passed glm::vec3 is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>targetPoint The target glm::vec3 to align to.</p>\n<p>thisHorzAnchor The horizontal alignment anchor.</p>\n<p>thisVertAnchor The vertical alignment anchor.</p>\n","desc":"<p><strong>ofAlignHorz Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_HORZ_IGNORE</code> : Does not perform any horizontal alignment.</li>\n<li><code>OF_ALIGN_HORZ_LEFT</code>   : Uses the left edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_RIGHT</code>  : Uses the right edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_CENTER</code> : Uses the center of the rectangle to horizontally anchor the alignment.</li>\n</ul>\n<p><strong>ofAlignVert Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_VERT_IGNORE</code> : Does not perform any vertical alignment.</li>\n<li><code>OF_ALIGN_VERT_TOP</code>    : Uses the upper edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_BOTTOM</code> : Uses the bottom edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_CENTER</code> : Uses the center of the rectangle to vertically anchor the alignment.</li>\n</ul>\n<p>For a working example of how to use ofAlignVert and ofAlignHorz, see the <em>graphics/rectangleAlignmentAndScaling/</em> example within the examples directory.</p>\n"},{"syntax":"alignTo(&targetPoint, thisHorzAnchor = OF_ALIGN_HORZ_CENTER, thisVertAnchor = OF_ALIGN_VERT_CENTER)","name":"alignTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>targetPoint<span class=\"token punctuation\">,</span> ofAlignHorz thisHorzAnchor<span class=\"token operator\">=</span>OF_ALIGN_HORZ_CENTER<span class=\"token punctuation\">,</span> ofAlignVert thisVertAnchor<span class=\"token operator\">=</span>OF_ALIGN_VERT_CENTER","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p><strong>ofAlignHorz Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_HORZ_IGNORE</code> : Does not perform any horizontal alignment.</li>\n<li><code>OF_ALIGN_HORZ_LEFT</code>   : Uses the left edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_RIGHT</code>  : Uses the right edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_CENTER</code> : Uses the center of the rectangle to horizontally anchor the alignment.</li>\n</ul>\n<p><strong>ofAlignVert Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_VERT_IGNORE</code> : Does not perform any vertical alignment.</li>\n<li><code>OF_ALIGN_VERT_TOP</code>    : Uses the upper edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_BOTTOM</code> : Uses the bottom edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_CENTER</code> : Uses the center of the rectangle to vertically anchor the alignment.</li>\n</ul>\n<p>For a working example of how to use ofAlignVert and ofAlignHorz, see the <em>graphics/rectangleAlignmentAndScaling/</em> example within the examples directory.</p>\n"},{"syntax":"alignTo(&targetRect, sharedHorzAnchor = OF_ALIGN_HORZ_CENTER, sharedVertAnchor = OF_ALIGN_VERT_CENTER)","name":"alignTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>targetRect<span class=\"token punctuation\">,</span> ofAlignHorz sharedHorzAnchor<span class=\"token operator\">=</span>OF_ALIGN_HORZ_CENTER<span class=\"token punctuation\">,</span> ofAlignVert sharedVertAnchor<span class=\"token operator\">=</span>OF_ALIGN_VERT_CENTER","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Align this ofRectangle to an glm::vec3 in both x- and y dimentions using a shared anchor.</p>\n<p>Aligns the position of the ofRectangle to that of the passed-in\nofRectangle. Can take an ofAlignHorz constant and an ofAlignVert\nconstant.</p>\n<p>If neither constant is passed in, this will align the centers of the\nrectangles.</p>\n<p>If constants are passed in, it will use those constants for both\nrectangles.</p>\n<p><strong>Parameters:</strong></p>\n<p>targetRect The target ofRectangle to align this rectangle to.</p>\n<p>sharedHorzAnchor The alignment anchor for both rectangles.</p>\n<p>sharedVertAnchor The alignment anchor for both rectangles.</p>\n","desc":"<p><strong>ofAlignHorz Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_HORZ_IGNORE</code> : Does not perform any horizontal alignment.</li>\n<li><code>OF_ALIGN_HORZ_LEFT</code>   : Uses the left edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_RIGHT</code>  : Uses the right edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_CENTER</code> : Uses the center of the rectangle to horizontally anchor the alignment.</li>\n</ul>\n<p><strong>ofAlignVert Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_VERT_IGNORE</code> : Does not perform any vertical alignment.</li>\n<li><code>OF_ALIGN_VERT_TOP</code>    : Uses the upper edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_BOTTOM</code> : Uses the bottom edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_CENTER</code> : Uses the center of the rectangle to vertically anchor the alignment.</li>\n</ul>\n"},{"syntax":"alignTo(&targetRect, targetHorzAnchor, targetVertAnchor, thisHorzAnchor, thisVertAnchor)","name":"alignTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>targetRect<span class=\"token punctuation\">,</span> ofAlignHorz targetHorzAnchor<span class=\"token punctuation\">,</span> ofAlignVert targetVertAnchor<span class=\"token punctuation\">,</span> ofAlignHorz thisHorzAnchor<span class=\"token punctuation\">,</span> ofAlignVert thisVertAnchor","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Vertically align this ofRectangle to another target ofRectangle.</p>\n<p>Aligns the position of the ofRectangle to that of the passed-in\nofRectangle. Takes two ofAlignHorz constants and two ofAlignVert\nconstants.</p>\n<p>Will align the chosen anchors in the ofRectangle with the chosen\nanchors in the passed-in ofRectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>targetRect The target ofRectangle to align this rectangle to.</p>\n<p>targetHorzAnchor The vertical alignment anchor for the target rectangle.</p>\n<p>targetVertAnchor The horizontal alignment anchor for the target rectangle.</p>\n<p>thisHorzAnchor The horizontal alignment anchor for this rectangle.</p>\n<p>thisVertAnchor The vertical alignment anchor for this rectangle.</p>\n","desc":"<p><strong>ofAlignHorz Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_HORZ_IGNORE</code> : Does not perform any horizontal alignment.</li>\n<li><code>OF_ALIGN_HORZ_LEFT</code>   : Uses the left edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_RIGHT</code>  : Uses the right edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_CENTER</code> : Uses the center of the rectangle to horizontally anchor the alignment.</li>\n</ul>\n<p><strong>ofAlignVert Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_VERT_IGNORE</code> : Does not perform any vertical alignment.</li>\n<li><code>OF_ALIGN_VERT_TOP</code>    : Uses the upper edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_BOTTOM</code> : Uses the bottom edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_CENTER</code> : Uses the center of the rectangle to vertically anchor the alignment.</li>\n</ul>\n"},{"syntax":"alignToHorz(&targetRect, sharedAnchor = OF_ALIGN_HORZ_CENTER)","name":"alignToHorz","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>targetRect<span class=\"token punctuation\">,</span> ofAlignHorz sharedAnchor<span class=\"token operator\">=</span>OF_ALIGN_HORZ_CENTER","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Horizontally align two rectangles to another using one anchor for both.</p>\n<p>Aligns the horizontal position of the ofRectangle to that of the\npassed-in ofRectangle using an ofAlignHorz constant as anchor.</p>\n<p>If a constant is not passed in, this will align the horizontal centers\nof the rectangles.</p>\n<p>If a constant is passed in, it will use that constant for both\nrectangles.</p>\n<p><strong>Parameters:</strong></p>\n<p>targetRect The target rectangle to align this rectangle to.</p>\n<p>sharedAnchor The common edge of the rectangles to align.</p>\n","desc":"<p><strong>ofAlignHorz Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_HORZ_IGNORE</code> : Does not perform any horizontal alignment.</li>\n<li><code>OF_ALIGN_HORZ_LEFT</code>   : Uses the left edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_RIGHT</code>  : Uses the right edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_CENTER</code> : Uses the center of the rectangle to horizontally anchor the alignment.</li>\n</ul>\n<p>For a working example of how to use ofAlignHorz, see the <em>graphics/rectangleAlignmentAndScaling/</em> example within the examples directory.</p>\n"},{"syntax":"alignToHorz(&targetRect, targetHorzAnchor, thisHorzAnchor)","name":"alignToHorz","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>targetRect<span class=\"token punctuation\">,</span> ofAlignHorz targetHorzAnchor<span class=\"token punctuation\">,</span> ofAlignHorz thisHorzAnchor","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Horizontally align two rectangles to another using two anchors.</p>\n<p>Aligns the horizontal position of the ofRectangle to that of the\npassed-in ofRectangle. Takes two ofAlignHorz constants as anchors.</p>\n<p>Will align the chosen anchor in the ofRectangle with the chosen anchor\nin the passed-in ofRectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>targetRect The target rectangle to align this rectangle to.</p>\n<p>targetHorzAnchor The edge of the other rectangle to align.</p>\n<p>thisHorzAnchor The edge of this rectangle to align.</p>\n","desc":"<p><strong>ofAlignHorz Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_HORZ_IGNORE</code> : Does not perform any horizontal alignment.</li>\n<li><code>OF_ALIGN_HORZ_LEFT</code>   : Uses the left edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_RIGHT</code>  : Uses the right edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_CENTER</code> : Uses the center of the rectangle to horizontally anchor the alignment.</li>\n</ul>\n<p>For a working example of how to use ofAlignHorz, see the <em>graphics/rectangleAlignmentAndScaling/</em> example within the examples directory.</p>\n"},{"syntax":"alignToHorz(&targetX, thisHorzAnchor = OF_ALIGN_HORZ_CENTER)","name":"alignToHorz","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>targetX<span class=\"token punctuation\">,</span> ofAlignHorz thisHorzAnchor<span class=\"token operator\">=</span>OF_ALIGN_HORZ_CENTER","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Horizontally align a rectangle using a position and anchor edge.</p>\n<p>Aligns the horizontal position of the ofRectangle to the given x-\nposition using an ofAlignHorz constant as anchor. If a constant is not passed in\nthis will align the center of the rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>targetX The x-position to align this rectangle to.</p>\n<p>thisHorzAnchor The edge of this rectangle to align.</p>\n","desc":"<p><strong>ofAlignHorz Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_HORZ_IGNORE</code> : Does not perform any horizontal alignment.</li>\n<li><code>OF_ALIGN_HORZ_LEFT</code>   : Uses the left edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_RIGHT</code>  : Uses the right edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_CENTER</code> : Uses the center of the rectangle to horizontally anchor the alignment.</li>\n</ul>\n<p>For a working example of how to use ofAlignHorz, see the <em>graphics/rectangleAlignmentAndScaling/</em> example within the examples directory.</p>\n"},{"syntax":"alignToVert(&targetRect, sharedAnchor = OF_ALIGN_VERT_CENTER)","name":"alignToVert","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>targetRect<span class=\"token punctuation\">,</span> ofAlignVert sharedAnchor<span class=\"token operator\">=</span>OF_ALIGN_VERT_CENTER","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Vertically align two rectangles to another using one anchor for both.</p>\n<p>Aligns the vertical position of the ofRectangle to that of the\npassed-in ofRectangle using an ofAlignVert constant as anchor.</p>\n<p>If a constant is not passed in, this will align the vertical centers\nof the rectangles.</p>\n<p>If a constant is passed in, it will use that constant for both rectangles.</p>\n<p><strong>Parameters:</strong></p>\n<p>targetRect The target ofRectangle to align this rectangle to.</p>\n<p>sharedAnchor The alignment position for both rectangles to use.</p>\n","desc":"<p><strong>ofAlignVert Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_VERT_IGNORE</code> : Does not perform any vertical alignment.</li>\n<li><code>OF_ALIGN_VERT_TOP</code>    : Uses the upper edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_BOTTOM</code> : Uses the bottom edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_CENTER</code> : Uses the center of the rectangle to vertically anchor the alignment.</li>\n</ul>\n<p>For a working example of how to use ofAlignVert, see the\n<em>graphics/rectangleAlignmentAndScaling/</em> example within the examples\ndirectory</p>\n"},{"syntax":"alignToVert(&targetRect, targetVertAnchor, thisVertAnchor)","name":"alignToVert","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>targetRect<span class=\"token punctuation\">,</span> ofAlignVert targetVertAnchor<span class=\"token punctuation\">,</span> ofAlignVert thisVertAnchor","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Vertically align two rectangles to another using two anchors.</p>\n<p>Will align the chosen anchor in the ofRectangle with the chosen anchor\nin the passed-in ofRectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>targetRect The target ofRectangle to align this rectangle to.</p>\n<p>targetVertAnchor The alignment anchor for this rectangle.</p>\n<p>thisVertAnchor The alignment anchor for the other rectangle.</p>\n","desc":"<p><strong>ofAlignVert Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_VERT_IGNORE</code> : Does not perform any vertical alignment.</li>\n<li><code>OF_ALIGN_VERT_TOP</code>    : Uses the upper edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_BOTTOM</code> : Uses the bottom edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_CENTER</code> : Uses the center of the rectangle to vertically anchor the alignment.</li>\n</ul>\n<p>For a working example of how to use ofAlignVert, see the\n<em>graphics/rectangleAlignmentAndScaling/</em> example within the examples\ndirectory</p>\n"},{"syntax":"alignToVert(&targetY, sharedAnchor = OF_ALIGN_VERT_CENTER)","name":"alignToVert","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>targetY<span class=\"token punctuation\">,</span> ofAlignVert sharedAnchor<span class=\"token operator\">=</span>OF_ALIGN_VERT_CENTER","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Vertically align a rectangle using a position and anchor edge.</p>\n<p>Aligns the vertical position of the ofRectangle to the given y-\nposition using an ofAlignVert constant as anchor. If a constant is not passed in\nthis will align the center of the rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>targetY The target y-position to align this rectangle to.</p>\n<p>sharedAnchor The alignment position of this ofRectangle to use.</p>\n","desc":"<p><strong>ofAlignVert Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_VERT_IGNORE</code> : Does not perform any vertical alignment.</li>\n<li><code>OF_ALIGN_VERT_TOP</code>    : Uses the upper edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_BOTTOM</code> : Uses the bottom edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_CENTER</code> : Uses the center of the rectangle to vertically anchor the alignment.</li>\n</ul>\n<p>For a working example of how to use ofAlignVert, see the\n<em>graphics/rectangleAlignmentAndScaling/</em> example within the examples\ndirectory</p>\n"},{"syntax":"getArea()","name":"getArea","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the area of the ofRectangle.</p>\n<p>This is the product of the width and height of the recatngle.</p>\n<p><strong>Returns</strong>: The area of the rectangle as float.</p>\n","desc":"<p>Example:</p>\n<pre><code>\n<span class=\"token comment\" spellcheck=\"true\">// Create a rectangle that is 100 units wide and 200 units tall</span>\nofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Get the area of that rectangle</span>\n<span class=\"token keyword\">float</span> areaValue <span class=\"token operator\">=</span> myRect<span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// areaValue will be 20000.0.</span>\n</code></pre>\n"},{"syntax":"getAspectRatio()","name":"getAspectRatio","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Gets the ratio of width to height of the ofRectangle.</p>\n<p><strong>Returns</strong>: The aspect ratio of the rectangle.</p>\n","desc":"<p>Example:</p>\n<pre><code>\n<span class=\"token comment\" spellcheck=\"true\">// Create a rectangle that is 100 units wide and 200 units tall</span>\nofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Get the aspect ratio of that rectangle</span>\n<span class=\"token keyword\">float</span> aspectRatioValue <span class=\"token operator\">=</span> myRect<span class=\"token punctuation\">.</span><span class=\"token function\">getAspectRatio</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// aspectRatioValue will be 0.5.</span>\n</code></pre>\n"},{"syntax":"getBottom()","name":"getBottom","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Gets the y position of the bottom edge of the ofRectangle as float.</p>\n<p><strong>See also</strong>: getMaxY()</p>\n<p><strong>Returns</strong>: The y position of the bottom edge of the rectangle.</p>\n","desc":"<p>Equivalent to ofRectangle::getMaxY().</p>\n"},{"syntax":"getBottomLeft()","name":"getBottomLeft","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the bottom-left coordinates of the ofRectangle as glm::vec3.</p>\n<p><strong>Returns</strong>: The bottom-left coordinates of the rectangle.</p>\n","desc":""},{"syntax":"getBottomRight()","name":"getBottomRight","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the bottom-right coordinates of the ofRectangle as glm::vec3.</p>\n<p><strong>See also</strong>: getMax()</p>\n<p><strong>Returns</strong>: The bottom-right coordinates of the rectangle.</p>\n","desc":"<p>Equivalent to ofRectangle::getMax().</p>\n"},{"syntax":"getCenter()","name":"getCenter","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the coordiantes of the ofRectangle's center as glm::vec3.</p>\n<p><strong>Warning</strong>: The z component of the returned glm::vec3 will always be 0.</p>\n<p><strong>Returns</strong>: The x and y coordinates of the center of the rectangle (z = 0).</p>\n","desc":""},{"syntax":"getHeight()","name":"getHeight","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Gets the height of the ofRectangle as float.</p>\n<p><strong>Returns</strong>: The height of the rectangle.</p>\n","desc":""},{"syntax":"getHorzAnchor(anchor)","name":"getHorzAnchor","returns":"float","returns_description":null,"parameters":"ofAlignHorz anchor","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>A convenience method that returns the value of one of\nthe horizontal edges of the ofRectangle using the <code>ofAlignHorz</code> enum.</p>\n<p><strong>Parameters:</strong></p>\n<p>anchor The anchor position to query.</p>\n<p><strong>Returns</strong>: the value of the referenced anchor position.</p>\n","desc":"<p>Possible anchor values are:</p>\n<ul>\n<li><code>OF_ALIGN_HORZ_IGNORE</code>  : returns 0.0</li>\n<li><code>OF_ALIGN_HORZ_LEFT</code>    : returns the position of the left edge, equivalent to ofRectangle::geLeft().</li>\n<li><code>OF_ALIGN_HORZ_RIGHT</code>   : returns the position of the right edge, equivalent to ofRectangle::getRight().</li>\n<li><code>OF_ALIGN_HORZ_CENTER</code>  : returns the x-position of the center of the ofRectangle.</li>\n</ul>\n<p>Any other anchor value will return <code><span class=\"token number\">0.0</span></code>.</p>\n"},{"syntax":"getIntersection(&rect)","name":"getIntersection","returns":"ofRectangle","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>rect","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the intersecting area between this rectangle and another.</p>\n<p>This method will attempt to return the area of overlap between this\nrectangle and the passed rectangle.</p>\n<p>If the two rectangles do not overlap, it will return an &quot;empty&quot;\nrectangle located (0, 0) with 0 width and 0 height.</p>\n<p>If the two rectangles only share an edge this will return a rectangle\npositioned on that edge:</p>\n<p>If the shared edge is vertical, the rectangle will have zero width,\notherwise it will have zero height.</p>\n<p><strong>Parameters:</strong></p>\n<p>rect The rectangle to intersect.</p>\n<p><strong>Returns</strong>: A new ofRectangle representing the intersecting area or an\nempty rectangle (0, 0, 0, 0) if there is no intersection.</p>\n","desc":""},{"syntax":"getLeft()","name":"getLeft","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Gets the x position of the left edge of the ofRectangle as float.</p>\n<p><strong>See also</strong>: getMinX()</p>\n<p><strong>Returns</strong>: The x position of the left edge of the rectangle.</p>\n","desc":"<p>Equivalent to ofRectangle::getMinX().</p>\n"},{"syntax":"getMax()","name":"getMax","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the maximum x and y coordinates of the ofRectangle as glm::vec3.</p>\n<p><strong>Returns</strong>: The maximum x and y coordinates of the rectangle.</p>\n","desc":"<p>Returns the (x,y) coordinates of the corner of the rectangle with the largest x and largest y position as an ofPoint.</p>\n<p>Equivalent to ofRectangle::getBottomRight().</p>\n"},{"syntax":"getMaxX()","name":"getMaxX","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the largest x position of the ofRectangle as float.</p>\n<p><strong>Returns</strong>: The largest x position of the rectangle.</p>\n","desc":"<p>Returns the position of the larger of the two sides of the rectangle perpendicular to the x axis as a float.</p>\n<p>Equivalent to ofRectangle::getRight().</p>\n"},{"syntax":"getMaxY()","name":"getMaxY","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the largest y position of the ofRectangle as float.</p>\n<p><strong>Returns</strong>: The largest y position of the rectangle.</p>\n","desc":"<p>Equivalent to ofRectangle::getBottom().</p>\n"},{"syntax":"getMin()","name":"getMin","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the minimum x and y coordinates of the ofRectangle as glm::vec3.</p>\n<p><strong>Returns</strong>: The minimum x and y coordinates of the rectangle.</p>\n","desc":"<p>Equivalent to ofRectangle::getTopLeft().</p>\n"},{"syntax":"getMinX()","name":"getMinX","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the smallest x position of the ofRectangle as float.</p>\n<p><strong>Returns</strong>: The smallest xposition of the rectangle.</p>\n","desc":"<p>Equivalent to ofRectangle::getLeft().</p>\n"},{"syntax":"getMinY()","name":"getMinY","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the smallest y position of the ofRectangle as float.</p>\n<p><strong>Returns</strong>: The smallest y position of the rectangle.</p>\n","desc":"<p>Equivalent to ofRectangle::getTop().</p>\n"},{"syntax":"getPerimeter()","name":"getPerimeter","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Gets the perimeter of the ofRectangle.</p>\n<p>This is the sum of the lengths of the sides.</p>\n<p><strong>Returns</strong>: The perimeter of the rectangle as float.</p>\n","desc":"<p>Example:</p>\n<pre><code>\n<span class=\"token comment\" spellcheck=\"true\">// Create a rectangle that is 100 units wide and 200 units tall</span>\nofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Get the perimeter of that rectangle</span>\n<span class=\"token keyword\">float</span> perimeterValue <span class=\"token operator\">=</span> myRect<span class=\"token punctuation\">.</span><span class=\"token function\">getPerimeter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// perimeterValue will be 600.0.</span>\n</code></pre>\n"},{"syntax":"getPosition()","name":"getPosition","returns":"const glm::vec3 &","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the ofRectangle's position.</p>\n<p><strong>Warning</strong>: The z component of the returned glm::vec3 is undefined.</p>\n<p><strong>Returns</strong>: The rectangle's position.</p>\n","desc":"<p>Returns the (x,y) position of the ofRectangle as an ofPoint.</p>\n<p>Equivalent to ofRectangle::getPositionRef().</p>\n"},{"syntax":"getRight()","name":"getRight","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Gets the x position of the right edge of the ofRectangle as float.</p>\n<p><strong>See also</strong>: getMaxX()</p>\n<p><strong>Returns</strong>: The y position of the right edge of the rectangle.</p>\n","desc":"<p>Equivalent to ofRectangle::getMaxX().</p>\n"},{"syntax":"getStandardized()","name":"getStandardized","returns":"ofRectangle","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the standardized representation of this rectangle.</p>\n<p>&quot;Standardized&quot; rectangles are rectangles whose width and height are positive.\nFor more information about standardized rectangles, see the discussion of the standardize() method.</p>\n<p><strong>Returns</strong>: the Standardized version of this ofRectangle.</p>\n","desc":""},{"syntax":"getTop()","name":"getTop","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Gets the y position of the top edge of the ofRectangle as float.</p>\n<p><strong>See also</strong>: getMinY()</p>\n<p><strong>Returns</strong>: The y position of the top edge of the rectangle.</p>\n","desc":"<p>Equivalent to ofRectangle::getMinY().</p>\n"},{"syntax":"getTopLeft()","name":"getTopLeft","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the top-left coordinates of the ofRectangle as glm::vec3.</p>\n<p><strong>See also</strong>: getMin()</p>\n<p><strong>Returns</strong>: The top-left coordinates of the rectangle.</p>\n","desc":"<p>Equivalent to ofRectangle::getMin().</p>\n"},{"syntax":"getTopRight()","name":"getTopRight","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the top-right coordinates of the ofRectangle as glm::vec3.</p>\n<p><strong>Returns</strong>: The top-right coordinates of the rectangle.</p>\n","desc":""},{"syntax":"getUnion(&rect)","name":"getUnion","returns":"ofRectangle","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>rect","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the union area between this rectangle and anohter.</p>\n<p><strong>See also</strong>: getIntersection(const ofRectangle&amp; rect) const</p>\n<p><strong>Parameters:</strong></p>\n<p>rect The rectangle to unite with.</p>\n<p><strong>Returns</strong>: A new ofRectangle whose area contains both the area of the\nthis rectangle and the passed rectangle..</p>\n","desc":"<p>Return a new ofRectangle whose area contains both the area of the ofRectangle and that of the passed ofRectangle.</p>\n"},{"syntax":"getVertAnchor(anchor)","name":"getVertAnchor","returns":"float","returns_description":null,"parameters":"ofAlignVert anchor","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>A convenience method that returns the value of one of the\nvertical edges of the ofRectangle using the ofAlignVert enum.</p>\n<p><strong>Parameters:</strong></p>\n<p>anchor The anchor position to query.</p>\n<p><strong>Returns</strong>: the value of the referenced anchor position.</p>\n","desc":"<p>Possible anchor values are:</p>\n<ul>\n<li><code>OF_ALIGN_VERT_IGNORE</code>  : returns 0.0</li>\n<li><code>OF_ALIGN_VERT_TOP</code>     : returns the position of the upper edge, equivalent to ofRectangle::getTop().</li>\n<li><code>OF_ALIGN_VERT_BOTTOM</code>  : returns the position of the bottom edge, equivalent to ofRectangle::getBottom().</li>\n<li><code>OF_ALIGN_VERT_CENTER</code>  : returns the y-position of the center of the ofRectangle.</li>\n</ul>\n<p>Any other anchor value will return <code><span class=\"token number\">0.0</span></code>.</p>\n"},{"syntax":"getWidth()","name":"getWidth","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Gets the width of the ofRectangle as float.</p>\n<p><strong>Returns</strong>: The width of the rectangle.</p>\n","desc":""},{"syntax":"getX()","name":"getX","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Gets the x position of the ofRectangle as float.</p>\n<p><strong>Returns</strong>: The x position of the rectangle.</p>\n","desc":""},{"syntax":"getY()","name":"getY","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Gets the y position of the ofRectangle as float.</p>\n<p><strong>Returns</strong>: the y position of the rectangle.</p>\n","desc":""},{"syntax":"growToInclude(&p)","name":"growToInclude","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Grow the ofRectangle to include the given point.</p>\n<p>This will potentially change the width, height, x-position, and y-\nposition of the ofRectangle.  If the point is already within the\nrectangle, this rectangle will remain unchanged.</p>\n<p><strong>Warning</strong>: The z-component of the passed glm::vec3 is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>p The position to include.</p>\n","desc":""},{"syntax":"growToInclude(&p)","name":"growToInclude","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"growToInclude(&p0, &p1)","name":"growToInclude","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p1","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Grow the ofRectangle to include the given line segment.</p>\n<p>This will potentially change the width, height, x-position, and\ny-position of the ofRectangle.  If the points are already within the\nrectangle, this rectangle will remain unchanged.</p>\n<p><strong>Warning</strong>: The z-components of the passed glm::vec3s are ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>p0 The first point to include.</p>\n<p>p1 The second point to include.</p>\n","desc":"<p>Modify the ofRectangle so that both the ofPoints given are enclosed within the rectangle.</p>\n"},{"syntax":"growToInclude(&p0, &p1)","name":"growToInclude","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p1","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Modify the ofRectangle so that both the ofPoints given are enclosed within the rectangle.</p>\n"},{"syntax":"growToInclude(&rect)","name":"growToInclude","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>rect","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Grow the ofRectangle to include the given ofRectangle.</p>\n<p>This will potentially change the width, height, x-position, and y-\nposition of the ofRectangle.  If the rectangle is already within the\nrectangle, this rectangle will remain unchanged.</p>\n<p><strong>Parameters:</strong></p>\n<p>rect The rectangle to include.</p>\n","desc":"<p>Expands the ofRectangle so that the ofRectangle passed into the method is entirely enclosed by the current ofRectangle.</p>\n"},{"syntax":"growToInclude(px, py)","name":"growToInclude","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> px<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> py","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Grow the ofRectangle to include the given (x, y) coordinates.</p>\n<p>This will potentially change the width, height, x-position, and y-\nposition of the ofRectangle. If the points are already within the\nrectangle, this rectangle will remain unchanged.</p>\n<p><strong>Parameters:</strong></p>\n<p>px The x-coordinate to include.</p>\n<p>py The y-coordiante to include.</p>\n","desc":""},{"syntax":"inside(&p)","name":"inside","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Determines if the glm::vec3 is within the ofRectangle.</p>\n<p>Note that points on the edge of the ofRectangle are not\nconsidered within the rectangle and will return false.</p>\n<p><strong>Warning</strong>: The z-component of the passed glm::vec3 is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>p The point to test.</p>\n<p><strong>Returns</strong>: true if the point p is inside this ofRectangle.</p>\n","desc":"<p>Coordinates (x, y) are considered inside the rectangle if:</p>\n<p>`x</p>\n"},{"syntax":"inside(&p)","name":"inside","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Coordinates (x, y) are considered inside the rectangle if:</p>\n<p>`x</p>\n"},{"syntax":"inside(&p0, &p1)","name":"inside","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p1","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Determines if both of the passed glm::vec3s are within the ofRectangle or not.</p>\n<p>Note that points on the edge of the ofRectangle are not considered\nwithin the rectangle and will return false.</p>\n<p><strong>Warning</strong>: The z-components of the passed glm::vec3s are ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>p0 The first point to test.</p>\n<p>p1 The second point to test.</p>\n<p><strong>Returns</strong>: true if both points are inside the rectangle.</p>\n","desc":"<p>This can be used to test if a line segment is inside the rectangle.</p>\n"},{"syntax":"inside(&p0, &p1)","name":"inside","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p1","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This can be used to test if a line segment is inside the rectangle.</p>\n"},{"syntax":"inside(&rect)","name":"inside","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>rect","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Determines if another ofRectangle is completely within the ofRectangle.</p>\n<p>Note that rectangles that share an edge with the ofRectangle are not\nconsidered within the rectangle and will return false.</p>\n<p><strong>Parameters:</strong></p>\n<p>rect The ofRectangle to test.</p>\n<p><strong>Returns</strong>: true if all four corners of the rect are within this rectangle.</p>\n","desc":""},{"syntax":"inside(px, py)","name":"inside","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> px<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> py","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Determines if the coordinates (x, y) are within the ofRectangle.</p>\n<p>Note that coordinates on the edge of the ofRectangle are not\nconsidered within the rectangle and will return false.</p>\n<p><strong>Parameters:</strong></p>\n<p>px The x-coordinate to test.</p>\n<p>py The y-coordinate to test.</p>\n<p><strong>Returns</strong>: true if px and py are inside this ofRectangle.</p>\n","desc":"<p>Coordinates (x, y) are considered inside the rectangle if:</p>\n<p>`x</p>\n"},{"syntax":"intersects(&p0, &p1)","name":"intersects","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p1","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Determines if a line segment intersects with the ofRectangle.</p>\n<p><strong>Warning</strong>: The z-components of the passed glm::vec3s are ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>p0 The first point to test.</p>\n<p>p1 The second point to test.</p>\n<p><strong>Returns</strong>: <code><span class=\"token boolean\">true</span></code> if the line segment defined by the two passed glm::vec3s\neither crosses the perimeter of the ofRectangle or is completely\ncontained within.</p>\n","desc":"<p>This method can be used to check if any part of the line segment intersects with the rectangle.</p>\n"},{"syntax":"intersects(&p0, &p1)","name":"intersects","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p1","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This method can be used to check if any part of the line segment intersects with the rectangle.</p>\n"},{"syntax":"intersects(&rect)","name":"intersects","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>rect","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Determines if another rectangle intersects with this rectangle.</p>\n<p>Rectangles that only share an edge and do not intersect otherwise are\nnot considered to intersect and will return false.</p>\n<p><strong>Parameters:</strong></p>\n<p>rect The rectangle to test.</p>\n<p><strong>Returns</strong>: <code><span class=\"token boolean\">true</span></code> if the area contained within the ofRectangle overlaps\nwith the area contained within the passed ofRectangle.</p>\n","desc":"<p>Returns true if the area contained within the ofRectangle overlaps with the area contained within the passed ofRectangle,\nreturns false otherwise.</p>\n<p>Rectangles that only share an edge and do not intersect otherwise are not considered to intersect and will return false.</p>\n"},{"syntax":"isEmpty()","name":"isEmpty","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Determines if the ofRectangle's area is zero.</p>\n<p><strong>See also</strong>: getArea().</p>\n<p><strong>Returns</strong>: true if both the width == 0 and height == 0, false if either is non-zero.</p>\n","desc":""},{"syntax":"isStandardized()","name":"isStandardized","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"isZero()","name":"isZero","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"map(&coeff)","name":"map","returns":"glm::vec2","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>coeff","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Maps a normalized coordinate into this rectangle</p>\n<p>Normalized coordinates range from [0,1] inclusive. It is used to define a ratio\nbetween the coordinates and a unitary rectangle. This ratio is mapped into\nthis rectangle to scale to real values. If normalized coordinates are out of bounds,\noutput will be scaled accordingly.</p>\n<p><strong>Parameters:</strong></p>\n<p>coeff Normalized coordinate to map to this rectangle</p>\n<p><strong>Returns</strong>: The mapped coordinate</p>\n","desc":""},{"syntax":"map(&coeff)","name":"map","returns":"ofRectangle","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>coeff","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Maps a normalized coordinate into this rectangle</p>\n<p>Normalized rectangles' position, width and height range from [0,1] inclusive.\nIt is used to define a ratio between the rectangle and a unitary rectangle.\nThis ratio is mapped into this rectangle to scale to real values.\nIf normalized rectangle is out of bounds, output will be scaled accordingly.</p>\n<p><strong>Parameters:</strong></p>\n<p>coeff Normalized rectangle to map to this rectangle</p>\n<p><strong>Returns</strong>: The mapped coordinate</p>\n","desc":""},{"syntax":"mapClamp(&coeff)","name":"mapClamp","returns":"glm::vec2","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>coeff","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Maps a normalized coordinate into this rectangle, clamping if out of bounds</p>\n<p>Normalized coordinates range from [0,1] inclusive. It is used to define a ratio\nbetween the coordinates and a unitary rectangle. This ratio is mapped into\nthis rectangle to scale to real values. If normalized coordinates are out of bounds,\noutput will be clamped to this rectangle's position, width and height.</p>\n<p><strong>Parameters:</strong></p>\n<p>coeff Normalized coordinate to map to this rectangle</p>\n<p><strong>Returns</strong>: The mapped coordinate, clamped</p>\n","desc":""},{"syntax":"mapClamp(&coeff)","name":"mapClamp","returns":"ofRectangle","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>coeff","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Maps a normalized rectangle to this rectangle, clamping if out of bounds</p>\n<p>Normalized rectangles' position, width and height range from [0,1] inclusive.\nIt is used to define a ratio between the rectangle and a unitary rectangle.\nThis ratio is mapped into this rectangle to scale to real values.\nIf normalized rectangle is out of bounds, output will be clamped to this\nrectangle's position, width and height.</p>\n<p><strong>Parameters:</strong></p>\n<p>coeff Normalized rectangle to map to this rectangle</p>\n<p><strong>Returns</strong>: The mapped rectangle</p>\n","desc":""},{"syntax":"ofRectangle(&p, w, h)","name":"ofRectangle","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"ofRectangle(&p, w, h)","name":"ofRectangle","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofRectangle(&p0, &p1)","name":"ofRectangle","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p1","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Construct a rectangle by defining two corners.</p>\n<p><strong>Warning</strong>: The z-components of the passed glm::vec3s are ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>p0 An glm::vec3 representing the upper left hand corner.</p>\n<p>p1 An glm::vec3 representing the lower right hand corner.</p>\n","desc":""},{"syntax":"ofRectangle(&p0, &p1)","name":"ofRectangle","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p1","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofRectangle(&rect)","name":"ofRectangle","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>rect","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Construct a rectangle by copying another rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>rect The rectangle to copy.</p>\n","desc":""},{"syntax":"ofRectangle()","name":"ofRectangle","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Construct a rectangle with zero width and zero height at 0, 0.</p>\n","desc":""},{"syntax":"ofRectangle(px, py, w, h)","name":"ofRectangle","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">float</span> px<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> py<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"operator!=(&rect)","name":"operator!=","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>rect","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>If the two ofRectangles differ in x, y, width, or height, they\nare considered unequal.</p>\n<p><strong>Parameters:</strong></p>\n<p>rect The rectangle to compare.</p>\n<p><strong>Returns</strong>: True if the rectangles are not equal.</p>\n","desc":""},{"syntax":"operator+(&p)","name":"operator+","returns":"ofRectangle","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a new ofRectangle where the x and y positions of the\nrectangle are offset by the (x, y) coordinates of the glm::vec3.</p>\n<p><strong>Parameters:</strong></p>\n<p>p The point to translate.</p>\n<p><strong>Returns</strong>: The translated ofRectangle.</p>\n","desc":""},{"syntax":"operator+(&p)","name":"operator+","returns":"ofRectangle","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator-(&p)","name":"operator-","returns":"ofRectangle","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a new ofRectangle where the x and y-positions of the\nrectangle are offset by the (x, y) coordinates of the glm::vec3.</p>\n<p><strong>Parameters:</strong></p>\n<p>p The point to translate.</p>\n<p><strong>Returns</strong>: The translated ofRectangle.</p>\n","desc":""},{"syntax":"operator-(&p)","name":"operator-","returns":"ofRectangle","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator=(&rect)","name":"operator=","returns":"ofRectangle &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>rect","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"<p>Assignment operator.</p>\n<p><strong>Parameters:</strong></p>\n<p>rect The rectangle to assign.</p>\n<p><strong>Returns</strong>: A reference to this rectangle.</p>\n","desc":""},{"syntax":"operator==(&rect)","name":"operator==","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>rect","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>If both ofRectangles have the same x, y, width, and height,\nthey are considered equal.</p>\n<p><strong>Parameters:</strong></p>\n<p>rect The rectangle to compare.</p>\n<p><strong>Returns</strong>: True if the rectangles are equal.</p>\n","desc":""},{"syntax":"scale(&s)","name":"scale","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>s","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Scale the rectangle.</p>\n<p>Scaling will scale the width and the height, but will not change the\nposition.</p>\n<p><strong>Warning</strong>: The z-component of the passed glm::vec3 is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>s The scaling factor.</p>\n","desc":"<p>Scales the width and height of the ofRectangle by multiplying the current width and\nheight with the (x,y) coordinates of the passed-in ofPoint.</p>\n<p>This is equivalent to calling:</p>\n<pre><code>\nofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nofPoint <span class=\"token function\">myScaler</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyRect<span class=\"token punctuation\">.</span><span class=\"token function\">scaleWidth</span><span class=\"token punctuation\">(</span>myScaler<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyRect<span class=\"token punctuation\">.</span><span class=\"token function\">scaleHeight</span><span class=\"token punctuation\">(</span>myScaler<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n"},{"syntax":"scale(&s)","name":"scale","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>s","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Scales the width and height of the ofRectangle by multiplying the current width and\nheight with the (x,y) coordinates of the passed-in ofPoint.</p>\n<p>This is equivalent to calling:</p>\n<pre><code>\nofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nofPoint <span class=\"token function\">myScaler</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyRect<span class=\"token punctuation\">.</span><span class=\"token function\">scaleWidth</span><span class=\"token punctuation\">(</span>myScaler<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyRect<span class=\"token punctuation\">.</span><span class=\"token function\">scaleHeight</span><span class=\"token punctuation\">(</span>myScaler<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n"},{"syntax":"scale(s)","name":"scale","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> s","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Scale the rectangle.</p>\n<p>Scaling will scale the width and the height, but will not change the\nposition.</p>\n<p><strong>Parameters:</strong></p>\n<p>s The scaling factor.</p>\n","desc":"<p>Uniformly scales the ofRectangle by multiplying both the current width and current height with the passed-in float.</p>\n<p>This is equivalent to calling:</p>\n<pre><code>\nofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">float</span> s <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\nmyRect<span class=\"token punctuation\">.</span><span class=\"token function\">scaleWidth</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyRect<span class=\"token punctuation\">.</span><span class=\"token function\">scaleHeight</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n"},{"syntax":"scale(sX, sY)","name":"scale","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> sX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sY","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Scale the rectangle.</p>\n<p>Scaling will scale the width and the height, but will not change the\nposition.</p>\n<p><strong>Parameters:</strong></p>\n<p>sX The width-scaling factor.</p>\n<p>sY The height-scaling factor.</p>\n","desc":"<p>Scales the width and height of the ofRectangle by multiplying the current width and height with the passed-in floats.</p>\n<p>This is equivalent to calling:</p>\n<pre><code>\nofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">float</span> sX <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> sY <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\nmyRect<span class=\"token punctuation\">.</span><span class=\"token function\">scaleWidth</span><span class=\"token punctuation\">(</span>sX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyRect<span class=\"token punctuation\">.</span><span class=\"token function\">scaleHeight</span><span class=\"token punctuation\">(</span>sY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n"},{"syntax":"scaleFromCenter(&s)","name":"scaleFromCenter","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>s","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Scales both the width and height the ofRectangle from its center.</p>\n<p>The center point of the rectangle will remain fixed and the width,\nheight, x, and y will be adjusted.</p>\n<p><strong>Warning</strong>: The z-component of the passed glm::vec3 is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>s The scaling factor.</p>\n","desc":"<p>Scales both the width and height the ofRectangle from its center point.\nThe center point of the rectangle will remain fixed and the width, height, x, and y will be adjusted.</p>\n<p>This is equivalent to calling:</p>\n<pre><code>\nofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nofPoint <span class=\"token function\">myScaler</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyRect<span class=\"token punctuation\">.</span><span class=\"token function\">scaleFromCenter</span><span class=\"token punctuation\">(</span>myScaler<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> myScaler<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n"},{"syntax":"scaleFromCenter(&s)","name":"scaleFromCenter","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>s","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Scales both the width and height the ofRectangle from its center point.\nThe center point of the rectangle will remain fixed and the width, height, x, and y will be adjusted.</p>\n<p>This is equivalent to calling:</p>\n<pre><code>\nofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nofPoint <span class=\"token function\">myScaler</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyRect<span class=\"token punctuation\">.</span><span class=\"token function\">scaleFromCenter</span><span class=\"token punctuation\">(</span>myScaler<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> myScaler<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n"},{"syntax":"scaleFromCenter(s)","name":"scaleFromCenter","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> s","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Scales both the width and height the ofRectangle from its center.</p>\n<p>The center point of the rectangle will remain fixed and the width,\nheight, x, and y will be adjusted.</p>\n<p><strong>Parameters:</strong></p>\n<p>s The scaling factor.</p>\n","desc":"<p>Uniformly scales the ofRectangle from its center point.\nThe center point of the rectangle will remain fixed and the width, height, x, and y will be adjusted.</p>\n"},{"syntax":"scaleFromCenter(sX, sY)","name":"scaleFromCenter","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> sX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sY","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Scales both the width and height the ofRectangle from its center.</p>\n<p>The center point of the rectangle will remain fixed and the width,\nheight, x, and y will be adjusted.</p>\n<p><strong>Parameters:</strong></p>\n<p>sX the width-scaling factor.</p>\n<p>sY the height-scaling factor.</p>\n","desc":"<p>Scales both the width and height the ofRectangle from its center point.\nThe center point of the rectangle will remain fixed and the width, height, x, and y will be adjusted.</p>\n"},{"syntax":"scaleHeight(sY)","name":"scaleHeight","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> sY","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Scale the height of the rectangle.</p>\n<p>This will scale the height but will not change the position and width.</p>\n<p><strong>Parameters:</strong></p>\n<p>sY The height-scaling factor.</p>\n","desc":"<p>Scales the height of the ofRectangle by multiplying the current height with the passed-in float.</p>\n"},{"syntax":"scaleTo(&targetRect, scaleMode = OF_SCALEMODE_FIT)","name":"scaleTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>targetRect<span class=\"token punctuation\">,</span> ofScaleMode scaleMode<span class=\"token operator\">=</span>OF_SCALEMODE_FIT","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Scale the rectanle using a target ofRectangle and ofScaleMode.</p>\n<p>Adjusts the ofRectangle to match the provided ofRectangle using the\nprovided ofScaleMode.</p>\n<p><strong>Parameters:</strong></p>\n<p>targetRect The Target Rectangle to scale to.</p>\n<p>scaleMode The scale mode to use when scaling.</p>\n","desc":"<p>Adjusts the ofRectangle to match the passed-in ofRectangle using the passed-in ofScaleMode.</p>\n<p>Assuming the ofRectangle as the Subject and the passed-in ofRectangle as the Target:</p>\n<p><strong>OF_SCALEMODE_FIT</strong>:\nThis centers the Subject rectangle within the Target rectangle, and resizes the Subject rectangle to completely fit within the Target Rectangle.</p>\n<ul>\n<li>It fits the Subject rectangle inside the target rectangle.</li>\n<li>It preserves Subject's aspect ratio.</li>\n<li>The Subject's final area &lt;= the Target's area.</li>\n<li>The Subject's center == the Target's center.</li>\n</ul>\n<p><strong>OF_SCALEMODE_FILL</strong>:\nThis centers the Subject rectangle within the Target rectangle, and resizes the Subject rectangle to completely encompass the Target Rectangle.</p>\n<ul>\n<li>It fills the Target rectangle with the Subject rectangle.</li>\n<li>It preserves the Subject's aspect ratio.</li>\n<li>The Subject's Area</li>\n</ul>\n"},{"syntax":"scaleTo(&targetRect, subjectAspectRatioMode, modelHorzAnchor, modelVertAnchor, subjectHorzAnchor, subjectVertAnchor)","name":"scaleTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>targetRect<span class=\"token punctuation\">,</span> ofAspectRatioMode subjectAspectRatioMode<span class=\"token punctuation\">,</span> ofAlignHorz modelHorzAnchor<span class=\"token punctuation\">,</span> ofAlignVert modelVertAnchor<span class=\"token punctuation\">,</span> ofAlignHorz subjectHorzAnchor<span class=\"token punctuation\">,</span> ofAlignVert subjectVertAnchor","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Scale the rectangle using a target ofRectangle and parameters.</p>\n<p>Adjusts the ofRectangle to match the passed-in ofRectangle. It will\nuse the ofAspectRatioMode to scale the ofRectangle, and will use the\nuse the alignment anchor parameters to position the rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>targetRect The Target Rectangle to scale to.</p>\n<p>subjectAspectRatioMode Aspect ratio scaling mode.</p>\n<p>modelHorzAnchor The target horizontal alignment method.</p>\n<p>modelVertAnchor The target vertical alignment method.</p>\n<p>subjectHorzAnchor The subject horizontal alignment method.</p>\n<p>subjectVertAnchor The subject vertical alignment method.</p>\n","desc":"<p>Adjusts the ofRectangle to match the passed-in ofRectangle.  It will use the ofAspectRatioMode to scale the ofRectangle, and will use the use the alignment anchor parameters to position the rectangle.</p>\n<p>Assuming the ofRectangle as the Subject and the passed-in ofRectangle as the Target:</p>\n<p><strong>ofAspectRatioMode Options:</strong></p>\n<p><strong>OF_ASPECT_RATIO_IGNORE</strong>            : Sets the Subject rectangle's width and height to match those of the Target.\n<strong>OF_ASPECT_RATIO_KEEP</strong>              : Resizes the Subject rectangle to completely fit within the Target rectangle.\n<strong>OF_ASPECT_RATIO_KEEP_BY_EXPANDING</strong> : Resizes the Subject rectangle to completely enclose the Target rectangle.</p>\n<p><strong>ofAlignHorz Options:</strong></p>\n<p><strong>OF_ALIGN_HORZ_IGNORE</strong>              : Does not perform any horizontal alignment.\n<strong>OF_ALIGN_HORZ_LEFT</strong>                : Uses the left edge of the rectangle to horizontally anchor the alignment.\n<strong>OF_ALIGN_HORZ_RIGHT</strong>               : Uses the right edge of the rectangle to horizontally anchor the alignment.\n<strong>OF_ALIGN_HORZ_CENTER</strong>              : Uses the center of the rectangle to horizontally anchor the alignment.</p>\n<p><strong>ofAlignVert Options:</strong></p>\n<p><strong>OF_ALIGN_VERT_IGNORE</strong>              : Does not perform any vertical alignment.\n<strong>OF_ALIGN_VERT_TOP</strong>                 : Uses the upper edge of the rectangle to vertically anchor the alignment.\n<strong>OF_ALIGN_VERT_BOTTOM</strong>              : Uses the bottom edge of the rectangle to vertically anchor the alignment.\n<strong>OF_ALIGN_VERT_CENTER</strong>              : Uses the center of the rectangle to vertically anchor the alignment.</p>\n<p>For a working example of how to use ofAspectRatioMode, ofAlignVert, and ofAlignHorz, see the <em>graphics/rectangleAlignmentAndScaling/</em> example within the examples directory.</p>\n"},{"syntax":"scaleTo(&targetRect, subjectAspectRatioMode, sharedHorzAnchor = OF_ALIGN_HORZ_CENTER, sharedVertAnchor = OF_ALIGN_VERT_CENTER)","name":"scaleTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>targetRect<span class=\"token punctuation\">,</span> ofAspectRatioMode subjectAspectRatioMode<span class=\"token punctuation\">,</span> ofAlignHorz sharedHorzAnchor<span class=\"token operator\">=</span>OF_ALIGN_HORZ_CENTER<span class=\"token punctuation\">,</span> ofAlignVert sharedVertAnchor<span class=\"token operator\">=</span>OF_ALIGN_VERT_CENTER","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Scale the rectangle using a target ofRectangle and parameters.</p>\n<p>Scales the ofRectangle to match the target ofRectangle. It will use the\nofAspectRatioMode to scale the ofRectangle and will use the\nalignment anchor parameters to position the rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>targetRect The Target Rectangle to scale to.</p>\n<p>subjectAspectRatioMode Aspect ratio scaling mode.</p>\n<p>sharedHorzAnchor The horizontal alignment method.</p>\n<p>sharedVertAnchor The vertical alignment method.</p>\n","desc":"<p>Adjusts the ofRectangle to match the passed-in ofRectangle. It will use the ofAspectRatioMode to scale the ofRectangle, and will use the alignment anchor parameters to position the rectangle.</p>\n<p>This is a convenient method when both the target and subject rectangles are using the same alignment anchors. For a more complete explanation, see</p>\n<pre><code>\n<span class=\"token keyword\">void</span> <span class=\"token function\">scaleTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofRectangle<span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span> targetRect<span class=\"token punctuation\">,</span> \n\t\t\t ofAspectRatioMode subjectAspectRatioMode<span class=\"token punctuation\">,</span> \n\t\t\t ofAlignHorz modelHorzAnchor<span class=\"token punctuation\">,</span> \n\t\t\t ofAlignVert modelVertAnchor<span class=\"token punctuation\">,</span> \n\t\t\t ofAlignHorz subjectHorzAnchor<span class=\"token punctuation\">,</span> \n\t\t\t ofAlignVert subjectVertAnchor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>For a working example of how to use ofAspectRatioMode, ofAlignVert, and ofAlignHorz, see the <em>graphics/rectangleAlignmentAndScaling/</em> example within the examples directory.</p>\n"},{"syntax":"scaleWidth(sX)","name":"scaleWidth","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> sX","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Scale the width of the rectangle.</p>\n<p>This will scale the width but will not change the position or height.</p>\n<p><strong>Parameters:</strong></p>\n<p>sX The width-scaling factor.</p>\n","desc":"<p>Scales the width of the ofRectangle by multiplying the current width with the passed-in float.</p>\n"},{"syntax":"set(&p, w, h)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"<p>Sets the (x,y) coordinates, width, and height of the ofRectangle.</p>\n"},{"syntax":"set(&p, w, h)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Sets the (x,y) coordinates, width, and height of the ofRectangle.</p>\n"},{"syntax":"set(&p0, &p1)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p1","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the position and size of the rectangle using corners.</p>\n<p><strong>Warning</strong>: The z-components of the passed glm::vec3s are ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>p0 The glm::vec3 representing the upper left hand corner.</p>\n<p>p1 The glm::vec3 representing the lower right hand corner.</p>\n","desc":"<p>Sets the x position, y position, width, and height of the ofRectangle to enclose the line segment defined by the passed ofPoints.</p>\n<p>The rectangle will always be in standardized form, regardless of the order of the ofPoints passed in.</p>\n"},{"syntax":"set(&p0, &p1)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p1","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Sets the x position, y position, width, and height of the ofRectangle to enclose the line segment defined by the passed ofPoints.</p>\n<p>The rectangle will always be in standardized form, regardless of the order of the ofPoints passed in.</p>\n"},{"syntax":"set(&rect)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>rect","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the position and size by copying them from anohter rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>rect The rectangle to copy.</p>\n","desc":"<p>Sets the x position, y position, width, and height of the ofRectangle to match those of the passed ofRectangle.</p>\n"},{"syntax":"set(px, py, w, h)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> px<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> py<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"<p>Sets the x position, y position, width, and height of the ofRectangle.</p>\n"},{"syntax":"setFromCenter(&p, w, h)","name":"setFromCenter","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set position and size of the rectangle from the center.</p>\n<p>The center of the rectangle is defined and the width and height grow\nout around the center.</p>\n<p><strong>Parameters:</strong></p>\n<p>p The position of the rectangle's center as an glm::vec3.</p>\n<p>w The width of the rectangle.</p>\n<p>h The height of the rectangle.</p>\n","desc":"<p>Sets the position, width, and height of the ofRectangle.\nThe (x,y) coordinates passed into the function determine the center point of the ofRectangle.</p>\n"},{"syntax":"setFromCenter(&p, w, h)","name":"setFromCenter","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Sets the position, width, and height of the ofRectangle.\nThe (x,y) coordinates passed into the function determine the center point of the ofRectangle.</p>\n"},{"syntax":"setFromCenter(px, py, w, h)","name":"setFromCenter","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> px<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> py<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set position and size of the rectangle from the center.</p>\n<p>The center of the rectangle is defined and the width and height grow\nout around the center.</p>\n<p><strong>Parameters:</strong></p>\n<p>px The x-position of the rectangle's center.</p>\n<p>py The y-position of the rectangle's center.</p>\n<p>w The width of the rectangle.</p>\n<p>h The height of the rectangle.</p>\n","desc":"<p>Sets the position, width, and height of the ofRectangle.\nThe x and y position passed into the function determine the center point of the ofRectangle.</p>\n"},{"syntax":"setHeight(h)","name":"setHeight","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> h","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the height of the rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>h The new height.</p>\n","desc":"<p>Sets the height of the ofRectangle.</p>\n"},{"syntax":"setPosition(&p)","name":"setPosition","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the position of the rectangle.</p>\n<p><strong>Warning</strong>: The z-component of the passed glm::vec3 is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>p The position as an glm::vec3.</p>\n","desc":"<p>Sets the (x,y) position of the ofRectangle by passing in x and y as an ofPoint.</p>\n"},{"syntax":"setPosition(px, py)","name":"setPosition","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> px<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> py","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the position of the rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>px The new x-position.</p>\n<p>py The new y-position.</p>\n","desc":"<p>Sets the (x,y) position of the ofRectangle by passing in x and y as floats.</p>\n"},{"syntax":"setSize(w, h)","name":"setSize","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the size of the rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>w The new width.</p>\n<p>h The new height.</p>\n","desc":""},{"syntax":"setWidth(w)","name":"setWidth","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> w","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the width of the rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>w The new width.</p>\n","desc":"<p>Sets the width of the ofRectangle.</p>\n"},{"syntax":"setX(px)","name":"setX","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> px","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the x-position of the rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>px The new x-position.</p>\n","desc":"<p>Sets the x position of the ofRectangle.</p>\n"},{"syntax":"setY(py)","name":"setY","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> py","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the y-position of the rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>py The new y-position.</p>\n","desc":"<p>Sets the y position of the ofRectangle.</p>\n"},{"syntax":"standardize()","name":"standardize","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"<p>ofRectangle is a simple container for describing the position\nand size of 2D rectangles. Like many rectangle data structures\nfound in other frameworks and graphics libraries, member\nwidth and height variables can take negative values.\nAdditionally, x / y position and width / height are publicly\naccessible, resulting in great programming freedom.\nConsequently, two visually identical rectangles can be\nrepresented in the following ways:</p>\n<pre><code>\tofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">// OR</span>\n\t\n\tofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>While both representations will yield the same visual\nresults in all openFrameworks renderers, the results of\nsome method operations that modify x / y / width / height\n(such as scaling) produce mathematically correct, but\nvisually different results for each of the above\nrepresentations.</p>\n"},{"syntax":"translate(&dp)","name":"translate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>dp","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Translate the rectangle's position by an x and y amount.</p>\n<p><strong>Warning</strong>: The z-component of the passed glm::vec3 is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>dp The amount to translate as an glm::vec3.</p>\n","desc":"<p>Offsets the position of the ofRectangle in the both the x and y dimensions by passing in an ofPoint.</p>\n"},{"syntax":"translate(&dp)","name":"translate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>dp","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Offsets the position of the ofRectangle in the both the x and y dimensions by passing in an ofPoint.</p>\n"},{"syntax":"translate(dx, dy)","name":"translate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> dx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> dy","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Translate the rectangle's position by an x and y amount.</p>\n<p><strong>Parameters:</strong></p>\n<p>dx The amount to translate in the x direction.</p>\n<p>dy The amount to translate in the y direction.</p>\n","desc":"<p>Offsets the position of the ofRectangle in the both the x and y dimensions by passing in two floats.</p>\n"},{"syntax":"translateX(dx)","name":"translateX","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> dx","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Translate the x-position of the rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>dx The amount to translate on the x-axis.</p>\n","desc":"<p>Offsets the position of the ofRectangle in the x dimension by a given amount.</p>\n"},{"syntax":"translateY(dy)","name":"translateY","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> dy","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Translate the y-position of the rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>dy The amount to translate on the y-axis.</p>\n","desc":"<p>Offsets the position of the ofRectangle in the y dimension by a given amount.</p>\n"},{"syntax":"~ofRectangle()","name":"~ofRectangle","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Destroy the rectangle.</p>\n","desc":""},{"name":"height","type":"float","access":"public","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>The height of the ofRectangle.</p>\n","desc":"<p>The height variable contains the height of the ofRectangle.</p>\n"},{"name":"position","type":"ofPoint","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>The (x,y) position of the ofRectangle as an glm::vec3.</p>\n<p><strong>Warning</strong>: The z-component of this position is preserved and can be used\nbut all ofRectangle operations will ignore the z-component.</p>\n","desc":""},{"name":"width","type":"float","access":"public","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>The width of the ofRectangle.</p>\n","desc":""},{"name":"x","type":"float","access":"public","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>The x position of the ofRectangle.</p>\n","desc":""},{"name":"y","type":"float","access":"public","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>The y position of the ofRectangle.</p>\n","desc":"<p>The y variable contains the y position of the ofRectangle.</p>\n"},{}],"document":"<p>#class ofRectangle</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n_extends: _\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>A class representing a 2D rectangle.</p>\n<p>ofRectangle is a simple container for describing the position and size of a\n2D rectangle. The ofRectangle::standardize() method can be used to ensure\nthat the origin is in the &quot;standard&quot; form.</p>\n<p><strong>Warning</strong>: While ofRectangle takes glm::vec3\nall ofRectangle operations are 2D only, ignoring the z-component.</p>\n<p>##Description</p>\n<p>##Description</p>\n<p>ofRectangle is a simple container for describing the position and size of a 2D rectangle. The ofRectangle class provides a data structure and a collection of useful helper methods for manipulating rectangles.</p>\n<p>Since the <code>width</code> and <code>height</code> variables can be negative, the x/y-position is not guaranteed to represent the upper right hand corner. For example, two visually identical rectangles can be represented in the following ways:</p>\n<pre><code>    ofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>or</p>\n<pre><code>    ofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>While both representations will yield the same visual results in all openFrameworks renderers, the results of some method operations that modify x, y, width and height (such as scaling) produce mathematically correct, but visually different results for each of the above representations.</p>\n<p>To avoid this ambiguity, users should prefer &quot;standardized&quot; rectangles. &quot;Standardized&quot; rectangles are rectangles whose width &gt;= 0 and height &gt;= 0. The ofRectangle::standardize() method can be used to ensure that the origin is in the &quot;standard&quot; form.</p>\n<p>##Methods</p>\n<p>###void alignTo(&amp;targetPoint, thisHorzAnchor = OF_ALIGN_HORZ_CENTER, thisVertAnchor = OF_ALIGN_VERT_CENTER)</p>\n<p>&lt;!--\n<em>syntax: alignTo(&amp;targetPoint, thisHorzAnchor = OF_ALIGN_HORZ_CENTER, thisVertAnchor = OF_ALIGN_VERT_CENTER)</em>\n<em>name: alignTo</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;targetPoint, ofAlignHorz thisHorzAnchor=OF_ALIGN_HORZ_CENTER, ofAlignVert thisVertAnchor=OF_ALIGN_VERT_CENTER</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Align this ofRectangle to an glm::vec3 in both x- and y dimentions.</p>\n<p>Aligns the position of the ofRectangle to the given point using an\nofAlignHorz constant and an ofAlignVert constant. If neither constant is\npassed in, this will align the center of the rectangle.</p>\n<p><strong>Warning</strong>: The z-component of the passed glm::vec3 is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>targetPoint The target glm::vec3 to align to.</p>\n<p>thisHorzAnchor The horizontal alignment anchor.</p>\n<p>thisVertAnchor The vertical alignment anchor.</p>\n<p>_description: _</p>\n<p><strong>ofAlignHorz Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_HORZ_IGNORE</code> : Does not perform any horizontal alignment.</li>\n<li><code>OF_ALIGN_HORZ_LEFT</code>   : Uses the left edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_RIGHT</code>  : Uses the right edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_CENTER</code> : Uses the center of the rectangle to horizontally anchor the alignment.</li>\n</ul>\n<p><strong>ofAlignVert Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_VERT_IGNORE</code> : Does not perform any vertical alignment.</li>\n<li><code>OF_ALIGN_VERT_TOP</code>    : Uses the upper edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_BOTTOM</code> : Uses the bottom edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_CENTER</code> : Uses the center of the rectangle to vertically anchor the alignment.</li>\n</ul>\n<p>For a working example of how to use ofAlignVert and ofAlignHorz, see the <em>graphics/rectangleAlignmentAndScaling/</em> example within the examples directory.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void alignTo(&amp;targetPoint, thisHorzAnchor = OF_ALIGN_HORZ_CENTER, thisVertAnchor = OF_ALIGN_VERT_CENTER)</p>\n<p>&lt;!--\n<em>syntax: alignTo(&amp;targetPoint, thisHorzAnchor = OF_ALIGN_HORZ_CENTER, thisVertAnchor = OF_ALIGN_VERT_CENTER)</em>\n<em>name: alignTo</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;targetPoint, ofAlignHorz thisHorzAnchor=OF_ALIGN_HORZ_CENTER, ofAlignVert thisVertAnchor=OF_ALIGN_VERT_CENTER</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p><strong>ofAlignHorz Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_HORZ_IGNORE</code> : Does not perform any horizontal alignment.</li>\n<li><code>OF_ALIGN_HORZ_LEFT</code>   : Uses the left edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_RIGHT</code>  : Uses the right edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_CENTER</code> : Uses the center of the rectangle to horizontally anchor the alignment.</li>\n</ul>\n<p><strong>ofAlignVert Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_VERT_IGNORE</code> : Does not perform any vertical alignment.</li>\n<li><code>OF_ALIGN_VERT_TOP</code>    : Uses the upper edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_BOTTOM</code> : Uses the bottom edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_CENTER</code> : Uses the center of the rectangle to vertically anchor the alignment.</li>\n</ul>\n<p>For a working example of how to use ofAlignVert and ofAlignHorz, see the <em>graphics/rectangleAlignmentAndScaling/</em> example within the examples directory.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void alignTo(&amp;targetRect, sharedHorzAnchor = OF_ALIGN_HORZ_CENTER, sharedVertAnchor = OF_ALIGN_VERT_CENTER)</p>\n<p>&lt;!--\n<em>syntax: alignTo(&amp;targetRect, sharedHorzAnchor = OF_ALIGN_HORZ_CENTER, sharedVertAnchor = OF_ALIGN_VERT_CENTER)</em>\n<em>name: alignTo</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;targetRect, ofAlignHorz sharedHorzAnchor=OF_ALIGN_HORZ_CENTER, ofAlignVert sharedVertAnchor=OF_ALIGN_VERT_CENTER</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Align this ofRectangle to an glm::vec3 in both x- and y dimentions using a shared anchor.</p>\n<p>Aligns the position of the ofRectangle to that of the passed-in\nofRectangle. Can take an ofAlignHorz constant and an ofAlignVert\nconstant.</p>\n<p>If neither constant is passed in, this will align the centers of the\nrectangles.</p>\n<p>If constants are passed in, it will use those constants for both\nrectangles.</p>\n<p><strong>Parameters:</strong></p>\n<p>targetRect The target ofRectangle to align this rectangle to.</p>\n<p>sharedHorzAnchor The alignment anchor for both rectangles.</p>\n<p>sharedVertAnchor The alignment anchor for both rectangles.</p>\n<p>_description: _</p>\n<p><strong>ofAlignHorz Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_HORZ_IGNORE</code> : Does not perform any horizontal alignment.</li>\n<li><code>OF_ALIGN_HORZ_LEFT</code>   : Uses the left edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_RIGHT</code>  : Uses the right edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_CENTER</code> : Uses the center of the rectangle to horizontally anchor the alignment.</li>\n</ul>\n<p><strong>ofAlignVert Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_VERT_IGNORE</code> : Does not perform any vertical alignment.</li>\n<li><code>OF_ALIGN_VERT_TOP</code>    : Uses the upper edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_BOTTOM</code> : Uses the bottom edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_CENTER</code> : Uses the center of the rectangle to vertically anchor the alignment.</li>\n</ul>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void alignTo(&amp;targetRect, targetHorzAnchor, targetVertAnchor, thisHorzAnchor, thisVertAnchor)</p>\n<p>&lt;!--\n<em>syntax: alignTo(&amp;targetRect, targetHorzAnchor, targetVertAnchor, thisHorzAnchor, thisVertAnchor)</em>\n<em>name: alignTo</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;targetRect, ofAlignHorz targetHorzAnchor, ofAlignVert targetVertAnchor, ofAlignHorz thisHorzAnchor, ofAlignVert thisVertAnchor</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Vertically align this ofRectangle to another target ofRectangle.</p>\n<p>Aligns the position of the ofRectangle to that of the passed-in\nofRectangle. Takes two ofAlignHorz constants and two ofAlignVert\nconstants.</p>\n<p>Will align the chosen anchors in the ofRectangle with the chosen\nanchors in the passed-in ofRectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>targetRect The target ofRectangle to align this rectangle to.</p>\n<p>targetHorzAnchor The vertical alignment anchor for the target rectangle.</p>\n<p>targetVertAnchor The horizontal alignment anchor for the target rectangle.</p>\n<p>thisHorzAnchor The horizontal alignment anchor for this rectangle.</p>\n<p>thisVertAnchor The vertical alignment anchor for this rectangle.</p>\n<p>_description: _</p>\n<p><strong>ofAlignHorz Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_HORZ_IGNORE</code> : Does not perform any horizontal alignment.</li>\n<li><code>OF_ALIGN_HORZ_LEFT</code>   : Uses the left edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_RIGHT</code>  : Uses the right edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_CENTER</code> : Uses the center of the rectangle to horizontally anchor the alignment.</li>\n</ul>\n<p><strong>ofAlignVert Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_VERT_IGNORE</code> : Does not perform any vertical alignment.</li>\n<li><code>OF_ALIGN_VERT_TOP</code>    : Uses the upper edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_BOTTOM</code> : Uses the bottom edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_CENTER</code> : Uses the center of the rectangle to vertically anchor the alignment.</li>\n</ul>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void alignToHorz(&amp;targetRect, sharedAnchor = OF_ALIGN_HORZ_CENTER)</p>\n<p>&lt;!--\n<em>syntax: alignToHorz(&amp;targetRect, sharedAnchor = OF_ALIGN_HORZ_CENTER)</em>\n<em>name: alignToHorz</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;targetRect, ofAlignHorz sharedAnchor=OF_ALIGN_HORZ_CENTER</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Horizontally align two rectangles to another using one anchor for both.</p>\n<p>Aligns the horizontal position of the ofRectangle to that of the\npassed-in ofRectangle using an ofAlignHorz constant as anchor.</p>\n<p>If a constant is not passed in, this will align the horizontal centers\nof the rectangles.</p>\n<p>If a constant is passed in, it will use that constant for both\nrectangles.</p>\n<p><strong>Parameters:</strong></p>\n<p>targetRect The target rectangle to align this rectangle to.</p>\n<p>sharedAnchor The common edge of the rectangles to align.</p>\n<p>_description: _</p>\n<p><strong>ofAlignHorz Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_HORZ_IGNORE</code> : Does not perform any horizontal alignment.</li>\n<li><code>OF_ALIGN_HORZ_LEFT</code>   : Uses the left edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_RIGHT</code>  : Uses the right edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_CENTER</code> : Uses the center of the rectangle to horizontally anchor the alignment.</li>\n</ul>\n<p>For a working example of how to use ofAlignHorz, see the <em>graphics/rectangleAlignmentAndScaling/</em> example within the examples directory.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void alignToHorz(&amp;targetRect, targetHorzAnchor, thisHorzAnchor)</p>\n<p>&lt;!--\n<em>syntax: alignToHorz(&amp;targetRect, targetHorzAnchor, thisHorzAnchor)</em>\n<em>name: alignToHorz</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;targetRect, ofAlignHorz targetHorzAnchor, ofAlignHorz thisHorzAnchor</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Horizontally align two rectangles to another using two anchors.</p>\n<p>Aligns the horizontal position of the ofRectangle to that of the\npassed-in ofRectangle. Takes two ofAlignHorz constants as anchors.</p>\n<p>Will align the chosen anchor in the ofRectangle with the chosen anchor\nin the passed-in ofRectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>targetRect The target rectangle to align this rectangle to.</p>\n<p>targetHorzAnchor The edge of the other rectangle to align.</p>\n<p>thisHorzAnchor The edge of this rectangle to align.</p>\n<p>_description: _</p>\n<p><strong>ofAlignHorz Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_HORZ_IGNORE</code> : Does not perform any horizontal alignment.</li>\n<li><code>OF_ALIGN_HORZ_LEFT</code>   : Uses the left edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_RIGHT</code>  : Uses the right edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_CENTER</code> : Uses the center of the rectangle to horizontally anchor the alignment.</li>\n</ul>\n<p>For a working example of how to use ofAlignHorz, see the <em>graphics/rectangleAlignmentAndScaling/</em> example within the examples directory.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void alignToHorz(&amp;targetX, thisHorzAnchor = OF_ALIGN_HORZ_CENTER)</p>\n<p>&lt;!--\n<em>syntax: alignToHorz(&amp;targetX, thisHorzAnchor = OF_ALIGN_HORZ_CENTER)</em>\n<em>name: alignToHorz</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const float &amp;targetX, ofAlignHorz thisHorzAnchor=OF_ALIGN_HORZ_CENTER</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Horizontally align a rectangle using a position and anchor edge.</p>\n<p>Aligns the horizontal position of the ofRectangle to the given x-\nposition using an ofAlignHorz constant as anchor. If a constant is not passed in\nthis will align the center of the rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>targetX The x-position to align this rectangle to.</p>\n<p>thisHorzAnchor The edge of this rectangle to align.</p>\n<p>_description: _</p>\n<p><strong>ofAlignHorz Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_HORZ_IGNORE</code> : Does not perform any horizontal alignment.</li>\n<li><code>OF_ALIGN_HORZ_LEFT</code>   : Uses the left edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_RIGHT</code>  : Uses the right edge of the rectangle to horizontally anchor the alignment.</li>\n<li><code>OF_ALIGN_HORZ_CENTER</code> : Uses the center of the rectangle to horizontally anchor the alignment.</li>\n</ul>\n<p>For a working example of how to use ofAlignHorz, see the <em>graphics/rectangleAlignmentAndScaling/</em> example within the examples directory.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void alignToVert(&amp;targetRect, sharedAnchor = OF_ALIGN_VERT_CENTER)</p>\n<p>&lt;!--\n<em>syntax: alignToVert(&amp;targetRect, sharedAnchor = OF_ALIGN_VERT_CENTER)</em>\n<em>name: alignToVert</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;targetRect, ofAlignVert sharedAnchor=OF_ALIGN_VERT_CENTER</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Vertically align two rectangles to another using one anchor for both.</p>\n<p>Aligns the vertical position of the ofRectangle to that of the\npassed-in ofRectangle using an ofAlignVert constant as anchor.</p>\n<p>If a constant is not passed in, this will align the vertical centers\nof the rectangles.</p>\n<p>If a constant is passed in, it will use that constant for both rectangles.</p>\n<p><strong>Parameters:</strong></p>\n<p>targetRect The target ofRectangle to align this rectangle to.</p>\n<p>sharedAnchor The alignment position for both rectangles to use.</p>\n<p>_description: _</p>\n<p><strong>ofAlignVert Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_VERT_IGNORE</code> : Does not perform any vertical alignment.</li>\n<li><code>OF_ALIGN_VERT_TOP</code>    : Uses the upper edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_BOTTOM</code> : Uses the bottom edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_CENTER</code> : Uses the center of the rectangle to vertically anchor the alignment.</li>\n</ul>\n<p>For a working example of how to use ofAlignVert, see the\n<em>graphics/rectangleAlignmentAndScaling/</em> example within the examples\ndirectory</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void alignToVert(&amp;targetRect, targetVertAnchor, thisVertAnchor)</p>\n<p>&lt;!--\n<em>syntax: alignToVert(&amp;targetRect, targetVertAnchor, thisVertAnchor)</em>\n<em>name: alignToVert</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;targetRect, ofAlignVert targetVertAnchor, ofAlignVert thisVertAnchor</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Vertically align two rectangles to another using two anchors.</p>\n<p>Will align the chosen anchor in the ofRectangle with the chosen anchor\nin the passed-in ofRectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>targetRect The target ofRectangle to align this rectangle to.</p>\n<p>targetVertAnchor The alignment anchor for this rectangle.</p>\n<p>thisVertAnchor The alignment anchor for the other rectangle.</p>\n<p>_description: _</p>\n<p><strong>ofAlignVert Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_VERT_IGNORE</code> : Does not perform any vertical alignment.</li>\n<li><code>OF_ALIGN_VERT_TOP</code>    : Uses the upper edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_BOTTOM</code> : Uses the bottom edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_CENTER</code> : Uses the center of the rectangle to vertically anchor the alignment.</li>\n</ul>\n<p>For a working example of how to use ofAlignVert, see the\n<em>graphics/rectangleAlignmentAndScaling/</em> example within the examples\ndirectory</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void alignToVert(&amp;targetY, sharedAnchor = OF_ALIGN_VERT_CENTER)</p>\n<p>&lt;!--\n<em>syntax: alignToVert(&amp;targetY, sharedAnchor = OF_ALIGN_VERT_CENTER)</em>\n<em>name: alignToVert</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const float &amp;targetY, ofAlignVert sharedAnchor=OF_ALIGN_VERT_CENTER</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Vertically align a rectangle using a position and anchor edge.</p>\n<p>Aligns the vertical position of the ofRectangle to the given y-\nposition using an ofAlignVert constant as anchor. If a constant is not passed in\nthis will align the center of the rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>targetY The target y-position to align this rectangle to.</p>\n<p>sharedAnchor The alignment position of this ofRectangle to use.</p>\n<p>_description: _</p>\n<p><strong>ofAlignVert Constants:</strong></p>\n<ul>\n<li><code>OF_ALIGN_VERT_IGNORE</code> : Does not perform any vertical alignment.</li>\n<li><code>OF_ALIGN_VERT_TOP</code>    : Uses the upper edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_BOTTOM</code> : Uses the bottom edge of the rectangle to vertically anchor the alignment.</li>\n<li><code>OF_ALIGN_VERT_CENTER</code> : Uses the center of the rectangle to vertically anchor the alignment.</li>\n</ul>\n<p>For a working example of how to use ofAlignVert, see the\n<em>graphics/rectangleAlignmentAndScaling/</em> example within the examples\ndirectory</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getArea()</p>\n<p>&lt;!--\n<em>syntax: getArea()</em>\n<em>name: getArea</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the area of the ofRectangle.</p>\n<p>This is the product of the width and height of the recatngle.</p>\n<p><strong>Returns</strong>: The area of the rectangle as float.</p>\n<p>_description: _</p>\n<p>Example:</p>\n<pre><code>\n<span class=\"token comment\" spellcheck=\"true\">// Create a rectangle that is 100 units wide and 200 units tall</span>\nofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Get the area of that rectangle</span>\n<span class=\"token keyword\">float</span> areaValue <span class=\"token operator\">=</span> myRect<span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// areaValue will be 20000.0.</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getAspectRatio()</p>\n<p>&lt;!--\n<em>syntax: getAspectRatio()</em>\n<em>name: getAspectRatio</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Gets the ratio of width to height of the ofRectangle.</p>\n<p><strong>Returns</strong>: The aspect ratio of the rectangle.</p>\n<p>_description: _</p>\n<p>Example:</p>\n<pre><code>\n<span class=\"token comment\" spellcheck=\"true\">// Create a rectangle that is 100 units wide and 200 units tall</span>\nofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Get the aspect ratio of that rectangle</span>\n<span class=\"token keyword\">float</span> aspectRatioValue <span class=\"token operator\">=</span> myRect<span class=\"token punctuation\">.</span><span class=\"token function\">getAspectRatio</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// aspectRatioValue will be 0.5.</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getBottom()</p>\n<p>&lt;!--\n<em>syntax: getBottom()</em>\n<em>name: getBottom</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Gets the y position of the bottom edge of the ofRectangle as float.</p>\n<p><strong>See also</strong>: getMaxY()</p>\n<p><strong>Returns</strong>: The y position of the bottom edge of the rectangle.</p>\n<p>_description: _</p>\n<p>Equivalent to ofRectangle::getMaxY().</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getBottomLeft()</p>\n<p>&lt;!--\n<em>syntax: getBottomLeft()</em>\n<em>name: getBottomLeft</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the bottom-left coordinates of the ofRectangle as glm::vec3.</p>\n<p><strong>Returns</strong>: The bottom-left coordinates of the rectangle.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getBottomRight()</p>\n<p>&lt;!--\n<em>syntax: getBottomRight()</em>\n<em>name: getBottomRight</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the bottom-right coordinates of the ofRectangle as glm::vec3.</p>\n<p><strong>See also</strong>: getMax()</p>\n<p><strong>Returns</strong>: The bottom-right coordinates of the rectangle.</p>\n<p>_description: _</p>\n<p>Equivalent to ofRectangle::getMax().</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getCenter()</p>\n<p>&lt;!--\n<em>syntax: getCenter()</em>\n<em>name: getCenter</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the coordiantes of the ofRectangle's center as glm::vec3.</p>\n<p><strong>Warning</strong>: The z component of the returned glm::vec3 will always be 0.</p>\n<p><strong>Returns</strong>: The x and y coordinates of the center of the rectangle (z = 0).</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getHeight()</p>\n<p>&lt;!--\n<em>syntax: getHeight()</em>\n<em>name: getHeight</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Gets the height of the ofRectangle as float.</p>\n<p><strong>Returns</strong>: The height of the rectangle.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getHorzAnchor(anchor)</p>\n<p>&lt;!--\n<em>syntax: getHorzAnchor(anchor)</em>\n<em>name: getHorzAnchor</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: ofAlignHorz anchor</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>A convenience method that returns the value of one of\nthe horizontal edges of the ofRectangle using the <code>ofAlignHorz</code> enum.</p>\n<p><strong>Parameters:</strong></p>\n<p>anchor The anchor position to query.</p>\n<p><strong>Returns</strong>: the value of the referenced anchor position.</p>\n<p>_description: _</p>\n<p>Possible anchor values are:</p>\n<ul>\n<li><code>OF_ALIGN_HORZ_IGNORE</code>  : returns 0.0</li>\n<li><code>OF_ALIGN_HORZ_LEFT</code>    : returns the position of the left edge, equivalent to ofRectangle::geLeft().</li>\n<li><code>OF_ALIGN_HORZ_RIGHT</code>   : returns the position of the right edge, equivalent to ofRectangle::getRight().</li>\n<li><code>OF_ALIGN_HORZ_CENTER</code>  : returns the x-position of the center of the ofRectangle.</li>\n</ul>\n<p>Any other anchor value will return <code><span class=\"token number\">0.0</span></code>.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofRectangle getIntersection(&amp;rect)</p>\n<p>&lt;!--\n<em>syntax: getIntersection(&amp;rect)</em>\n<em>name: getIntersection</em>\n<em>returns: ofRectangle</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;rect</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the intersecting area between this rectangle and another.</p>\n<p>This method will attempt to return the area of overlap between this\nrectangle and the passed rectangle.</p>\n<p>If the two rectangles do not overlap, it will return an &quot;empty&quot;\nrectangle located (0, 0) with 0 width and 0 height.</p>\n<p>If the two rectangles only share an edge this will return a rectangle\npositioned on that edge:</p>\n<p>If the shared edge is vertical, the rectangle will have zero width,\notherwise it will have zero height.</p>\n<p><strong>Parameters:</strong></p>\n<p>rect The rectangle to intersect.</p>\n<p><strong>Returns</strong>: A new ofRectangle representing the intersecting area or an\nempty rectangle (0, 0, 0, 0) if there is no intersection.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getLeft()</p>\n<p>&lt;!--\n<em>syntax: getLeft()</em>\n<em>name: getLeft</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Gets the x position of the left edge of the ofRectangle as float.</p>\n<p><strong>See also</strong>: getMinX()</p>\n<p><strong>Returns</strong>: The x position of the left edge of the rectangle.</p>\n<p>_description: _</p>\n<p>Equivalent to ofRectangle::getMinX().</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getMax()</p>\n<p>&lt;!--\n<em>syntax: getMax()</em>\n<em>name: getMax</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the maximum x and y coordinates of the ofRectangle as glm::vec3.</p>\n<p><strong>Returns</strong>: The maximum x and y coordinates of the rectangle.</p>\n<p>_description: _</p>\n<p>Returns the (x,y) coordinates of the corner of the rectangle with the largest x and largest y position as an ofPoint.</p>\n<p>Equivalent to ofRectangle::getBottomRight().</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getMaxX()</p>\n<p>&lt;!--\n<em>syntax: getMaxX()</em>\n<em>name: getMaxX</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the largest x position of the ofRectangle as float.</p>\n<p><strong>Returns</strong>: The largest x position of the rectangle.</p>\n<p>_description: _</p>\n<p>Returns the position of the larger of the two sides of the rectangle perpendicular to the x axis as a float.</p>\n<p>Equivalent to ofRectangle::getRight().</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getMaxY()</p>\n<p>&lt;!--\n<em>syntax: getMaxY()</em>\n<em>name: getMaxY</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the largest y position of the ofRectangle as float.</p>\n<p><strong>Returns</strong>: The largest y position of the rectangle.</p>\n<p>_description: _</p>\n<p>Equivalent to ofRectangle::getBottom().</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getMin()</p>\n<p>&lt;!--\n<em>syntax: getMin()</em>\n<em>name: getMin</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the minimum x and y coordinates of the ofRectangle as glm::vec3.</p>\n<p><strong>Returns</strong>: The minimum x and y coordinates of the rectangle.</p>\n<p>_description: _</p>\n<p>Equivalent to ofRectangle::getTopLeft().</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getMinX()</p>\n<p>&lt;!--\n<em>syntax: getMinX()</em>\n<em>name: getMinX</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the smallest x position of the ofRectangle as float.</p>\n<p><strong>Returns</strong>: The smallest xposition of the rectangle.</p>\n<p>_description: _</p>\n<p>Equivalent to ofRectangle::getLeft().</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getMinY()</p>\n<p>&lt;!--\n<em>syntax: getMinY()</em>\n<em>name: getMinY</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the smallest y position of the ofRectangle as float.</p>\n<p><strong>Returns</strong>: The smallest y position of the rectangle.</p>\n<p>_description: _</p>\n<p>Equivalent to ofRectangle::getTop().</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getPerimeter()</p>\n<p>&lt;!--\n<em>syntax: getPerimeter()</em>\n<em>name: getPerimeter</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Gets the perimeter of the ofRectangle.</p>\n<p>This is the sum of the lengths of the sides.</p>\n<p><strong>Returns</strong>: The perimeter of the rectangle as float.</p>\n<p>_description: _</p>\n<p>Example:</p>\n<pre><code>\n<span class=\"token comment\" spellcheck=\"true\">// Create a rectangle that is 100 units wide and 200 units tall</span>\nofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Get the perimeter of that rectangle</span>\n<span class=\"token keyword\">float</span> perimeterValue <span class=\"token operator\">=</span> myRect<span class=\"token punctuation\">.</span><span class=\"token function\">getPerimeter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// perimeterValue will be 600.0.</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const glm::vec3 &amp; getPosition()</p>\n<p>&lt;!--\n<em>syntax: getPosition()</em>\n<em>name: getPosition</em>\n<em>returns: const glm::vec3 &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the ofRectangle's position.</p>\n<p><strong>Warning</strong>: The z component of the returned glm::vec3 is undefined.</p>\n<p><strong>Returns</strong>: The rectangle's position.</p>\n<p>_description: _</p>\n<p>Returns the (x,y) position of the ofRectangle as an ofPoint.</p>\n<p>Equivalent to ofRectangle::getPositionRef().</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getRight()</p>\n<p>&lt;!--\n<em>syntax: getRight()</em>\n<em>name: getRight</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Gets the x position of the right edge of the ofRectangle as float.</p>\n<p><strong>See also</strong>: getMaxX()</p>\n<p><strong>Returns</strong>: The y position of the right edge of the rectangle.</p>\n<p>_description: _</p>\n<p>Equivalent to ofRectangle::getMaxX().</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofRectangle getStandardized()</p>\n<p>&lt;!--\n<em>syntax: getStandardized()</em>\n<em>name: getStandardized</em>\n<em>returns: ofRectangle</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the standardized representation of this rectangle.</p>\n<p>&quot;Standardized&quot; rectangles are rectangles whose width and height are positive.\nFor more information about standardized rectangles, see the discussion of the standardize() method.</p>\n<p><strong>Returns</strong>: the Standardized version of this ofRectangle.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getTop()</p>\n<p>&lt;!--\n<em>syntax: getTop()</em>\n<em>name: getTop</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Gets the y position of the top edge of the ofRectangle as float.</p>\n<p><strong>See also</strong>: getMinY()</p>\n<p><strong>Returns</strong>: The y position of the top edge of the rectangle.</p>\n<p>_description: _</p>\n<p>Equivalent to ofRectangle::getMinY().</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getTopLeft()</p>\n<p>&lt;!--\n<em>syntax: getTopLeft()</em>\n<em>name: getTopLeft</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the top-left coordinates of the ofRectangle as glm::vec3.</p>\n<p><strong>See also</strong>: getMin()</p>\n<p><strong>Returns</strong>: The top-left coordinates of the rectangle.</p>\n<p>_description: _</p>\n<p>Equivalent to ofRectangle::getMin().</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getTopRight()</p>\n<p>&lt;!--\n<em>syntax: getTopRight()</em>\n<em>name: getTopRight</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the top-right coordinates of the ofRectangle as glm::vec3.</p>\n<p><strong>Returns</strong>: The top-right coordinates of the rectangle.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofRectangle getUnion(&amp;rect)</p>\n<p>&lt;!--\n<em>syntax: getUnion(&amp;rect)</em>\n<em>name: getUnion</em>\n<em>returns: ofRectangle</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;rect</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the union area between this rectangle and anohter.</p>\n<p><strong>See also</strong>: getIntersection(const ofRectangle&amp; rect) const</p>\n<p><strong>Parameters:</strong></p>\n<p>rect The rectangle to unite with.</p>\n<p><strong>Returns</strong>: A new ofRectangle whose area contains both the area of the\nthis rectangle and the passed rectangle..</p>\n<p>_description: _</p>\n<p>Return a new ofRectangle whose area contains both the area of the ofRectangle and that of the passed ofRectangle.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getVertAnchor(anchor)</p>\n<p>&lt;!--\n<em>syntax: getVertAnchor(anchor)</em>\n<em>name: getVertAnchor</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: ofAlignVert anchor</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>A convenience method that returns the value of one of the\nvertical edges of the ofRectangle using the ofAlignVert enum.</p>\n<p><strong>Parameters:</strong></p>\n<p>anchor The anchor position to query.</p>\n<p><strong>Returns</strong>: the value of the referenced anchor position.</p>\n<p>_description: _</p>\n<p>Possible anchor values are:</p>\n<ul>\n<li><code>OF_ALIGN_VERT_IGNORE</code>  : returns 0.0</li>\n<li><code>OF_ALIGN_VERT_TOP</code>     : returns the position of the upper edge, equivalent to ofRectangle::getTop().</li>\n<li><code>OF_ALIGN_VERT_BOTTOM</code>  : returns the position of the bottom edge, equivalent to ofRectangle::getBottom().</li>\n<li><code>OF_ALIGN_VERT_CENTER</code>  : returns the y-position of the center of the ofRectangle.</li>\n</ul>\n<p>Any other anchor value will return <code><span class=\"token number\">0.0</span></code>.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getWidth()</p>\n<p>&lt;!--\n<em>syntax: getWidth()</em>\n<em>name: getWidth</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Gets the width of the ofRectangle as float.</p>\n<p><strong>Returns</strong>: The width of the rectangle.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getX()</p>\n<p>&lt;!--\n<em>syntax: getX()</em>\n<em>name: getX</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Gets the x position of the ofRectangle as float.</p>\n<p><strong>Returns</strong>: The x position of the rectangle.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getY()</p>\n<p>&lt;!--\n<em>syntax: getY()</em>\n<em>name: getY</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Gets the y position of the ofRectangle as float.</p>\n<p><strong>Returns</strong>: the y position of the rectangle.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void growToInclude(&amp;p)</p>\n<p>&lt;!--\n<em>syntax: growToInclude(&amp;p)</em>\n<em>name: growToInclude</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Grow the ofRectangle to include the given point.</p>\n<p>This will potentially change the width, height, x-position, and y-\nposition of the ofRectangle.  If the point is already within the\nrectangle, this rectangle will remain unchanged.</p>\n<p><strong>Warning</strong>: The z-component of the passed glm::vec3 is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>p The position to include.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void growToInclude(&amp;p)</p>\n<p>&lt;!--\n<em>syntax: growToInclude(&amp;p)</em>\n<em>name: growToInclude</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;p</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void growToInclude(&amp;p0, &amp;p1)</p>\n<p>&lt;!--\n<em>syntax: growToInclude(&amp;p0, &amp;p1)</em>\n<em>name: growToInclude</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p0, const glm::vec3 &amp;p1</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Grow the ofRectangle to include the given line segment.</p>\n<p>This will potentially change the width, height, x-position, and\ny-position of the ofRectangle.  If the points are already within the\nrectangle, this rectangle will remain unchanged.</p>\n<p><strong>Warning</strong>: The z-components of the passed glm::vec3s are ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>p0 The first point to include.</p>\n<p>p1 The second point to include.</p>\n<p>_description: _</p>\n<p>Modify the ofRectangle so that both the ofPoints given are enclosed within the rectangle.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void growToInclude(&amp;p0, &amp;p1)</p>\n<p>&lt;!--\n<em>syntax: growToInclude(&amp;p0, &amp;p1)</em>\n<em>name: growToInclude</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;p0, const glm::vec2 &amp;p1</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Modify the ofRectangle so that both the ofPoints given are enclosed within the rectangle.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void growToInclude(&amp;rect)</p>\n<p>&lt;!--\n<em>syntax: growToInclude(&amp;rect)</em>\n<em>name: growToInclude</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;rect</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Grow the ofRectangle to include the given ofRectangle.</p>\n<p>This will potentially change the width, height, x-position, and y-\nposition of the ofRectangle.  If the rectangle is already within the\nrectangle, this rectangle will remain unchanged.</p>\n<p><strong>Parameters:</strong></p>\n<p>rect The rectangle to include.</p>\n<p>_description: _</p>\n<p>Expands the ofRectangle so that the ofRectangle passed into the method is entirely enclosed by the current ofRectangle.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void growToInclude(px, py)</p>\n<p>&lt;!--\n<em>syntax: growToInclude(px, py)</em>\n<em>name: growToInclude</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float px, float py</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Grow the ofRectangle to include the given (x, y) coordinates.</p>\n<p>This will potentially change the width, height, x-position, and y-\nposition of the ofRectangle. If the points are already within the\nrectangle, this rectangle will remain unchanged.</p>\n<p><strong>Parameters:</strong></p>\n<p>px The x-coordinate to include.</p>\n<p>py The y-coordiante to include.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool inside(&amp;p)</p>\n<p>&lt;!--\n<em>syntax: inside(&amp;p)</em>\n<em>name: inside</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Determines if the glm::vec3 is within the ofRectangle.</p>\n<p>Note that points on the edge of the ofRectangle are not\nconsidered within the rectangle and will return false.</p>\n<p><strong>Warning</strong>: The z-component of the passed glm::vec3 is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>p The point to test.</p>\n<p><strong>Returns</strong>: true if the point p is inside this ofRectangle.</p>\n<p>_description: _</p>\n<p>Coordinates (x, y) are considered inside the rectangle if:</p>\n<p><code>x <span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> rectMinX <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span> x <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> rectMinX <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span> y <span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> rectMinY <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span> y <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> rectMaxY</code></p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool inside(&amp;p)</p>\n<p>&lt;!--\n<em>syntax: inside(&amp;p)</em>\n<em>name: inside</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;p</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Coordinates (x, y) are considered inside the rectangle if:</p>\n<p><code>x <span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> rectMinX <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span> x <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> rectMinX <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span> y <span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> rectMinY <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span> y <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> rectMaxY</code></p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool inside(&amp;p0, &amp;p1)</p>\n<p>&lt;!--\n<em>syntax: inside(&amp;p0, &amp;p1)</em>\n<em>name: inside</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p0, const glm::vec3 &amp;p1</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Determines if both of the passed glm::vec3s are within the ofRectangle or not.</p>\n<p>Note that points on the edge of the ofRectangle are not considered\nwithin the rectangle and will return false.</p>\n<p><strong>Warning</strong>: The z-components of the passed glm::vec3s are ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>p0 The first point to test.</p>\n<p>p1 The second point to test.</p>\n<p><strong>Returns</strong>: true if both points are inside the rectangle.</p>\n<p>_description: _</p>\n<p>This can be used to test if a line segment is inside the rectangle.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool inside(&amp;p0, &amp;p1)</p>\n<p>&lt;!--\n<em>syntax: inside(&amp;p0, &amp;p1)</em>\n<em>name: inside</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;p0, const glm::vec2 &amp;p1</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This can be used to test if a line segment is inside the rectangle.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool inside(&amp;rect)</p>\n<p>&lt;!--\n<em>syntax: inside(&amp;rect)</em>\n<em>name: inside</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;rect</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Determines if another ofRectangle is completely within the ofRectangle.</p>\n<p>Note that rectangles that share an edge with the ofRectangle are not\nconsidered within the rectangle and will return false.</p>\n<p><strong>Parameters:</strong></p>\n<p>rect The ofRectangle to test.</p>\n<p><strong>Returns</strong>: true if all four corners of the rect are within this rectangle.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool inside(px, py)</p>\n<p>&lt;!--\n<em>syntax: inside(px, py)</em>\n<em>name: inside</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: float px, float py</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Determines if the coordinates (x, y) are within the ofRectangle.</p>\n<p>Note that coordinates on the edge of the ofRectangle are not\nconsidered within the rectangle and will return false.</p>\n<p><strong>Parameters:</strong></p>\n<p>px The x-coordinate to test.</p>\n<p>py The y-coordinate to test.</p>\n<p><strong>Returns</strong>: true if px and py are inside this ofRectangle.</p>\n<p>_description: _</p>\n<p>Coordinates (x, y) are considered inside the rectangle if:</p>\n<p><code>x <span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> rectMinX <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span> x <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> rectMinX <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span> y <span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> rectMinY <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span> y <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> rectMaxY</code></p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool intersects(&amp;p0, &amp;p1)</p>\n<p>&lt;!--\n<em>syntax: intersects(&amp;p0, &amp;p1)</em>\n<em>name: intersects</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p0, const glm::vec3 &amp;p1</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Determines if a line segment intersects with the ofRectangle.</p>\n<p><strong>Warning</strong>: The z-components of the passed glm::vec3s are ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>p0 The first point to test.</p>\n<p>p1 The second point to test.</p>\n<p><strong>Returns</strong>: <code><span class=\"token boolean\">true</span></code> if the line segment defined by the two passed glm::vec3s\neither crosses the perimeter of the ofRectangle or is completely\ncontained within.</p>\n<p>_description: _</p>\n<p>This method can be used to check if any part of the line segment intersects with the rectangle.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool intersects(&amp;p0, &amp;p1)</p>\n<p>&lt;!--\n<em>syntax: intersects(&amp;p0, &amp;p1)</em>\n<em>name: intersects</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;p0, const glm::vec2 &amp;p1</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This method can be used to check if any part of the line segment intersects with the rectangle.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool intersects(&amp;rect)</p>\n<p>&lt;!--\n<em>syntax: intersects(&amp;rect)</em>\n<em>name: intersects</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;rect</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Determines if another rectangle intersects with this rectangle.</p>\n<p>Rectangles that only share an edge and do not intersect otherwise are\nnot considered to intersect and will return false.</p>\n<p><strong>Parameters:</strong></p>\n<p>rect The rectangle to test.</p>\n<p><strong>Returns</strong>: <code><span class=\"token boolean\">true</span></code> if the area contained within the ofRectangle overlaps\nwith the area contained within the passed ofRectangle.</p>\n<p>_description: _</p>\n<p>Returns true if the area contained within the ofRectangle overlaps with the area contained within the passed ofRectangle,\nreturns false otherwise.</p>\n<p>Rectangles that only share an edge and do not intersect otherwise are not considered to intersect and will return false.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isEmpty()</p>\n<p>&lt;!--\n<em>syntax: isEmpty()</em>\n<em>name: isEmpty</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Determines if the ofRectangle's area is zero.</p>\n<p><strong>See also</strong>: getArea().</p>\n<p><strong>Returns</strong>: true if both the width == 0 and height == 0, false if either is non-zero.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isStandardized()</p>\n<p>&lt;!--\n<em>syntax: isStandardized()</em>\n<em>name: isStandardized</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns true if this ofRectangle is standardized.</p>\n<p>&quot;Standardized&quot; rectangles are rectangles whose width and height are positive.\nFor more information about standardized rectangles, see the discussion of the standardize() method.</p>\n<p><strong>Returns</strong>: true if both width &gt;= 0 and height &gt;= 0.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isZero()</p>\n<p>&lt;!--\n<em>syntax: isZero()</em>\n<em>name: isZero</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec2 map(&amp;coeff)</p>\n<p>&lt;!--\n<em>syntax: map(&amp;coeff)</em>\n<em>name: map</em>\n<em>returns: glm::vec2</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;coeff</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Maps a normalized coordinate into this rectangle</p>\n<p>Normalized coordinates range from [0,1] inclusive. It is used to define a ratio\nbetween the coordinates and a unitary rectangle. This ratio is mapped into\nthis rectangle to scale to real values. If normalized coordinates are out of bounds,\noutput will be scaled accordingly.</p>\n<p><strong>Parameters:</strong></p>\n<p>coeff Normalized coordinate to map to this rectangle</p>\n<p><strong>Returns</strong>: The mapped coordinate</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofRectangle map(&amp;coeff)</p>\n<p>&lt;!--\n<em>syntax: map(&amp;coeff)</em>\n<em>name: map</em>\n<em>returns: ofRectangle</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;coeff</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Maps a normalized coordinate into this rectangle</p>\n<p>Normalized rectangles' position, width and height range from [0,1] inclusive.\nIt is used to define a ratio between the rectangle and a unitary rectangle.\nThis ratio is mapped into this rectangle to scale to real values.\nIf normalized rectangle is out of bounds, output will be scaled accordingly.</p>\n<p><strong>Parameters:</strong></p>\n<p>coeff Normalized rectangle to map to this rectangle</p>\n<p><strong>Returns</strong>: The mapped coordinate</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec2 mapClamp(&amp;coeff)</p>\n<p>&lt;!--\n<em>syntax: mapClamp(&amp;coeff)</em>\n<em>name: mapClamp</em>\n<em>returns: glm::vec2</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;coeff</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Maps a normalized coordinate into this rectangle, clamping if out of bounds</p>\n<p>Normalized coordinates range from [0,1] inclusive. It is used to define a ratio\nbetween the coordinates and a unitary rectangle. This ratio is mapped into\nthis rectangle to scale to real values. If normalized coordinates are out of bounds,\noutput will be clamped to this rectangle's position, width and height.</p>\n<p><strong>Parameters:</strong></p>\n<p>coeff Normalized coordinate to map to this rectangle</p>\n<p><strong>Returns</strong>: The mapped coordinate, clamped</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofRectangle mapClamp(&amp;coeff)</p>\n<p>&lt;!--\n<em>syntax: mapClamp(&amp;coeff)</em>\n<em>name: mapClamp</em>\n<em>returns: ofRectangle</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;coeff</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Maps a normalized rectangle to this rectangle, clamping if out of bounds</p>\n<p>Normalized rectangles' position, width and height range from [0,1] inclusive.\nIt is used to define a ratio between the rectangle and a unitary rectangle.\nThis ratio is mapped into this rectangle to scale to real values.\nIf normalized rectangle is out of bounds, output will be clamped to this\nrectangle's position, width and height.</p>\n<p><strong>Parameters:</strong></p>\n<p>coeff Normalized rectangle to map to this rectangle</p>\n<p><strong>Returns</strong>: The mapped rectangle</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofRectangle(&amp;p, w, h)</h3>\n<p>&lt;!--\n<em>syntax: ofRectangle(&amp;p, w, h)</em>\n<em>name: ofRectangle</em>\n_returns: _\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p, float w, float h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Construct a rectangle from a point and dimensions.</p>\n<p>To produce consistent results, users are encouraged to initialize\nrectangles in the standardized form with width &gt;=0 and height &gt;= 0.</p>\n<p><strong>Warning</strong>: The z-component of the passed glm::vec3 is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>p The glm::vec3 representing the position of the rectangle.</p>\n<p>w The width of the rectangle.</p>\n<p>h The height of the rectangle.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofRectangle(&amp;p, w, h)</h3>\n<p>&lt;!--\n<em>syntax: ofRectangle(&amp;p, w, h)</em>\n<em>name: ofRectangle</em>\n_returns: _\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;p, float w, float h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofRectangle(&amp;p0, &amp;p1)</h3>\n<p>&lt;!--\n<em>syntax: ofRectangle(&amp;p0, &amp;p1)</em>\n<em>name: ofRectangle</em>\n_returns: _\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p0, const glm::vec3 &amp;p1</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Construct a rectangle by defining two corners.</p>\n<p><strong>Warning</strong>: The z-components of the passed glm::vec3s are ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>p0 An glm::vec3 representing the upper left hand corner.</p>\n<p>p1 An glm::vec3 representing the lower right hand corner.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofRectangle(&amp;p0, &amp;p1)</h3>\n<p>&lt;!--\n<em>syntax: ofRectangle(&amp;p0, &amp;p1)</em>\n<em>name: ofRectangle</em>\n_returns: _\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;p0, const glm::vec2 &amp;p1</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofRectangle(&amp;rect)</h3>\n<p>&lt;!--\n<em>syntax: ofRectangle(&amp;rect)</em>\n<em>name: ofRectangle</em>\n_returns: _\n_returns_description: _\n<em>parameters: const ofRectangle &amp;rect</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Construct a rectangle by copying another rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>rect The rectangle to copy.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofRectangle()</h3>\n<p>&lt;!--\n<em>syntax: ofRectangle()</em>\n<em>name: ofRectangle</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Construct a rectangle with zero width and zero height at 0, 0.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofRectangle(px, py, w, h)</h3>\n<p>&lt;!--\n<em>syntax: ofRectangle(px, py, w, h)</em>\n<em>name: ofRectangle</em>\n_returns: _\n_returns_description: _\n<em>parameters: float px, float py, float w, float h</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Construct a rectangle using position and size.</p>\n<p>To produce consistent results, users are encouraged to initialize\nrectangles in the standardized form with width &gt;=0 and height &gt;= 0.</p>\n<p><strong>Parameters:</strong></p>\n<p>px The x-position of the rectangle.</p>\n<p>py The y-position of the rectangle.</p>\n<p>w The width of the rectangle.</p>\n<p>h The height of the rectangle.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool operator!=(&amp;rect)</p>\n<p>&lt;!--\n<em>syntax: operator!=(&amp;rect)</em>\n<em>name: operator!=</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;rect</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>If the two ofRectangles differ in x, y, width, or height, they\nare considered unequal.</p>\n<p><strong>Parameters:</strong></p>\n<p>rect The rectangle to compare.</p>\n<p><strong>Returns</strong>: True if the rectangles are not equal.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofRectangle operator+(&amp;p)</p>\n<p>&lt;!--\n<em>syntax: operator+(&amp;p)</em>\n<em>name: operator+</em>\n<em>returns: ofRectangle</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a new ofRectangle where the x and y positions of the\nrectangle are offset by the (x, y) coordinates of the glm::vec3.</p>\n<p><strong>Parameters:</strong></p>\n<p>p The point to translate.</p>\n<p><strong>Returns</strong>: The translated ofRectangle.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofRectangle operator+(&amp;p)</p>\n<p>&lt;!--\n<em>syntax: operator+(&amp;p)</em>\n<em>name: operator+</em>\n<em>returns: ofRectangle</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;p</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofRectangle operator-(&amp;p)</p>\n<p>&lt;!--\n<em>syntax: operator-(&amp;p)</em>\n<em>name: operator-</em>\n<em>returns: ofRectangle</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a new ofRectangle where the x and y-positions of the\nrectangle are offset by the (x, y) coordinates of the glm::vec3.</p>\n<p><strong>Parameters:</strong></p>\n<p>p The point to translate.</p>\n<p><strong>Returns</strong>: The translated ofRectangle.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofRectangle operator-(&amp;p)</p>\n<p>&lt;!--\n<em>syntax: operator-(&amp;p)</em>\n<em>name: operator-</em>\n<em>returns: ofRectangle</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;p</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofRectangle &amp; operator=(&amp;rect)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;rect)</em>\n<em>name: operator=</em>\n<em>returns: ofRectangle &amp;</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;rect</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Assignment operator.</p>\n<p><strong>Parameters:</strong></p>\n<p>rect The rectangle to assign.</p>\n<p><strong>Returns</strong>: A reference to this rectangle.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool operator==(&amp;rect)</p>\n<p>&lt;!--\n<em>syntax: operator==(&amp;rect)</em>\n<em>name: operator==</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;rect</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>If both ofRectangles have the same x, y, width, and height,\nthey are considered equal.</p>\n<p><strong>Parameters:</strong></p>\n<p>rect The rectangle to compare.</p>\n<p><strong>Returns</strong>: True if the rectangles are equal.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void scale(&amp;s)</p>\n<p>&lt;!--\n<em>syntax: scale(&amp;s)</em>\n<em>name: scale</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;s</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Scale the rectangle.</p>\n<p>Scaling will scale the width and the height, but will not change the\nposition.</p>\n<p><strong>Warning</strong>: The z-component of the passed glm::vec3 is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>s The scaling factor.</p>\n<p>_description: _</p>\n<p>Scales the width and height of the ofRectangle by multiplying the current width and\nheight with the (x,y) coordinates of the passed-in ofPoint.</p>\n<p>This is equivalent to calling:</p>\n<pre><code>\nofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nofPoint <span class=\"token function\">myScaler</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyRect<span class=\"token punctuation\">.</span><span class=\"token function\">scaleWidth</span><span class=\"token punctuation\">(</span>myScaler<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyRect<span class=\"token punctuation\">.</span><span class=\"token function\">scaleHeight</span><span class=\"token punctuation\">(</span>myScaler<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void scale(&amp;s)</p>\n<p>&lt;!--\n<em>syntax: scale(&amp;s)</em>\n<em>name: scale</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;s</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Scales the width and height of the ofRectangle by multiplying the current width and\nheight with the (x,y) coordinates of the passed-in ofPoint.</p>\n<p>This is equivalent to calling:</p>\n<pre><code>\nofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nofPoint <span class=\"token function\">myScaler</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyRect<span class=\"token punctuation\">.</span><span class=\"token function\">scaleWidth</span><span class=\"token punctuation\">(</span>myScaler<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyRect<span class=\"token punctuation\">.</span><span class=\"token function\">scaleHeight</span><span class=\"token punctuation\">(</span>myScaler<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void scale(s)</p>\n<p>&lt;!--\n<em>syntax: scale(s)</em>\n<em>name: scale</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float s</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Scale the rectangle.</p>\n<p>Scaling will scale the width and the height, but will not change the\nposition.</p>\n<p><strong>Parameters:</strong></p>\n<p>s The scaling factor.</p>\n<p>_description: _</p>\n<p>Uniformly scales the ofRectangle by multiplying both the current width and current height with the passed-in float.</p>\n<p>This is equivalent to calling:</p>\n<pre><code>\nofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">float</span> s <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\nmyRect<span class=\"token punctuation\">.</span><span class=\"token function\">scaleWidth</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyRect<span class=\"token punctuation\">.</span><span class=\"token function\">scaleHeight</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void scale(sX, sY)</p>\n<p>&lt;!--\n<em>syntax: scale(sX, sY)</em>\n<em>name: scale</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float sX, float sY</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Scale the rectangle.</p>\n<p>Scaling will scale the width and the height, but will not change the\nposition.</p>\n<p><strong>Parameters:</strong></p>\n<p>sX The width-scaling factor.</p>\n<p>sY The height-scaling factor.</p>\n<p>_description: _</p>\n<p>Scales the width and height of the ofRectangle by multiplying the current width and height with the passed-in floats.</p>\n<p>This is equivalent to calling:</p>\n<pre><code>\nofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">float</span> sX <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> sY <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\nmyRect<span class=\"token punctuation\">.</span><span class=\"token function\">scaleWidth</span><span class=\"token punctuation\">(</span>sX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyRect<span class=\"token punctuation\">.</span><span class=\"token function\">scaleHeight</span><span class=\"token punctuation\">(</span>sY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void scaleFromCenter(&amp;s)</p>\n<p>&lt;!--\n<em>syntax: scaleFromCenter(&amp;s)</em>\n<em>name: scaleFromCenter</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;s</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Scales both the width and height the ofRectangle from its center.</p>\n<p>The center point of the rectangle will remain fixed and the width,\nheight, x, and y will be adjusted.</p>\n<p><strong>Warning</strong>: The z-component of the passed glm::vec3 is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>s The scaling factor.</p>\n<p>_description: _</p>\n<p>Scales both the width and height the ofRectangle from its center point.\nThe center point of the rectangle will remain fixed and the width, height, x, and y will be adjusted.</p>\n<p>This is equivalent to calling:</p>\n<pre><code>\nofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nofPoint <span class=\"token function\">myScaler</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyRect<span class=\"token punctuation\">.</span><span class=\"token function\">scaleFromCenter</span><span class=\"token punctuation\">(</span>myScaler<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> myScaler<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void scaleFromCenter(&amp;s)</p>\n<p>&lt;!--\n<em>syntax: scaleFromCenter(&amp;s)</em>\n<em>name: scaleFromCenter</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;s</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Scales both the width and height the ofRectangle from its center point.\nThe center point of the rectangle will remain fixed and the width, height, x, and y will be adjusted.</p>\n<p>This is equivalent to calling:</p>\n<pre><code>\nofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nofPoint <span class=\"token function\">myScaler</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyRect<span class=\"token punctuation\">.</span><span class=\"token function\">scaleFromCenter</span><span class=\"token punctuation\">(</span>myScaler<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> myScaler<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void scaleFromCenter(s)</p>\n<p>&lt;!--\n<em>syntax: scaleFromCenter(s)</em>\n<em>name: scaleFromCenter</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float s</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Scales both the width and height the ofRectangle from its center.</p>\n<p>The center point of the rectangle will remain fixed and the width,\nheight, x, and y will be adjusted.</p>\n<p><strong>Parameters:</strong></p>\n<p>s The scaling factor.</p>\n<p>_description: _</p>\n<p>Uniformly scales the ofRectangle from its center point.\nThe center point of the rectangle will remain fixed and the width, height, x, and y will be adjusted.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void scaleFromCenter(sX, sY)</p>\n<p>&lt;!--\n<em>syntax: scaleFromCenter(sX, sY)</em>\n<em>name: scaleFromCenter</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float sX, float sY</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Scales both the width and height the ofRectangle from its center.</p>\n<p>The center point of the rectangle will remain fixed and the width,\nheight, x, and y will be adjusted.</p>\n<p><strong>Parameters:</strong></p>\n<p>sX the width-scaling factor.</p>\n<p>sY the height-scaling factor.</p>\n<p>_description: _</p>\n<p>Scales both the width and height the ofRectangle from its center point.\nThe center point of the rectangle will remain fixed and the width, height, x, and y will be adjusted.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void scaleHeight(sY)</p>\n<p>&lt;!--\n<em>syntax: scaleHeight(sY)</em>\n<em>name: scaleHeight</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float sY</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Scale the height of the rectangle.</p>\n<p>This will scale the height but will not change the position and width.</p>\n<p><strong>Parameters:</strong></p>\n<p>sY The height-scaling factor.</p>\n<p>_description: _</p>\n<p>Scales the height of the ofRectangle by multiplying the current height with the passed-in float.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void scaleTo(&amp;targetRect, scaleMode = OF_SCALEMODE_FIT)</p>\n<p>&lt;!--\n<em>syntax: scaleTo(&amp;targetRect, scaleMode = OF_SCALEMODE_FIT)</em>\n<em>name: scaleTo</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;targetRect, ofScaleMode scaleMode=OF_SCALEMODE_FIT</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Scale the rectanle using a target ofRectangle and ofScaleMode.</p>\n<p>Adjusts the ofRectangle to match the provided ofRectangle using the\nprovided ofScaleMode.</p>\n<p><strong>Parameters:</strong></p>\n<p>targetRect The Target Rectangle to scale to.</p>\n<p>scaleMode The scale mode to use when scaling.</p>\n<p>_description: _</p>\n<p>Adjusts the ofRectangle to match the passed-in ofRectangle using the passed-in ofScaleMode.</p>\n<p>Assuming the ofRectangle as the Subject and the passed-in ofRectangle as the Target:</p>\n<p><strong>OF_SCALEMODE_FIT</strong>:\nThis centers the Subject rectangle within the Target rectangle, and resizes the Subject rectangle to completely fit within the Target Rectangle.</p>\n<ul>\n<li>It fits the Subject rectangle inside the target rectangle.</li>\n<li>It preserves Subject's aspect ratio.</li>\n<li>The Subject's final area &lt;= the Target's area.</li>\n<li>The Subject's center == the Target's center.</li>\n</ul>\n<p><strong>OF_SCALEMODE_FILL</strong>:\nThis centers the Subject rectangle within the Target rectangle, and resizes the Subject rectangle to completely encompass the Target Rectangle.</p>\n<ul>\n<li>It fills the Target rectangle with the Subject rectangle.</li>\n<li>It preserves the Subject's aspect ratio.</li>\n<li>The Subject's Area &gt;= the Target's area.</li>\n<li>The Subject's center == the Target's center.</li>\n</ul>\n<p><strong>OF_SCALEMODE_CENTER</strong>:\nThis centers the Subject rectangle within the Target rectangle, and does not modify the Subject's scale.</p>\n<ul>\n<li>It preserves the Subject's aspect ratio.</li>\n<li>The Subject's area is unchanged.</li>\n<li>The Subject's center == Target's center.</li>\n</ul>\n<p><strong>OF_SCALEMODE_STRETCH_TO_FILL</strong>:\nThis simply modifies the Subject rectangle to match the Target rectangle's dimensions.</p>\n<ul>\n<li>It can change the Subject's aspect ratio.</li>\n<li>The Subject's area == the Target's area.</li>\n<li>The Subject's center == the Target's center.</li>\n</ul>\n<p>For a working example of the various ofScaleModes, see the <em>graphics/rectangleAlignmentAndScaling/</em> example within the examples directory.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void scaleTo(&amp;targetRect, subjectAspectRatioMode, modelHorzAnchor, modelVertAnchor, subjectHorzAnchor, subjectVertAnchor)</p>\n<p>&lt;!--\n<em>syntax: scaleTo(&amp;targetRect, subjectAspectRatioMode, modelHorzAnchor, modelVertAnchor, subjectHorzAnchor, subjectVertAnchor)</em>\n<em>name: scaleTo</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;targetRect, ofAspectRatioMode subjectAspectRatioMode, ofAlignHorz modelHorzAnchor, ofAlignVert modelVertAnchor, ofAlignHorz subjectHorzAnchor, ofAlignVert subjectVertAnchor</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Scale the rectangle using a target ofRectangle and parameters.</p>\n<p>Adjusts the ofRectangle to match the passed-in ofRectangle. It will\nuse the ofAspectRatioMode to scale the ofRectangle, and will use the\nuse the alignment anchor parameters to position the rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>targetRect The Target Rectangle to scale to.</p>\n<p>subjectAspectRatioMode Aspect ratio scaling mode.</p>\n<p>modelHorzAnchor The target horizontal alignment method.</p>\n<p>modelVertAnchor The target vertical alignment method.</p>\n<p>subjectHorzAnchor The subject horizontal alignment method.</p>\n<p>subjectVertAnchor The subject vertical alignment method.</p>\n<p>_description: _</p>\n<p>Adjusts the ofRectangle to match the passed-in ofRectangle.  It will use the ofAspectRatioMode to scale the ofRectangle, and will use the use the alignment anchor parameters to position the rectangle.</p>\n<p>Assuming the ofRectangle as the Subject and the passed-in ofRectangle as the Target:</p>\n<p><strong>ofAspectRatioMode Options:</strong></p>\n<p><strong>OF_ASPECT_RATIO_IGNORE</strong>            : Sets the Subject rectangle's width and height to match those of the Target.\n<strong>OF_ASPECT_RATIO_KEEP</strong>              : Resizes the Subject rectangle to completely fit within the Target rectangle.\n<strong>OF_ASPECT_RATIO_KEEP_BY_EXPANDING</strong> : Resizes the Subject rectangle to completely enclose the Target rectangle.</p>\n<p><strong>ofAlignHorz Options:</strong></p>\n<p><strong>OF_ALIGN_HORZ_IGNORE</strong>              : Does not perform any horizontal alignment.\n<strong>OF_ALIGN_HORZ_LEFT</strong>                : Uses the left edge of the rectangle to horizontally anchor the alignment.\n<strong>OF_ALIGN_HORZ_RIGHT</strong>               : Uses the right edge of the rectangle to horizontally anchor the alignment.\n<strong>OF_ALIGN_HORZ_CENTER</strong>              : Uses the center of the rectangle to horizontally anchor the alignment.</p>\n<p><strong>ofAlignVert Options:</strong></p>\n<p><strong>OF_ALIGN_VERT_IGNORE</strong>              : Does not perform any vertical alignment.\n<strong>OF_ALIGN_VERT_TOP</strong>                 : Uses the upper edge of the rectangle to vertically anchor the alignment.\n<strong>OF_ALIGN_VERT_BOTTOM</strong>              : Uses the bottom edge of the rectangle to vertically anchor the alignment.\n<strong>OF_ALIGN_VERT_CENTER</strong>              : Uses the center of the rectangle to vertically anchor the alignment.</p>\n<p>For a working example of how to use ofAspectRatioMode, ofAlignVert, and ofAlignHorz, see the <em>graphics/rectangleAlignmentAndScaling/</em> example within the examples directory.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void scaleTo(&amp;targetRect, subjectAspectRatioMode, sharedHorzAnchor = OF_ALIGN_HORZ_CENTER, sharedVertAnchor = OF_ALIGN_VERT_CENTER)</p>\n<p>&lt;!--\n<em>syntax: scaleTo(&amp;targetRect, subjectAspectRatioMode, sharedHorzAnchor = OF_ALIGN_HORZ_CENTER, sharedVertAnchor = OF_ALIGN_VERT_CENTER)</em>\n<em>name: scaleTo</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;targetRect, ofAspectRatioMode subjectAspectRatioMode, ofAlignHorz sharedHorzAnchor=OF_ALIGN_HORZ_CENTER, ofAlignVert sharedVertAnchor=OF_ALIGN_VERT_CENTER</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Scale the rectangle using a target ofRectangle and parameters.</p>\n<p>Scales the ofRectangle to match the target ofRectangle. It will use the\nofAspectRatioMode to scale the ofRectangle and will use the\nalignment anchor parameters to position the rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>targetRect The Target Rectangle to scale to.</p>\n<p>subjectAspectRatioMode Aspect ratio scaling mode.</p>\n<p>sharedHorzAnchor The horizontal alignment method.</p>\n<p>sharedVertAnchor The vertical alignment method.</p>\n<p>_description: _</p>\n<p>Adjusts the ofRectangle to match the passed-in ofRectangle. It will use the ofAspectRatioMode to scale the ofRectangle, and will use the alignment anchor parameters to position the rectangle.</p>\n<p>This is a convenient method when both the target and subject rectangles are using the same alignment anchors. For a more complete explanation, see</p>\n<pre><code>\n<span class=\"token keyword\">void</span> <span class=\"token function\">scaleTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofRectangle<span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span> targetRect<span class=\"token punctuation\">,</span> \n\t\t\t ofAspectRatioMode subjectAspectRatioMode<span class=\"token punctuation\">,</span> \n\t\t\t ofAlignHorz modelHorzAnchor<span class=\"token punctuation\">,</span> \n\t\t\t ofAlignVert modelVertAnchor<span class=\"token punctuation\">,</span> \n\t\t\t ofAlignHorz subjectHorzAnchor<span class=\"token punctuation\">,</span> \n\t\t\t ofAlignVert subjectVertAnchor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>For a working example of how to use ofAspectRatioMode, ofAlignVert, and ofAlignHorz, see the <em>graphics/rectangleAlignmentAndScaling/</em> example within the examples directory.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void scaleWidth(sX)</p>\n<p>&lt;!--\n<em>syntax: scaleWidth(sX)</em>\n<em>name: scaleWidth</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float sX</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Scale the width of the rectangle.</p>\n<p>This will scale the width but will not change the position or height.</p>\n<p><strong>Parameters:</strong></p>\n<p>sX The width-scaling factor.</p>\n<p>_description: _</p>\n<p>Scales the width of the ofRectangle by multiplying the current width with the passed-in float.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(&amp;p, w, h)</p>\n<p>&lt;!--\n<em>syntax: set(&amp;p, w, h)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p, float w, float h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the position and size of the rectangle.</p>\n<p>To produce consistent results, users are encouraged to initialize\nrectangles in the standardized form with width &gt;=0 and height &gt;= 0.</p>\n<p><strong>Warning</strong>: The z-component of the passed glm::vec3 is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>p The new position.</p>\n<p>w The new width.</p>\n<p>h The new height.</p>\n<p>_description: _</p>\n<p>Sets the (x,y) coordinates, width, and height of the ofRectangle.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(&amp;p, w, h)</p>\n<p>&lt;!--\n<em>syntax: set(&amp;p, w, h)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;p, float w, float h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Sets the (x,y) coordinates, width, and height of the ofRectangle.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(&amp;p0, &amp;p1)</p>\n<p>&lt;!--\n<em>syntax: set(&amp;p0, &amp;p1)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p0, const glm::vec3 &amp;p1</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the position and size of the rectangle using corners.</p>\n<p><strong>Warning</strong>: The z-components of the passed glm::vec3s are ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>p0 The glm::vec3 representing the upper left hand corner.</p>\n<p>p1 The glm::vec3 representing the lower right hand corner.</p>\n<p>_description: _</p>\n<p>Sets the x position, y position, width, and height of the ofRectangle to enclose the line segment defined by the passed ofPoints.</p>\n<p>The rectangle will always be in standardized form, regardless of the order of the ofPoints passed in.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(&amp;p0, &amp;p1)</p>\n<p>&lt;!--\n<em>syntax: set(&amp;p0, &amp;p1)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;p0, const glm::vec2 &amp;p1</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Sets the x position, y position, width, and height of the ofRectangle to enclose the line segment defined by the passed ofPoints.</p>\n<p>The rectangle will always be in standardized form, regardless of the order of the ofPoints passed in.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(&amp;rect)</p>\n<p>&lt;!--\n<em>syntax: set(&amp;rect)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;rect</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the position and size by copying them from anohter rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>rect The rectangle to copy.</p>\n<p>_description: _</p>\n<p>Sets the x position, y position, width, and height of the ofRectangle to match those of the passed ofRectangle.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(px, py, w, h)</p>\n<p>&lt;!--\n<em>syntax: set(px, py, w, h)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float px, float py, float w, float h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the position and size of the rectangle.</p>\n<p>To produce consistent results, users are encouraged to initialize\nrectangles in the standardized form with width &gt;=0 and height &gt;= 0.</p>\n<p><strong>Parameters:</strong></p>\n<p>px The new x-position.</p>\n<p>py The new y-position.</p>\n<p>w The new width.</p>\n<p>h The new height.</p>\n<p>_description: _</p>\n<p>Sets the x position, y position, width, and height of the ofRectangle.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setFromCenter(&amp;p, w, h)</p>\n<p>&lt;!--\n<em>syntax: setFromCenter(&amp;p, w, h)</em>\n<em>name: setFromCenter</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p, float w, float h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set position and size of the rectangle from the center.</p>\n<p>The center of the rectangle is defined and the width and height grow\nout around the center.</p>\n<p><strong>Parameters:</strong></p>\n<p>p The position of the rectangle's center as an glm::vec3.</p>\n<p>w The width of the rectangle.</p>\n<p>h The height of the rectangle.</p>\n<p>_description: _</p>\n<p>Sets the position, width, and height of the ofRectangle.\nThe (x,y) coordinates passed into the function determine the center point of the ofRectangle.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setFromCenter(&amp;p, w, h)</p>\n<p>&lt;!--\n<em>syntax: setFromCenter(&amp;p, w, h)</em>\n<em>name: setFromCenter</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;p, float w, float h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Sets the position, width, and height of the ofRectangle.\nThe (x,y) coordinates passed into the function determine the center point of the ofRectangle.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setFromCenter(px, py, w, h)</p>\n<p>&lt;!--\n<em>syntax: setFromCenter(px, py, w, h)</em>\n<em>name: setFromCenter</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float px, float py, float w, float h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set position and size of the rectangle from the center.</p>\n<p>The center of the rectangle is defined and the width and height grow\nout around the center.</p>\n<p><strong>Parameters:</strong></p>\n<p>px The x-position of the rectangle's center.</p>\n<p>py The y-position of the rectangle's center.</p>\n<p>w The width of the rectangle.</p>\n<p>h The height of the rectangle.</p>\n<p>_description: _</p>\n<p>Sets the position, width, and height of the ofRectangle.\nThe x and y position passed into the function determine the center point of the ofRectangle.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setHeight(h)</p>\n<p>&lt;!--\n<em>syntax: setHeight(h)</em>\n<em>name: setHeight</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float h</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the height of the rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>h The new height.</p>\n<p>_description: _</p>\n<p>Sets the height of the ofRectangle.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setPosition(&amp;p)</p>\n<p>&lt;!--\n<em>syntax: setPosition(&amp;p)</em>\n<em>name: setPosition</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the position of the rectangle.</p>\n<p><strong>Warning</strong>: The z-component of the passed glm::vec3 is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>p The position as an glm::vec3.</p>\n<p>_description: _</p>\n<p>Sets the (x,y) position of the ofRectangle by passing in x and y as an ofPoint.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setPosition(px, py)</p>\n<p>&lt;!--\n<em>syntax: setPosition(px, py)</em>\n<em>name: setPosition</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float px, float py</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the position of the rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>px The new x-position.</p>\n<p>py The new y-position.</p>\n<p>_description: _</p>\n<p>Sets the (x,y) position of the ofRectangle by passing in x and y as floats.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setSize(w, h)</p>\n<p>&lt;!--\n<em>syntax: setSize(w, h)</em>\n<em>name: setSize</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float w, float h</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the size of the rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>w The new width.</p>\n<p>h The new height.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setWidth(w)</p>\n<p>&lt;!--\n<em>syntax: setWidth(w)</em>\n<em>name: setWidth</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float w</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the width of the rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>w The new width.</p>\n<p>_description: _</p>\n<p>Sets the width of the ofRectangle.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setX(px)</p>\n<p>&lt;!--\n<em>syntax: setX(px)</em>\n<em>name: setX</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float px</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the x-position of the rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>px The new x-position.</p>\n<p>_description: _</p>\n<p>Sets the x position of the ofRectangle.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setY(py)</p>\n<p>&lt;!--\n<em>syntax: setY(py)</em>\n<em>name: setY</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float py</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the y-position of the rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>py The new y-position.</p>\n<p>_description: _</p>\n<p>Sets the y position of the ofRectangle.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void standardize()</p>\n<p>&lt;!--\n<em>syntax: standardize()</em>\n<em>name: standardize</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Standardize the rectangle</p>\n<p>&quot;Standardized&quot; rectangles are rectangles whose width and height are positive: width &gt;= 0 and height</p>\n<blockquote>\n<p>= 0. This method can be used to ensure that the rectangle is\n&quot;standardized&quot;. If the rectangle is non-standard, it will modify the x /\nwidth and y / height values into their respective standardized versions.</p>\n</blockquote>\n<p>_description: _</p>\n<p>ofRectangle is a simple container for describing the position\nand size of 2D rectangles. Like many rectangle data structures\nfound in other frameworks and graphics libraries, member\nwidth and height variables can take negative values.\nAdditionally, x / y position and width / height are publicly\naccessible, resulting in great programming freedom.\nConsequently, two visually identical rectangles can be\nrepresented in the following ways:</p>\n<pre><code>\tofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">// OR</span>\n\t\n\tofRectangle <span class=\"token function\">myRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>While both representations will yield the same visual\nresults in all openFrameworks renderers, the results of\nsome method operations that modify x / y / width / height\n(such as scaling) produce mathematically correct, but\nvisually different results for each of the above\nrepresentations.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void translate(&amp;dp)</p>\n<p>&lt;!--\n<em>syntax: translate(&amp;dp)</em>\n<em>name: translate</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;dp</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Translate the rectangle's position by an x and y amount.</p>\n<p><strong>Warning</strong>: The z-component of the passed glm::vec3 is ignored.</p>\n<p><strong>Parameters:</strong></p>\n<p>dp The amount to translate as an glm::vec3.</p>\n<p>_description: _</p>\n<p>Offsets the position of the ofRectangle in the both the x and y dimensions by passing in an ofPoint.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void translate(&amp;dp)</p>\n<p>&lt;!--\n<em>syntax: translate(&amp;dp)</em>\n<em>name: translate</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;dp</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Offsets the position of the ofRectangle in the both the x and y dimensions by passing in an ofPoint.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void translate(dx, dy)</p>\n<p>&lt;!--\n<em>syntax: translate(dx, dy)</em>\n<em>name: translate</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float dx, float dy</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Translate the rectangle's position by an x and y amount.</p>\n<p><strong>Parameters:</strong></p>\n<p>dx The amount to translate in the x direction.</p>\n<p>dy The amount to translate in the y direction.</p>\n<p>_description: _</p>\n<p>Offsets the position of the ofRectangle in the both the x and y dimensions by passing in two floats.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void translateX(dx)</p>\n<p>&lt;!--\n<em>syntax: translateX(dx)</em>\n<em>name: translateX</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float dx</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Translate the x-position of the rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>dx The amount to translate on the x-axis.</p>\n<p>_description: _</p>\n<p>Offsets the position of the ofRectangle in the x dimension by a given amount.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void translateY(dy)</p>\n<p>&lt;!--\n<em>syntax: translateY(dy)</em>\n<em>name: translateY</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float dy</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Translate the y-position of the rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>dy The amount to translate on the y-axis.</p>\n<p>_description: _</p>\n<p>Offsets the position of the ofRectangle in the y dimension by a given amount.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>~ofRectangle()</h3>\n<p>&lt;!--\n<em>syntax: ~ofRectangle()</em>\n<em>name: ~ofRectangle</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Destroy the rectangle.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###float height</p>\n<p>&lt;!--\n<em>name: height</em>\n<em>type: float</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>The height of the ofRectangle.</p>\n<p>_description: _</p>\n<p>The height variable contains the height of the ofRectangle.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPoint position</p>\n<p>&lt;!--\n<em>name: position</em>\n<em>type: ofPoint</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>The (x,y) position of the ofRectangle as an glm::vec3.</p>\n<p><strong>Warning</strong>: The z-component of this position is preserved and can be used\nbut all ofRectangle operations will ignore the z-component.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float width</p>\n<p>&lt;!--\n<em>name: width</em>\n<em>type: float</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>The width of the ofRectangle.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float x</p>\n<p>&lt;!--\n<em>name: x</em>\n<em>type: float</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>The x position of the ofRectangle.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float y</p>\n<p>&lt;!--\n<em>name: y</em>\n<em>type: float</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>The y position of the ofRectangle.</p>\n<p>_description: _</p>\n<p>The y variable contains the y position of the ofRectangle.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofRectangle\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\nA class representing a 2D rectangle.\n\nofRectangle is a simple container for describing the position and size of a\n2D rectangle. The ofRectangle::standardize() method can be used to ensure\nthat the origin is in the \"standard\" form.\n\n\n**Warning**: While ofRectangle takes glm::vec3\nall ofRectangle operations are 2D only, ignoring the z-component.\n\n\n\n\n\n##Description\n\n##Description\n\nofRectangle is a simple container for describing the position and size of a 2D rectangle. The ofRectangle class provides a data structure and a collection of useful helper methods for manipulating rectangles. \n\nSince the `width` and `height` variables can be negative, the x/y-position is not guaranteed to represent the upper right hand corner. For example, two visually identical rectangles can be represented in the following ways:\n\n~~~~{.cpp}\n    ofRectangle myRect(0, 0, 100, 100);\n~~~~\n\nor\n\n~~~~{.cpp}\n    ofRectangle myRect(100, 100, -100, -100);\n~~~~\n\nWhile both representations will yield the same visual results in all openFrameworks renderers, the results of some method operations that modify x, y, width and height (such as scaling) produce mathematically correct, but visually different results for each of the above representations.\n\nTo avoid this ambiguity, users should prefer \"standardized\" rectangles. \"Standardized\" rectangles are rectangles whose width >= 0 and height >= 0. The ofRectangle::standardize() method can be used to ensure that the origin is in the \"standard\" form.\n\n\n\n\n\n##Methods\n\n\n\n###void alignTo(&targetPoint, thisHorzAnchor = OF_ALIGN_HORZ_CENTER, thisVertAnchor = OF_ALIGN_VERT_CENTER)\n\n<!--\n_syntax: alignTo(&targetPoint, thisHorzAnchor = OF_ALIGN_HORZ_CENTER, thisVertAnchor = OF_ALIGN_VERT_CENTER)_\n_name: alignTo_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &targetPoint, ofAlignHorz thisHorzAnchor=OF_ALIGN_HORZ_CENTER, ofAlignVert thisVertAnchor=OF_ALIGN_VERT_CENTER_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAlign this ofRectangle to an glm::vec3 in both x- and y dimentions.\n\nAligns the position of the ofRectangle to the given point using an\nofAlignHorz constant and an ofAlignVert constant. If neither constant is\npassed in, this will align the center of the rectangle.\n\n\n**Warning**: The z-component of the passed glm::vec3 is ignored.\n\n\n**Parameters:**\n\ntargetPoint The target glm::vec3 to align to.\n\nthisHorzAnchor The horizontal alignment anchor.\n\nthisVertAnchor The vertical alignment anchor.\n\n\n\n\n\n_description: _\n\n__ofAlignHorz Constants:__\n\n- `OF_ALIGN_HORZ_IGNORE` : Does not perform any horizontal alignment.\n- `OF_ALIGN_HORZ_LEFT`   : Uses the left edge of the rectangle to horizontally anchor the alignment.\n- `OF_ALIGN_HORZ_RIGHT`  : Uses the right edge of the rectangle to horizontally anchor the alignment.\n- `OF_ALIGN_HORZ_CENTER` : Uses the center of the rectangle to horizontally anchor the alignment.\n\n__ofAlignVert Constants:__\n\n- `OF_ALIGN_VERT_IGNORE` : Does not perform any vertical alignment.\n- `OF_ALIGN_VERT_TOP`    : Uses the upper edge of the rectangle to vertically anchor the alignment.\n- `OF_ALIGN_VERT_BOTTOM` : Uses the bottom edge of the rectangle to vertically anchor the alignment.\n- `OF_ALIGN_VERT_CENTER` : Uses the center of the rectangle to vertically anchor the alignment.\n\nFor a working example of how to use ofAlignVert and ofAlignHorz, see the *graphics/rectangleAlignmentAndScaling/* example within the examples directory.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void alignTo(&targetPoint, thisHorzAnchor = OF_ALIGN_HORZ_CENTER, thisVertAnchor = OF_ALIGN_VERT_CENTER)\n\n<!--\n_syntax: alignTo(&targetPoint, thisHorzAnchor = OF_ALIGN_HORZ_CENTER, thisVertAnchor = OF_ALIGN_VERT_CENTER)_\n_name: alignTo_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &targetPoint, ofAlignHorz thisHorzAnchor=OF_ALIGN_HORZ_CENTER, ofAlignVert thisVertAnchor=OF_ALIGN_VERT_CENTER_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n__ofAlignHorz Constants:__\n\n- `OF_ALIGN_HORZ_IGNORE` : Does not perform any horizontal alignment.\n- `OF_ALIGN_HORZ_LEFT`   : Uses the left edge of the rectangle to horizontally anchor the alignment.\n- `OF_ALIGN_HORZ_RIGHT`  : Uses the right edge of the rectangle to horizontally anchor the alignment.\n- `OF_ALIGN_HORZ_CENTER` : Uses the center of the rectangle to horizontally anchor the alignment.\n\n__ofAlignVert Constants:__\n\n- `OF_ALIGN_VERT_IGNORE` : Does not perform any vertical alignment.\n- `OF_ALIGN_VERT_TOP`    : Uses the upper edge of the rectangle to vertically anchor the alignment.\n- `OF_ALIGN_VERT_BOTTOM` : Uses the bottom edge of the rectangle to vertically anchor the alignment.\n- `OF_ALIGN_VERT_CENTER` : Uses the center of the rectangle to vertically anchor the alignment.\n\nFor a working example of how to use ofAlignVert and ofAlignHorz, see the *graphics/rectangleAlignmentAndScaling/* example within the examples directory.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void alignTo(&targetRect, sharedHorzAnchor = OF_ALIGN_HORZ_CENTER, sharedVertAnchor = OF_ALIGN_VERT_CENTER)\n\n<!--\n_syntax: alignTo(&targetRect, sharedHorzAnchor = OF_ALIGN_HORZ_CENTER, sharedVertAnchor = OF_ALIGN_VERT_CENTER)_\n_name: alignTo_\n_returns: void_\n_returns_description: _\n_parameters: const ofRectangle &targetRect, ofAlignHorz sharedHorzAnchor=OF_ALIGN_HORZ_CENTER, ofAlignVert sharedVertAnchor=OF_ALIGN_VERT_CENTER_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAlign this ofRectangle to an glm::vec3 in both x- and y dimentions using a shared anchor.\n\nAligns the position of the ofRectangle to that of the passed-in\nofRectangle. Can take an ofAlignHorz constant and an ofAlignVert\nconstant.\n\nIf neither constant is passed in, this will align the centers of the\nrectangles.\n\nIf constants are passed in, it will use those constants for both\nrectangles.\n\n\n**Parameters:**\n\ntargetRect The target ofRectangle to align this rectangle to.\n\nsharedHorzAnchor The alignment anchor for both rectangles.\n\nsharedVertAnchor The alignment anchor for both rectangles.\n\n\n\n\n\n_description: _\n\n__ofAlignHorz Constants:__\n\n- `OF_ALIGN_HORZ_IGNORE` : Does not perform any horizontal alignment.\n- `OF_ALIGN_HORZ_LEFT`   : Uses the left edge of the rectangle to horizontally anchor the alignment.\n- `OF_ALIGN_HORZ_RIGHT`  : Uses the right edge of the rectangle to horizontally anchor the alignment.\n- `OF_ALIGN_HORZ_CENTER` : Uses the center of the rectangle to horizontally anchor the alignment.\n\n__ofAlignVert Constants:__\n\n- `OF_ALIGN_VERT_IGNORE` : Does not perform any vertical alignment.\n- `OF_ALIGN_VERT_TOP`    : Uses the upper edge of the rectangle to vertically anchor the alignment.\n- `OF_ALIGN_VERT_BOTTOM` : Uses the bottom edge of the rectangle to vertically anchor the alignment.\n- `OF_ALIGN_VERT_CENTER` : Uses the center of the rectangle to vertically anchor the alignment.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void alignTo(&targetRect, targetHorzAnchor, targetVertAnchor, thisHorzAnchor, thisVertAnchor)\n\n<!--\n_syntax: alignTo(&targetRect, targetHorzAnchor, targetVertAnchor, thisHorzAnchor, thisVertAnchor)_\n_name: alignTo_\n_returns: void_\n_returns_description: _\n_parameters: const ofRectangle &targetRect, ofAlignHorz targetHorzAnchor, ofAlignVert targetVertAnchor, ofAlignHorz thisHorzAnchor, ofAlignVert thisVertAnchor_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nVertically align this ofRectangle to another target ofRectangle.\n\nAligns the position of the ofRectangle to that of the passed-in\nofRectangle. Takes two ofAlignHorz constants and two ofAlignVert\nconstants.\n\nWill align the chosen anchors in the ofRectangle with the chosen\nanchors in the passed-in ofRectangle.\n\n\n**Parameters:**\n\ntargetRect The target ofRectangle to align this rectangle to.\n\ntargetHorzAnchor The vertical alignment anchor for the target rectangle.\n\ntargetVertAnchor The horizontal alignment anchor for the target rectangle.\n\nthisHorzAnchor The horizontal alignment anchor for this rectangle.\n\nthisVertAnchor The vertical alignment anchor for this rectangle.\n\n\n\n\n\n_description: _\n\n__ofAlignHorz Constants:__\n\n- `OF_ALIGN_HORZ_IGNORE` : Does not perform any horizontal alignment.\n- `OF_ALIGN_HORZ_LEFT`   : Uses the left edge of the rectangle to horizontally anchor the alignment.\n- `OF_ALIGN_HORZ_RIGHT`  : Uses the right edge of the rectangle to horizontally anchor the alignment.\n- `OF_ALIGN_HORZ_CENTER` : Uses the center of the rectangle to horizontally anchor the alignment.\n\n__ofAlignVert Constants:__\n\n- `OF_ALIGN_VERT_IGNORE` : Does not perform any vertical alignment.\n- `OF_ALIGN_VERT_TOP`    : Uses the upper edge of the rectangle to vertically anchor the alignment.\n- `OF_ALIGN_VERT_BOTTOM` : Uses the bottom edge of the rectangle to vertically anchor the alignment.\n- `OF_ALIGN_VERT_CENTER` : Uses the center of the rectangle to vertically anchor the alignment.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void alignToHorz(&targetRect, sharedAnchor = OF_ALIGN_HORZ_CENTER)\n\n<!--\n_syntax: alignToHorz(&targetRect, sharedAnchor = OF_ALIGN_HORZ_CENTER)_\n_name: alignToHorz_\n_returns: void_\n_returns_description: _\n_parameters: const ofRectangle &targetRect, ofAlignHorz sharedAnchor=OF_ALIGN_HORZ_CENTER_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nHorizontally align two rectangles to another using one anchor for both.\n\nAligns the horizontal position of the ofRectangle to that of the\npassed-in ofRectangle using an ofAlignHorz constant as anchor.\n\nIf a constant is not passed in, this will align the horizontal centers\nof the rectangles.\n\nIf a constant is passed in, it will use that constant for both\nrectangles.\n\n\n**Parameters:**\n\ntargetRect The target rectangle to align this rectangle to.\n\nsharedAnchor The common edge of the rectangles to align.\n\n\n\n\n\n_description: _\n\n__ofAlignHorz Constants:__\n\n- `OF_ALIGN_HORZ_IGNORE` : Does not perform any horizontal alignment.\n- `OF_ALIGN_HORZ_LEFT`   : Uses the left edge of the rectangle to horizontally anchor the alignment.\n- `OF_ALIGN_HORZ_RIGHT`  : Uses the right edge of the rectangle to horizontally anchor the alignment.\n- `OF_ALIGN_HORZ_CENTER` : Uses the center of the rectangle to horizontally anchor the alignment.\n\nFor a working example of how to use ofAlignHorz, see the *graphics/rectangleAlignmentAndScaling/* example within the examples directory.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void alignToHorz(&targetRect, targetHorzAnchor, thisHorzAnchor)\n\n<!--\n_syntax: alignToHorz(&targetRect, targetHorzAnchor, thisHorzAnchor)_\n_name: alignToHorz_\n_returns: void_\n_returns_description: _\n_parameters: const ofRectangle &targetRect, ofAlignHorz targetHorzAnchor, ofAlignHorz thisHorzAnchor_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nHorizontally align two rectangles to another using two anchors.\n\nAligns the horizontal position of the ofRectangle to that of the\npassed-in ofRectangle. Takes two ofAlignHorz constants as anchors.\n\nWill align the chosen anchor in the ofRectangle with the chosen anchor\nin the passed-in ofRectangle.\n\n\n**Parameters:**\n\ntargetRect The target rectangle to align this rectangle to.\n\ntargetHorzAnchor The edge of the other rectangle to align.\n\nthisHorzAnchor The edge of this rectangle to align.\n\n\n\n\n\n_description: _\n\n__ofAlignHorz Constants:__\n\n- `OF_ALIGN_HORZ_IGNORE` : Does not perform any horizontal alignment.\n- `OF_ALIGN_HORZ_LEFT`   : Uses the left edge of the rectangle to horizontally anchor the alignment.\n- `OF_ALIGN_HORZ_RIGHT`  : Uses the right edge of the rectangle to horizontally anchor the alignment.\n- `OF_ALIGN_HORZ_CENTER` : Uses the center of the rectangle to horizontally anchor the alignment.\n\nFor a working example of how to use ofAlignHorz, see the *graphics/rectangleAlignmentAndScaling/* example within the examples directory.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void alignToHorz(&targetX, thisHorzAnchor = OF_ALIGN_HORZ_CENTER)\n\n<!--\n_syntax: alignToHorz(&targetX, thisHorzAnchor = OF_ALIGN_HORZ_CENTER)_\n_name: alignToHorz_\n_returns: void_\n_returns_description: _\n_parameters: const float &targetX, ofAlignHorz thisHorzAnchor=OF_ALIGN_HORZ_CENTER_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nHorizontally align a rectangle using a position and anchor edge.\n\nAligns the horizontal position of the ofRectangle to the given x-\nposition using an ofAlignHorz constant as anchor. If a constant is not passed in\nthis will align the center of the rectangle.\n\n\n**Parameters:**\n\ntargetX The x-position to align this rectangle to.\n\nthisHorzAnchor The edge of this rectangle to align.\n\n\n\n\n\n_description: _\n\n__ofAlignHorz Constants:__\n\n- `OF_ALIGN_HORZ_IGNORE` : Does not perform any horizontal alignment.\n- `OF_ALIGN_HORZ_LEFT`   : Uses the left edge of the rectangle to horizontally anchor the alignment.\n- `OF_ALIGN_HORZ_RIGHT`  : Uses the right edge of the rectangle to horizontally anchor the alignment.\n- `OF_ALIGN_HORZ_CENTER` : Uses the center of the rectangle to horizontally anchor the alignment.\n\nFor a working example of how to use ofAlignHorz, see the *graphics/rectangleAlignmentAndScaling/* example within the examples directory.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void alignToVert(&targetRect, sharedAnchor = OF_ALIGN_VERT_CENTER)\n\n<!--\n_syntax: alignToVert(&targetRect, sharedAnchor = OF_ALIGN_VERT_CENTER)_\n_name: alignToVert_\n_returns: void_\n_returns_description: _\n_parameters: const ofRectangle &targetRect, ofAlignVert sharedAnchor=OF_ALIGN_VERT_CENTER_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nVertically align two rectangles to another using one anchor for both.\n\nAligns the vertical position of the ofRectangle to that of the\npassed-in ofRectangle using an ofAlignVert constant as anchor.\n\nIf a constant is not passed in, this will align the vertical centers\nof the rectangles.\n\nIf a constant is passed in, it will use that constant for both rectangles.\n\n\n**Parameters:**\n\ntargetRect The target ofRectangle to align this rectangle to.\n\nsharedAnchor The alignment position for both rectangles to use.\n\n\n\n\n\n_description: _\n\n__ofAlignVert Constants:__\n\n- `OF_ALIGN_VERT_IGNORE` : Does not perform any vertical alignment.\n- `OF_ALIGN_VERT_TOP`    : Uses the upper edge of the rectangle to vertically anchor the alignment.\n- `OF_ALIGN_VERT_BOTTOM` : Uses the bottom edge of the rectangle to vertically anchor the alignment.\n- `OF_ALIGN_VERT_CENTER` : Uses the center of the rectangle to vertically anchor the alignment.\n\nFor a working example of how to use ofAlignVert, see the\n*graphics/rectangleAlignmentAndScaling/* example within the examples\ndirectory\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void alignToVert(&targetRect, targetVertAnchor, thisVertAnchor)\n\n<!--\n_syntax: alignToVert(&targetRect, targetVertAnchor, thisVertAnchor)_\n_name: alignToVert_\n_returns: void_\n_returns_description: _\n_parameters: const ofRectangle &targetRect, ofAlignVert targetVertAnchor, ofAlignVert thisVertAnchor_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nVertically align two rectangles to another using two anchors.\n\nWill align the chosen anchor in the ofRectangle with the chosen anchor\nin the passed-in ofRectangle.\n\n\n**Parameters:**\n\ntargetRect The target ofRectangle to align this rectangle to.\n\ntargetVertAnchor The alignment anchor for this rectangle.\n\nthisVertAnchor The alignment anchor for the other rectangle.\n\n\n\n\n\n_description: _\n\n__ofAlignVert Constants:__\n\n- `OF_ALIGN_VERT_IGNORE` : Does not perform any vertical alignment.\n- `OF_ALIGN_VERT_TOP`    : Uses the upper edge of the rectangle to vertically anchor the alignment.\n- `OF_ALIGN_VERT_BOTTOM` : Uses the bottom edge of the rectangle to vertically anchor the alignment.\n- `OF_ALIGN_VERT_CENTER` : Uses the center of the rectangle to vertically anchor the alignment.\n\nFor a working example of how to use ofAlignVert, see the\n*graphics/rectangleAlignmentAndScaling/* example within the examples\ndirectory\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void alignToVert(&targetY, sharedAnchor = OF_ALIGN_VERT_CENTER)\n\n<!--\n_syntax: alignToVert(&targetY, sharedAnchor = OF_ALIGN_VERT_CENTER)_\n_name: alignToVert_\n_returns: void_\n_returns_description: _\n_parameters: const float &targetY, ofAlignVert sharedAnchor=OF_ALIGN_VERT_CENTER_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nVertically align a rectangle using a position and anchor edge.\n\nAligns the vertical position of the ofRectangle to the given y-\nposition using an ofAlignVert constant as anchor. If a constant is not passed in\nthis will align the center of the rectangle.\n\n\n**Parameters:**\n\ntargetY The target y-position to align this rectangle to.\n\nsharedAnchor The alignment position of this ofRectangle to use.\n\n\n\n\n\n_description: _\n\n__ofAlignVert Constants:__\n\n- `OF_ALIGN_VERT_IGNORE` : Does not perform any vertical alignment.\n- `OF_ALIGN_VERT_TOP`    : Uses the upper edge of the rectangle to vertically anchor the alignment.\n- `OF_ALIGN_VERT_BOTTOM` : Uses the bottom edge of the rectangle to vertically anchor the alignment.\n- `OF_ALIGN_VERT_CENTER` : Uses the center of the rectangle to vertically anchor the alignment.\n\nFor a working example of how to use ofAlignVert, see the\n*graphics/rectangleAlignmentAndScaling/* example within the examples\ndirectory\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getArea()\n\n<!--\n_syntax: getArea()_\n_name: getArea_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the area of the ofRectangle.\n\nThis is the product of the width and height of the recatngle.\n\n\n**Returns**: The area of the rectangle as float.\n\n\n\n\n\n_description: _\n\nExample:\n~~~~{.cpp}\n\n// Create a rectangle that is 100 units wide and 200 units tall\nofRectangle myRect(0,0,100,200);\n\n// Get the area of that rectangle\nfloat areaValue = myRect.getArea();\n\n// areaValue will be 20000.0.\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getAspectRatio()\n\n<!--\n_syntax: getAspectRatio()_\n_name: getAspectRatio_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGets the ratio of width to height of the ofRectangle.\n\n\n**Returns**: The aspect ratio of the rectangle.\n\n\n\n\n\n_description: _\n\nExample:\n\n~~~~{.cpp}\n\n// Create a rectangle that is 100 units wide and 200 units tall\nofRectangle myRect(0,0,100,200);\n\n// Get the aspect ratio of that rectangle\nfloat aspectRatioValue = myRect.getAspectRatio();\n\n// aspectRatioValue will be 0.5.\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getBottom()\n\n<!--\n_syntax: getBottom()_\n_name: getBottom_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGets the y position of the bottom edge of the ofRectangle as float.\n\n**See also**: getMaxY()\n\n**Returns**: The y position of the bottom edge of the rectangle.\n\n\n\n\n\n_description: _\n\nEquivalent to ofRectangle::getMaxY().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getBottomLeft()\n\n<!--\n_syntax: getBottomLeft()_\n_name: getBottomLeft_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the bottom-left coordinates of the ofRectangle as glm::vec3.\n\n**Returns**: The bottom-left coordinates of the rectangle.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getBottomRight()\n\n<!--\n_syntax: getBottomRight()_\n_name: getBottomRight_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the bottom-right coordinates of the ofRectangle as glm::vec3.\n\n**See also**: getMax()\n\n**Returns**: The bottom-right coordinates of the rectangle.\n\n\n\n\n\n_description: _\n\nEquivalent to ofRectangle::getMax().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getCenter()\n\n<!--\n_syntax: getCenter()_\n_name: getCenter_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the coordiantes of the ofRectangle's center as glm::vec3.\n\n\n**Warning**: The z component of the returned glm::vec3 will always be 0.\n\n\n**Returns**: The x and y coordinates of the center of the rectangle (z = 0).\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getHeight()\n\n<!--\n_syntax: getHeight()_\n_name: getHeight_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGets the height of the ofRectangle as float.\n\n**Returns**: The height of the rectangle.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getHorzAnchor(anchor)\n\n<!--\n_syntax: getHorzAnchor(anchor)_\n_name: getHorzAnchor_\n_returns: float_\n_returns_description: _\n_parameters: ofAlignHorz anchor_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nA convenience method that returns the value of one of\nthe horizontal edges of the ofRectangle using the `ofAlignHorz` enum.\n\n\n**Parameters:**\n\nanchor The anchor position to query.\n\n**Returns**: the value of the referenced anchor position.\n\n\n\n\n\n_description: _\n\nPossible anchor values are:\n\n- `OF_ALIGN_HORZ_IGNORE`  : returns 0.0\n- `OF_ALIGN_HORZ_LEFT`    : returns the position of the left edge, equivalent to ofRectangle::geLeft().\n- `OF_ALIGN_HORZ_RIGHT`   : returns the position of the right edge, equivalent to ofRectangle::getRight().\n- `OF_ALIGN_HORZ_CENTER`  : returns the x-position of the center of the ofRectangle.\n\nAny other anchor value will return `0.0`.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofRectangle getIntersection(&rect)\n\n<!--\n_syntax: getIntersection(&rect)_\n_name: getIntersection_\n_returns: ofRectangle_\n_returns_description: _\n_parameters: const ofRectangle &rect_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the intersecting area between this rectangle and another.\n\nThis method will attempt to return the area of overlap between this\nrectangle and the passed rectangle.\n\nIf the two rectangles do not overlap, it will return an \"empty\"\nrectangle located (0, 0) with 0 width and 0 height.\n\nIf the two rectangles only share an edge this will return a rectangle\npositioned on that edge:\n\nIf the shared edge is vertical, the rectangle will have zero width,\notherwise it will have zero height.\n\n\n**Parameters:**\n\nrect The rectangle to intersect.\n\n**Returns**: A new ofRectangle representing the intersecting area or an\n         empty rectangle (0, 0, 0, 0) if there is no intersection.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getLeft()\n\n<!--\n_syntax: getLeft()_\n_name: getLeft_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGets the x position of the left edge of the ofRectangle as float.\n\n**See also**: getMinX()\n\n**Returns**: The x position of the left edge of the rectangle.\n\n\n\n\n\n_description: _\n\nEquivalent to ofRectangle::getMinX().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getMax()\n\n<!--\n_syntax: getMax()_\n_name: getMax_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the maximum x and y coordinates of the ofRectangle as glm::vec3.\n\n**Returns**: The maximum x and y coordinates of the rectangle.\n\n\n\n\n\n_description: _\n\nReturns the (x,y) coordinates of the corner of the rectangle with the largest x and largest y position as an ofPoint.\n\nEquivalent to ofRectangle::getBottomRight().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getMaxX()\n\n<!--\n_syntax: getMaxX()_\n_name: getMaxX_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the largest x position of the ofRectangle as float.\n\n**Returns**: The largest x position of the rectangle.\n\n\n\n\n\n_description: _\n\nReturns the position of the larger of the two sides of the rectangle perpendicular to the x axis as a float.\n\nEquivalent to ofRectangle::getRight().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getMaxY()\n\n<!--\n_syntax: getMaxY()_\n_name: getMaxY_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the largest y position of the ofRectangle as float.\n\n**Returns**: The largest y position of the rectangle.\n\n\n\n\n\n_description: _\n\nEquivalent to ofRectangle::getBottom().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getMin()\n\n<!--\n_syntax: getMin()_\n_name: getMin_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the minimum x and y coordinates of the ofRectangle as glm::vec3.\n\n**Returns**: The minimum x and y coordinates of the rectangle.\n\n\n\n\n\n_description: _\n\nEquivalent to ofRectangle::getTopLeft().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getMinX()\n\n<!--\n_syntax: getMinX()_\n_name: getMinX_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the smallest x position of the ofRectangle as float.\n\n**Returns**: The smallest xposition of the rectangle.\n\n\n\n\n\n_description: _\n\nEquivalent to ofRectangle::getLeft().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getMinY()\n\n<!--\n_syntax: getMinY()_\n_name: getMinY_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the smallest y position of the ofRectangle as float.\n\n**Returns**: The smallest y position of the rectangle.\n\n\n\n\n\n_description: _\n\nEquivalent to ofRectangle::getTop().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getPerimeter()\n\n<!--\n_syntax: getPerimeter()_\n_name: getPerimeter_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGets the perimeter of the ofRectangle.\n\nThis is the sum of the lengths of the sides.\n\n\n**Returns**: The perimeter of the rectangle as float.\n\n\n\n\n\n_description: _\n\nExample:\n~~~~{.cpp}\n\n// Create a rectangle that is 100 units wide and 200 units tall\nofRectangle myRect(0,0,100,200);\n\n// Get the perimeter of that rectangle\nfloat perimeterValue = myRect.getPerimeter();\n\n// perimeterValue will be 600.0.\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const glm::vec3 & getPosition()\n\n<!--\n_syntax: getPosition()_\n_name: getPosition_\n_returns: const glm::vec3 &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the ofRectangle's position.\n\n\n**Warning**: The z component of the returned glm::vec3 is undefined.\n\n\n**Returns**: The rectangle's position.\n\n\n\n\n\n_description: _\n\nReturns the (x,y) position of the ofRectangle as an ofPoint.\n\nEquivalent to ofRectangle::getPositionRef().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getRight()\n\n<!--\n_syntax: getRight()_\n_name: getRight_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGets the x position of the right edge of the ofRectangle as float.\n\n**See also**: getMaxX()\n\n**Returns**: The y position of the right edge of the rectangle.\n\n\n\n\n\n_description: _\n\nEquivalent to ofRectangle::getMaxX().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofRectangle getStandardized()\n\n<!--\n_syntax: getStandardized()_\n_name: getStandardized_\n_returns: ofRectangle_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the standardized representation of this rectangle.\n\n\"Standardized\" rectangles are rectangles whose width and height are positive.\nFor more information about standardized rectangles, see the discussion of the standardize() method.\n\n\n**Returns**: the Standardized version of this ofRectangle.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getTop()\n\n<!--\n_syntax: getTop()_\n_name: getTop_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGets the y position of the top edge of the ofRectangle as float.\n\n**See also**: getMinY()\n\n**Returns**: The y position of the top edge of the rectangle.\n\n\n\n\n\n_description: _\n\nEquivalent to ofRectangle::getMinY().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getTopLeft()\n\n<!--\n_syntax: getTopLeft()_\n_name: getTopLeft_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the top-left coordinates of the ofRectangle as glm::vec3.\n\n**See also**: getMin()\n\n**Returns**: The top-left coordinates of the rectangle.\n\n\n\n\n\n_description: _\n\nEquivalent to ofRectangle::getMin().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getTopRight()\n\n<!--\n_syntax: getTopRight()_\n_name: getTopRight_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the top-right coordinates of the ofRectangle as glm::vec3.\n\n**Returns**: The top-right coordinates of the rectangle.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofRectangle getUnion(&rect)\n\n<!--\n_syntax: getUnion(&rect)_\n_name: getUnion_\n_returns: ofRectangle_\n_returns_description: _\n_parameters: const ofRectangle &rect_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the union area between this rectangle and anohter.\n\n\n**See also**: getIntersection(const ofRectangle& rect) const\n\n**Parameters:**\n\nrect The rectangle to unite with.\n\n**Returns**: A new ofRectangle whose area contains both the area of the\n         this rectangle and the passed rectangle..\n\n\n\n\n\n_description: _\n\nReturn a new ofRectangle whose area contains both the area of the ofRectangle and that of the passed ofRectangle.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getVertAnchor(anchor)\n\n<!--\n_syntax: getVertAnchor(anchor)_\n_name: getVertAnchor_\n_returns: float_\n_returns_description: _\n_parameters: ofAlignVert anchor_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nA convenience method that returns the value of one of the\nvertical edges of the ofRectangle using the ofAlignVert enum.\n\n\n**Parameters:**\n\nanchor The anchor position to query.\n\n**Returns**: the value of the referenced anchor position.\n\n\n\n\n\n_description: _\n\nPossible anchor values are:\n\n- `OF_ALIGN_VERT_IGNORE`  : returns 0.0\n- `OF_ALIGN_VERT_TOP`     : returns the position of the upper edge, equivalent to ofRectangle::getTop().\n- `OF_ALIGN_VERT_BOTTOM`  : returns the position of the bottom edge, equivalent to ofRectangle::getBottom().\n- `OF_ALIGN_VERT_CENTER`  : returns the y-position of the center of the ofRectangle.\n\nAny other anchor value will return `0.0`.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getWidth()\n\n<!--\n_syntax: getWidth()_\n_name: getWidth_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGets the width of the ofRectangle as float.\n\n**Returns**: The width of the rectangle.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getX()\n\n<!--\n_syntax: getX()_\n_name: getX_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGets the x position of the ofRectangle as float.\n\n**Returns**: The x position of the rectangle.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getY()\n\n<!--\n_syntax: getY()_\n_name: getY_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGets the y position of the ofRectangle as float.\n\n**Returns**: the y position of the rectangle.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void growToInclude(&p)\n\n<!--\n_syntax: growToInclude(&p)_\n_name: growToInclude_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGrow the ofRectangle to include the given point.\n\nThis will potentially change the width, height, x-position, and y-\nposition of the ofRectangle.  If the point is already within the\nrectangle, this rectangle will remain unchanged.\n\n\n**Warning**: The z-component of the passed glm::vec3 is ignored.\n\n\n**Parameters:**\n\np The position to include.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void growToInclude(&p)\n\n<!--\n_syntax: growToInclude(&p)_\n_name: growToInclude_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void growToInclude(&p0, &p1)\n\n<!--\n_syntax: growToInclude(&p0, &p1)_\n_name: growToInclude_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p0, const glm::vec3 &p1_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGrow the ofRectangle to include the given line segment.\n\nThis will potentially change the width, height, x-position, and\ny-position of the ofRectangle.  If the points are already within the\nrectangle, this rectangle will remain unchanged.\n\n\n**Warning**: The z-components of the passed glm::vec3s are ignored.\n\n\n**Parameters:**\n\np0 The first point to include.\n\np1 The second point to include.\n\n\n\n\n\n_description: _\n\nModify the ofRectangle so that both the ofPoints given are enclosed within the rectangle.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void growToInclude(&p0, &p1)\n\n<!--\n_syntax: growToInclude(&p0, &p1)_\n_name: growToInclude_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p0, const glm::vec2 &p1_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nModify the ofRectangle so that both the ofPoints given are enclosed within the rectangle.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void growToInclude(&rect)\n\n<!--\n_syntax: growToInclude(&rect)_\n_name: growToInclude_\n_returns: void_\n_returns_description: _\n_parameters: const ofRectangle &rect_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGrow the ofRectangle to include the given ofRectangle.\n\nThis will potentially change the width, height, x-position, and y-\nposition of the ofRectangle.  If the rectangle is already within the\nrectangle, this rectangle will remain unchanged.\n\n\n**Parameters:**\n\nrect The rectangle to include.\n\n\n\n\n\n_description: _\n\nExpands the ofRectangle so that the ofRectangle passed into the method is entirely enclosed by the current ofRectangle.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void growToInclude(px, py)\n\n<!--\n_syntax: growToInclude(px, py)_\n_name: growToInclude_\n_returns: void_\n_returns_description: _\n_parameters: float px, float py_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGrow the ofRectangle to include the given (x, y) coordinates.\n\nThis will potentially change the width, height, x-position, and y-\nposition of the ofRectangle. If the points are already within the\nrectangle, this rectangle will remain unchanged.\n\n\n**Parameters:**\n\npx The x-coordinate to include.\n\npy The y-coordiante to include.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool inside(&p)\n\n<!--\n_syntax: inside(&p)_\n_name: inside_\n_returns: bool_\n_returns_description: _\n_parameters: const glm::vec3 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDetermines if the glm::vec3 is within the ofRectangle.\n\nNote that points on the edge of the ofRectangle are not\nconsidered within the rectangle and will return false.\n\n\n**Warning**: The z-component of the passed glm::vec3 is ignored.\n\n\n**Parameters:**\n\np The point to test.\n\n**Returns**: true if the point p is inside this ofRectangle.\n\n\n\n\n\n_description: _\n\nCoordinates (x, y) are considered inside the rectangle if:\n\n`x > rectMinX && x < rectMinX && y > rectMinY && y < rectMaxY`\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool inside(&p)\n\n<!--\n_syntax: inside(&p)_\n_name: inside_\n_returns: bool_\n_returns_description: _\n_parameters: const glm::vec2 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCoordinates (x, y) are considered inside the rectangle if:\n\n`x > rectMinX && x < rectMinX && y > rectMinY && y < rectMaxY`\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool inside(&p0, &p1)\n\n<!--\n_syntax: inside(&p0, &p1)_\n_name: inside_\n_returns: bool_\n_returns_description: _\n_parameters: const glm::vec3 &p0, const glm::vec3 &p1_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDetermines if both of the passed glm::vec3s are within the ofRectangle or not.\n\nNote that points on the edge of the ofRectangle are not considered\nwithin the rectangle and will return false.\n\n\n**Warning**: The z-components of the passed glm::vec3s are ignored.\n\n\n**Parameters:**\n\np0 The first point to test.\n\np1 The second point to test.\n\n**Returns**: true if both points are inside the rectangle.\n\n\n\n\n\n_description: _\n\nThis can be used to test if a line segment is inside the rectangle.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool inside(&p0, &p1)\n\n<!--\n_syntax: inside(&p0, &p1)_\n_name: inside_\n_returns: bool_\n_returns_description: _\n_parameters: const glm::vec2 &p0, const glm::vec2 &p1_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis can be used to test if a line segment is inside the rectangle.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool inside(&rect)\n\n<!--\n_syntax: inside(&rect)_\n_name: inside_\n_returns: bool_\n_returns_description: _\n_parameters: const ofRectangle &rect_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDetermines if another ofRectangle is completely within the ofRectangle.\n\nNote that rectangles that share an edge with the ofRectangle are not\nconsidered within the rectangle and will return false.\n\n\n**Parameters:**\n\nrect The ofRectangle to test.\n\n**Returns**: true if all four corners of the rect are within this rectangle.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool inside(px, py)\n\n<!--\n_syntax: inside(px, py)_\n_name: inside_\n_returns: bool_\n_returns_description: _\n_parameters: float px, float py_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDetermines if the coordinates (x, y) are within the ofRectangle.\n\nNote that coordinates on the edge of the ofRectangle are not\nconsidered within the rectangle and will return false.\n\n\n**Parameters:**\n\npx The x-coordinate to test.\n\npy The y-coordinate to test.\n\n**Returns**: true if px and py are inside this ofRectangle.\n\n\n\n\n\n_description: _\n\nCoordinates (x, y) are considered inside the rectangle if:\n\n`x > rectMinX && x < rectMinX && y > rectMinY && y < rectMaxY`\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool intersects(&p0, &p1)\n\n<!--\n_syntax: intersects(&p0, &p1)_\n_name: intersects_\n_returns: bool_\n_returns_description: _\n_parameters: const glm::vec3 &p0, const glm::vec3 &p1_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDetermines if a line segment intersects with the ofRectangle.\n\n\n**Warning**: The z-components of the passed glm::vec3s are ignored.\n\n\n**Parameters:**\n\np0 The first point to test.\n\np1 The second point to test.\n\n**Returns**: `true` if the line segment defined by the two passed glm::vec3s\n    either crosses the perimeter of the ofRectangle or is completely\n    contained within.\n\n\n\n\n\n_description: _\n\nThis method can be used to check if any part of the line segment intersects with the rectangle.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool intersects(&p0, &p1)\n\n<!--\n_syntax: intersects(&p0, &p1)_\n_name: intersects_\n_returns: bool_\n_returns_description: _\n_parameters: const glm::vec2 &p0, const glm::vec2 &p1_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis method can be used to check if any part of the line segment intersects with the rectangle.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool intersects(&rect)\n\n<!--\n_syntax: intersects(&rect)_\n_name: intersects_\n_returns: bool_\n_returns_description: _\n_parameters: const ofRectangle &rect_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDetermines if another rectangle intersects with this rectangle.\n\nRectangles that only share an edge and do not intersect otherwise are\nnot considered to intersect and will return false.\n\n\n**Parameters:**\n\nrect The rectangle to test.\n\n**Returns**: `true` if the area contained within the ofRectangle overlaps\n    with the area contained within the passed ofRectangle.\n\n\n\n\n\n_description: _\n\nReturns true if the area contained within the ofRectangle overlaps with the area contained within the passed ofRectangle,\nreturns false otherwise.\n\nRectangles that only share an edge and do not intersect otherwise are not considered to intersect and will return false.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isEmpty()\n\n<!--\n_syntax: isEmpty()_\n_name: isEmpty_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDetermines if the ofRectangle's area is zero.\n\n**See also**: getArea().\n\n**Returns**: true if both the width == 0 and height == 0, false if either is non-zero.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isStandardized()\n\n<!--\n_syntax: isStandardized()_\n_name: isStandardized_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns true if this ofRectangle is standardized.\n\n\"Standardized\" rectangles are rectangles whose width and height are positive.\nFor more information about standardized rectangles, see the discussion of the standardize() method.\n\n\n**Returns**: true if both width >= 0 and height >= 0.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isZero()\n\n<!--\n_syntax: isZero()_\n_name: isZero_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec2 map(&coeff)\n\n<!--\n_syntax: map(&coeff)_\n_name: map_\n_returns: glm::vec2_\n_returns_description: _\n_parameters: const glm::vec2 &coeff_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMaps a normalized coordinate into this rectangle\n\nNormalized coordinates range from [0,1] inclusive. It is used to define a ratio\nbetween the coordinates and a unitary rectangle. This ratio is mapped into\nthis rectangle to scale to real values. If normalized coordinates are out of bounds,\noutput will be scaled accordingly.\n\n\n**Parameters:**\n\ncoeff Normalized coordinate to map to this rectangle\n\n**Returns**: The mapped coordinate\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofRectangle map(&coeff)\n\n<!--\n_syntax: map(&coeff)_\n_name: map_\n_returns: ofRectangle_\n_returns_description: _\n_parameters: const ofRectangle &coeff_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMaps a normalized coordinate into this rectangle\n\nNormalized rectangles' position, width and height range from [0,1] inclusive.\nIt is used to define a ratio between the rectangle and a unitary rectangle.\nThis ratio is mapped into this rectangle to scale to real values.\nIf normalized rectangle is out of bounds, output will be scaled accordingly.\n\n\n**Parameters:**\n\ncoeff Normalized rectangle to map to this rectangle\n\n**Returns**: The mapped coordinate\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec2 mapClamp(&coeff)\n\n<!--\n_syntax: mapClamp(&coeff)_\n_name: mapClamp_\n_returns: glm::vec2_\n_returns_description: _\n_parameters: const glm::vec2 &coeff_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMaps a normalized coordinate into this rectangle, clamping if out of bounds\n\nNormalized coordinates range from [0,1] inclusive. It is used to define a ratio\nbetween the coordinates and a unitary rectangle. This ratio is mapped into\nthis rectangle to scale to real values. If normalized coordinates are out of bounds,\noutput will be clamped to this rectangle's position, width and height.\n\n\n**Parameters:**\n\ncoeff Normalized coordinate to map to this rectangle\n\n**Returns**: The mapped coordinate, clamped\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofRectangle mapClamp(&coeff)\n\n<!--\n_syntax: mapClamp(&coeff)_\n_name: mapClamp_\n_returns: ofRectangle_\n_returns_description: _\n_parameters: const ofRectangle &coeff_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMaps a normalized rectangle to this rectangle, clamping if out of bounds\n\nNormalized rectangles' position, width and height range from [0,1] inclusive.\nIt is used to define a ratio between the rectangle and a unitary rectangle.\nThis ratio is mapped into this rectangle to scale to real values.\nIf normalized rectangle is out of bounds, output will be clamped to this\nrectangle's position, width and height.\n\n\n**Parameters:**\n\ncoeff Normalized rectangle to map to this rectangle\n\n**Returns**: The mapped rectangle\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofRectangle(&p, w, h)\n\n<!--\n_syntax: ofRectangle(&p, w, h)_\n_name: ofRectangle_\n_returns: _\n_returns_description: _\n_parameters: const glm::vec3 &p, float w, float h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConstruct a rectangle from a point and dimensions.\n\nTo produce consistent results, users are encouraged to initialize\nrectangles in the standardized form with width >=0 and height >= 0.\n\n\n**Warning**: The z-component of the passed glm::vec3 is ignored.\n\n\n**Parameters:**\n\np The glm::vec3 representing the position of the rectangle.\n\nw The width of the rectangle.\n\nh The height of the rectangle.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofRectangle(&p, w, h)\n\n<!--\n_syntax: ofRectangle(&p, w, h)_\n_name: ofRectangle_\n_returns: _\n_returns_description: _\n_parameters: const glm::vec2 &p, float w, float h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofRectangle(&p0, &p1)\n\n<!--\n_syntax: ofRectangle(&p0, &p1)_\n_name: ofRectangle_\n_returns: _\n_returns_description: _\n_parameters: const glm::vec3 &p0, const glm::vec3 &p1_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConstruct a rectangle by defining two corners.\n\n\n**Warning**: The z-components of the passed glm::vec3s are ignored.\n\n\n**Parameters:**\n\np0 An glm::vec3 representing the upper left hand corner.\n\np1 An glm::vec3 representing the lower right hand corner.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofRectangle(&p0, &p1)\n\n<!--\n_syntax: ofRectangle(&p0, &p1)_\n_name: ofRectangle_\n_returns: _\n_returns_description: _\n_parameters: const glm::vec2 &p0, const glm::vec2 &p1_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofRectangle(&rect)\n\n<!--\n_syntax: ofRectangle(&rect)_\n_name: ofRectangle_\n_returns: _\n_returns_description: _\n_parameters: const ofRectangle &rect_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConstruct a rectangle by copying another rectangle.\n\n**Parameters:**\n\nrect The rectangle to copy.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofRectangle()\n\n<!--\n_syntax: ofRectangle()_\n_name: ofRectangle_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConstruct a rectangle with zero width and zero height at 0, 0.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofRectangle(px, py, w, h)\n\n<!--\n_syntax: ofRectangle(px, py, w, h)_\n_name: ofRectangle_\n_returns: _\n_returns_description: _\n_parameters: float px, float py, float w, float h_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConstruct a rectangle using position and size.\n\nTo produce consistent results, users are encouraged to initialize\nrectangles in the standardized form with width >=0 and height >= 0.\n\n\n**Parameters:**\n\npx The x-position of the rectangle.\n\npy The y-position of the rectangle.\n\nw The width of the rectangle.\n\nh The height of the rectangle.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool operator!=(&rect)\n\n<!--\n_syntax: operator!=(&rect)_\n_name: operator!=_\n_returns: bool_\n_returns_description: _\n_parameters: const ofRectangle &rect_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nIf the two ofRectangles differ in x, y, width, or height, they\nare considered unequal.\n\n**Parameters:**\n\nrect The rectangle to compare.\n\n**Returns**: True if the rectangles are not equal.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofRectangle operator+(&p)\n\n<!--\n_syntax: operator+(&p)_\n_name: operator+_\n_returns: ofRectangle_\n_returns_description: _\n_parameters: const glm::vec3 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a new ofRectangle where the x and y positions of the\nrectangle are offset by the (x, y) coordinates of the glm::vec3.\n\n**Parameters:**\n\np The point to translate.\n\n**Returns**: The translated ofRectangle.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofRectangle operator+(&p)\n\n<!--\n_syntax: operator+(&p)_\n_name: operator+_\n_returns: ofRectangle_\n_returns_description: _\n_parameters: const glm::vec2 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofRectangle operator-(&p)\n\n<!--\n_syntax: operator-(&p)_\n_name: operator-_\n_returns: ofRectangle_\n_returns_description: _\n_parameters: const glm::vec3 &p_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a new ofRectangle where the x and y-positions of the\nrectangle are offset by the (x, y) coordinates of the glm::vec3.\n\n**Parameters:**\n\np The point to translate.\n\n**Returns**: The translated ofRectangle.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofRectangle operator-(&p)\n\n<!--\n_syntax: operator-(&p)_\n_name: operator-_\n_returns: ofRectangle_\n_returns_description: _\n_parameters: const glm::vec2 &p_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofRectangle & operator=(&rect)\n\n<!--\n_syntax: operator=(&rect)_\n_name: operator=_\n_returns: ofRectangle &_\n_returns_description: _\n_parameters: const ofRectangle &rect_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\nAssignment operator.\n\n**Parameters:**\n\nrect The rectangle to assign.\n\n**Returns**: A reference to this rectangle.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool operator==(&rect)\n\n<!--\n_syntax: operator==(&rect)_\n_name: operator==_\n_returns: bool_\n_returns_description: _\n_parameters: const ofRectangle &rect_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nIf both ofRectangles have the same x, y, width, and height,\nthey are considered equal.\n\n**Parameters:**\n\nrect The rectangle to compare.\n\n**Returns**: True if the rectangles are equal.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void scale(&s)\n\n<!--\n_syntax: scale(&s)_\n_name: scale_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &s_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nScale the rectangle.\n\nScaling will scale the width and the height, but will not change the\nposition.\n\n\n**Warning**: The z-component of the passed glm::vec3 is ignored.\n\n\n**Parameters:**\n\ns The scaling factor.\n\n\n\n\n\n_description: _\n\nScales the width and height of the ofRectangle by multiplying the current width and\nheight with the (x,y) coordinates of the passed-in ofPoint.\n\nThis is equivalent to calling:\n\n~~~~{.cpp}\n\nofRectangle myRect(0, 0, 100, 100);\n\nofPoint myScaler(2, 2);\n\nmyRect.scaleWidth(myScaler.x);\nmyRect.scaleHeight(myScaler.y);\n\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void scale(&s)\n\n<!--\n_syntax: scale(&s)_\n_name: scale_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &s_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nScales the width and height of the ofRectangle by multiplying the current width and\nheight with the (x,y) coordinates of the passed-in ofPoint.\n\nThis is equivalent to calling:\n\n~~~~{.cpp}\n\nofRectangle myRect(0, 0, 100, 100);\n\nofPoint myScaler(2, 2);\n\nmyRect.scaleWidth(myScaler.x);\nmyRect.scaleHeight(myScaler.y);\n\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void scale(s)\n\n<!--\n_syntax: scale(s)_\n_name: scale_\n_returns: void_\n_returns_description: _\n_parameters: float s_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nScale the rectangle.\n\nScaling will scale the width and the height, but will not change the\nposition.\n\n\n**Parameters:**\n\ns The scaling factor.\n\n\n\n\n\n_description: _\n\nUniformly scales the ofRectangle by multiplying both the current width and current height with the passed-in float.\n\nThis is equivalent to calling:\n\n~~~~{.cpp}\n\nofRectangle myRect(0, 0, 100, 100);\n\nfloat s = 2;\n\nmyRect.scaleWidth(s);\nmyRect.scaleHeight(s);\n\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void scale(sX, sY)\n\n<!--\n_syntax: scale(sX, sY)_\n_name: scale_\n_returns: void_\n_returns_description: _\n_parameters: float sX, float sY_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nScale the rectangle.\n\nScaling will scale the width and the height, but will not change the\nposition.\n\n\n**Parameters:**\n\nsX The width-scaling factor.\n\nsY The height-scaling factor.\n\n\n\n\n\n_description: _\n\nScales the width and height of the ofRectangle by multiplying the current width and height with the passed-in floats.\n\nThis is equivalent to calling:\n\n~~~~{.cpp}\n\nofRectangle myRect(0, 0, 100, 100);\n\nfloat sX = 2;\nfloat sY = 2;\n\nmyRect.scaleWidth(sX);\nmyRect.scaleHeight(sY);\n\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void scaleFromCenter(&s)\n\n<!--\n_syntax: scaleFromCenter(&s)_\n_name: scaleFromCenter_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &s_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nScales both the width and height the ofRectangle from its center.\n\nThe center point of the rectangle will remain fixed and the width,\nheight, x, and y will be adjusted.\n\n\n**Warning**: The z-component of the passed glm::vec3 is ignored.\n\n\n**Parameters:**\n\ns The scaling factor.\n\n\n\n\n\n_description: _\n\nScales both the width and height the ofRectangle from its center point.\nThe center point of the rectangle will remain fixed and the width, height, x, and y will be adjusted.\n\nThis is equivalent to calling:\n\n~~~~{.cpp}\n\nofRectangle myRect(0, 0, 100, 100);\n\nofPoint myScaler(2, 2);\n\nmyRect.scaleFromCenter(myScaler.x, myScaler.y);\n\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void scaleFromCenter(&s)\n\n<!--\n_syntax: scaleFromCenter(&s)_\n_name: scaleFromCenter_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &s_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nScales both the width and height the ofRectangle from its center point.\nThe center point of the rectangle will remain fixed and the width, height, x, and y will be adjusted.\n\nThis is equivalent to calling:\n\n~~~~{.cpp}\n\nofRectangle myRect(0, 0, 100, 100);\n\nofPoint myScaler(2, 2);\n\nmyRect.scaleFromCenter(myScaler.x, myScaler.y);\n\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void scaleFromCenter(s)\n\n<!--\n_syntax: scaleFromCenter(s)_\n_name: scaleFromCenter_\n_returns: void_\n_returns_description: _\n_parameters: float s_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nScales both the width and height the ofRectangle from its center.\n\nThe center point of the rectangle will remain fixed and the width,\nheight, x, and y will be adjusted.\n\n\n**Parameters:**\n\ns The scaling factor.\n\n\n\n\n\n_description: _\n\nUniformly scales the ofRectangle from its center point.\nThe center point of the rectangle will remain fixed and the width, height, x, and y will be adjusted.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void scaleFromCenter(sX, sY)\n\n<!--\n_syntax: scaleFromCenter(sX, sY)_\n_name: scaleFromCenter_\n_returns: void_\n_returns_description: _\n_parameters: float sX, float sY_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nScales both the width and height the ofRectangle from its center.\n\nThe center point of the rectangle will remain fixed and the width,\nheight, x, and y will be adjusted.\n\n\n**Parameters:**\n\nsX the width-scaling factor.\n\nsY the height-scaling factor.\n\n\n\n\n\n_description: _\n\nScales both the width and height the ofRectangle from its center point.\nThe center point of the rectangle will remain fixed and the width, height, x, and y will be adjusted.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void scaleHeight(sY)\n\n<!--\n_syntax: scaleHeight(sY)_\n_name: scaleHeight_\n_returns: void_\n_returns_description: _\n_parameters: float sY_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nScale the height of the rectangle.\n\nThis will scale the height but will not change the position and width.\n\n\n**Parameters:**\n\nsY The height-scaling factor.\n\n\n\n\n\n_description: _\n\nScales the height of the ofRectangle by multiplying the current height with the passed-in float.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void scaleTo(&targetRect, scaleMode = OF_SCALEMODE_FIT)\n\n<!--\n_syntax: scaleTo(&targetRect, scaleMode = OF_SCALEMODE_FIT)_\n_name: scaleTo_\n_returns: void_\n_returns_description: _\n_parameters: const ofRectangle &targetRect, ofScaleMode scaleMode=OF_SCALEMODE_FIT_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nScale the rectanle using a target ofRectangle and ofScaleMode.\n\nAdjusts the ofRectangle to match the provided ofRectangle using the\nprovided ofScaleMode.\n\n\n**Parameters:**\n\ntargetRect The Target Rectangle to scale to.\n\nscaleMode The scale mode to use when scaling.\n\n\n\n\n\n_description: _\n\nAdjusts the ofRectangle to match the passed-in ofRectangle using the passed-in ofScaleMode.\n\nAssuming the ofRectangle as the Subject and the passed-in ofRectangle as the Target:\n\n__OF_SCALEMODE_FIT__:\nThis centers the Subject rectangle within the Target rectangle, and resizes the Subject rectangle to completely fit within the Target Rectangle.\n\n  * It fits the Subject rectangle inside the target rectangle.\n  * It preserves Subject's aspect ratio.\n  * The Subject's final area <= the Target's area.\n  * The Subject's center == the Target's center.\n\n__OF_SCALEMODE_FILL__:\nThis centers the Subject rectangle within the Target rectangle, and resizes the Subject rectangle to completely encompass the Target Rectangle.\n\n  * It fills the Target rectangle with the Subject rectangle.\n  * It preserves the Subject's aspect ratio.\n  * The Subject's Area >= the Target's area.\n  * The Subject's center == the Target's center.\n\n__OF_SCALEMODE_CENTER__:\nThis centers the Subject rectangle within the Target rectangle, and does not modify the Subject's scale.\n\n  * It preserves the Subject's aspect ratio.\n  * The Subject's area is unchanged.\n  * The Subject's center == Target's center.\n\n__OF_SCALEMODE_STRETCH_TO_FILL__:\nThis simply modifies the Subject rectangle to match the Target rectangle's dimensions.\n\n  * It can change the Subject's aspect ratio.\n  * The Subject's area == the Target's area.\n  * The Subject's center == the Target's center.\n\nFor a working example of the various ofScaleModes, see the *graphics/rectangleAlignmentAndScaling/* example within the examples directory.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void scaleTo(&targetRect, subjectAspectRatioMode, modelHorzAnchor, modelVertAnchor, subjectHorzAnchor, subjectVertAnchor)\n\n<!--\n_syntax: scaleTo(&targetRect, subjectAspectRatioMode, modelHorzAnchor, modelVertAnchor, subjectHorzAnchor, subjectVertAnchor)_\n_name: scaleTo_\n_returns: void_\n_returns_description: _\n_parameters: const ofRectangle &targetRect, ofAspectRatioMode subjectAspectRatioMode, ofAlignHorz modelHorzAnchor, ofAlignVert modelVertAnchor, ofAlignHorz subjectHorzAnchor, ofAlignVert subjectVertAnchor_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nScale the rectangle using a target ofRectangle and parameters.\n\nAdjusts the ofRectangle to match the passed-in ofRectangle. It will\nuse the ofAspectRatioMode to scale the ofRectangle, and will use the\nuse the alignment anchor parameters to position the rectangle.\n\n\n**Parameters:**\n\ntargetRect The Target Rectangle to scale to.\n\nsubjectAspectRatioMode Aspect ratio scaling mode.\n\nmodelHorzAnchor The target horizontal alignment method.\n\nmodelVertAnchor The target vertical alignment method.\n\nsubjectHorzAnchor The subject horizontal alignment method.\n\nsubjectVertAnchor The subject vertical alignment method.\n\n\n\n\n\n_description: _\n\nAdjusts the ofRectangle to match the passed-in ofRectangle.  It will use the ofAspectRatioMode to scale the ofRectangle, and will use the use the alignment anchor parameters to position the rectangle.\n\nAssuming the ofRectangle as the Subject and the passed-in ofRectangle as the Target:\n\n__ofAspectRatioMode Options:__\n\n__OF_ASPECT_RATIO_IGNORE__            : Sets the Subject rectangle's width and height to match those of the Target.\n__OF_ASPECT_RATIO_KEEP__              : Resizes the Subject rectangle to completely fit within the Target rectangle.\n__OF_ASPECT_RATIO_KEEP_BY_EXPANDING__ : Resizes the Subject rectangle to completely enclose the Target rectangle.\n\n__ofAlignHorz Options:__\n\n__OF_ALIGN_HORZ_IGNORE__              : Does not perform any horizontal alignment.\n__OF_ALIGN_HORZ_LEFT__                : Uses the left edge of the rectangle to horizontally anchor the alignment.\n__OF_ALIGN_HORZ_RIGHT__               : Uses the right edge of the rectangle to horizontally anchor the alignment.\n__OF_ALIGN_HORZ_CENTER__              : Uses the center of the rectangle to horizontally anchor the alignment.\n\n__ofAlignVert Options:__\n\n__OF_ALIGN_VERT_IGNORE__              : Does not perform any vertical alignment.\n__OF_ALIGN_VERT_TOP__                 : Uses the upper edge of the rectangle to vertically anchor the alignment.\n__OF_ALIGN_VERT_BOTTOM__              : Uses the bottom edge of the rectangle to vertically anchor the alignment.\n__OF_ALIGN_VERT_CENTER__              : Uses the center of the rectangle to vertically anchor the alignment.\n\nFor a working example of how to use ofAspectRatioMode, ofAlignVert, and ofAlignHorz, see the *graphics/rectangleAlignmentAndScaling/* example within the examples directory.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void scaleTo(&targetRect, subjectAspectRatioMode, sharedHorzAnchor = OF_ALIGN_HORZ_CENTER, sharedVertAnchor = OF_ALIGN_VERT_CENTER)\n\n<!--\n_syntax: scaleTo(&targetRect, subjectAspectRatioMode, sharedHorzAnchor = OF_ALIGN_HORZ_CENTER, sharedVertAnchor = OF_ALIGN_VERT_CENTER)_\n_name: scaleTo_\n_returns: void_\n_returns_description: _\n_parameters: const ofRectangle &targetRect, ofAspectRatioMode subjectAspectRatioMode, ofAlignHorz sharedHorzAnchor=OF_ALIGN_HORZ_CENTER, ofAlignVert sharedVertAnchor=OF_ALIGN_VERT_CENTER_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nScale the rectangle using a target ofRectangle and parameters.\n\nScales the ofRectangle to match the target ofRectangle. It will use the\nofAspectRatioMode to scale the ofRectangle and will use the\nalignment anchor parameters to position the rectangle.\n\n\n**Parameters:**\n\ntargetRect The Target Rectangle to scale to.\n\nsubjectAspectRatioMode Aspect ratio scaling mode.\n\nsharedHorzAnchor The horizontal alignment method.\n\nsharedVertAnchor The vertical alignment method.\n\n\n\n\n\n_description: _\n\nAdjusts the ofRectangle to match the passed-in ofRectangle. It will use the ofAspectRatioMode to scale the ofRectangle, and will use the alignment anchor parameters to position the rectangle.\n\nThis is a convenient method when both the target and subject rectangles are using the same alignment anchors. For a more complete explanation, see \n\n~~~~{.cpp}\n\nvoid scaleTo(const ofRectangle& targetRect, \n\t\t\t ofAspectRatioMode subjectAspectRatioMode, \n\t\t\t ofAlignHorz modelHorzAnchor, \n\t\t\t ofAlignVert modelVertAnchor, \n\t\t\t ofAlignHorz subjectHorzAnchor, \n\t\t\t ofAlignVert subjectVertAnchor);\n\n~~~~\n\nFor a working example of how to use ofAspectRatioMode, ofAlignVert, and ofAlignHorz, see the *graphics/rectangleAlignmentAndScaling/* example within the examples directory.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void scaleWidth(sX)\n\n<!--\n_syntax: scaleWidth(sX)_\n_name: scaleWidth_\n_returns: void_\n_returns_description: _\n_parameters: float sX_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nScale the width of the rectangle.\n\nThis will scale the width but will not change the position or height.\n\n\n**Parameters:**\n\nsX The width-scaling factor.\n\n\n\n\n\n_description: _\n\nScales the width of the ofRectangle by multiplying the current width with the passed-in float.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(&p, w, h)\n\n<!--\n_syntax: set(&p, w, h)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p, float w, float h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the position and size of the rectangle.\n\nTo produce consistent results, users are encouraged to initialize\nrectangles in the standardized form with width >=0 and height >= 0.\n\n\n**Warning**: The z-component of the passed glm::vec3 is ignored.\n\n\n**Parameters:**\n\np The new position.\n\nw The new width.\n\nh The new height.\n\n\n\n\n\n_description: _\n\nSets the (x,y) coordinates, width, and height of the ofRectangle.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(&p, w, h)\n\n<!--\n_syntax: set(&p, w, h)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p, float w, float h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSets the (x,y) coordinates, width, and height of the ofRectangle.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(&p0, &p1)\n\n<!--\n_syntax: set(&p0, &p1)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p0, const glm::vec3 &p1_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the position and size of the rectangle using corners.\n\n\n**Warning**: The z-components of the passed glm::vec3s are ignored.\n\n\n**Parameters:**\n\np0 The glm::vec3 representing the upper left hand corner.\n\np1 The glm::vec3 representing the lower right hand corner.\n\n\n\n\n\n_description: _\n\nSets the x position, y position, width, and height of the ofRectangle to enclose the line segment defined by the passed ofPoints.\n\nThe rectangle will always be in standardized form, regardless of the order of the ofPoints passed in.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(&p0, &p1)\n\n<!--\n_syntax: set(&p0, &p1)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p0, const glm::vec2 &p1_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSets the x position, y position, width, and height of the ofRectangle to enclose the line segment defined by the passed ofPoints.\n\nThe rectangle will always be in standardized form, regardless of the order of the ofPoints passed in.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(&rect)\n\n<!--\n_syntax: set(&rect)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: const ofRectangle &rect_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the position and size by copying them from anohter rectangle.\n\n**Parameters:**\n\nrect The rectangle to copy.\n\n\n\n\n\n_description: _\n\nSets the x position, y position, width, and height of the ofRectangle to match those of the passed ofRectangle.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(px, py, w, h)\n\n<!--\n_syntax: set(px, py, w, h)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float px, float py, float w, float h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the position and size of the rectangle.\n\nTo produce consistent results, users are encouraged to initialize\nrectangles in the standardized form with width >=0 and height >= 0.\n\n\n**Parameters:**\n\npx The new x-position.\n\npy The new y-position.\n\nw The new width.\n\nh The new height.\n\n\n\n\n\n_description: _\n\nSets the x position, y position, width, and height of the ofRectangle.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFromCenter(&p, w, h)\n\n<!--\n_syntax: setFromCenter(&p, w, h)_\n_name: setFromCenter_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p, float w, float h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet position and size of the rectangle from the center.\n\nThe center of the rectangle is defined and the width and height grow\nout around the center.\n\n\n**Parameters:**\n\np The position of the rectangle's center as an glm::vec3.\n\nw The width of the rectangle.\n\nh The height of the rectangle.\n\n\n\n\n\n_description: _\n\nSets the position, width, and height of the ofRectangle.\nThe (x,y) coordinates passed into the function determine the center point of the ofRectangle.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFromCenter(&p, w, h)\n\n<!--\n_syntax: setFromCenter(&p, w, h)_\n_name: setFromCenter_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p, float w, float h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSets the position, width, and height of the ofRectangle.\nThe (x,y) coordinates passed into the function determine the center point of the ofRectangle.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFromCenter(px, py, w, h)\n\n<!--\n_syntax: setFromCenter(px, py, w, h)_\n_name: setFromCenter_\n_returns: void_\n_returns_description: _\n_parameters: float px, float py, float w, float h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet position and size of the rectangle from the center.\n\nThe center of the rectangle is defined and the width and height grow\nout around the center.\n\n\n**Parameters:**\n\npx The x-position of the rectangle's center.\n\npy The y-position of the rectangle's center.\n\nw The width of the rectangle.\n\nh The height of the rectangle.\n\n\n\n\n\n_description: _\n\nSets the position, width, and height of the ofRectangle.\nThe x and y position passed into the function determine the center point of the ofRectangle.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setHeight(h)\n\n<!--\n_syntax: setHeight(h)_\n_name: setHeight_\n_returns: void_\n_returns_description: _\n_parameters: float h_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the height of the rectangle.\n\n**Parameters:**\n\nh The new height.\n\n\n\n\n\n_description: _\n\nSets the height of the ofRectangle.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setPosition(&p)\n\n<!--\n_syntax: setPosition(&p)_\n_name: setPosition_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the position of the rectangle.\n\n\n**Warning**: The z-component of the passed glm::vec3 is ignored.\n\n\n**Parameters:**\n\np The position as an glm::vec3.\n\n\n\n\n\n_description: _\n\nSets the (x,y) position of the ofRectangle by passing in x and y as an ofPoint.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setPosition(px, py)\n\n<!--\n_syntax: setPosition(px, py)_\n_name: setPosition_\n_returns: void_\n_returns_description: _\n_parameters: float px, float py_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the position of the rectangle.\n\n**Parameters:**\n\npx The new x-position.\n\npy The new y-position.\n\n\n\n\n\n_description: _\n\nSets the (x,y) position of the ofRectangle by passing in x and y as floats.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setSize(w, h)\n\n<!--\n_syntax: setSize(w, h)_\n_name: setSize_\n_returns: void_\n_returns_description: _\n_parameters: float w, float h_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the size of the rectangle.\n\n**Parameters:**\n\nw The new width.\n\nh The new height.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setWidth(w)\n\n<!--\n_syntax: setWidth(w)_\n_name: setWidth_\n_returns: void_\n_returns_description: _\n_parameters: float w_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the width of the rectangle.\n\n**Parameters:**\n\nw The new width.\n\n\n\n\n\n_description: _\n\nSets the width of the ofRectangle.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setX(px)\n\n<!--\n_syntax: setX(px)_\n_name: setX_\n_returns: void_\n_returns_description: _\n_parameters: float px_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the x-position of the rectangle.\n\n**Parameters:**\n\npx The new x-position.\n\n\n\n\n\n_description: _\n\nSets the x position of the ofRectangle.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setY(py)\n\n<!--\n_syntax: setY(py)_\n_name: setY_\n_returns: void_\n_returns_description: _\n_parameters: float py_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the y-position of the rectangle.\n\n**Parameters:**\n\npy The new y-position.\n\n\n\n\n\n_description: _\n\nSets the y position of the ofRectangle.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void standardize()\n\n<!--\n_syntax: standardize()_\n_name: standardize_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nStandardize the rectangle\n\n\"Standardized\" rectangles are rectangles whose width and height are positive: width >= 0 and height\n>= 0. This method can be used to ensure that the rectangle is\n\"standardized\". If the rectangle is non-standard, it will modify the x /\nwidth and y / height values into their respective standardized versions.\n\n\n\n\n\n_description: _\n\nofRectangle is a simple container for describing the position\nand size of 2D rectangles. Like many rectangle data structures\nfound in other frameworks and graphics libraries, member\nwidth and height variables can take negative values.\nAdditionally, x / y position and width / height are publicly\naccessible, resulting in great programming freedom.\nConsequently, two visually identical rectangles can be\nrepresented in the following ways:\n\n~~~~{.cpp}\n\tofRectangle myRect(0,0,100,100);\n\t\n\t// OR\n\t\n\tofRectangle myRect(100,100,-100,-100);\n~~~~\n\nWhile both representations will yield the same visual\nresults in all openFrameworks renderers, the results of\nsome method operations that modify x / y / width / height\n(such as scaling) produce mathematically correct, but\nvisually different results for each of the above\nrepresentations.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void translate(&dp)\n\n<!--\n_syntax: translate(&dp)_\n_name: translate_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &dp_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTranslate the rectangle's position by an x and y amount.\n\n\n**Warning**: The z-component of the passed glm::vec3 is ignored.\n\n\n**Parameters:**\n\ndp The amount to translate as an glm::vec3.\n\n\n\n\n\n_description: _\n\nOffsets the position of the ofRectangle in the both the x and y dimensions by passing in an ofPoint.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void translate(&dp)\n\n<!--\n_syntax: translate(&dp)_\n_name: translate_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &dp_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nOffsets the position of the ofRectangle in the both the x and y dimensions by passing in an ofPoint.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void translate(dx, dy)\n\n<!--\n_syntax: translate(dx, dy)_\n_name: translate_\n_returns: void_\n_returns_description: _\n_parameters: float dx, float dy_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTranslate the rectangle's position by an x and y amount.\n\n**Parameters:**\n\ndx The amount to translate in the x direction.\n\ndy The amount to translate in the y direction.\n\n\n\n\n\n_description: _\n\nOffsets the position of the ofRectangle in the both the x and y dimensions by passing in two floats.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void translateX(dx)\n\n<!--\n_syntax: translateX(dx)_\n_name: translateX_\n_returns: void_\n_returns_description: _\n_parameters: float dx_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTranslate the x-position of the rectangle.\n\n**Parameters:**\n\ndx The amount to translate on the x-axis.\n\n\n\n\n\n_description: _\n\nOffsets the position of the ofRectangle in the x dimension by a given amount.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void translateY(dy)\n\n<!--\n_syntax: translateY(dy)_\n_name: translateY_\n_returns: void_\n_returns_description: _\n_parameters: float dy_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTranslate the y-position of the rectangle.\n\n**Parameters:**\n\ndy The amount to translate on the y-axis.\n\n\n\n\n\n_description: _\n\nOffsets the position of the ofRectangle in the y dimension by a given amount.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofRectangle()\n\n<!--\n_syntax: ~ofRectangle()_\n_name: ~ofRectangle_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDestroy the rectangle.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###float height\n\n<!--\n_name: height_\n_type: float_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThe height of the ofRectangle.\n\n\n\n\n\n_description: _\n\nThe height variable contains the height of the ofRectangle.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPoint position\n\n<!--\n_name: position_\n_type: ofPoint_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThe (x,y) position of the ofRectangle as an glm::vec3.\n\n\n**Warning**: The z-component of this position is preserved and can be used\nbut all ofRectangle operations will ignore the z-component.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float width\n\n<!--\n_name: width_\n_type: float_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThe width of the ofRectangle.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float x\n\n<!--\n_name: x_\n_type: float_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThe x position of the ofRectangle.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float y\n\n<!--\n_name: y_\n_type: float_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThe y position of the ofRectangle.\n\n\n\n\n\n_description: _\n\nThe y variable contains the y position of the ofRectangle.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}