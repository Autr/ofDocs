{"entry":{"name":"ofVbo","filename":"ofVbo.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/gl/ofVbo.markdown","path":"/documentation/gl/ofVbo","route":"/documentation/gl/ofVbo.markdown","dir":"../ofSite/documentation/gl","ext":"markdown","type":"page","id":258,"parent":225,"breadcrumbs":[225,1],"siblings":[],"translations":{}},"description":{"short":"","full":"<p>First things first: a Vertex Buffer Object (VBO) provides a way for you to create vertices, normals, colors, and texture coordinates on the graphics card for non-immediate mode rendering. This means that you can store it all on the graphics card and then access, update, or draw it, whenever you need. This is pretty convenient when you have something that you want to draw multiple times without changing it much, because it means that, instead of needing to upload new data each time, you can simply draw it without needing to recreate all your vertices and colors, a philosophy which is probably familiar to you from working with the ofFbo or ofTexture.</p>\n<p>There are a few things that are important to understand about VBOs:</p>\n<p>Each property of the VBO - vertices, texCoords, normals, colors - can be either dynamic or static. You set it to static when you know that you won't be updating it later on. You set it to dynamic when you know you will be updating it later on.</p>\n<p>Just like with ofMesh, you need to keep track of the vertices and their indices in order to make shapes and you can draw a VBO in any one of the OpenGL drawing modes, GL_LINE_STRIP, GL_POINTS, GL_QUADS, GL_TRIANGLES and GL_TRIANGLE_STRIP.</p>\n<p>Vertices are passed to your graphics card and your graphics card fills in the spaces in between them in a process usually called the rendering pipeline. The rendering pipeline goes more or less like this:</p>\n<ol>\n<li>\n<p>Say how you're going to connect all the points.</p>\n</li>\n<li>\n<p>Make some points.</p>\n</li>\n<li>\n<p>Say that you're done making points.</p>\n</li>\n</ol>\n<p>You may be thinking: Ill just make eight vertices and voila: a cube. Not so quick. Theres a hitch and that hitch is that the OpenGL renderer has different ways of connecting the vertices that you pass to it and none are as efficient as to only need eight vertices to create a cube. You've probably seen a version of the following image somewhere before.</p>\n<p><img src=\"gl_vertices_options.jpg\" alt=\"gl vertices\"></p>\n<p>Generally, you have to create your points to fit the drawing mode that you've selected because of whats called winding. A vertex gets connected to another vertex in the order that the mode does its winding and this means that you might need multiple vertices in a given location to create the shape you want. The cube, for example, requires eighteen vertices, not the eight that you would expect. If you note the order of vertices in the GL chart above you'll see that all of them use their vertices slightly differently (in particular you should make note of the GL_TRIANGLE_STRIP example). Drawing a shape requires that you keep track of which drawing mode is being used and which order your vertices are declared in. If you're thinking it would be nice if there were an abstraction layer for this, you're thinking right. Enter the mesh, which is really just an abstraction of the vertex and drawing mode that we started with but which has the added bonus of managing the draw order for you. That may seem insignificant at first, but it provides some real benefits when working with complex geometry.</p>\n<p>The following example shows an ofVbo representing an icosahedron:</p>\n<pre><code><span class=\"token keyword\">const</span> ofIndexType Faces<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> Verts<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token number\">0.000f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.000f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.000f</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0.894f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.000f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.447f</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0.276f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.851f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.447f</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">-</span><span class=\"token number\">0.724f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.526f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.447f</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">-</span><span class=\"token number\">0.724f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.526f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.447f</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0.276f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.851f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.447f</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0.724f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.526f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.447f</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">-</span><span class=\"token number\">0.276f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.851f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.447f</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">-</span><span class=\"token number\">0.894f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.000f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.447f</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">-</span><span class=\"token number\">0.276f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.851f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.447f</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0.724f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.526f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.447f</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0.000f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.000f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.000f</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nofVec3f v<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nofVec3f n<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nofFloatColor c<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nofVbo vbo<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> HelloWorldApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n\n        c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>g <span class=\"token operator\">=</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Verts<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Verts<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Verts<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    vbo<span class=\"token punctuation\">.</span><span class=\"token function\">setVertexData</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> GL_STATIC_DRAW <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    vbo<span class=\"token punctuation\">.</span><span class=\"token function\">setColorData</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> GL_STATIC_DRAW <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    vbo<span class=\"token punctuation\">.</span><span class=\"token function\">setIndexData</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>Faces<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> GL_STATIC_DRAW <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">glEnable</span><span class=\"token punctuation\">(</span>GL_DEPTH_TEST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> HelloWorldApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofRotate</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetElapsedTimef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">glPointSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    vbo<span class=\"token punctuation\">.</span><span class=\"token function\">drawElements</span><span class=\"token punctuation\">(</span> GL_TRIANGLES<span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"vbo.png\" alt=\"vbo result\"></p>\n<p>You'll notice in a lot of the methods that a usage is required, for instance, setNormals(). The possible options are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY Each of these affects the speed of operations that you perform with the VBO and whether it's certain operations are allowed. For instance, if the vertices are STATIC, then they cannot be changed after they been loaded the first time, whereas if they're DYNAMIC, then they can be modified at any time later. The different modes can be broken down like so:</p>\n<p>STREAM\nThe data store contents will be modified once and used at most a few times.</p>\n<p>STATIC\nThe data store contents will be modified once and used many times.</p>\n<p>DYNAMIC\nThe data store contents will be modified repeatedly and used many times.</p>\n<p>The nature of access may be one of these:</p>\n<p>DRAW\nThe data store contents are modified by the application, and used as the source for GL drawing and image specification commands.</p>\n<p>READ\nThe data store contents are modified by reading data from the GL, and used to return that data when queried by the application.</p>\n<p>COPY\nThe data store contents are modified by reading data from the GL, and used as the source for GL drawing and image specification commands.</p>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"bind()","name":"bind","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This is for advanced users who might want to use ways of drawing other than draw() or drawElements(), it simply binds all the arrays for the VBO.</p>\n"},{"syntax":"clear()","name":"clear","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This erases your VBO data from your graphics card, but not the VBO itself, so you can fill it with data again.</p>\n"},{"syntax":"clearAttribute(attributePos_)","name":"clearAttribute","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> attributePos_","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"clearColors()","name":"clearColors","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"clearIndices()","name":"clearIndices","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"clearNormals()","name":"clearNormals","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"clearTexCoords()","name":"clearTexCoords","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"clearVertices()","name":"clearVertices","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"disableColors()","name":"disableColors","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"disableIndices()","name":"disableIndices","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"disableNormals()","name":"disableNormals","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"disableTexCoords()","name":"disableTexCoords","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"draw(drawMode, first, total)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> drawMode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> first<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total","access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This method allows you to draw your VBO but unlike drawElements() ignores any indices that you might have set up. This is an important distinction between the two methods.\nmode\nSpecifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.\nfirst\nSpecifies the starting index in the enabled arrays.\ntotal\nSpecifies the number of indices to be rendered. This last part is pretty important: if you have more indices than vertices you'll want to make sure that you pass the number of indices, not the number of vertices.</p>\n"},{"syntax":"drawElements(drawMode, amt, offsetelements = 0)","name":"drawElements","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> drawMode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> amt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offsetelements<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>drawElements allows you use indices, unlike draw() which ignores them.\ndrawMode\nSpecifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.</p>\n<pre><code>vbo<span class=\"token punctuation\">.</span><span class=\"token function\">drawElements</span><span class=\"token punctuation\">(</span> GL_TRIANGLES<span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>amt specifies the number of indices to be rendered. This last part is pretty important: if you have more indices than vertices you'll want to make sure that you pass the number of indices, not the number of vertices.</p>\n"},{"syntax":"drawElementsInstanced(drawMode, amt, primCount)","name":"drawElementsInstanced","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> drawMode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> amt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> primCount","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"drawInstanced(drawMode, first, total, primCount)","name":"drawInstanced","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> drawMode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> first<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> primCount","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"enableColors()","name":"enableColors","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"enableIndices()","name":"enableIndices","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"enableNormals()","name":"enableNormals","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"enableTexCoords()","name":"enableTexCoords","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getAttributeBuffer(location)","name":"getAttributeBuffer","returns":"ofBufferObject &","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> location","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getAttributeBuffer(location)","name":"getAttributeBuffer","returns":"const ofBufferObject &","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> location","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getAttributeId(AttrPos_)","name":"getAttributeId","returns":"GLuint","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> AttrPos_","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>returns OpenGL memory object id for GL buffer holding attribute data</p>\n","desc":""},{"syntax":"getColorBuffer()","name":"getColorBuffer","returns":"ofBufferObject &","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getColorBuffer()","name":"getColorBuffer","returns":"const ofBufferObject &","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getColorId()","name":"getColorId","returns":"GLuint","returns_description":null,"parameters":null,"access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getIndexBuffer()","name":"getIndexBuffer","returns":"ofBufferObject &","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getIndexBuffer()","name":"getIndexBuffer","returns":"const ofBufferObject &","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getIndexId()","name":"getIndexId","returns":"GLuint","returns_description":null,"parameters":null,"access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getIsAllocated()","name":"getIsAllocated","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns whether the ofVbo has been allocated or not. This is important to check before you start drawing or manipulating the vbo.</p>\n"},{"syntax":"getNormalBuffer()","name":"getNormalBuffer","returns":"ofBufferObject &","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getNormalBuffer()","name":"getNormalBuffer","returns":"const ofBufferObject &","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getNormalId()","name":"getNormalId","returns":"GLuint","returns_description":null,"parameters":null,"access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getNumIndices()","name":"getNumIndices","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getNumVertices()","name":"getNumVertices","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getOrCreateAttr(location)","name":"getOrCreateAttr","returns":"ofVbo::VertexAttribute &","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> location","access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getTexCoordBuffer()","name":"getTexCoordBuffer","returns":"ofBufferObject &","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getTexCoordBuffer()","name":"getTexCoordBuffer","returns":"const ofBufferObject &","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getTexCoordId()","name":"getTexCoordId","returns":"GLuint","returns_description":null,"parameters":null,"access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getUsingColors()","name":"getUsingColors","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns whether the vertices within the VBO have colors associated with them or not.</p>\n"},{"syntax":"getUsingIndices()","name":"getUsingIndices","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns whether the VBO has assigned indices or not.</p>\n"},{"syntax":"getUsingNormals()","name":"getUsingNormals","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns whether the surfaces of the VBO have normals associated with them or not.</p>\n"},{"syntax":"getUsingTexCoords()","name":"getUsingTexCoords","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns whether the vertices of the VBO have texture coordinates associated with them or not.</p>\n"},{"syntax":"getUsingVerts()","name":"getUsingVerts","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns whether the ofVbo is using vertices or not. A VBO can exist without vertices, though it's quite unusual.</p>\n"},{"syntax":"getVaoId()","name":"getVaoId","returns":"GLuint","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getVertId()","name":"getVertId","returns":"GLuint","returns_description":null,"parameters":null,"access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getVertexBuffer()","name":"getVertexBuffer","returns":"ofBufferObject &","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getVertexBuffer()","name":"getVertexBuffer","returns":"const ofBufferObject &","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"hasAttribute(attributePos_)","name":"hasAttribute","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> attributePos_","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofVbo(&mom)","name":"ofVbo","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVbo <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This is the copy constructor, so that you can do the following:</p>\n<pre><code>ofVbo v1<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// filll v1;</span>\nofVbo <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 now contains all of v1s properties in a separate VBO</span>\n</code></pre>\n"},{"syntax":"ofVbo()","name":"ofVbo","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Simple constructor for the ofVbo. When the ofVbo is first created there are no vertices or normals within it.</p>\n"},{"syntax":"operator=(&mom)","name":"operator=","returns":"ofVbo &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVbo <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This is the equals operator, so that you can do the following:</p>\n<pre><code>ofVbo v1<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// filll v1;</span>\nofVbo v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 now contains all of v1s properties in a separate VBO</span>\n</code></pre>\n"},{"syntax":"setAttributeBuffer(location, &buffer, numCoords, stride, offset = 0)","name":"setAttributeBuffer","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> location<span class=\"token punctuation\">,</span> ofBufferObject <span class=\"token operator\">&amp;</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numCoords<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stride<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setAttributeData(location, *vert0x, numCoords, total, usage, stride = 0)","name":"setAttributeData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> location<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>vert0x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numCoords<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> usage<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stride<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setAttributeDivisor(location, divisor)","name":"setAttributeDivisor","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> location<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> divisor","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"setColorBuffer(&buffer, stride, offset = 0)","name":"setColorBuffer","returns":"void","returns_description":null,"parameters":"ofBufferObject <span class=\"token operator\">&amp;</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stride<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setColorData(*color0r, total, usage, stride = 0)","name":"setColorData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>color0r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> usage<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stride<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This sets the color data for the ofVbo from a pointer to an array of floats. The colors are RGB and are floats from 0.f - 1.f</p>\n<p>The possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY</p>\n"},{"syntax":"setColorData(*colors, total, usage)","name":"setColorData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofFloatColor <span class=\"token operator\">*</span>colors<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> usage","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This allows you to set the colors for a vertex using an array of ofFloatColor instances.</p>\n<pre><code>ofFloatColor c<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// fill in the colors and vertices</span>\nvbo<span class=\"token punctuation\">.</span><span class=\"token function\">setColorData</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> GL_STATIC_DRAW <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>The possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY</p>\n"},{"syntax":"setIndexBuffer(&buffer)","name":"setIndexBuffer","returns":"void","returns_description":null,"parameters":"ofBufferObject <span class=\"token operator\">&amp;</span>buffer","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setIndexData(*indices, total, usage)","name":"setIndexData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofIndexType <span class=\"token operator\">*</span>indices<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> usage","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This sets the index data for the VBO from a pointer to an array of ints. Each int represents the index of a vertex, and when the vbo is drawn the indices are used to generate the geometry from the indices.</p>\n<p>The possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY</p>\n"},{"syntax":"setMesh(&mesh, usage)","name":"setMesh","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMesh <span class=\"token operator\">&amp;</span>mesh<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> usage","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This allows you to pass a mesh to the ofVbo and populate the vertices, texture coordinates, and other properties of the VBO from the ofMesh instance. You can think of this as essentially moving geometry data from the CPU to the GPU.</p>\n<pre><code>ofxAssimpModelLoader model<span class=\"token punctuation\">;</span>\nmodel<span class=\"token punctuation\">.</span><span class=\"token function\">loadModel</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>astroBoy_walk<span class=\"token punctuation\">.</span>dae<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofMesh mesh <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span><span class=\"token function\">getMesh</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVbo vbo<span class=\"token punctuation\">;</span>\nvbo<span class=\"token punctuation\">.</span><span class=\"token function\">setMesh</span><span class=\"token punctuation\">(</span>mesh<span class=\"token punctuation\">,</span> GL_STATIC_DRAW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>The possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY</p>\n"},{"syntax":"setMesh(&mesh, usage, useColors, useTextures, useNormals)","name":"setMesh","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMesh <span class=\"token operator\">&amp;</span>mesh<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> usage<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> useColors<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> useTextures<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> useNormals","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setNormalBuffer(&buffer, stride, offset = 0)","name":"setNormalBuffer","returns":"void","returns_description":null,"parameters":"ofBufferObject <span class=\"token operator\">&amp;</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stride<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setNormalData(*normal0x, total, usage, stride = 0)","name":"setNormalData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>normal0x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> usage<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stride<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This sets the normals data for the ofVbo from a pointer to an array of floats, x,y,z, for each face, so a 3D cube would require an array of 18 floats, 3 for each face.</p>\n<p>The possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY</p>\n"},{"syntax":"setNormalData(*normals, total, usage)","name":"setNormalData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">*</span>normals<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> usage","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setNormalData(*normals, total, usage)","name":"setNormalData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">*</span>normals<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> usage","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This sets the normal data for the VBO from a pointer to an array of ofVec3f instances. The normals are calculated as the vector perpendicular to a face. The mathematical definition of a normal is shown on the left, while the way that a normal is calculated for a triangle is shown on the right.</p>\n<p><img src=\"vboNormals.png\" alt=\"vbo normals\"></p>\n<p>One technique for calculating normals is something like the following:</p>\n<pre><code><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> indices<span class=\"token punctuation\">;</span>\nofVec3f<span class=\"token operator\">*</span> verts<span class=\"token punctuation\">;</span>\nofVec3f<span class=\"token operator\">*</span> normals<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// allocate and create normals, indices, and verts</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> NUM_INDICES<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ofVec3f v<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> vertices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> verts<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> verts<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    ofVec3f temp1 <span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    ofVec3f temp2 <span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    ofVec3f norm <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">.</span><span class=\"token function\">getCrossed</span><span class=\"token punctuation\">(</span>temp2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Vector3 a <span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> v<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        Vector3 b <span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> v<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> weight <span class=\"token operator\">=</span> <span class=\"token function\">acos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        norm <span class=\"token operator\">+</span><span class=\"token operator\">=</span> weight <span class=\"token operator\">*</span> normal<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    normals<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> norm<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>The possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY</p>\n"},{"syntax":"setTexCoordBuffer(&buffer, stride, offset = 0)","name":"setTexCoordBuffer","returns":"void","returns_description":null,"parameters":"ofBufferObject <span class=\"token operator\">&amp;</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stride<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setTexCoordData(*texCoord0x, total, usage, stride = 0)","name":"setTexCoordData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>texCoord0x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> usage<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stride<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This sets the texCoord data for the ofVbo from a pointer to an array of floats, ST, for each face, so a 3D cube would require an array of 16 floats, 2 for each vertex.</p>\n<p>The possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY</p>\n"},{"syntax":"setTexCoordData(*texCoords, total, usage)","name":"setTexCoordData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">*</span>texCoords<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> usage","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setTexCoordData(*texCoords, total, usage)","name":"setTexCoordData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">*</span>texCoords<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> usage","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This sets the texture coordinate data for the VBO from a pointer to an array of ofVec2f instances. Each ofVec2f represents the texture coordinate of a vertex. By default OF uses ARB coords, so you can use pixel coordinates rather than normalized UV coordinates.</p>\n<p>The possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY</p>\n"},{"syntax":"setVertexBuffer(&buffer, numCoords, stride, offset = 0)","name":"setVertexBuffer","returns":"void","returns_description":null,"parameters":"ofBufferObject <span class=\"token operator\">&amp;</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numCoords<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stride<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setVertexData(*vert0x, numCoords, total, usage, stride = 0)","name":"setVertexData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>vert0x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numCoords<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> usage<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stride<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This sets the vertex data for the ofVbo from a pointer to an array of floats. The numCoords determines whether you're creating a 3D or 2D vbo, i.e. a 3D cube would require an array of 24 floats, and numCoords to be 8.</p>\n<p>The possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY</p>\n"},{"syntax":"setVertexData(*verts, total, usage)","name":"setVertexData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">*</span>verts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> usage","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setVertexData(*verts, total, usage)","name":"setVertexData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">*</span>verts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> usage","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setVertexData(*verts, total, usage)","name":"setVertexData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">*</span>verts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> usage","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This sets the vertex data for the ofVbo from a pointer to an array of ofVec3f instances. This creates a 3D vbo.</p>\n<p>The possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY</p>\n"},{"syntax":"setVertexData(*verts, total, usage)","name":"setVertexData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">*</span>verts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> usage","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This sets the vertex data for the ofVbo from a pointer to an array of ofVec2f instances. This creates a 2D vbo.</p>\n<p>The possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY</p>\n"},{"syntax":"unbind()","name":"unbind","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This is for advanced users who might want to use ways of drawing other than draw() or drawElements(), it simply unbinds all the arrays for the VBO.</p>\n"},{"syntax":"updateAttributeData(location, *vert0x, total)","name":"updateAttributeData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> location<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>vert0x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"updateColorData(*color0r, total)","name":"updateColorData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>color0r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>If the vertex colors of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the colors at any time using an array of floats.</p>\n"},{"syntax":"updateColorData(*colors, total)","name":"updateColorData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofFloatColor <span class=\"token operator\">*</span>colors<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>If the color data for each vertex of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the vertex colors at any time.</p>\n"},{"syntax":"updateIndexData(*indices, total)","name":"updateIndexData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofIndexType <span class=\"token operator\">*</span>indices<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>If the indices of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the indices at any time.</p>\n"},{"syntax":"updateMesh(&mesh)","name":"updateMesh","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMesh <span class=\"token operator\">&amp;</span>mesh","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Updates all the data within the VBO from the data in the ofMesh.</p>\n"},{"syntax":"updateNormalData(*normal0x, total)","name":"updateNormalData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>normal0x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>If the normals of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the normal data at any time using an array of floats.</p>\n"},{"syntax":"updateNormalData(*normals, total)","name":"updateNormalData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">*</span>normals<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"updateNormalData(*normals, total)","name":"updateNormalData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">*</span>normals<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>If the normals of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the normals at any time.</p>\n"},{"syntax":"updateTexCoordData(*texCoord0x, total)","name":"updateTexCoordData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>texCoord0x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>If the texture coords of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the tex coords at any time using an array of floats.</p>\n"},{"syntax":"updateTexCoordData(*texCoords, total)","name":"updateTexCoordData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">*</span>texCoords<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"updateTexCoordData(*texCoords, total)","name":"updateTexCoordData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">*</span>texCoords<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>If the texture coordinates of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the texcoords at any time.</p>\n"},{"syntax":"updateVertexData(*ver0x, total)","name":"updateVertexData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>ver0x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>If the vertices of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the indices at any time using an array of floats.</p>\n"},{"syntax":"updateVertexData(*verts, total)","name":"updateVertexData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">*</span>verts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"updateVertexData(*verts, total)","name":"updateVertexData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">*</span>verts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"updateVertexData(*verts, total)","name":"updateVertexData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">*</span>verts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>If the vertices of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the vertices at any time.</p>\n"},{"syntax":"updateVertexData(*verts, total)","name":"updateVertexData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">*</span>verts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> total","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>If the vertices of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the vertices at any time.</p>\n"},{"syntax":"~ofVbo()","name":"~ofVbo","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This is the destructor for the ofVbo, it clears all the vertices, texture coordinates, and normals from the graphics card.</p>\n"},{"name":"bUsingColors","type":"bool","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"bUsingIndices","type":"bool","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"bUsingNormals","type":"bool","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"bUsingTexCoords","type":"bool","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"bUsingVerts","type":"bool","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"colorAttribute","type":"ofVbo::VertexAttribute","access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"short":"","desc":""},{"name":"indexAttribute","type":"ofVbo::IndexAttribute","access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"normalAttribute","type":"ofVbo::VertexAttribute","access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"positionAttribute","type":"ofVbo::VertexAttribute","access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"texCoordAttribute","type":"ofVbo::VertexAttribute","access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"totalIndices","type":"int","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"totalVerts","type":"int","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"vaoChanged","type":"bool","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"vaoChecked","type":"bool","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"vaoID","type":"GLuint","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"vaoSupported","type":"bool","access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofVbo</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n_extends: _\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>##Description</p>\n<p>First things first: a Vertex Buffer Object (VBO) provides a way for you to create vertices, normals, colors, and texture coordinates on the graphics card for non-immediate mode rendering. This means that you can store it all on the graphics card and then access, update, or draw it, whenever you need. This is pretty convenient when you have something that you want to draw multiple times without changing it much, because it means that, instead of needing to upload new data each time, you can simply draw it without needing to recreate all your vertices and colors, a philosophy which is probably familiar to you from working with the ofFbo or ofTexture.</p>\n<p>There are a few things that are important to understand about VBOs:</p>\n<p>Each property of the VBO - vertices, texCoords, normals, colors - can be either dynamic or static. You set it to static when you know that you won't be updating it later on. You set it to dynamic when you know you will be updating it later on.</p>\n<p>Just like with ofMesh, you need to keep track of the vertices and their indices in order to make shapes and you can draw a VBO in any one of the OpenGL drawing modes, GL_LINE_STRIP, GL_POINTS, GL_QUADS, GL_TRIANGLES and GL_TRIANGLE_STRIP.</p>\n<p>Vertices are passed to your graphics card and your graphics card fills in the spaces in between them in a process usually called the rendering pipeline. The rendering pipeline goes more or less like this:</p>\n<ol>\n<li>\n<p>Say how you're going to connect all the points.</p>\n</li>\n<li>\n<p>Make some points.</p>\n</li>\n<li>\n<p>Say that you're done making points.</p>\n</li>\n</ol>\n<p>You may be thinking: Ill just make eight vertices and voila: a cube. Not so quick. Theres a hitch and that hitch is that the OpenGL renderer has different ways of connecting the vertices that you pass to it and none are as efficient as to only need eight vertices to create a cube. You've probably seen a version of the following image somewhere before.</p>\n<p><img src=\"gl_vertices_options.jpg\" alt=\"gl vertices\"></p>\n<p>Generally, you have to create your points to fit the drawing mode that you've selected because of whats called winding. A vertex gets connected to another vertex in the order that the mode does its winding and this means that you might need multiple vertices in a given location to create the shape you want. The cube, for example, requires eighteen vertices, not the eight that you would expect. If you note the order of vertices in the GL chart above you'll see that all of them use their vertices slightly differently (in particular you should make note of the GL_TRIANGLE_STRIP example). Drawing a shape requires that you keep track of which drawing mode is being used and which order your vertices are declared in. If you're thinking it would be nice if there were an abstraction layer for this, you're thinking right. Enter the mesh, which is really just an abstraction of the vertex and drawing mode that we started with but which has the added bonus of managing the draw order for you. That may seem insignificant at first, but it provides some real benefits when working with complex geometry.</p>\n<p>The following example shows an ofVbo representing an icosahedron:</p>\n<pre><code><span class=\"token keyword\">const</span> ofIndexType Faces<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> Verts<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token number\">0.000f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.000f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.000f</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0.894f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.000f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.447f</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0.276f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.851f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.447f</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">-</span><span class=\"token number\">0.724f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.526f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.447f</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">-</span><span class=\"token number\">0.724f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.526f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.447f</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0.276f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.851f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.447f</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0.724f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.526f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.447f</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">-</span><span class=\"token number\">0.276f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.851f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.447f</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">-</span><span class=\"token number\">0.894f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.000f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.447f</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">-</span><span class=\"token number\">0.276f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.851f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.447f</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0.724f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.526f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.447f</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0.000f</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.000f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.000f</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nofVec3f v<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nofVec3f n<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nofFloatColor c<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nofVbo vbo<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> HelloWorldApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n\n        c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>g <span class=\"token operator\">=</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Verts<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Verts<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Verts<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    vbo<span class=\"token punctuation\">.</span><span class=\"token function\">setVertexData</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> GL_STATIC_DRAW <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    vbo<span class=\"token punctuation\">.</span><span class=\"token function\">setColorData</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> GL_STATIC_DRAW <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    vbo<span class=\"token punctuation\">.</span><span class=\"token function\">setIndexData</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>Faces<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> GL_STATIC_DRAW <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">glEnable</span><span class=\"token punctuation\">(</span>GL_DEPTH_TEST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> HelloWorldApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofRotate</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetElapsedTimef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">glPointSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    vbo<span class=\"token punctuation\">.</span><span class=\"token function\">drawElements</span><span class=\"token punctuation\">(</span> GL_TRIANGLES<span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"vbo.png\" alt=\"vbo result\"></p>\n<p>You'll notice in a lot of the methods that a usage is required, for instance, setNormals(). The possible options are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY Each of these affects the speed of operations that you perform with the VBO and whether it's certain operations are allowed. For instance, if the vertices are STATIC, then they cannot be changed after they been loaded the first time, whereas if they're DYNAMIC, then they can be modified at any time later. The different modes can be broken down like so:</p>\n<p>STREAM\nThe data store contents will be modified once and used at most a few times.</p>\n<p>STATIC\nThe data store contents will be modified once and used many times.</p>\n<p>DYNAMIC\nThe data store contents will be modified repeatedly and used many times.</p>\n<p>The nature of access may be one of these:</p>\n<p>DRAW\nThe data store contents are modified by the application, and used as the source for GL drawing and image specification commands.</p>\n<p>READ\nThe data store contents are modified by reading data from the GL, and used to return that data when queried by the application.</p>\n<p>COPY\nThe data store contents are modified by reading data from the GL, and used as the source for GL drawing and image specification commands.</p>\n<p>##Methods</p>\n<p>###void bind()</p>\n<p>&lt;!--\n<em>syntax: bind()</em>\n<em>name: bind</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This is for advanced users who might want to use ways of drawing other than draw() or drawElements(), it simply binds all the arrays for the VBO.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void clear()</p>\n<p>&lt;!--\n<em>syntax: clear()</em>\n<em>name: clear</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This erases your VBO data from your graphics card, but not the VBO itself, so you can fill it with data again.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void clearAttribute(attributePos_)</p>\n<p>&lt;!--\n<em>syntax: clearAttribute(attributePos</em>)_\n<em>name: clearAttribute</em>\n<em>returns: void</em>\n<em>returns_description: _\n<em>parameters: int attributePos</em></em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void clearColors()</p>\n<p>&lt;!--\n<em>syntax: clearColors()</em>\n<em>name: clearColors</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void clearIndices()</p>\n<p>&lt;!--\n<em>syntax: clearIndices()</em>\n<em>name: clearIndices</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void clearNormals()</p>\n<p>&lt;!--\n<em>syntax: clearNormals()</em>\n<em>name: clearNormals</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void clearTexCoords()</p>\n<p>&lt;!--\n<em>syntax: clearTexCoords()</em>\n<em>name: clearTexCoords</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void clearVertices()</p>\n<p>&lt;!--\n<em>syntax: clearVertices()</em>\n<em>name: clearVertices</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void disableColors()</p>\n<p>&lt;!--\n<em>syntax: disableColors()</em>\n<em>name: disableColors</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void disableIndices()</p>\n<p>&lt;!--\n<em>syntax: disableIndices()</em>\n<em>name: disableIndices</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void disableNormals()</p>\n<p>&lt;!--\n<em>syntax: disableNormals()</em>\n<em>name: disableNormals</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void disableTexCoords()</p>\n<p>&lt;!--\n<em>syntax: disableTexCoords()</em>\n<em>name: disableTexCoords</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw(drawMode, first, total)</p>\n<p>&lt;!--\n<em>syntax: draw(drawMode, first, total)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int drawMode, int first, int total</em>\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This method allows you to draw your VBO but unlike drawElements() ignores any indices that you might have set up. This is an important distinction between the two methods.\nmode\nSpecifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.\nfirst\nSpecifies the starting index in the enabled arrays.\ntotal\nSpecifies the number of indices to be rendered. This last part is pretty important: if you have more indices than vertices you'll want to make sure that you pass the number of indices, not the number of vertices.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawElements(drawMode, amt, offsetelements = 0)</p>\n<p>&lt;!--\n<em>syntax: drawElements(drawMode, amt, offsetelements = 0)</em>\n<em>name: drawElements</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int drawMode, int amt, int offsetelements=0</em>\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>drawElements allows you use indices, unlike draw() which ignores them.\ndrawMode\nSpecifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.</p>\n<pre><code>vbo<span class=\"token punctuation\">.</span><span class=\"token function\">drawElements</span><span class=\"token punctuation\">(</span> GL_TRIANGLES<span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>amt specifies the number of indices to be rendered. This last part is pretty important: if you have more indices than vertices you'll want to make sure that you pass the number of indices, not the number of vertices.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawElementsInstanced(drawMode, amt, primCount)</p>\n<p>&lt;!--\n<em>syntax: drawElementsInstanced(drawMode, amt, primCount)</em>\n<em>name: drawElementsInstanced</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int drawMode, int amt, int primCount</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawInstanced(drawMode, first, total, primCount)</p>\n<p>&lt;!--\n<em>syntax: drawInstanced(drawMode, first, total, primCount)</em>\n<em>name: drawInstanced</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int drawMode, int first, int total, int primCount</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void enableColors()</p>\n<p>&lt;!--\n<em>syntax: enableColors()</em>\n<em>name: enableColors</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void enableIndices()</p>\n<p>&lt;!--\n<em>syntax: enableIndices()</em>\n<em>name: enableIndices</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void enableNormals()</p>\n<p>&lt;!--\n<em>syntax: enableNormals()</em>\n<em>name: enableNormals</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void enableTexCoords()</p>\n<p>&lt;!--\n<em>syntax: enableTexCoords()</em>\n<em>name: enableTexCoords</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofBufferObject &amp; getAttributeBuffer(location)</p>\n<p>&lt;!--\n<em>syntax: getAttributeBuffer(location)</em>\n<em>name: getAttributeBuffer</em>\n<em>returns: ofBufferObject &amp;</em>\n_returns_description: _\n<em>parameters: int location</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const ofBufferObject &amp; getAttributeBuffer(location)</p>\n<p>&lt;!--\n<em>syntax: getAttributeBuffer(location)</em>\n<em>name: getAttributeBuffer</em>\n<em>returns: const ofBufferObject &amp;</em>\n_returns_description: _\n<em>parameters: int location</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###GLuint getAttributeId(AttrPos_)</p>\n<p>&lt;!--\n<em>syntax: getAttributeId(AttrPos</em>)_\n<em>name: getAttributeId</em>\n<em>returns: GLuint</em>\n<em>returns_description: _\n<em>parameters: int AttrPos</em></em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>returns OpenGL memory object id for GL buffer holding attribute data</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofBufferObject &amp; getColorBuffer()</p>\n<p>&lt;!--\n<em>syntax: getColorBuffer()</em>\n<em>name: getColorBuffer</em>\n<em>returns: ofBufferObject &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const ofBufferObject &amp; getColorBuffer()</p>\n<p>&lt;!--\n<em>syntax: getColorBuffer()</em>\n<em>name: getColorBuffer</em>\n<em>returns: const ofBufferObject &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###GLuint getColorId()</p>\n<p>&lt;!--\n<em>syntax: getColorId()</em>\n<em>name: getColorId</em>\n<em>returns: GLuint</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofBufferObject &amp; getIndexBuffer()</p>\n<p>&lt;!--\n<em>syntax: getIndexBuffer()</em>\n<em>name: getIndexBuffer</em>\n<em>returns: ofBufferObject &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const ofBufferObject &amp; getIndexBuffer()</p>\n<p>&lt;!--\n<em>syntax: getIndexBuffer()</em>\n<em>name: getIndexBuffer</em>\n<em>returns: const ofBufferObject &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###GLuint getIndexId()</p>\n<p>&lt;!--\n<em>syntax: getIndexId()</em>\n<em>name: getIndexId</em>\n<em>returns: GLuint</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool getIsAllocated()</p>\n<p>&lt;!--\n<em>syntax: getIsAllocated()</em>\n<em>name: getIsAllocated</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns whether the ofVbo has been allocated or not. This is important to check before you start drawing or manipulating the vbo.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofBufferObject &amp; getNormalBuffer()</p>\n<p>&lt;!--\n<em>syntax: getNormalBuffer()</em>\n<em>name: getNormalBuffer</em>\n<em>returns: ofBufferObject &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const ofBufferObject &amp; getNormalBuffer()</p>\n<p>&lt;!--\n<em>syntax: getNormalBuffer()</em>\n<em>name: getNormalBuffer</em>\n<em>returns: const ofBufferObject &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###GLuint getNormalId()</p>\n<p>&lt;!--\n<em>syntax: getNormalId()</em>\n<em>name: getNormalId</em>\n<em>returns: GLuint</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getNumIndices()</p>\n<p>&lt;!--\n<em>syntax: getNumIndices()</em>\n<em>name: getNumIndices</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getNumVertices()</p>\n<p>&lt;!--\n<em>syntax: getNumVertices()</em>\n<em>name: getNumVertices</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVbo::VertexAttribute &amp; getOrCreateAttr(location)</p>\n<p>&lt;!--\n<em>syntax: getOrCreateAttr(location)</em>\n<em>name: getOrCreateAttr</em>\n<em>returns: ofVbo::VertexAttribute &amp;</em>\n_returns_description: _\n<em>parameters: int location</em>\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofBufferObject &amp; getTexCoordBuffer()</p>\n<p>&lt;!--\n<em>syntax: getTexCoordBuffer()</em>\n<em>name: getTexCoordBuffer</em>\n<em>returns: ofBufferObject &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const ofBufferObject &amp; getTexCoordBuffer()</p>\n<p>&lt;!--\n<em>syntax: getTexCoordBuffer()</em>\n<em>name: getTexCoordBuffer</em>\n<em>returns: const ofBufferObject &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###GLuint getTexCoordId()</p>\n<p>&lt;!--\n<em>syntax: getTexCoordId()</em>\n<em>name: getTexCoordId</em>\n<em>returns: GLuint</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool getUsingColors()</p>\n<p>&lt;!--\n<em>syntax: getUsingColors()</em>\n<em>name: getUsingColors</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns whether the vertices within the VBO have colors associated with them or not.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool getUsingIndices()</p>\n<p>&lt;!--\n<em>syntax: getUsingIndices()</em>\n<em>name: getUsingIndices</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns whether the VBO has assigned indices or not.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool getUsingNormals()</p>\n<p>&lt;!--\n<em>syntax: getUsingNormals()</em>\n<em>name: getUsingNormals</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns whether the surfaces of the VBO have normals associated with them or not.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool getUsingTexCoords()</p>\n<p>&lt;!--\n<em>syntax: getUsingTexCoords()</em>\n<em>name: getUsingTexCoords</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns whether the vertices of the VBO have texture coordinates associated with them or not.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool getUsingVerts()</p>\n<p>&lt;!--\n<em>syntax: getUsingVerts()</em>\n<em>name: getUsingVerts</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns whether the ofVbo is using vertices or not. A VBO can exist without vertices, though it's quite unusual.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###GLuint getVaoId()</p>\n<p>&lt;!--\n<em>syntax: getVaoId()</em>\n<em>name: getVaoId</em>\n<em>returns: GLuint</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###GLuint getVertId()</p>\n<p>&lt;!--\n<em>syntax: getVertId()</em>\n<em>name: getVertId</em>\n<em>returns: GLuint</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofBufferObject &amp; getVertexBuffer()</p>\n<p>&lt;!--\n<em>syntax: getVertexBuffer()</em>\n<em>name: getVertexBuffer</em>\n<em>returns: ofBufferObject &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const ofBufferObject &amp; getVertexBuffer()</p>\n<p>&lt;!--\n<em>syntax: getVertexBuffer()</em>\n<em>name: getVertexBuffer</em>\n<em>returns: const ofBufferObject &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool hasAttribute(attributePos_)</p>\n<p>&lt;!--\n<em>syntax: hasAttribute(attributePos</em>)_\n<em>name: hasAttribute</em>\n<em>returns: bool</em>\n<em>returns_description: _\n<em>parameters: int attributePos</em></em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVbo(&amp;mom)</h3>\n<p>&lt;!--\n<em>syntax: ofVbo(&amp;mom)</em>\n<em>name: ofVbo</em>\n_returns: _\n_returns_description: _\n<em>parameters: const ofVbo &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This is the copy constructor, so that you can do the following:</p>\n<pre><code>ofVbo v1<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// filll v1;</span>\nofVbo <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 now contains all of v1s properties in a separate VBO</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVbo()</h3>\n<p>&lt;!--\n<em>syntax: ofVbo()</em>\n<em>name: ofVbo</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Simple constructor for the ofVbo. When the ofVbo is first created there are no vertices or normals within it.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVbo &amp; operator=(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;mom)</em>\n<em>name: operator=</em>\n<em>returns: ofVbo &amp;</em>\n_returns_description: _\n<em>parameters: const ofVbo &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This is the equals operator, so that you can do the following:</p>\n<pre><code>ofVbo v1<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// filll v1;</span>\nofVbo v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 now contains all of v1s properties in a separate VBO</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setAttributeBuffer(location, &amp;buffer, numCoords, stride, offset = 0)</p>\n<p>&lt;!--\n<em>syntax: setAttributeBuffer(location, &amp;buffer, numCoords, stride, offset = 0)</em>\n<em>name: setAttributeBuffer</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int location, ofBufferObject &amp;buffer, int numCoords, int stride, int offset=0</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setAttributeData(location, *vert0x, numCoords, total, usage, stride = 0)</p>\n<p>&lt;!--\n<em>syntax: setAttributeData(location, *vert0x, numCoords, total, usage, stride = 0)</em>\n<em>name: setAttributeData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int location, const float *vert0x, int numCoords, int total, int usage, int stride=0</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setAttributeDivisor(location, divisor)</p>\n<p>&lt;!--\n<em>syntax: setAttributeDivisor(location, divisor)</em>\n<em>name: setAttributeDivisor</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int location, int divisor</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>used to send an attribute per instance(s) instead of per vertex.\nwill send per vertex if set to 0 or to the number of instances if &gt;0</p>\n<p>see textureBufferInstancedExample\nand https://www.opengl.org/sdk/docs/man4/html/glVertexAttribDivisor.xhtml</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setColorBuffer(&amp;buffer, stride, offset = 0)</p>\n<p>&lt;!--\n<em>syntax: setColorBuffer(&amp;buffer, stride, offset = 0)</em>\n<em>name: setColorBuffer</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofBufferObject &amp;buffer, int stride, int offset=0</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setColorData(*color0r, total, usage, stride = 0)</p>\n<p>&lt;!--\n<em>syntax: setColorData(*color0r, total, usage, stride = 0)</em>\n<em>name: setColorData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const float *color0r, int total, int usage, int stride=0</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This sets the color data for the ofVbo from a pointer to an array of floats. The colors are RGB and are floats from 0.f - 1.f</p>\n<p>The possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setColorData(*colors, total, usage)</p>\n<p>&lt;!--\n<em>syntax: setColorData(*colors, total, usage)</em>\n<em>name: setColorData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofFloatColor *colors, int total, int usage</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This allows you to set the colors for a vertex using an array of ofFloatColor instances.</p>\n<pre><code>ofFloatColor c<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// fill in the colors and vertices</span>\nvbo<span class=\"token punctuation\">.</span><span class=\"token function\">setColorData</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> GL_STATIC_DRAW <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>The possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setIndexBuffer(&amp;buffer)</p>\n<p>&lt;!--\n<em>syntax: setIndexBuffer(&amp;buffer)</em>\n<em>name: setIndexBuffer</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofBufferObject &amp;buffer</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setIndexData(*indices, total, usage)</p>\n<p>&lt;!--\n<em>syntax: setIndexData(*indices, total, usage)</em>\n<em>name: setIndexData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofIndexType *indices, int total, int usage</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This sets the index data for the VBO from a pointer to an array of ints. Each int represents the index of a vertex, and when the vbo is drawn the indices are used to generate the geometry from the indices.</p>\n<p>The possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setMesh(&amp;mesh, usage)</p>\n<p>&lt;!--\n<em>syntax: setMesh(&amp;mesh, usage)</em>\n<em>name: setMesh</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofMesh &amp;mesh, int usage</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This allows you to pass a mesh to the ofVbo and populate the vertices, texture coordinates, and other properties of the VBO from the ofMesh instance. You can think of this as essentially moving geometry data from the CPU to the GPU.</p>\n<pre><code>ofxAssimpModelLoader model<span class=\"token punctuation\">;</span>\nmodel<span class=\"token punctuation\">.</span><span class=\"token function\">loadModel</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>astroBoy_walk<span class=\"token punctuation\">.</span>dae<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofMesh mesh <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span><span class=\"token function\">getMesh</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVbo vbo<span class=\"token punctuation\">;</span>\nvbo<span class=\"token punctuation\">.</span><span class=\"token function\">setMesh</span><span class=\"token punctuation\">(</span>mesh<span class=\"token punctuation\">,</span> GL_STATIC_DRAW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>The possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setMesh(&amp;mesh, usage, useColors, useTextures, useNormals)</p>\n<p>&lt;!--\n<em>syntax: setMesh(&amp;mesh, usage, useColors, useTextures, useNormals)</em>\n<em>name: setMesh</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofMesh &amp;mesh, int usage, bool useColors, bool useTextures, bool useNormals</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setNormalBuffer(&amp;buffer, stride, offset = 0)</p>\n<p>&lt;!--\n<em>syntax: setNormalBuffer(&amp;buffer, stride, offset = 0)</em>\n<em>name: setNormalBuffer</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofBufferObject &amp;buffer, int stride, int offset=0</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setNormalData(*normal0x, total, usage, stride = 0)</p>\n<p>&lt;!--\n<em>syntax: setNormalData(*normal0x, total, usage, stride = 0)</em>\n<em>name: setNormalData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const float *normal0x, int total, int usage, int stride=0</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This sets the normals data for the ofVbo from a pointer to an array of floats, x,y,z, for each face, so a 3D cube would require an array of 18 floats, 3 for each face.</p>\n<p>The possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setNormalData(*normals, total, usage)</p>\n<p>&lt;!--\n<em>syntax: setNormalData(*normals, total, usage)</em>\n<em>name: setNormalData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 *normals, int total, int usage</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setNormalData(*normals, total, usage)</p>\n<p>&lt;!--\n<em>syntax: setNormalData(*normals, total, usage)</em>\n<em>name: setNormalData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofVec3f *normals, int total, int usage</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This sets the normal data for the VBO from a pointer to an array of ofVec3f instances. The normals are calculated as the vector perpendicular to a face. The mathematical definition of a normal is shown on the left, while the way that a normal is calculated for a triangle is shown on the right.</p>\n<p><img src=\"vboNormals.png\" alt=\"vbo normals\"></p>\n<p>One technique for calculating normals is something like the following:</p>\n<pre><code><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> indices<span class=\"token punctuation\">;</span>\nofVec3f<span class=\"token operator\">*</span> verts<span class=\"token punctuation\">;</span>\nofVec3f<span class=\"token operator\">*</span> normals<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// allocate and create normals, indices, and verts</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> NUM_INDICES<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ofVec3f v<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> vertices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> verts<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> verts<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    ofVec3f temp1 <span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    ofVec3f temp2 <span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    ofVec3f norm <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">.</span><span class=\"token function\">getCrossed</span><span class=\"token punctuation\">(</span>temp2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Vector3 a <span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> v<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        Vector3 b <span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> v<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> weight <span class=\"token operator\">=</span> <span class=\"token function\">acos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        norm <span class=\"token operator\">+</span><span class=\"token operator\">=</span> weight <span class=\"token operator\">*</span> normal<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    normals<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> norm<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>The possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setTexCoordBuffer(&amp;buffer, stride, offset = 0)</p>\n<p>&lt;!--\n<em>syntax: setTexCoordBuffer(&amp;buffer, stride, offset = 0)</em>\n<em>name: setTexCoordBuffer</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofBufferObject &amp;buffer, int stride, int offset=0</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setTexCoordData(*texCoord0x, total, usage, stride = 0)</p>\n<p>&lt;!--\n<em>syntax: setTexCoordData(*texCoord0x, total, usage, stride = 0)</em>\n<em>name: setTexCoordData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const float *texCoord0x, int total, int usage, int stride=0</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This sets the texCoord data for the ofVbo from a pointer to an array of floats, ST, for each face, so a 3D cube would require an array of 16 floats, 2 for each vertex.</p>\n<p>The possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setTexCoordData(*texCoords, total, usage)</p>\n<p>&lt;!--\n<em>syntax: setTexCoordData(*texCoords, total, usage)</em>\n<em>name: setTexCoordData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec2 *texCoords, int total, int usage</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setTexCoordData(*texCoords, total, usage)</p>\n<p>&lt;!--\n<em>syntax: setTexCoordData(*texCoords, total, usage)</em>\n<em>name: setTexCoordData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofVec2f *texCoords, int total, int usage</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This sets the texture coordinate data for the VBO from a pointer to an array of ofVec2f instances. Each ofVec2f represents the texture coordinate of a vertex. By default OF uses ARB coords, so you can use pixel coordinates rather than normalized UV coordinates.</p>\n<p>The possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setVertexBuffer(&amp;buffer, numCoords, stride, offset = 0)</p>\n<p>&lt;!--\n<em>syntax: setVertexBuffer(&amp;buffer, numCoords, stride, offset = 0)</em>\n<em>name: setVertexBuffer</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofBufferObject &amp;buffer, int numCoords, int stride, int offset=0</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setVertexData(*vert0x, numCoords, total, usage, stride = 0)</p>\n<p>&lt;!--\n<em>syntax: setVertexData(*vert0x, numCoords, total, usage, stride = 0)</em>\n<em>name: setVertexData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const float *vert0x, int numCoords, int total, int usage, int stride=0</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This sets the vertex data for the ofVbo from a pointer to an array of floats. The numCoords determines whether you're creating a 3D or 2D vbo, i.e. a 3D cube would require an array of 24 floats, and numCoords to be 8.</p>\n<p>The possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setVertexData(*verts, total, usage)</p>\n<p>&lt;!--\n<em>syntax: setVertexData(*verts, total, usage)</em>\n<em>name: setVertexData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 *verts, int total, int usage</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setVertexData(*verts, total, usage)</p>\n<p>&lt;!--\n<em>syntax: setVertexData(*verts, total, usage)</em>\n<em>name: setVertexData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec2 *verts, int total, int usage</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setVertexData(*verts, total, usage)</p>\n<p>&lt;!--\n<em>syntax: setVertexData(*verts, total, usage)</em>\n<em>name: setVertexData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofVec3f *verts, int total, int usage</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This sets the vertex data for the ofVbo from a pointer to an array of ofVec3f instances. This creates a 3D vbo.</p>\n<p>The possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setVertexData(*verts, total, usage)</p>\n<p>&lt;!--\n<em>syntax: setVertexData(*verts, total, usage)</em>\n<em>name: setVertexData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofVec2f *verts, int total, int usage</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This sets the vertex data for the ofVbo from a pointer to an array of ofVec2f instances. This creates a 2D vbo.</p>\n<p>The possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void unbind()</p>\n<p>&lt;!--\n<em>syntax: unbind()</em>\n<em>name: unbind</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This is for advanced users who might want to use ways of drawing other than draw() or drawElements(), it simply unbinds all the arrays for the VBO.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void updateAttributeData(location, *vert0x, total)</p>\n<p>&lt;!--\n<em>syntax: updateAttributeData(location, *vert0x, total)</em>\n<em>name: updateAttributeData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int location, const float *vert0x, int total</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void updateColorData(*color0r, total)</p>\n<p>&lt;!--\n<em>syntax: updateColorData(*color0r, total)</em>\n<em>name: updateColorData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const float *color0r, int total</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>If the vertex colors of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the colors at any time using an array of floats.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void updateColorData(*colors, total)</p>\n<p>&lt;!--\n<em>syntax: updateColorData(*colors, total)</em>\n<em>name: updateColorData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofFloatColor *colors, int total</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>If the color data for each vertex of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the vertex colors at any time.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void updateIndexData(*indices, total)</p>\n<p>&lt;!--\n<em>syntax: updateIndexData(*indices, total)</em>\n<em>name: updateIndexData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofIndexType *indices, int total</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>If the indices of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the indices at any time.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void updateMesh(&amp;mesh)</p>\n<p>&lt;!--\n<em>syntax: updateMesh(&amp;mesh)</em>\n<em>name: updateMesh</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofMesh &amp;mesh</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Updates all the data within the VBO from the data in the ofMesh.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void updateNormalData(*normal0x, total)</p>\n<p>&lt;!--\n<em>syntax: updateNormalData(*normal0x, total)</em>\n<em>name: updateNormalData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const float *normal0x, int total</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>If the normals of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the normal data at any time using an array of floats.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void updateNormalData(*normals, total)</p>\n<p>&lt;!--\n<em>syntax: updateNormalData(*normals, total)</em>\n<em>name: updateNormalData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 *normals, int total</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void updateNormalData(*normals, total)</p>\n<p>&lt;!--\n<em>syntax: updateNormalData(*normals, total)</em>\n<em>name: updateNormalData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofVec3f *normals, int total</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>If the normals of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the normals at any time.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void updateTexCoordData(*texCoord0x, total)</p>\n<p>&lt;!--\n<em>syntax: updateTexCoordData(*texCoord0x, total)</em>\n<em>name: updateTexCoordData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const float *texCoord0x, int total</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>If the texture coords of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the tex coords at any time using an array of floats.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void updateTexCoordData(*texCoords, total)</p>\n<p>&lt;!--\n<em>syntax: updateTexCoordData(*texCoords, total)</em>\n<em>name: updateTexCoordData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec2 *texCoords, int total</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void updateTexCoordData(*texCoords, total)</p>\n<p>&lt;!--\n<em>syntax: updateTexCoordData(*texCoords, total)</em>\n<em>name: updateTexCoordData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofVec2f *texCoords, int total</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>If the texture coordinates of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the texcoords at any time.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void updateVertexData(*ver0x, total)</p>\n<p>&lt;!--\n<em>syntax: updateVertexData(*ver0x, total)</em>\n<em>name: updateVertexData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const float *ver0x, int total</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>If the vertices of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the indices at any time using an array of floats.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void updateVertexData(*verts, total)</p>\n<p>&lt;!--\n<em>syntax: updateVertexData(*verts, total)</em>\n<em>name: updateVertexData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 *verts, int total</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void updateVertexData(*verts, total)</p>\n<p>&lt;!--\n<em>syntax: updateVertexData(*verts, total)</em>\n<em>name: updateVertexData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec2 *verts, int total</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void updateVertexData(*verts, total)</p>\n<p>&lt;!--\n<em>syntax: updateVertexData(*verts, total)</em>\n<em>name: updateVertexData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofVec3f *verts, int total</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>If the vertices of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the vertices at any time.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void updateVertexData(*verts, total)</p>\n<p>&lt;!--\n<em>syntax: updateVertexData(*verts, total)</em>\n<em>name: updateVertexData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofVec2f *verts, int total</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>If the vertices of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the vertices at any time.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>~ofVbo()</h3>\n<p>&lt;!--\n<em>syntax: ~ofVbo()</em>\n<em>name: ~ofVbo</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This is the destructor for the ofVbo, it clears all the vertices, texture coordinates, and normals from the graphics card.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###bool bUsingColors</p>\n<p>&lt;!--\n<em>name: bUsingColors</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool bUsingIndices</p>\n<p>&lt;!--\n<em>name: bUsingIndices</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool bUsingNormals</p>\n<p>&lt;!--\n<em>name: bUsingNormals</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool bUsingTexCoords</p>\n<p>&lt;!--\n<em>name: bUsingTexCoords</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool bUsingVerts</p>\n<p>&lt;!--\n<em>name: bUsingVerts</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVbo::VertexAttribute colorAttribute</p>\n<p>&lt;!--\n<em>name: colorAttribute</em>\n<em>type: ofVbo::VertexAttribute</em>\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###map&lt; int, ofVbo::VertexAttribute &gt; customAttributes</p>\n<p>&lt;!--\n<em>name: customAttributes</em>\n<em>type: map&lt; int, ofVbo::VertexAttribute &gt;</em>\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVbo::IndexAttribute indexAttribute</p>\n<p>&lt;!--\n<em>name: indexAttribute</em>\n<em>type: ofVbo::IndexAttribute</em>\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVbo::VertexAttribute normalAttribute</p>\n<p>&lt;!--\n<em>name: normalAttribute</em>\n<em>type: ofVbo::VertexAttribute</em>\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVbo::VertexAttribute positionAttribute</p>\n<p>&lt;!--\n<em>name: positionAttribute</em>\n<em>type: ofVbo::VertexAttribute</em>\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVbo::VertexAttribute texCoordAttribute</p>\n<p>&lt;!--\n<em>name: texCoordAttribute</em>\n<em>type: ofVbo::VertexAttribute</em>\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int totalIndices</p>\n<p>&lt;!--\n<em>name: totalIndices</em>\n<em>type: int</em>\n<em>access: private</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int totalVerts</p>\n<p>&lt;!--\n<em>name: totalVerts</em>\n<em>type: int</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool vaoChanged</p>\n<p>&lt;!--\n<em>name: vaoChanged</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool vaoChecked</p>\n<p>&lt;!--\n<em>name: vaoChecked</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###GLuint vaoID</p>\n<p>&lt;!--\n<em>name: vaoID</em>\n<em>type: GLuint</em>\n<em>access: private</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool vaoSupported</p>\n<p>&lt;!--\n<em>name: vaoSupported</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofVbo\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\n\n\n\n\n\n##Description\n\nFirst things first: a Vertex Buffer Object (VBO) provides a way for you to create vertices, normals, colors, and texture coordinates on the graphics card for non-immediate mode rendering. This means that you can store it all on the graphics card and then access, update, or draw it, whenever you need. This is pretty convenient when you have something that you want to draw multiple times without changing it much, because it means that, instead of needing to upload new data each time, you can simply draw it without needing to recreate all your vertices and colors, a philosophy which is probably familiar to you from working with the ofFbo or ofTexture.\n\nThere are a few things that are important to understand about VBOs:\n\nEach property of the VBO - vertices, texCoords, normals, colors - can be either dynamic or static. You set it to static when you know that you won't be updating it later on. You set it to dynamic when you know you will be updating it later on.\n\nJust like with ofMesh, you need to keep track of the vertices and their indices in order to make shapes and you can draw a VBO in any one of the OpenGL drawing modes, GL_LINE_STRIP, GL_POINTS, GL_QUADS, GL_TRIANGLES and GL_TRIANGLE_STRIP.\n\nVertices are passed to your graphics card and your graphics card fills in the spaces in between them in a process usually called the rendering pipeline. The rendering pipeline goes more or less like this:\n\n1. Say how you're going to connect all the points.\n\n2. Make some points.\n\n3. Say that you're done making points.\n\nYou may be thinking: Ill just make eight vertices and voila: a cube. Not so quick. Theres a hitch and that hitch is that the OpenGL renderer has different ways of connecting the vertices that you pass to it and none are as efficient as to only need eight vertices to create a cube. You've probably seen a version of the following image somewhere before.\n\n![gl vertices](gl_vertices_options.jpg)\n\nGenerally, you have to create your points to fit the drawing mode that you've selected because of whats called winding. A vertex gets connected to another vertex in the order that the mode does its winding and this means that you might need multiple vertices in a given location to create the shape you want. The cube, for example, requires eighteen vertices, not the eight that you would expect. If you note the order of vertices in the GL chart above you'll see that all of them use their vertices slightly differently (in particular you should make note of the GL_TRIANGLE_STRIP example). Drawing a shape requires that you keep track of which drawing mode is being used and which order your vertices are declared in. If you're thinking it would be nice if there were an abstraction layer for this, you're thinking right. Enter the mesh, which is really just an abstraction of the vertex and drawing mode that we started with but which has the added bonus of managing the draw order for you. That may seem insignificant at first, but it provides some real benefits when working with complex geometry.\n\nThe following example shows an ofVbo representing an icosahedron:\n\n~~~~{.cpp}\nconst ofIndexType Faces[] = {\n    2, 1, 0,\n    3, 2, 0,\n    4, 3, 0,\n    5, 4, 0,\n    1, 5, 0,\n    11, 6,  7,\n    11, 7,  8,\n    11, 8,  9,\n    11, 9,  10,\n    11, 10, 6,\n    1, 2, 6,\n    2, 3, 7,\n    3, 4, 8,\n    4, 5, 9,\n    5, 1, 10,\n    2,  7, 6,\n    3,  8, 7,\n    4,  9, 8,\n    5, 10, 9,\n    1, 6, 10 };\nconst float Verts[] = {\n    0.000f,  0.000f,  1.000f,\n    0.894f,  0.000f,  0.447f,\n    0.276f,  0.851f,  0.447f,\n    -0.724f,  0.526f,  0.447f,\n    -0.724f, -0.526f,  0.447f,\n    0.276f, -0.851f,  0.447f,\n    0.724f,  0.526f, -0.447f,\n    -0.276f,  0.851f, -0.447f,\n    -0.894f,  0.000f, -0.447f,\n    -0.276f, -0.851f, -0.447f,\n    0.724f, -0.526f, -0.447f,\n    0.000f,  0.000f, -1.000f };\nofVec3f v[12];\nofVec3f n[12];\nofFloatColor c[12];\nofVbo vbo;\nvoid HelloWorldApp::setup()\n{\n    int i, j = 0;\n    for ( i = 0; i < 12; i++ )\n    {\n\n        c[i].r = ofRandom(1.0);\n        c[i].g = ofRandom(1.0);\n        c[i].b = ofRandom(1.0);\n\n        v[i][0] = Verts[j] * 100.f;\n        j++;\n        v[i][1] = Verts[j] * 100.f;\n        j++;\n        v[i][2] = Verts[j] * 100.f;\n        j++;\n\n    }\n\n    vbo.setVertexData( &v[0], 12, GL_STATIC_DRAW );\n    vbo.setColorData( &c[0], 12, GL_STATIC_DRAW );\n    vbo.setIndexData( &Faces[0], 60, GL_STATIC_DRAW );\n\n    glEnable(GL_DEPTH_TEST);\n}\nvoid HelloWorldApp::draw(){\n    ofTranslate(ofGetWidth()/2, ofGetHeight()/2, 100);\n    ofRotate(ofGetElapsedTimef() * 20.0, 1, 1, 0);\n    glPointSize(10.f);\n    vbo.drawElements( GL_TRIANGLES, 60);\n}\n~~~~\n\n![vbo result](vbo.png)\n\nYou'll notice in a lot of the methods that a usage is required, for instance, setNormals(). The possible options are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY Each of these affects the speed of operations that you perform with the VBO and whether it's certain operations are allowed. For instance, if the vertices are STATIC, then they cannot be changed after they been loaded the first time, whereas if they're DYNAMIC, then they can be modified at any time later. The different modes can be broken down like so:\n\nSTREAM\nThe data store contents will be modified once and used at most a few times.\n\nSTATIC\nThe data store contents will be modified once and used many times.\n\nDYNAMIC\nThe data store contents will be modified repeatedly and used many times.\n\nThe nature of access may be one of these:\n\nDRAW\nThe data store contents are modified by the application, and used as the source for GL drawing and image specification commands.\n\nREAD\nThe data store contents are modified by reading data from the GL, and used to return that data when queried by the application.\n\nCOPY\nThe data store contents are modified by reading data from the GL, and used as the source for GL drawing and image specification commands.\n\n\n\n\n\n##Methods\n\n\n\n###void bind()\n\n<!--\n_syntax: bind()_\n_name: bind_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis is for advanced users who might want to use ways of drawing other than draw() or drawElements(), it simply binds all the arrays for the VBO.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clear()\n\n<!--\n_syntax: clear()_\n_name: clear_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis erases your VBO data from your graphics card, but not the VBO itself, so you can fill it with data again.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clearAttribute(attributePos_)\n\n<!--\n_syntax: clearAttribute(attributePos_)_\n_name: clearAttribute_\n_returns: void_\n_returns_description: _\n_parameters: int attributePos__\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clearColors()\n\n<!--\n_syntax: clearColors()_\n_name: clearColors_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clearIndices()\n\n<!--\n_syntax: clearIndices()_\n_name: clearIndices_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clearNormals()\n\n<!--\n_syntax: clearNormals()_\n_name: clearNormals_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clearTexCoords()\n\n<!--\n_syntax: clearTexCoords()_\n_name: clearTexCoords_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clearVertices()\n\n<!--\n_syntax: clearVertices()_\n_name: clearVertices_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void disableColors()\n\n<!--\n_syntax: disableColors()_\n_name: disableColors_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void disableIndices()\n\n<!--\n_syntax: disableIndices()_\n_name: disableIndices_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void disableNormals()\n\n<!--\n_syntax: disableNormals()_\n_name: disableNormals_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void disableTexCoords()\n\n<!--\n_syntax: disableTexCoords()_\n_name: disableTexCoords_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(drawMode, first, total)\n\n<!--\n_syntax: draw(drawMode, first, total)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: int drawMode, int first, int total_\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis method allows you to draw your VBO but unlike drawElements() ignores any indices that you might have set up. This is an important distinction between the two methods.\nmode\nSpecifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.\nfirst\nSpecifies the starting index in the enabled arrays.\ntotal\nSpecifies the number of indices to be rendered. This last part is pretty important: if you have more indices than vertices you'll want to make sure that you pass the number of indices, not the number of vertices.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawElements(drawMode, amt, offsetelements = 0)\n\n<!--\n_syntax: drawElements(drawMode, amt, offsetelements = 0)_\n_name: drawElements_\n_returns: void_\n_returns_description: _\n_parameters: int drawMode, int amt, int offsetelements=0_\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\ndrawElements allows you use indices, unlike draw() which ignores them.\ndrawMode\nSpecifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.\n~~~~{.cpp}\nvbo.drawElements( GL_TRIANGLES, 60);\n~~~~\namt specifies the number of indices to be rendered. This last part is pretty important: if you have more indices than vertices you'll want to make sure that you pass the number of indices, not the number of vertices.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawElementsInstanced(drawMode, amt, primCount)\n\n<!--\n_syntax: drawElementsInstanced(drawMode, amt, primCount)_\n_name: drawElementsInstanced_\n_returns: void_\n_returns_description: _\n_parameters: int drawMode, int amt, int primCount_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawInstanced(drawMode, first, total, primCount)\n\n<!--\n_syntax: drawInstanced(drawMode, first, total, primCount)_\n_name: drawInstanced_\n_returns: void_\n_returns_description: _\n_parameters: int drawMode, int first, int total, int primCount_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void enableColors()\n\n<!--\n_syntax: enableColors()_\n_name: enableColors_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void enableIndices()\n\n<!--\n_syntax: enableIndices()_\n_name: enableIndices_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void enableNormals()\n\n<!--\n_syntax: enableNormals()_\n_name: enableNormals_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void enableTexCoords()\n\n<!--\n_syntax: enableTexCoords()_\n_name: enableTexCoords_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofBufferObject & getAttributeBuffer(location)\n\n<!--\n_syntax: getAttributeBuffer(location)_\n_name: getAttributeBuffer_\n_returns: ofBufferObject &_\n_returns_description: _\n_parameters: int location_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofBufferObject & getAttributeBuffer(location)\n\n<!--\n_syntax: getAttributeBuffer(location)_\n_name: getAttributeBuffer_\n_returns: const ofBufferObject &_\n_returns_description: _\n_parameters: int location_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###GLuint getAttributeId(AttrPos_)\n\n<!--\n_syntax: getAttributeId(AttrPos_)_\n_name: getAttributeId_\n_returns: GLuint_\n_returns_description: _\n_parameters: int AttrPos__\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nreturns OpenGL memory object id for GL buffer holding attribute data\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofBufferObject & getColorBuffer()\n\n<!--\n_syntax: getColorBuffer()_\n_name: getColorBuffer_\n_returns: ofBufferObject &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofBufferObject & getColorBuffer()\n\n<!--\n_syntax: getColorBuffer()_\n_name: getColorBuffer_\n_returns: const ofBufferObject &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###GLuint getColorId()\n\n<!--\n_syntax: getColorId()_\n_name: getColorId_\n_returns: GLuint_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofBufferObject & getIndexBuffer()\n\n<!--\n_syntax: getIndexBuffer()_\n_name: getIndexBuffer_\n_returns: ofBufferObject &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofBufferObject & getIndexBuffer()\n\n<!--\n_syntax: getIndexBuffer()_\n_name: getIndexBuffer_\n_returns: const ofBufferObject &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###GLuint getIndexId()\n\n<!--\n_syntax: getIndexId()_\n_name: getIndexId_\n_returns: GLuint_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool getIsAllocated()\n\n<!--\n_syntax: getIsAllocated()_\n_name: getIsAllocated_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns whether the ofVbo has been allocated or not. This is important to check before you start drawing or manipulating the vbo.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofBufferObject & getNormalBuffer()\n\n<!--\n_syntax: getNormalBuffer()_\n_name: getNormalBuffer_\n_returns: ofBufferObject &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofBufferObject & getNormalBuffer()\n\n<!--\n_syntax: getNormalBuffer()_\n_name: getNormalBuffer_\n_returns: const ofBufferObject &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###GLuint getNormalId()\n\n<!--\n_syntax: getNormalId()_\n_name: getNormalId_\n_returns: GLuint_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getNumIndices()\n\n<!--\n_syntax: getNumIndices()_\n_name: getNumIndices_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getNumVertices()\n\n<!--\n_syntax: getNumVertices()_\n_name: getNumVertices_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVbo::VertexAttribute & getOrCreateAttr(location)\n\n<!--\n_syntax: getOrCreateAttr(location)_\n_name: getOrCreateAttr_\n_returns: ofVbo::VertexAttribute &_\n_returns_description: _\n_parameters: int location_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofBufferObject & getTexCoordBuffer()\n\n<!--\n_syntax: getTexCoordBuffer()_\n_name: getTexCoordBuffer_\n_returns: ofBufferObject &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofBufferObject & getTexCoordBuffer()\n\n<!--\n_syntax: getTexCoordBuffer()_\n_name: getTexCoordBuffer_\n_returns: const ofBufferObject &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###GLuint getTexCoordId()\n\n<!--\n_syntax: getTexCoordId()_\n_name: getTexCoordId_\n_returns: GLuint_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool getUsingColors()\n\n<!--\n_syntax: getUsingColors()_\n_name: getUsingColors_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns whether the vertices within the VBO have colors associated with them or not.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool getUsingIndices()\n\n<!--\n_syntax: getUsingIndices()_\n_name: getUsingIndices_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns whether the VBO has assigned indices or not.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool getUsingNormals()\n\n<!--\n_syntax: getUsingNormals()_\n_name: getUsingNormals_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns whether the surfaces of the VBO have normals associated with them or not.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool getUsingTexCoords()\n\n<!--\n_syntax: getUsingTexCoords()_\n_name: getUsingTexCoords_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns whether the vertices of the VBO have texture coordinates associated with them or not.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool getUsingVerts()\n\n<!--\n_syntax: getUsingVerts()_\n_name: getUsingVerts_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns whether the ofVbo is using vertices or not. A VBO can exist without vertices, though it's quite unusual.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###GLuint getVaoId()\n\n<!--\n_syntax: getVaoId()_\n_name: getVaoId_\n_returns: GLuint_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###GLuint getVertId()\n\n<!--\n_syntax: getVertId()_\n_name: getVertId_\n_returns: GLuint_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofBufferObject & getVertexBuffer()\n\n<!--\n_syntax: getVertexBuffer()_\n_name: getVertexBuffer_\n_returns: ofBufferObject &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofBufferObject & getVertexBuffer()\n\n<!--\n_syntax: getVertexBuffer()_\n_name: getVertexBuffer_\n_returns: const ofBufferObject &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool hasAttribute(attributePos_)\n\n<!--\n_syntax: hasAttribute(attributePos_)_\n_name: hasAttribute_\n_returns: bool_\n_returns_description: _\n_parameters: int attributePos__\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVbo(&mom)\n\n<!--\n_syntax: ofVbo(&mom)_\n_name: ofVbo_\n_returns: _\n_returns_description: _\n_parameters: const ofVbo &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis is the copy constructor, so that you can do the following:\n\n~~~~{.cpp}\nofVbo v1;\n// filll v1;\nofVbo v2(v1); // v2 now contains all of v1s properties in a separate VBO\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVbo()\n\n<!--\n_syntax: ofVbo()_\n_name: ofVbo_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSimple constructor for the ofVbo. When the ofVbo is first created there are no vertices or normals within it.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVbo & operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: ofVbo &_\n_returns_description: _\n_parameters: const ofVbo &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis is the equals operator, so that you can do the following:\n\n~~~~{.cpp}\nofVbo v1;\n// filll v1;\nofVbo v2 = v1; // v2 now contains all of v1s properties in a separate VBO\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setAttributeBuffer(location, &buffer, numCoords, stride, offset = 0)\n\n<!--\n_syntax: setAttributeBuffer(location, &buffer, numCoords, stride, offset = 0)_\n_name: setAttributeBuffer_\n_returns: void_\n_returns_description: _\n_parameters: int location, ofBufferObject &buffer, int numCoords, int stride, int offset=0_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setAttributeData(location, *vert0x, numCoords, total, usage, stride = 0)\n\n<!--\n_syntax: setAttributeData(location, *vert0x, numCoords, total, usage, stride = 0)_\n_name: setAttributeData_\n_returns: void_\n_returns_description: _\n_parameters: int location, const float *vert0x, int numCoords, int total, int usage, int stride=0_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setAttributeDivisor(location, divisor)\n\n<!--\n_syntax: setAttributeDivisor(location, divisor)_\n_name: setAttributeDivisor_\n_returns: void_\n_returns_description: _\n_parameters: int location, int divisor_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nused to send an attribute per instance(s) instead of per vertex.\nwill send per vertex if set to 0 or to the number of instances if >0\n\nsee textureBufferInstancedExample\nand https://www.opengl.org/sdk/docs/man4/html/glVertexAttribDivisor.xhtml\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setColorBuffer(&buffer, stride, offset = 0)\n\n<!--\n_syntax: setColorBuffer(&buffer, stride, offset = 0)_\n_name: setColorBuffer_\n_returns: void_\n_returns_description: _\n_parameters: ofBufferObject &buffer, int stride, int offset=0_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setColorData(*color0r, total, usage, stride = 0)\n\n<!--\n_syntax: setColorData(*color0r, total, usage, stride = 0)_\n_name: setColorData_\n_returns: void_\n_returns_description: _\n_parameters: const float *color0r, int total, int usage, int stride=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis sets the color data for the ofVbo from a pointer to an array of floats. The colors are RGB and are floats from 0.f - 1.f\n\nThe possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setColorData(*colors, total, usage)\n\n<!--\n_syntax: setColorData(*colors, total, usage)_\n_name: setColorData_\n_returns: void_\n_returns_description: _\n_parameters: const ofFloatColor *colors, int total, int usage_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis allows you to set the colors for a vertex using an array of ofFloatColor instances.\n\n~~~~{.cpp}\nofFloatColor c[12];\n// fill in the colors and vertices\nvbo.setColorData( &c[0], 12, GL_STATIC_DRAW );\n~~~~\n\nThe possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setIndexBuffer(&buffer)\n\n<!--\n_syntax: setIndexBuffer(&buffer)_\n_name: setIndexBuffer_\n_returns: void_\n_returns_description: _\n_parameters: ofBufferObject &buffer_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setIndexData(*indices, total, usage)\n\n<!--\n_syntax: setIndexData(*indices, total, usage)_\n_name: setIndexData_\n_returns: void_\n_returns_description: _\n_parameters: const ofIndexType *indices, int total, int usage_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis sets the index data for the VBO from a pointer to an array of ints. Each int represents the index of a vertex, and when the vbo is drawn the indices are used to generate the geometry from the indices.\n\nThe possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setMesh(&mesh, usage)\n\n<!--\n_syntax: setMesh(&mesh, usage)_\n_name: setMesh_\n_returns: void_\n_returns_description: _\n_parameters: const ofMesh &mesh, int usage_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis allows you to pass a mesh to the ofVbo and populate the vertices, texture coordinates, and other properties of the VBO from the ofMesh instance. You can think of this as essentially moving geometry data from the CPU to the GPU.\n\n~~~~{.cpp}\nofxAssimpModelLoader model;\nmodel.loadModel(\"astroBoy_walk.dae\",true);\nofMesh mesh = model.getMesh(0);\nofVbo vbo;\nvbo.setMesh(mesh, GL_STATIC_DRAW);\n~~~~\n\nThe possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setMesh(&mesh, usage, useColors, useTextures, useNormals)\n\n<!--\n_syntax: setMesh(&mesh, usage, useColors, useTextures, useNormals)_\n_name: setMesh_\n_returns: void_\n_returns_description: _\n_parameters: const ofMesh &mesh, int usage, bool useColors, bool useTextures, bool useNormals_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setNormalBuffer(&buffer, stride, offset = 0)\n\n<!--\n_syntax: setNormalBuffer(&buffer, stride, offset = 0)_\n_name: setNormalBuffer_\n_returns: void_\n_returns_description: _\n_parameters: ofBufferObject &buffer, int stride, int offset=0_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setNormalData(*normal0x, total, usage, stride = 0)\n\n<!--\n_syntax: setNormalData(*normal0x, total, usage, stride = 0)_\n_name: setNormalData_\n_returns: void_\n_returns_description: _\n_parameters: const float *normal0x, int total, int usage, int stride=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis sets the normals data for the ofVbo from a pointer to an array of floats, x,y,z, for each face, so a 3D cube would require an array of 18 floats, 3 for each face.\n\nThe possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setNormalData(*normals, total, usage)\n\n<!--\n_syntax: setNormalData(*normals, total, usage)_\n_name: setNormalData_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 *normals, int total, int usage_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setNormalData(*normals, total, usage)\n\n<!--\n_syntax: setNormalData(*normals, total, usage)_\n_name: setNormalData_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f *normals, int total, int usage_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis sets the normal data for the VBO from a pointer to an array of ofVec3f instances. The normals are calculated as the vector perpendicular to a face. The mathematical definition of a normal is shown on the left, while the way that a normal is calculated for a triangle is shown on the right.\n\n![vbo normals](vboNormals.png)\n\nOne technique for calculating normals is something like the following:\n\n~~~~{.cpp}\nint* indices;\nofVec3f* verts;\nofVec3f* normals;\n// allocate and create normals, indices, and verts\nfor ( int i = 0, int j = 0; i < NUM_INDICES; i+=3, j++) {\n    ofVec3f v[3] = { vertices[i], verts[(i+1)], verts[(i+2)] };\n    ofVec3f temp1 = v[1] - v[0];\n    ofVec3f temp2 = v[2] - v[0];\n    ofVec3f norm = temp1.getCrossed(temp2);\n\n      for (int j = 0; j < 3; ++j) {\n        Vector3 a = v[(i+1) % 3] - v[j];\n        Vector3 b = v[(j+2) % 3] - v[j];\n        float weight = acos(a.dot(b) / (a.length() * b.length()));\n        norm += weight * normal;\n    }\n\n    normals[j] = norm;\n}\n~~~~\n\nThe possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setTexCoordBuffer(&buffer, stride, offset = 0)\n\n<!--\n_syntax: setTexCoordBuffer(&buffer, stride, offset = 0)_\n_name: setTexCoordBuffer_\n_returns: void_\n_returns_description: _\n_parameters: ofBufferObject &buffer, int stride, int offset=0_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setTexCoordData(*texCoord0x, total, usage, stride = 0)\n\n<!--\n_syntax: setTexCoordData(*texCoord0x, total, usage, stride = 0)_\n_name: setTexCoordData_\n_returns: void_\n_returns_description: _\n_parameters: const float *texCoord0x, int total, int usage, int stride=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis sets the texCoord data for the ofVbo from a pointer to an array of floats, ST, for each face, so a 3D cube would require an array of 16 floats, 2 for each vertex.\n\nThe possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setTexCoordData(*texCoords, total, usage)\n\n<!--\n_syntax: setTexCoordData(*texCoords, total, usage)_\n_name: setTexCoordData_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 *texCoords, int total, int usage_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setTexCoordData(*texCoords, total, usage)\n\n<!--\n_syntax: setTexCoordData(*texCoords, total, usage)_\n_name: setTexCoordData_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec2f *texCoords, int total, int usage_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis sets the texture coordinate data for the VBO from a pointer to an array of ofVec2f instances. Each ofVec2f represents the texture coordinate of a vertex. By default OF uses ARB coords, so you can use pixel coordinates rather than normalized UV coordinates.\n\nThe possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setVertexBuffer(&buffer, numCoords, stride, offset = 0)\n\n<!--\n_syntax: setVertexBuffer(&buffer, numCoords, stride, offset = 0)_\n_name: setVertexBuffer_\n_returns: void_\n_returns_description: _\n_parameters: ofBufferObject &buffer, int numCoords, int stride, int offset=0_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setVertexData(*vert0x, numCoords, total, usage, stride = 0)\n\n<!--\n_syntax: setVertexData(*vert0x, numCoords, total, usage, stride = 0)_\n_name: setVertexData_\n_returns: void_\n_returns_description: _\n_parameters: const float *vert0x, int numCoords, int total, int usage, int stride=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis sets the vertex data for the ofVbo from a pointer to an array of floats. The numCoords determines whether you're creating a 3D or 2D vbo, i.e. a 3D cube would require an array of 24 floats, and numCoords to be 8.\n\nThe possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setVertexData(*verts, total, usage)\n\n<!--\n_syntax: setVertexData(*verts, total, usage)_\n_name: setVertexData_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 *verts, int total, int usage_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setVertexData(*verts, total, usage)\n\n<!--\n_syntax: setVertexData(*verts, total, usage)_\n_name: setVertexData_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 *verts, int total, int usage_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setVertexData(*verts, total, usage)\n\n<!--\n_syntax: setVertexData(*verts, total, usage)_\n_name: setVertexData_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f *verts, int total, int usage_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis sets the vertex data for the ofVbo from a pointer to an array of ofVec3f instances. This creates a 3D vbo.\n\nThe possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setVertexData(*verts, total, usage)\n\n<!--\n_syntax: setVertexData(*verts, total, usage)_\n_name: setVertexData_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec2f *verts, int total, int usage_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis sets the vertex data for the ofVbo from a pointer to an array of ofVec2f instances. This creates a 2D vbo.\n\nThe possible options for usage are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void unbind()\n\n<!--\n_syntax: unbind()_\n_name: unbind_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis is for advanced users who might want to use ways of drawing other than draw() or drawElements(), it simply unbinds all the arrays for the VBO.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void updateAttributeData(location, *vert0x, total)\n\n<!--\n_syntax: updateAttributeData(location, *vert0x, total)_\n_name: updateAttributeData_\n_returns: void_\n_returns_description: _\n_parameters: int location, const float *vert0x, int total_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void updateColorData(*color0r, total)\n\n<!--\n_syntax: updateColorData(*color0r, total)_\n_name: updateColorData_\n_returns: void_\n_returns_description: _\n_parameters: const float *color0r, int total_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nIf the vertex colors of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the colors at any time using an array of floats.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void updateColorData(*colors, total)\n\n<!--\n_syntax: updateColorData(*colors, total)_\n_name: updateColorData_\n_returns: void_\n_returns_description: _\n_parameters: const ofFloatColor *colors, int total_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nIf the color data for each vertex of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the vertex colors at any time.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void updateIndexData(*indices, total)\n\n<!--\n_syntax: updateIndexData(*indices, total)_\n_name: updateIndexData_\n_returns: void_\n_returns_description: _\n_parameters: const ofIndexType *indices, int total_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nIf the indices of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the indices at any time.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void updateMesh(&mesh)\n\n<!--\n_syntax: updateMesh(&mesh)_\n_name: updateMesh_\n_returns: void_\n_returns_description: _\n_parameters: const ofMesh &mesh_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nUpdates all the data within the VBO from the data in the ofMesh.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void updateNormalData(*normal0x, total)\n\n<!--\n_syntax: updateNormalData(*normal0x, total)_\n_name: updateNormalData_\n_returns: void_\n_returns_description: _\n_parameters: const float *normal0x, int total_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nIf the normals of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the normal data at any time using an array of floats.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void updateNormalData(*normals, total)\n\n<!--\n_syntax: updateNormalData(*normals, total)_\n_name: updateNormalData_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 *normals, int total_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void updateNormalData(*normals, total)\n\n<!--\n_syntax: updateNormalData(*normals, total)_\n_name: updateNormalData_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f *normals, int total_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nIf the normals of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the normals at any time.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void updateTexCoordData(*texCoord0x, total)\n\n<!--\n_syntax: updateTexCoordData(*texCoord0x, total)_\n_name: updateTexCoordData_\n_returns: void_\n_returns_description: _\n_parameters: const float *texCoord0x, int total_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nIf the texture coords of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the tex coords at any time using an array of floats.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void updateTexCoordData(*texCoords, total)\n\n<!--\n_syntax: updateTexCoordData(*texCoords, total)_\n_name: updateTexCoordData_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 *texCoords, int total_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void updateTexCoordData(*texCoords, total)\n\n<!--\n_syntax: updateTexCoordData(*texCoords, total)_\n_name: updateTexCoordData_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec2f *texCoords, int total_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nIf the texture coordinates of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the texcoords at any time.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void updateVertexData(*ver0x, total)\n\n<!--\n_syntax: updateVertexData(*ver0x, total)_\n_name: updateVertexData_\n_returns: void_\n_returns_description: _\n_parameters: const float *ver0x, int total_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nIf the vertices of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the indices at any time using an array of floats.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void updateVertexData(*verts, total)\n\n<!--\n_syntax: updateVertexData(*verts, total)_\n_name: updateVertexData_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 *verts, int total_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void updateVertexData(*verts, total)\n\n<!--\n_syntax: updateVertexData(*verts, total)_\n_name: updateVertexData_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 *verts, int total_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void updateVertexData(*verts, total)\n\n<!--\n_syntax: updateVertexData(*verts, total)_\n_name: updateVertexData_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f *verts, int total_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nIf the vertices of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the vertices at any time.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void updateVertexData(*verts, total)\n\n<!--\n_syntax: updateVertexData(*verts, total)_\n_name: updateVertexData_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec2f *verts, int total_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nIf the vertices of the VBO have been declared as GL_DYNAMIC_DRAW, then you can update the vertices at any time.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofVbo()\n\n<!--\n_syntax: ~ofVbo()_\n_name: ~ofVbo_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis is the destructor for the ofVbo, it clears all the vertices, texture coordinates, and normals from the graphics card.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###bool bUsingColors\n\n<!--\n_name: bUsingColors_\n_type: bool_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bUsingIndices\n\n<!--\n_name: bUsingIndices_\n_type: bool_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bUsingNormals\n\n<!--\n_name: bUsingNormals_\n_type: bool_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bUsingTexCoords\n\n<!--\n_name: bUsingTexCoords_\n_type: bool_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bUsingVerts\n\n<!--\n_name: bUsingVerts_\n_type: bool_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVbo::VertexAttribute colorAttribute\n\n<!--\n_name: colorAttribute_\n_type: ofVbo::VertexAttribute_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###map< int, ofVbo::VertexAttribute > customAttributes\n\n<!--\n_name: customAttributes_\n_type: map< int, ofVbo::VertexAttribute >_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVbo::IndexAttribute indexAttribute\n\n<!--\n_name: indexAttribute_\n_type: ofVbo::IndexAttribute_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVbo::VertexAttribute normalAttribute\n\n<!--\n_name: normalAttribute_\n_type: ofVbo::VertexAttribute_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVbo::VertexAttribute positionAttribute\n\n<!--\n_name: positionAttribute_\n_type: ofVbo::VertexAttribute_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVbo::VertexAttribute texCoordAttribute\n\n<!--\n_name: texCoordAttribute_\n_type: ofVbo::VertexAttribute_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int totalIndices\n\n<!--\n_name: totalIndices_\n_type: int_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int totalVerts\n\n<!--\n_name: totalVerts_\n_type: int_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool vaoChanged\n\n<!--\n_name: vaoChanged_\n_type: bool_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool vaoChecked\n\n<!--\n_name: vaoChecked_\n_type: bool_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###GLuint vaoID\n\n<!--\n_name: vaoID_\n_type: GLuint_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool vaoSupported\n\n<!--\n_name: vaoSupported_\n_type: bool_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}