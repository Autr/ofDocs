{"entry":{"name":"ofAppRunner_functions","filename":"ofAppRunner_functions.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/application/ofAppRunner_functions.markdown","path":"/documentation/application/ofAppRunner_functions","route":"/documentation/application/ofAppRunner_functions.markdown","dir":"../ofSite/documentation/application","ext":"markdown","type":"page","id":192,"parent":180,"breadcrumbs":[180,1],"siblings":[],"translations":{}},"description":{},"methods":[null,{"syntax":"noopDeleter(*)","name":"noopDeleter","returns":"void","returns_description":null,"parameters":"Window <span class=\"token operator\">*</span>","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"short":"","desc":"<p>Creates a new app window and returns it as a shared_ptr. You can change the window's settings, like its size, position, decoration, and resizability in its ofWindowSettings.</p>\n<p>To share assets between multiple windows, such as for drawing any ofBaseHasPixels object, you have to share contexts. This can be done by pointing a window to the shareContextWith field in another window's settings, as in the multiWindowOneAppExample.</p>\n"},{"syntax":"ofDisableSetupScreen()","name":"ofDisableSetupScreen","returns":"void","returns_description":null,"parameters":null,"version_started":"0.06","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"","desc":"<p>Every update/draw cycle, the function ofSetupScreen is called. That function sets the perspective, coordinate system, and some other openGL parameters. If you need to use your own parameters, the call to that function can be disabled with ofDisableSetupScreen.</p>\n"},{"syntax":"ofDoesHWOrientation()","name":"ofDoesHWOrientation","returns":"bool","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This returns whether your current device does hardware orientation. An iPhone, for instance, does hardware orientation, which you might notice when you tilt your iPhone to the side, hence ofDoesHWOrientation() would return true. Tilting your laptop to the side does not do the same thing, hence ofDoesHWOrientation() would return false.</p>\n"},{"syntax":"ofEnableSetupScreen()","name":"ofEnableSetupScreen","returns":"void","returns_description":null,"parameters":null,"version_started":"0.06","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"","desc":"<p>Re-enables the call to ofSetupScreen after being disabled with ofDisableSetupScreen</p>\n"},{"syntax":"ofEvents()","name":"ofEvents","returns":"ofCoreEvents &","returns_description":null,"parameters":null,"version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofExit(status = 0)","name":"ofExit","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> status<span class=\"token operator\">=</span><span class=\"token number\">0</span>","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This exits your app, causing it to quit.</p>\n"},{"syntax":"ofGetAppPtr()","name":"ofGetAppPtr","returns":"ofBaseApp *","returns_description":null,"parameters":null,"version_started":"0.061","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Useful to access the variables in the main app from other classes. The pointer returned by this function has to be cast from an ofBaseApp pointer, to a pointer to your inherited class, before being used.\nie:</p>\n<pre><code>\n<span class=\"token comment\" spellcheck=\"true\">//ofApp.h</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofApp</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofBaseApp<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n    <span class=\"token keyword\">int</span> someVar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//myClass.cpp</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> myClass.h</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> &amp;quot;ofApp.h&amp;quot; </span><span class=\"token comment\" spellcheck=\"true\">// don't forget to add this line!</span>\n\n<span class=\"token keyword\">void</span> myClass<span class=\"token operator\">::</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>Value from main app<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofApp<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">ofGetAppPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span></code></pre>\n"},{"syntax":"ofGetClipboardString()","name":"ofGetClipboardString","returns":"string","returns_description":null,"parameters":null,"version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"short":"","desc":""},{"short":"","desc":""},{"syntax":"ofGetFixedStepForFps(fps)","name":"ofGetFixedStepForFps","returns":"uint64_t","returns_description":null,"parameters":"<span class=\"token keyword\">double</span> fps","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofGetFrameNum()","name":"ofGetFrameNum","returns":"uint64_t","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the number of frames rendered since the program started.</p>\n<p><strong>Returns</strong>: the number of frames rendered since the program started.</p>\n","desc":"<p>This returns the current frame as an int, counting up to (depending on your system) 2147483647 before rolling over back to 0. Don't worry though, at 60 frames a second you have 68 years until it rolls over though.</p>\n"},{"syntax":"ofGetFrameRate()","name":"ofGetFrameRate","returns":"float","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>note: this code is implemented inside the ofAppRunner.</p>\n"},{"syntax":"ofGetGLXContext()","name":"ofGetGLXContext","returns":"GLXContext","returns_description":null,"parameters":null,"version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofGetHeight()","name":"ofGetHeight","returns":"int","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This gets the height of your ofApp window. Useful for finding the middle of the screen like so: ofVec2f middle(ofGetWidth()/2, ofGetHeight()/2)</p>\n"},{"syntax":"ofGetLastFrameTime()","name":"ofGetLastFrameTime","returns":"double","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"short":"","desc":""},{"syntax":"ofGetOrientation()","name":"ofGetOrientation","returns":"ofOrientation","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofGetScreenHeight()","name":"ofGetScreenHeight","returns":"int","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>note: this code is implemented inside the ofAppRunner</p>\n"},{"syntax":"ofGetScreenWidth()","name":"ofGetScreenWidth","returns":"int","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>note: this code is implemented inside the ofAppRunner</p>\n"},{"syntax":"ofGetTargetFrameRate()","name":"ofGetTargetFrameRate","returns":"float","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofGetWidth()","name":"ofGetWidth","returns":"int","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This gets the width of your ofApp window. Useful for finding the middle of the screen like so: ofVec2f middle(ofGetWidth()/2, ofGetHeight()/2)</p>\n"},{"syntax":"ofGetWindowHeight()","name":"ofGetWindowHeight","returns":"int","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofGetWindowMode()","name":"ofGetWindowMode","returns":"int","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>eg:</p>\n<pre><code><span class=\"token keyword\">int</span> mode <span class=\"token operator\">=</span> <span class=\"token function\">ofGetWindowMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mode <span class=\"token operator\">==</span> OF_WINDOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tcout <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>mode is<span class=\"token operator\">:</span> window mode <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mode <span class=\"token operator\">==</span> OF_FULLSCREEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tcout <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>mode is<span class=\"token operator\">:</span> fullscreen mode<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mode <span class=\"token operator\">==</span> OF_GAME_MODE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tcout <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>mode is<span class=\"token operator\">:</span> game mode<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> endl<span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>note: this code is implemented inside the ofAppRunner</p>\n"},{"syntax":"ofGetWindowPositionX()","name":"ofGetWindowPositionX","returns":"int","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This is the x position of your window inside your screen. How exactly this is returned is dependent on your operating system but it's pretty consistent across platforms.\nnote: this code is implemented inside the ofAppRunner</p>\n"},{"syntax":"ofGetWindowPositionY()","name":"ofGetWindowPositionY","returns":"int","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This is the y position of your window inside your screen. How exactly this is returned is dependent on your operating system but it's pretty consistent across platforms.\nnote: this code is implemented inside the ofAppRunner</p>\n"},{"syntax":"ofGetWindowPtr()","name":"ofGetWindowPtr","returns":"ofAppBaseWindow *","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofGetWindowRect()","name":"ofGetWindowRect","returns":"ofRectangle","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofGetWindowSize()","name":"ofGetWindowSize","returns":"glm::vec2","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This is the size of your window as it's drawn on your screen. How exactly this is returned is dependent on your operating system but it's pretty consistent across platforms.</p>\n"},{"syntax":"ofGetWindowWidth()","name":"ofGetWindowWidth","returns":"int","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofGetX11Display()","name":"ofGetX11Display","returns":"Display *","returns_description":null,"parameters":null,"version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofGetX11Window()","name":"ofGetX11Window","returns":"Window","returns_description":null,"parameters":null,"version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofHideCursor()","name":"ofHideCursor","returns":"void","returns_description":null,"parameters":null,"version_started":"0.01","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This hides the mouse cursor, useful if you're doing a clever app that has no need for mouse interaction, evil if you are.\nnote: this code is implemented inside the ofAppRunner.</p>\n"},{"syntax":"ofInit()","name":"ofInit","returns":"void","returns_description":null,"parameters":null,"version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofRandomHeight()","name":"ofRandomHeight","returns":"float","returns_description":null,"parameters":null,"version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: a random number between 0 and the height of the window.</p>\n","desc":""},{"syntax":"ofRandomWidth()","name":"ofRandomWidth","returns":"float","returns_description":null,"parameters":null,"version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: a random number between 0 and the width of the window.</p>\n","desc":""},{"syntax":"ofRunApp(*OFSA)","name":"ofRunApp","returns":"int","returns_description":null,"parameters":"ofBaseApp <span class=\"token operator\">*</span>OFSA","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"short":"","desc":""},{"short":"","desc":"<p>Begins the openGL cycle of the application. It's only called once from main function in main.cpp after setting the window with ofSetupOpenGL.\nFrom 0.06 the app is deleted on exit, so you need to call this function as shown in syntax:</p>\n<pre><code><span class=\"token function\">ofRunApp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"syntax":"ofRunMainLoop()","name":"ofRunMainLoop","returns":"int","returns_description":null,"parameters":null,"version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofSetClipboardString(&str)","name":"ofSetClipboardString","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>str","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"short":"","desc":""},{"syntax":"ofSetEscapeQuitsApp(bQuitOnEsc)","name":"ofSetEscapeQuitsApp","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> bQuitOnEsc","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofSetFrameRate(targetRate)","name":"ofSetFrameRate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> targetRate","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Attempts to set the frame rate to a given target by sleeping a certain amount per frame. The results of this may vary based if vertical sync is enabled or disabled (either at the card level or via code), because this locks the drawing to intervals where the screen refreshes.</p>\n"},{"syntax":"ofSetFullscreen(bFullscreen)","name":"ofSetFullscreen","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> fullscreen","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Change the app window mode to fullscreen or window depending on the boolean parameter.\nEnables or disables fullscreen mode for your app's window.\nnote: this code is implemented inside the ofAppRunner.</p>\n"},{"short":"","desc":""},{"syntax":"ofSetOrientation(orientation, vFlip = true)","name":"ofSetOrientation","returns":"void","returns_description":null,"parameters":"ofOrientation orientation<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vFlip<span class=\"token operator\">=</span><span class=\"token boolean\">true</span>","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofSetTimeModeFiltered(alpha)","name":"ofSetTimeModeFiltered","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> alpha","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofSetTimeModeFixedRate(stepNanos)","name":"ofSetTimeModeFixedRate","returns":"void","returns_description":null,"parameters":"uint64_t stepNanos","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofSetTimeModeSystem()","name":"ofSetTimeModeSystem","returns":"void","returns_description":null,"parameters":null,"version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofSetVerticalSync(bSync)","name":"ofSetVerticalSync","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> bSync","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Synchronizes the redraw of the screen to the vertical refresh rate of the screen. The monitor or projector redraws the screen at usually 60 frames per second. If vertical sync is not enabled your application runs as fast as possible and the screen can be drawing half of one frame and half of the previous frame, creating an effect called <a href=\"https://en.wikipedia.org/wiki/Screen_tearing\">tearing</a>.</p>\n<p>Vertical sync is enabled by default since 0.8.0. You can disable it calling ofSetVerticalSync(false).</p>\n"},{"syntax":"ofSetWindowPosition(x, y)","name":"ofSetWindowPosition","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Moves the app window to the x and y coordinates specified. For example: coordinates of (0,0) would set the top-left corner of your app window to the top-left corner of the screen.\nnote: this code is implemented inside the ofAppRunner</p>\n"},{"syntax":"ofSetWindowShape(width, height)","name":"ofSetWindowShape","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> height","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Sets the dimension of your app's window.\nnote: this code is implemented inside the ofAppRunner</p>\n"},{"syntax":"ofSetWindowTitle(title)","name":"ofSetWindowTitle","returns":"void","returns_description":null,"parameters":"string title","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofSetupOpenGL(*windowPtr, w, h, screenMode)","name":"ofSetupOpenGL","returns":"void","returns_description":null,"parameters":"Window <span class=\"token operator\">*</span>windowPtr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span> ofWindowMode screenMode","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"","desc":""},{"syntax":"ofSetupOpenGL(w, h, screenMode)","name":"ofSetupOpenGL","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span> ofWindowMode screenMode","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"short":"","desc":"<p>Sets up the window aspect and mode. This function should be called only from the main function in main.cpp.\nw and h are the width and height of the window.\nscreenMode can be one of:</p>\n<ul>\n<li>OF_WINDOW: normal window</li>\n<li>OF_FULLSCREEN: fullscreen, the size of the app will be that of the current screen resolution. The w and h parameters will be ignored.</li>\n</ul>\n"},{"short":"","desc":""},{"syntax":"ofShowCursor()","name":"ofShowCursor","returns":"void","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Shows the mouse cursor again when it's been hidden with ofHideCursor\nmakes the cursor visible.\nnote: this code is implemented inside the ofAppRunner</p>\n"},{"syntax":"ofToggleFullscreen()","name":"ofToggleFullscreen","returns":"void","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#functions</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>##Description</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void noopDeleter(*)</p>\n<p>&lt;!--\n<em>syntax: noopDeleter(*)</em>\n<em>name: noopDeleter</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: Window *</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###shared_ptr&lt; ofAppBaseWindow &gt; ofCreateWindow(&amp;settings)</p>\n<p>&lt;!--\n<em>syntax: ofCreateWindow(&amp;settings)</em>\n<em>name: ofCreateWindow</em>\n<em>returns: shared_ptr&lt; ofAppBaseWindow &gt;</em>\n_returns_description: _\n<em>parameters: const ofWindowSettings &amp;settings</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Creates a new app window and returns it as a shared_ptr. You can change the window's settings, like its size, position, decoration, and resizability in its ofWindowSettings.</p>\n<p>To share assets between multiple windows, such as for drawing any ofBaseHasPixels object, you have to share contexts. This can be done by pointing a window to the shareContextWith field in another window's settings, as in the multiWindowOneAppExample.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofDisableSetupScreen()</p>\n<p>&lt;!--\n<em>syntax: ofDisableSetupScreen()</em>\n<em>name: ofDisableSetupScreen</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 0.06</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Every update/draw cycle, the function ofSetupScreen is called. That function sets the perspective, coordinate system, and some other openGL parameters. If you need to use your own parameters, the call to that function can be disabled with ofDisableSetupScreen.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool ofDoesHWOrientation()</p>\n<p>&lt;!--\n<em>syntax: ofDoesHWOrientation()</em>\n<em>name: ofDoesHWOrientation</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This returns whether your current device does hardware orientation. An iPhone, for instance, does hardware orientation, which you might notice when you tilt your iPhone to the side, hence ofDoesHWOrientation() would return true. Tilting your laptop to the side does not do the same thing, hence ofDoesHWOrientation() would return false.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofEnableSetupScreen()</p>\n<p>&lt;!--\n<em>syntax: ofEnableSetupScreen()</em>\n<em>name: ofEnableSetupScreen</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 0.06</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Re-enables the call to ofSetupScreen after being disabled with ofDisableSetupScreen</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofCoreEvents &amp; ofEvents()</p>\n<p>&lt;!--\n<em>syntax: ofEvents()</em>\n<em>name: ofEvents</em>\n<em>returns: ofCoreEvents &amp;</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofExit(status = 0)</p>\n<p>&lt;!--\n<em>syntax: ofExit(status = 0)</em>\n<em>name: ofExit</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int status=0</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This exits your app, causing it to quit.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofBaseApp * ofGetAppPtr()</p>\n<p>&lt;!--\n<em>syntax: ofGetAppPtr()</em>\n<em>name: ofGetAppPtr</em>\n<em>returns: ofBaseApp *</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 0.061</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Useful to access the variables in the main app from other classes. The pointer returned by this function has to be cast from an ofBaseApp pointer, to a pointer to your inherited class, before being used.\nie:</p>\n<pre><code>\n<span class=\"token comment\" spellcheck=\"true\">//ofApp.h</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofApp</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofBaseApp<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n    <span class=\"token keyword\">int</span> someVar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//myClass.cpp</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> myClass.h</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> &amp;quot;ofApp.h&amp;quot; </span><span class=\"token comment\" spellcheck=\"true\">// don't forget to add this line!</span>\n\n<span class=\"token keyword\">void</span> myClass<span class=\"token operator\">::</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>Value from main app<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofApp<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">ofGetAppPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span>someVariable<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string ofGetClipboardString()</p>\n<p>&lt;!--\n<em>syntax: ofGetClipboardString()</em>\n<em>name: ofGetClipboardString</em>\n<em>returns: string</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###shared_ptr&lt; ofBaseRenderer &gt; &amp; ofGetCurrentRenderer()</p>\n<p>&lt;!--\n<em>syntax: ofGetCurrentRenderer()</em>\n<em>name: ofGetCurrentRenderer</em>\n<em>returns: shared_ptr&lt; ofBaseRenderer &gt; &amp;</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###shared_ptr&lt; ofAppBaseWindow &gt; ofGetCurrentWindow()</p>\n<p>&lt;!--\n<em>syntax: ofGetCurrentWindow()</em>\n<em>name: ofGetCurrentWindow</em>\n<em>returns: shared_ptr&lt; ofAppBaseWindow &gt;</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###uint64_t ofGetFixedStepForFps(fps)</p>\n<p>&lt;!--\n<em>syntax: ofGetFixedStepForFps(fps)</em>\n<em>name: ofGetFixedStepForFps</em>\n<em>returns: uint64_t</em>\n_returns_description: _\n<em>parameters: double fps</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###uint64_t ofGetFrameNum()</p>\n<p>&lt;!--\n<em>syntax: ofGetFrameNum()</em>\n<em>name: ofGetFrameNum</em>\n<em>returns: uint64_t</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the number of frames rendered since the program started.</p>\n<p><strong>Returns</strong>: the number of frames rendered since the program started.</p>\n<p>_description: _</p>\n<p>This returns the current frame as an int, counting up to (depending on your system) 2147483647 before rolling over back to 0. Don't worry though, at 60 frames a second you have 68 years until it rolls over though.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float ofGetFrameRate()</p>\n<p>&lt;!--\n<em>syntax: ofGetFrameRate()</em>\n<em>name: ofGetFrameRate</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>note: this code is implemented inside the ofAppRunner.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###GLXContext ofGetGLXContext()</p>\n<p>&lt;!--\n<em>syntax: ofGetGLXContext()</em>\n<em>name: ofGetGLXContext</em>\n<em>returns: GLXContext</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int ofGetHeight()</p>\n<p>&lt;!--\n<em>syntax: ofGetHeight()</em>\n<em>name: ofGetHeight</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This gets the height of your ofApp window. Useful for finding the middle of the screen like so: ofVec2f middle(ofGetWidth()/2, ofGetHeight()/2)</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###double ofGetLastFrameTime()</p>\n<p>&lt;!--\n<em>syntax: ofGetLastFrameTime()</em>\n<em>name: ofGetLastFrameTime</em>\n<em>returns: double</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###shared_ptr&lt; ofMainLoop &gt; ofGetMainLoop()</p>\n<p>&lt;!--\n<em>syntax: ofGetMainLoop()</em>\n<em>name: ofGetMainLoop</em>\n<em>returns: shared_ptr&lt; ofMainLoop &gt;</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofOrientation ofGetOrientation()</p>\n<p>&lt;!--\n<em>syntax: ofGetOrientation()</em>\n<em>name: ofGetOrientation</em>\n<em>returns: ofOrientation</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int ofGetScreenHeight()</p>\n<p>&lt;!--\n<em>syntax: ofGetScreenHeight()</em>\n<em>name: ofGetScreenHeight</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>note: this code is implemented inside the ofAppRunner</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int ofGetScreenWidth()</p>\n<p>&lt;!--\n<em>syntax: ofGetScreenWidth()</em>\n<em>name: ofGetScreenWidth</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>note: this code is implemented inside the ofAppRunner</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float ofGetTargetFrameRate()</p>\n<p>&lt;!--\n<em>syntax: ofGetTargetFrameRate()</em>\n<em>name: ofGetTargetFrameRate</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int ofGetWidth()</p>\n<p>&lt;!--\n<em>syntax: ofGetWidth()</em>\n<em>name: ofGetWidth</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This gets the width of your ofApp window. Useful for finding the middle of the screen like so: ofVec2f middle(ofGetWidth()/2, ofGetHeight()/2)</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int ofGetWindowHeight()</p>\n<p>&lt;!--\n<em>syntax: ofGetWindowHeight()</em>\n<em>name: ofGetWindowHeight</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int ofGetWindowMode()</p>\n<p>&lt;!--\n<em>syntax: ofGetWindowMode()</em>\n<em>name: ofGetWindowMode</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>eg:</p>\n<pre><code><span class=\"token keyword\">int</span> mode <span class=\"token operator\">=</span> <span class=\"token function\">ofGetWindowMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mode <span class=\"token operator\">==</span> OF_WINDOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tcout <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>mode is<span class=\"token operator\">:</span> window mode <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mode <span class=\"token operator\">==</span> OF_FULLSCREEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tcout <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>mode is<span class=\"token operator\">:</span> fullscreen mode<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mode <span class=\"token operator\">==</span> OF_GAME_MODE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tcout <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>mode is<span class=\"token operator\">:</span> game mode<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> endl<span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>note: this code is implemented inside the ofAppRunner</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int ofGetWindowPositionX()</p>\n<p>&lt;!--\n<em>syntax: ofGetWindowPositionX()</em>\n<em>name: ofGetWindowPositionX</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This is the x position of your window inside your screen. How exactly this is returned is dependent on your operating system but it's pretty consistent across platforms.\nnote: this code is implemented inside the ofAppRunner</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int ofGetWindowPositionY()</p>\n<p>&lt;!--\n<em>syntax: ofGetWindowPositionY()</em>\n<em>name: ofGetWindowPositionY</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This is the y position of your window inside your screen. How exactly this is returned is dependent on your operating system but it's pretty consistent across platforms.\nnote: this code is implemented inside the ofAppRunner</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofAppBaseWindow * ofGetWindowPtr()</p>\n<p>&lt;!--\n<em>syntax: ofGetWindowPtr()</em>\n<em>name: ofGetWindowPtr</em>\n<em>returns: ofAppBaseWindow *</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofRectangle ofGetWindowRect()</p>\n<p>&lt;!--\n<em>syntax: ofGetWindowRect()</em>\n<em>name: ofGetWindowRect</em>\n<em>returns: ofRectangle</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec2 ofGetWindowSize()</p>\n<p>&lt;!--\n<em>syntax: ofGetWindowSize()</em>\n<em>name: ofGetWindowSize</em>\n<em>returns: glm::vec2</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This is the size of your window as it's drawn on your screen. How exactly this is returned is dependent on your operating system but it's pretty consistent across platforms.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int ofGetWindowWidth()</p>\n<p>&lt;!--\n<em>syntax: ofGetWindowWidth()</em>\n<em>name: ofGetWindowWidth</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###Display * ofGetX11Display()</p>\n<p>&lt;!--\n<em>syntax: ofGetX11Display()</em>\n<em>name: ofGetX11Display</em>\n<em>returns: Display *</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###Window ofGetX11Window()</p>\n<p>&lt;!--\n<em>syntax: ofGetX11Window()</em>\n<em>name: ofGetX11Window</em>\n<em>returns: Window</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofHideCursor()</p>\n<p>&lt;!--\n<em>syntax: ofHideCursor()</em>\n<em>name: ofHideCursor</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 0.01</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This hides the mouse cursor, useful if you're doing a clever app that has no need for mouse interaction, evil if you are.\nnote: this code is implemented inside the ofAppRunner.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofInit()</p>\n<p>&lt;!--\n<em>syntax: ofInit()</em>\n<em>name: ofInit</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float ofRandomHeight()</p>\n<p>&lt;!--\n<em>syntax: ofRandomHeight()</em>\n<em>name: ofRandomHeight</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: a random number between 0 and the height of the window.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float ofRandomWidth()</p>\n<p>&lt;!--\n<em>syntax: ofRandomWidth()</em>\n<em>name: ofRandomWidth</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: a random number between 0 and the width of the window.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int ofRunApp(*OFSA)</p>\n<p>&lt;!--\n<em>syntax: ofRunApp(*OFSA)</em>\n<em>name: ofRunApp</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: ofBaseApp *OFSA</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int ofRunApp(OFSA)</p>\n<p>&lt;!--\n<em>syntax: ofRunApp(OFSA)</em>\n<em>name: ofRunApp</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: shared_ptr&lt; ofBaseApp &gt; &amp;&amp;OFSA</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofRunApp(window, app)</p>\n<p>&lt;!--\n<em>syntax: ofRunApp(window, app)</em>\n<em>name: ofRunApp</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: shared_ptr&lt; ofAppBaseWindow &gt; window, shared_ptr&lt; ofBaseApp &gt; &amp;&amp;app</em>\n<em>version_started: 0.01</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Begins the openGL cycle of the application. It's only called once from main function in main.cpp after setting the window with ofSetupOpenGL.\nFrom 0.06 the app is deleted on exit, so you need to call this function as shown in syntax:</p>\n<pre><code><span class=\"token function\">ofRunApp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int ofRunMainLoop()</p>\n<p>&lt;!--\n<em>syntax: ofRunMainLoop()</em>\n<em>name: ofRunMainLoop</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetClipboardString(&amp;str)</p>\n<p>&lt;!--\n<em>syntax: ofSetClipboardString(&amp;str)</em>\n<em>name: ofSetClipboardString</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const string &amp;str</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetCurrentRenderer(renderer, setDefaults = false)</p>\n<p>&lt;!--\n<em>syntax: ofSetCurrentRenderer(renderer, setDefaults = false)</em>\n<em>name: ofSetCurrentRenderer</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: shared_ptr&lt; ofBaseRenderer &gt; renderer, bool setDefaults=false</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetEscapeQuitsApp(bQuitOnEsc)</p>\n<p>&lt;!--\n<em>syntax: ofSetEscapeQuitsApp(bQuitOnEsc)</em>\n<em>name: ofSetEscapeQuitsApp</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool bQuitOnEsc</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetFrameRate(targetRate)</p>\n<p>&lt;!--\n<em>syntax: ofSetFrameRate(targetRate)</em>\n<em>name: ofSetFrameRate</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int targetRate</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Attempts to set the frame rate to a given target by sleeping a certain amount per frame. The results of this may vary based if vertical sync is enabled or disabled (either at the card level or via code), because this locks the drawing to intervals where the screen refreshes.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetFullscreen(bFullscreen)</p>\n<p>&lt;!--\n<em>syntax: ofSetFullscreen(bFullscreen)</em>\n<em>name: ofSetFullscreen</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool fullscreen</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Change the app window mode to fullscreen or window depending on the boolean parameter.\nEnables or disables fullscreen mode for your app's window.\nnote: this code is implemented inside the ofAppRunner.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetMainLoop(mainLoop)</p>\n<p>&lt;!--\n<em>syntax: ofSetMainLoop(mainLoop)</em>\n<em>name: ofSetMainLoop</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: shared_ptr&lt; ofMainLoop &gt; mainLoop</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetOrientation(orientation, vFlip = true)</p>\n<p>&lt;!--\n<em>syntax: ofSetOrientation(orientation, vFlip = true)</em>\n<em>name: ofSetOrientation</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofOrientation orientation, bool vFlip=true</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetTimeModeFiltered(alpha)</p>\n<p>&lt;!--\n<em>syntax: ofSetTimeModeFiltered(alpha)</em>\n<em>name: ofSetTimeModeFiltered</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float alpha</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetTimeModeFixedRate(stepNanos)</p>\n<p>&lt;!--\n<em>syntax: ofSetTimeModeFixedRate(stepNanos)</em>\n<em>name: ofSetTimeModeFixedRate</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: uint64_t stepNanos</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetTimeModeSystem()</p>\n<p>&lt;!--\n<em>syntax: ofSetTimeModeSystem()</em>\n<em>name: ofSetTimeModeSystem</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetVerticalSync(bSync)</p>\n<p>&lt;!--\n<em>syntax: ofSetVerticalSync(bSync)</em>\n<em>name: ofSetVerticalSync</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool bSync</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Synchronizes the redraw of the screen to the vertical refresh rate of the screen. The monitor or projector redraws the screen at usually 60 frames per second. If vertical sync is not enabled your application runs as fast as possible and the screen can be drawing half of one frame and half of the previous frame, creating an effect called <a href=\"https://en.wikipedia.org/wiki/Screen_tearing\">tearing</a>.</p>\n<p>Vertical sync is enabled by default since 0.8.0. You can disable it calling ofSetVerticalSync(false).</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetWindowPosition(x, y)</p>\n<p>&lt;!--\n<em>syntax: ofSetWindowPosition(x, y)</em>\n<em>name: ofSetWindowPosition</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int x, int y</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Moves the app window to the x and y coordinates specified. For example: coordinates of (0,0) would set the top-left corner of your app window to the top-left corner of the screen.\nnote: this code is implemented inside the ofAppRunner</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetWindowShape(width, height)</p>\n<p>&lt;!--\n<em>syntax: ofSetWindowShape(width, height)</em>\n<em>name: ofSetWindowShape</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int width, int height</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Sets the dimension of your app's window.\nnote: this code is implemented inside the ofAppRunner</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetWindowTitle(title)</p>\n<p>&lt;!--\n<em>syntax: ofSetWindowTitle(title)</em>\n<em>name: ofSetWindowTitle</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: string title</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetupOpenGL(*windowPtr, w, h, screenMode)</p>\n<p>&lt;!--\n<em>syntax: ofSetupOpenGL(*windowPtr, w, h, screenMode)</em>\n<em>name: ofSetupOpenGL</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: Window *windowPtr, int w, int h, ofWindowMode screenMode</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetupOpenGL(w, h, screenMode)</p>\n<p>&lt;!--\n<em>syntax: ofSetupOpenGL(w, h, screenMode)</em>\n<em>name: ofSetupOpenGL</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int w, int h, ofWindowMode screenMode</em>\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetupOpenGL(windowPtr, w, h, screenMode)</p>\n<p>&lt;!--\n<em>syntax: ofSetupOpenGL(windowPtr, w, h, screenMode)</em>\n<em>name: ofSetupOpenGL</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: shared_ptr&lt; Window &gt; windowPtr, int w, int h, ofWindowMode screenMode</em>\n<em>version_started: 0.01</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Sets up the window aspect and mode. This function should be called only from the main function in main.cpp.\nw and h are the width and height of the window.\nscreenMode can be one of:</p>\n<ul>\n<li>OF_WINDOW: normal window</li>\n<li>OF_FULLSCREEN: fullscreen, the size of the app will be that of the current screen resolution. The w and h parameters will be ignored.</li>\n</ul>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofSetupOpenGL(windowPtr, w, h, screenMode)</p>\n<p>&lt;!--\n<em>syntax: ofSetupOpenGL(windowPtr, w, h, screenMode)</em>\n<em>name: ofSetupOpenGL</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: shared_ptr&lt; ofAppGLFWWindow &gt; windowPtr, int w, int h, ofWindowMode screenMode</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofShowCursor()</p>\n<p>&lt;!--\n<em>syntax: ofShowCursor()</em>\n<em>name: ofShowCursor</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Shows the mouse cursor again when it's been hidden with ofHideCursor\nmakes the cursor visible.\nnote: this code is implemented inside the ofAppRunner</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void ofToggleFullscreen()</p>\n<p>&lt;!--\n<em>syntax: ofToggleFullscreen()</em>\n<em>name: ofToggleFullscreen</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#functions\n\n\n<!--\n_visible: True_\n_advanced: False_\n-->\n\n##Description\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void noopDeleter(*)\n\n<!--\n_syntax: noopDeleter(*)_\n_name: noopDeleter_\n_returns: void_\n_returns_description: _\n_parameters: Window *_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###shared_ptr< ofAppBaseWindow > ofCreateWindow(&settings)\n\n<!--\n_syntax: ofCreateWindow(&settings)_\n_name: ofCreateWindow_\n_returns: shared_ptr< ofAppBaseWindow >_\n_returns_description: _\n_parameters: const ofWindowSettings &settings_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCreates a new app window and returns it as a shared_ptr. You can change the window's settings, like its size, position, decoration, and resizability in its ofWindowSettings.\n\nTo share assets between multiple windows, such as for drawing any ofBaseHasPixels object, you have to share contexts. This can be done by pointing a window to the shareContextWith field in another window's settings, as in the multiWindowOneAppExample.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDisableSetupScreen()\n\n<!--\n_syntax: ofDisableSetupScreen()_\n_name: ofDisableSetupScreen_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: 0.06_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nEvery update/draw cycle, the function ofSetupScreen is called. That function sets the perspective, coordinate system, and some other openGL parameters. If you need to use your own parameters, the call to that function can be disabled with ofDisableSetupScreen.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool ofDoesHWOrientation()\n\n<!--\n_syntax: ofDoesHWOrientation()_\n_name: ofDoesHWOrientation_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis returns whether your current device does hardware orientation. An iPhone, for instance, does hardware orientation, which you might notice when you tilt your iPhone to the side, hence ofDoesHWOrientation() would return true. Tilting your laptop to the side does not do the same thing, hence ofDoesHWOrientation() would return false.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofEnableSetupScreen()\n\n<!--\n_syntax: ofEnableSetupScreen()_\n_name: ofEnableSetupScreen_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: 0.06_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nRe-enables the call to ofSetupScreen after being disabled with ofDisableSetupScreen\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofCoreEvents & ofEvents()\n\n<!--\n_syntax: ofEvents()_\n_name: ofEvents_\n_returns: ofCoreEvents &_\n_returns_description: _\n_parameters: _\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofExit(status = 0)\n\n<!--\n_syntax: ofExit(status = 0)_\n_name: ofExit_\n_returns: void_\n_returns_description: _\n_parameters: int status=0_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis exits your app, causing it to quit.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofBaseApp * ofGetAppPtr()\n\n<!--\n_syntax: ofGetAppPtr()_\n_name: ofGetAppPtr_\n_returns: ofBaseApp *_\n_returns_description: _\n_parameters: _\n_version_started: 0.061_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nUseful to access the variables in the main app from other classes. The pointer returned by this function has to be cast from an ofBaseApp pointer, to a pointer to your inherited class, before being used.\nie:\n~~~~{.cpp}\n\n//ofApp.h\nclass ofApp: public ofBaseApp{\n    // ...\n    int someVar;\n}\n\n//myClass.cpp\n#include myClass.h\n#include \"ofApp.h\" // don't forget to add this line!\n\nvoid myClass::method(){\n    ofLog() << \"Value from main app: \" << ((ofApp*)ofGetAppPtr())->someVariable;\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofGetClipboardString()\n\n<!--\n_syntax: ofGetClipboardString()_\n_name: ofGetClipboardString_\n_returns: string_\n_returns_description: _\n_parameters: _\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###shared_ptr< ofBaseRenderer > & ofGetCurrentRenderer()\n\n<!--\n_syntax: ofGetCurrentRenderer()_\n_name: ofGetCurrentRenderer_\n_returns: shared_ptr< ofBaseRenderer > &_\n_returns_description: _\n_parameters: _\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###shared_ptr< ofAppBaseWindow > ofGetCurrentWindow()\n\n<!--\n_syntax: ofGetCurrentWindow()_\n_name: ofGetCurrentWindow_\n_returns: shared_ptr< ofAppBaseWindow >_\n_returns_description: _\n_parameters: _\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###uint64_t ofGetFixedStepForFps(fps)\n\n<!--\n_syntax: ofGetFixedStepForFps(fps)_\n_name: ofGetFixedStepForFps_\n_returns: uint64_t_\n_returns_description: _\n_parameters: double fps_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###uint64_t ofGetFrameNum()\n\n<!--\n_syntax: ofGetFrameNum()_\n_name: ofGetFrameNum_\n_returns: uint64_t_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the number of frames rendered since the program started.\n\n**Returns**: the number of frames rendered since the program started.\n\n\n\n\n\n_description: _\n\nThis returns the current frame as an int, counting up to (depending on your system) 2147483647 before rolling over back to 0. Don't worry though, at 60 frames a second you have 68 years until it rolls over though.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float ofGetFrameRate()\n\n<!--\n_syntax: ofGetFrameRate()_\n_name: ofGetFrameRate_\n_returns: float_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nnote: this code is implemented inside the ofAppRunner.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###GLXContext ofGetGLXContext()\n\n<!--\n_syntax: ofGetGLXContext()_\n_name: ofGetGLXContext_\n_returns: GLXContext_\n_returns_description: _\n_parameters: _\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofGetHeight()\n\n<!--\n_syntax: ofGetHeight()_\n_name: ofGetHeight_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis gets the height of your ofApp window. Useful for finding the middle of the screen like so: ofVec2f middle(ofGetWidth()/2, ofGetHeight()/2)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###double ofGetLastFrameTime()\n\n<!--\n_syntax: ofGetLastFrameTime()_\n_name: ofGetLastFrameTime_\n_returns: double_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###shared_ptr< ofMainLoop > ofGetMainLoop()\n\n<!--\n_syntax: ofGetMainLoop()_\n_name: ofGetMainLoop_\n_returns: shared_ptr< ofMainLoop >_\n_returns_description: _\n_parameters: _\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofOrientation ofGetOrientation()\n\n<!--\n_syntax: ofGetOrientation()_\n_name: ofGetOrientation_\n_returns: ofOrientation_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofGetScreenHeight()\n\n<!--\n_syntax: ofGetScreenHeight()_\n_name: ofGetScreenHeight_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nnote: this code is implemented inside the ofAppRunner\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofGetScreenWidth()\n\n<!--\n_syntax: ofGetScreenWidth()_\n_name: ofGetScreenWidth_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nnote: this code is implemented inside the ofAppRunner\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float ofGetTargetFrameRate()\n\n<!--\n_syntax: ofGetTargetFrameRate()_\n_name: ofGetTargetFrameRate_\n_returns: float_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofGetWidth()\n\n<!--\n_syntax: ofGetWidth()_\n_name: ofGetWidth_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis gets the width of your ofApp window. Useful for finding the middle of the screen like so: ofVec2f middle(ofGetWidth()/2, ofGetHeight()/2)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofGetWindowHeight()\n\n<!--\n_syntax: ofGetWindowHeight()_\n_name: ofGetWindowHeight_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofGetWindowMode()\n\n<!--\n_syntax: ofGetWindowMode()_\n_name: ofGetWindowMode_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\neg:\n~~~~{.cpp}\nint mode = ofGetWindowMode();\n\t\t\nif(mode == OF_WINDOW){\n\tcout << \"mode is: window mode \" << endl;\n}else if(mode == OF_FULLSCREEN){\n\tcout << \"mode is: fullscreen mode\" << endl;\n}else if(mode == OF_GAME_MODE){\n\tcout << \"mode is: game mode\" << endl;\t\n}\n~~~~\nnote: this code is implemented inside the ofAppRunner\n\t\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofGetWindowPositionX()\n\n<!--\n_syntax: ofGetWindowPositionX()_\n_name: ofGetWindowPositionX_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis is the x position of your window inside your screen. How exactly this is returned is dependent on your operating system but it's pretty consistent across platforms.\nnote: this code is implemented inside the ofAppRunner\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofGetWindowPositionY()\n\n<!--\n_syntax: ofGetWindowPositionY()_\n_name: ofGetWindowPositionY_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis is the y position of your window inside your screen. How exactly this is returned is dependent on your operating system but it's pretty consistent across platforms.\nnote: this code is implemented inside the ofAppRunner\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofAppBaseWindow * ofGetWindowPtr()\n\n<!--\n_syntax: ofGetWindowPtr()_\n_name: ofGetWindowPtr_\n_returns: ofAppBaseWindow *_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofRectangle ofGetWindowRect()\n\n<!--\n_syntax: ofGetWindowRect()_\n_name: ofGetWindowRect_\n_returns: ofRectangle_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec2 ofGetWindowSize()\n\n<!--\n_syntax: ofGetWindowSize()_\n_name: ofGetWindowSize_\n_returns: glm::vec2_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis is the size of your window as it's drawn on your screen. How exactly this is returned is dependent on your operating system but it's pretty consistent across platforms.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofGetWindowWidth()\n\n<!--\n_syntax: ofGetWindowWidth()_\n_name: ofGetWindowWidth_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###Display * ofGetX11Display()\n\n<!--\n_syntax: ofGetX11Display()_\n_name: ofGetX11Display_\n_returns: Display *_\n_returns_description: _\n_parameters: _\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###Window ofGetX11Window()\n\n<!--\n_syntax: ofGetX11Window()_\n_name: ofGetX11Window_\n_returns: Window_\n_returns_description: _\n_parameters: _\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofHideCursor()\n\n<!--\n_syntax: ofHideCursor()_\n_name: ofHideCursor_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: 0.01_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis hides the mouse cursor, useful if you're doing a clever app that has no need for mouse interaction, evil if you are.\nnote: this code is implemented inside the ofAppRunner.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofInit()\n\n<!--\n_syntax: ofInit()_\n_name: ofInit_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float ofRandomHeight()\n\n<!--\n_syntax: ofRandomHeight()_\n_name: ofRandomHeight_\n_returns: float_\n_returns_description: _\n_parameters: _\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: a random number between 0 and the height of the window.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float ofRandomWidth()\n\n<!--\n_syntax: ofRandomWidth()_\n_name: ofRandomWidth_\n_returns: float_\n_returns_description: _\n_parameters: _\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: a random number between 0 and the width of the window.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofRunApp(*OFSA)\n\n<!--\n_syntax: ofRunApp(*OFSA)_\n_name: ofRunApp_\n_returns: int_\n_returns_description: _\n_parameters: ofBaseApp *OFSA_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofRunApp(OFSA)\n\n<!--\n_syntax: ofRunApp(OFSA)_\n_name: ofRunApp_\n_returns: int_\n_returns_description: _\n_parameters: shared_ptr< ofBaseApp > &&OFSA_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofRunApp(window, app)\n\n<!--\n_syntax: ofRunApp(window, app)_\n_name: ofRunApp_\n_returns: void_\n_returns_description: _\n_parameters: shared_ptr< ofAppBaseWindow > window, shared_ptr< ofBaseApp > &&app_\n_version_started: 0.01_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nBegins the openGL cycle of the application. It's only called once from main function in main.cpp after setting the window with ofSetupOpenGL.\nFrom 0.06 the app is deleted on exit, so you need to call this function as shown in syntax:\n\n~~~~{.cpp}\nofRunApp(new ofApp());\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofRunMainLoop()\n\n<!--\n_syntax: ofRunMainLoop()_\n_name: ofRunMainLoop_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetClipboardString(&str)\n\n<!--\n_syntax: ofSetClipboardString(&str)_\n_name: ofSetClipboardString_\n_returns: void_\n_returns_description: _\n_parameters: const string &str_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetCurrentRenderer(renderer, setDefaults = false)\n\n<!--\n_syntax: ofSetCurrentRenderer(renderer, setDefaults = false)_\n_name: ofSetCurrentRenderer_\n_returns: void_\n_returns_description: _\n_parameters: shared_ptr< ofBaseRenderer > renderer, bool setDefaults=false_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetEscapeQuitsApp(bQuitOnEsc)\n\n<!--\n_syntax: ofSetEscapeQuitsApp(bQuitOnEsc)_\n_name: ofSetEscapeQuitsApp_\n_returns: void_\n_returns_description: _\n_parameters: bool bQuitOnEsc_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetFrameRate(targetRate)\n\n<!--\n_syntax: ofSetFrameRate(targetRate)_\n_name: ofSetFrameRate_\n_returns: void_\n_returns_description: _\n_parameters: int targetRate_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nAttempts to set the frame rate to a given target by sleeping a certain amount per frame. The results of this may vary based if vertical sync is enabled or disabled (either at the card level or via code), because this locks the drawing to intervals where the screen refreshes.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetFullscreen(bFullscreen)\n\n<!--\n_syntax: ofSetFullscreen(bFullscreen)_\n_name: ofSetFullscreen_\n_returns: void_\n_returns_description: _\n_parameters: bool fullscreen_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nChange the app window mode to fullscreen or window depending on the boolean parameter.\nEnables or disables fullscreen mode for your app's window.\nnote: this code is implemented inside the ofAppRunner.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetMainLoop(mainLoop)\n\n<!--\n_syntax: ofSetMainLoop(mainLoop)_\n_name: ofSetMainLoop_\n_returns: void_\n_returns_description: _\n_parameters: shared_ptr< ofMainLoop > mainLoop_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetOrientation(orientation, vFlip = true)\n\n<!--\n_syntax: ofSetOrientation(orientation, vFlip = true)_\n_name: ofSetOrientation_\n_returns: void_\n_returns_description: _\n_parameters: ofOrientation orientation, bool vFlip=true_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetTimeModeFiltered(alpha)\n\n<!--\n_syntax: ofSetTimeModeFiltered(alpha)_\n_name: ofSetTimeModeFiltered_\n_returns: void_\n_returns_description: _\n_parameters: float alpha_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetTimeModeFixedRate(stepNanos)\n\n<!--\n_syntax: ofSetTimeModeFixedRate(stepNanos)_\n_name: ofSetTimeModeFixedRate_\n_returns: void_\n_returns_description: _\n_parameters: uint64_t stepNanos_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetTimeModeSystem()\n\n<!--\n_syntax: ofSetTimeModeSystem()_\n_name: ofSetTimeModeSystem_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetVerticalSync(bSync)\n\n<!--\n_syntax: ofSetVerticalSync(bSync)_\n_name: ofSetVerticalSync_\n_returns: void_\n_returns_description: _\n_parameters: bool bSync_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSynchronizes the redraw of the screen to the vertical refresh rate of the screen. The monitor or projector redraws the screen at usually 60 frames per second. If vertical sync is not enabled your application runs as fast as possible and the screen can be drawing half of one frame and half of the previous frame, creating an effect called [tearing](https://en.wikipedia.org/wiki/Screen_tearing).\n\nVertical sync is enabled by default since 0.8.0. You can disable it calling ofSetVerticalSync(false).\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetWindowPosition(x, y)\n\n<!--\n_syntax: ofSetWindowPosition(x, y)_\n_name: ofSetWindowPosition_\n_returns: void_\n_returns_description: _\n_parameters: int x, int y_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nMoves the app window to the x and y coordinates specified. For example: coordinates of (0,0) would set the top-left corner of your app window to the top-left corner of the screen.\nnote: this code is implemented inside the ofAppRunner\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetWindowShape(width, height)\n\n<!--\n_syntax: ofSetWindowShape(width, height)_\n_name: ofSetWindowShape_\n_returns: void_\n_returns_description: _\n_parameters: int width, int height_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSets the dimension of your app's window.\nnote: this code is implemented inside the ofAppRunner\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetWindowTitle(title)\n\n<!--\n_syntax: ofSetWindowTitle(title)_\n_name: ofSetWindowTitle_\n_returns: void_\n_returns_description: _\n_parameters: string title_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetupOpenGL(*windowPtr, w, h, screenMode)\n\n<!--\n_syntax: ofSetupOpenGL(*windowPtr, w, h, screenMode)_\n_name: ofSetupOpenGL_\n_returns: void_\n_returns_description: _\n_parameters: Window *windowPtr, int w, int h, ofWindowMode screenMode_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetupOpenGL(w, h, screenMode)\n\n<!--\n_syntax: ofSetupOpenGL(w, h, screenMode)_\n_name: ofSetupOpenGL_\n_returns: void_\n_returns_description: _\n_parameters: int w, int h, ofWindowMode screenMode_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetupOpenGL(windowPtr, w, h, screenMode)\n\n<!--\n_syntax: ofSetupOpenGL(windowPtr, w, h, screenMode)_\n_name: ofSetupOpenGL_\n_returns: void_\n_returns_description: _\n_parameters: shared_ptr< Window > windowPtr, int w, int h, ofWindowMode screenMode_\n_version_started: 0.01_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSets up the window aspect and mode. This function should be called only from the main function in main.cpp.\nw and h are the width and height of the window.\nscreenMode can be one of:\n- OF_WINDOW: normal window\n- OF_FULLSCREEN: fullscreen, the size of the app will be that of the current screen resolution. The w and h parameters will be ignored. \n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetupOpenGL(windowPtr, w, h, screenMode)\n\n<!--\n_syntax: ofSetupOpenGL(windowPtr, w, h, screenMode)_\n_name: ofSetupOpenGL_\n_returns: void_\n_returns_description: _\n_parameters: shared_ptr< ofAppGLFWWindow > windowPtr, int w, int h, ofWindowMode screenMode_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofShowCursor()\n\n<!--\n_syntax: ofShowCursor()_\n_name: ofShowCursor_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nShows the mouse cursor again when it's been hidden with ofHideCursor\nmakes the cursor visible.\nnote: this code is implemented inside the ofAppRunner\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofToggleFullscreen()\n\n<!--\n_syntax: ofToggleFullscreen()_\n_name: ofToggleFullscreen_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}