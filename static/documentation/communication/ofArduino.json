{"entry":{"name":"ofArduino","filename":"ofArduino.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/communication/ofArduino.markdown","path":"/documentation/communication/ofArduino","route":"/documentation/communication/ofArduino.markdown","dir":"../ofSite/documentation/communication","ext":"markdown","type":"page","id":202,"parent":200,"breadcrumbs":[200,1],"siblings":[],"translations":{}},"description":{"short":null,"full":"<p>This is a way to control an Arduino that has had the firmata library loaded onto it, from OF. To load firmata onto your Arduino,  run the Arduino IDE, open the Examples</p>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"attachEncoder(pinA, pinB)","name":"attachEncoder","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pinA<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pinB","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>}\n\\name Encoder\n{</p>\n","desc":""},{"syntax":"connect(&device, baud = 57600)","name":"connect","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>device<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> baud<span class=\"token operator\">=</span><span class=\"token number\">57600</span>","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Opens a serial port connection to the arduino</p>\n<p><strong>Parameters:</strong></p>\n<p>device The name of the device.\nYou can get the name from the Arduino IDE</p>\n<p>baud The baud rate the connection uses</p>\n","desc":"<p>opens a serial port connection to the arduino</p>\n"},{"syntax":"convertAnalogPinToDigital(pin)","name":"convertAnalogPinToDigital","returns":"int","returns_description":null,"parameters":"size_t pin","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"convertDigitalPinToAnalog(pin)","name":"convertDigitalPinToAnalog","returns":"int","returns_description":null,"parameters":"size_t pin","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"detachEncoder(encoderNum)","name":"detachEncoder","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> encoderNum","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"disableEncoderReporting()","name":"disableEncoderReporting","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"disconnect()","name":"disconnect","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Closes the serial port connection.\nDoes not turn the Arduino off.</p>\n","desc":"<p>closes the serial port connection. Does not turn the Arduino off.</p>\n"},{"syntax":"enableEncoderReporting()","name":"enableEncoderReporting","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getAllEncoderPositions()","name":"getAllEncoderPositions","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getAnalog(pin)","name":"getAnalog","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the analog in value that the pin is currently reading.\nbecause the Arduino has a 10 bit ADC you get between 0 and 1023 for\npossible values.</p>\n<p><strong>Parameters:</strong></p>\n<p>pin The pin number (0-5)</p>\n","desc":"<p>Returns the analog in value that the pin is currently reading. because the Arduino has a 10 bit ADC you get between 0 and 1023 for possible values.</p>\n"},{"syntax":"getAnalogHistory()","name":"getAnalogHistory","returns":"int *","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"<p>Returns a pointer to the analog data history list for the given pin.</p>\n<p><strong>Parameters:</strong></p>\n<p>pin The Arduino Uno pin: 0-5</p>\n","desc":"<p>On the Arduino Uno pin: 0-5\nreturns a pointer to the analog data history list for the given pin</p>\n"},{"syntax":"getAnalogPinReporting(pin)","name":"getAnalogPinReporting","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: <code>ARD_ON</code> or <code>ARD_OFF</code></p>\n","desc":"<p>returns ARD_ON, ARD_OFF</p>\n"},{"syntax":"getDigital(pin)","name":"getDigital","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the last received value (if the pin mode is ARD_INPUT)\nor the last set value (if the pin mode is ARD_OUTPUT) for the given\npin</p>\n<p>Returns whether the pin is reading high or low, 1 or 0. You can test\nagainst this with an if() statement which is handy:</p>\n<pre><code>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arduino<span class=\"token punctuation\">.</span><span class=\"token function\">getDigital</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// do something on high</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// do something on low</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>\\note Pin 16-21 can also be used if analog inputs 0-5 are used as digital pins</p>\n","desc":"<p>On the Arduino Uno pin: 2-13\nreturns the last received value (if the pin mode is ARD_INPUT) or the last set value (if the pin mode is ARD_OUTPUT) for the given pin\nNote: pin 16-21 can also be used if analog inputs 0-5 are used as digital pins\nReturns whether the pin is reading high or low, 1 or 0. You can test against this with an if() statement which is handy:</p>\n<pre><code><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arduino<span class=\"token punctuation\">.</span><span class=\"token function\">getDigital</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// do something on high</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// do something on low</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"getDigitalHistory()","name":"getDigitalHistory","returns":"int *","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"<p>Returns a pointer to the digital data history list for the\ngiven pin\n\\note Pin 16-21 can also be used if analog inputs 0-5 are used as\ndigital pins</p>\n<p><strong>Parameters:</strong></p>\n<p>pin The pin number (2-13)</p>\n","desc":"<p>On the Arduino Uno pin: 2-13\nreturns a pointer to the digital data history list for the given pin\nNote: pin 16-21 can also be used if analog inputs 0-5 are used as digital pins</p>\n"},{"syntax":"getDigitalPinMode(pin)","name":"getDigitalPinMode","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the pin mode of the given pin</p>\n<p><strong>Returns</strong>: <code>ARD_INPUT</code>, <code>ARD_OUTPUT</code>, <code>ARD_PWM</code>, <code>ARD_SERVO</code>, <code>ARD_ANALOG</code></p>\n","desc":"<p>returns ARD_INPUT, ARD_OUTPUT, ARD_PWM, ARD_SERVO, ARD_ANALOG</p>\n"},{"syntax":"getEncoderPosition(encoderNum)","name":"getEncoderPosition","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> encoderNum","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getFirmwareName()","name":"getFirmwareName","returns":"string","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"<p><strong>Returns</strong>: the name of the firmware.</p>\n","desc":"<p>returns the name of the firmware</p>\n"},{"syntax":"getInvertedValueFromTwo7bitBytes(lsb, msb)","name":"getInvertedValueFromTwo7bitBytes","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> lsb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> msb","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getMajorFirmwareVersion()","name":"getMajorFirmwareVersion","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"<p><strong>Returns</strong>: the major firmware version.</p>\n","desc":"<p>returns the major firmware version</p>\n"},{"syntax":"getMinorFirmwareVersion()","name":"getMinorFirmwareVersion","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"<p><strong>Returns</strong>: the minor firmware version.</p>\n","desc":"<p>returns the minor firmware version</p>\n"},{"syntax":"getNumAnalogPins()","name":"getNumAnalogPins","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getPinCapabilities()","name":"getPinCapabilities","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getPwm(pin)","name":"getPwm","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the last set PWM value (0-255) for the given pin</p>\n<p>The pins mode has to be ARD_PWM</p>\n<p>On the Arduino Uno the following pins are supported: 3, 5, 6, 9, 10 and 11\n\\note Pin 16-21 can also be used if analog inputs 0-5 are used as digital pins</p>\n","desc":"<p>On the Arduino Uno pin: 3, 5, 6, 9, 10 and 11\nreturns the last set PWM value (0-255) for the given pin\nthe pins mode has to be ARD_PWM\nNote: pin 16-21 can also be used if analog inputs 0-5 are used as digital pins</p>\n"},{"syntax":"getServo(pin)","name":"getServo","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"<p><strong>Returns</strong>: the last set servo value for a pin if the pin has a servo attached.</p>\n","desc":"<p>returns the last set servo value for a pin if the pin has a servo attached</p>\n"},{"syntax":"getString()","name":"getString","returns":"string","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: the last received string.</p>\n","desc":"<p>returns the last received string</p>\n"},{"syntax":"getStringHistory()","name":"getStringHistory","returns":"int *","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"<p><strong>Returns</strong>: a pointer to the string history.</p>\n","desc":"<p>returns a pointer to the string history</p>\n"},{"syntax":"getSysEx()","name":"getSysEx","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"<p><strong>Returns</strong>: the last received SysEx message.</p>\n","desc":"<p>returns the last received SysEx message</p>\n"},{"syntax":"getSysExHistory()","name":"getSysExHistory","returns":"int *","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"<p><strong>Returns</strong>: a pointer to the SysEx history.</p>\n","desc":"<p>returns a pointer to the SysEx history</p>\n"},{"syntax":"getTotalPins()","name":"getTotalPins","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getValueFromTwo7bitBytes(lsb, msb)","name":"getValueFromTwo7bitBytes","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> lsb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> msb","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"<p>Useful for parsing SysEx messages</p>\n","desc":"<p>useful for parsing SysEx messages</p>\n"},{"syntax":"initPins()","name":"initPins","returns":"void","returns_description":null,"parameters":null,"access":"private","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>&lt; Indicate that pins are initialized.</p>\n","desc":""},{"syntax":"isAnalogPin(pin)","name":"isAnalogPin","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"isArduinoReady()","name":"isArduinoReady","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"isAttached()","name":"isAttached","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"isI2CConfigured()","name":"isI2CConfigured","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"isInitialized()","name":"isInitialized","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns true if a succesfull connection has been established\nand the Arduino has reported a firmware</p>\n","desc":"<p>returns true if a succesfull connection has been established and the Arduino has reported a firmware</p>\n"},{"syntax":"isPin(pin)","name":"isPin","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofArduino()","name":"ofArduino","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"False","advanced":"False","short":"<p>\\name Constructor and Destructor\n{</p>\n","desc":""},{"syntax":"processData(inputData)","name":"processData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> inputData","access":"private","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"processDigitalPort(port, value)","name":"processDigitalPort","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> port<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> value","access":"private","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"processSysExData(data)","name":"processSysExData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> data","access":"private","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"purge()","name":"purge","returns":"void","returns_description":null,"parameters":null,"access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"resetEncoderPosition(encoderNum)","name":"resetEncoderPosition","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> encoderNum","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"sendAnalogMappingRequest()","name":"sendAnalogMappingRequest","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"sendAnalogPinReporting(pin, mode)","name":"sendAnalogPinReporting","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"sendByte(byte)","name":"sendByte","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> byte","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"<p>sends a byte without wrapping it in a firmata message, data has to be in the 0-127 range,\nvalues</p>\n"},{"syntax":"sendDigital(pin, value, force = false)","name":"sendDigital","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> force<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>}\n\\name Senders\n{</p>\n","desc":""},{"syntax":"sendDigitalPinMode(pin, mode)","name":"sendDigitalPinMode","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Setting a pins mode to ARD_INPUT turns on reporting for the port the pin is on</p>\n<p><strong>Parameters:</strong></p>\n<p>pin Pin on arduino (2-13)</p>\n<p>mode <code>ARD_INPUT</code>, <code>ARD_OUTPUT</code>, <code>ARD_PWM</code>\n\\note Analog pins 0-5 can be used as digitial pins 16-21 but if the\nmode of <em>one</em> of these pins is set to <code>ARD_INPUT</code> then <em>all</em> analog pin\nreporting will be turned off</p>\n","desc":"<p>On the Arduino Uno pin: 2-13 mode: ARD_INPUT, ARD_OUTPUT, ARD_PWM setting a pins mode to ARD_INPUT turns on reporting for the port the pin is on Note: analog pins 0-5 can be used as digitial pins 16-21 but if the mode of <em>one</em> of these pins is set to ARD_INPUT then <em>all</em> analog pin reporting will be turned off</p>\n"},{"syntax":"sendDigitalPinReporting(pin, mode)","name":"sendDigitalPinReporting","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode","access":"private","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"sendDigitalPortReporting(port, mode)","name":"sendDigitalPortReporting","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> port<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode","access":"private","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"sendFirmwareVersionRequest()","name":"sendFirmwareVersionRequest","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"","desc":""},{"syntax":"sendI2CConfig(delay)","name":"sendI2CConfig","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> delay","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sends a I2C config request</p>\n<p>Must be called before an I2C Read or Write</p>\n<p><strong>Parameters:</strong></p>\n<p>{number} delay in microseconds to set for I2C Read</p>\n","desc":""},{"syntax":"sendI2CReadRequest(address, numBytes, reg)","name":"sendI2CReadRequest","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">char</span> address<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> reg","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Asks the arduino to request bytes from an I2C device</p>\n<p><strong>Parameters:</strong></p>\n<p>{number} slaveAddress The address of the I2C device</p>\n<p>{number} numBytes The number of bytes to receive.</p>\n<p>{function} callback A function to call when we have received the bytes.</p>\n","desc":""},{"syntax":"sendI2CWriteRequest(slaveAddress, *bytes, numOfBytes, reg)","name":"sendI2CWriteRequest","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">char</span> slaveAddress<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numOfBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> reg","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Asks the arduino to send an I2C request to a device</p>\n<p><strong>Parameters:</strong></p>\n<p>{number} slaveAddress The address of the I2C device</p>\n<p>{Array} bytes The bytes to send to the device</p>\n","desc":""},{"syntax":"sendI2CWriteRequest(slaveAddress, *bytes, numOfBytes, reg)","name":"sendI2CWriteRequest","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">char</span> slaveAddress<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numOfBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> reg","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"sendI2CWriteRequest(slaveAddress, *bytes, numOfBytes, reg)","name":"sendI2CWriteRequest","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">char</span> slaveAddress<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numOfBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> reg","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"sendI2CWriteRequest(slaveAddress, bytes, reg)","name":"sendI2CWriteRequest","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">char</span> slaveAddress<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> reg","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"sendI2ContinuousReadRequest(address, numBytes, reg)","name":"sendI2ContinuousReadRequest","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">char</span> address<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> reg","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Initialize a continuous I2C read.</p>\n<p><strong>Parameters:</strong></p>\n<p>{number} address    The address of the I2C device</p>\n<p>{number} register   Optionally set the register to read from.</p>\n<p>{number} numBytes   The number of bytes to receive.</p>\n","desc":""},{"syntax":"sendOneWireAlarmsSearch(pin)","name":"sendOneWireAlarmsSearch","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Searches for 1-wire devices on the bus in an alarmed state.</p>\n<p><strong>Parameters:</strong></p>\n<p>pin</p>\n","desc":""},{"syntax":"sendOneWireConfig(pin, enableParasiticPower)","name":"sendOneWireConfig","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> enableParasiticPower","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Configure the passed pin as the controller in a 1-wire bus.</p>\n<p>Pass as enableParasiticPower true if you want the data pin to power the bus.</p>\n<p><strong>Parameters:</strong></p>\n<p>pin</p>\n<p>enableParasiticPower</p>\n","desc":""},{"syntax":"sendOneWireDelay(pin, delay)","name":"sendOneWireDelay","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> delay","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Tells firmata to not do anything for the passed amount of ms.</p>\n<p>For when you need to give a device attached to the bus time to do a calculation.</p>\n<p><strong>Parameters:</strong></p>\n<p>pin</p>\n","desc":""},{"syntax":"sendOneWireRead(pin, devices, numBytesToRead)","name":"sendOneWireRead","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> devices<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numBytesToRead","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Reads data from a device on the bus.</p>\n<p>N.b. ConfigurableFirmata will issue the 1-wire select command internally.</p>\n<p><strong>Parameters:</strong></p>\n<p>pin</p>\n<p>device</p>\n<p>numBytesToRead</p>\n<p>callback</p>\n","desc":""},{"syntax":"sendOneWireRequest(pin, subcommand, devices, numBytesToRead, correlationId, delay, dataToWrite)","name":"sendOneWireRequest","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> subcommand<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> devices<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numBytesToRead<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> correlationId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> delay<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dataToWrite","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"sendOneWireReset(pin)","name":"sendOneWireReset","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Resets all devices on the bus.</p>\n<p><strong>Parameters:</strong></p>\n<p>pin</p>\n","desc":""},{"syntax":"sendOneWireSearch(pin)","name":"sendOneWireSearch","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Searches for 1-wire devices on the bus.</p>\n<p><strong>Parameters:</strong></p>\n<p>pin</p>\n","desc":""},{"syntax":"sendOneWireSearch(type, pin)","name":"sendOneWireSearch","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">char</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pin","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"sendOneWireWrite(pin, devices, data)","name":"sendOneWireWrite","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> devices<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> data","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Writes data to the bus to be received by the passed device.</p>\n<p>The device should be obtained from a previous call to sendOneWireSearch. ConfigurableFirmata will issue the 1-wire select command internally.</p>\n<p><strong>Parameters:</strong></p>\n<p>pin</p>\n<p>device</p>\n<p>data</p>\n","desc":""},{"syntax":"sendOneWireWriteAndRead(pin, devices, data, numBytesToRead)","name":"sendOneWireWriteAndRead","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> devices<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numBytesToRead","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sends the passed data to the passed device on the bus, reads the specified number of bytes.</p>\n<p>ConfigurableFirmata will issue the 1-wire select command internally.</p>\n<p><strong>Parameters:</strong></p>\n<p>pin</p>\n<p>device</p>\n<p>data</p>\n<p>numBytesToRead</p>\n<p>callback</p>\n","desc":""},{"syntax":"sendPinCapabilityRequest()","name":"sendPinCapabilityRequest","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"sendPinCofigurationRequest()","name":"sendPinCofigurationRequest","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"sendPinStateQuery(pin)","name":"sendPinStateQuery","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"sendProtocolVersionRequest()","name":"sendProtocolVersionRequest","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"","desc":""},{"syntax":"sendPwm(pin, value, force = false)","name":"sendPwm","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> force<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>On the Uno this will work on pins: 3, 5, 6, 9, 10 and 11 value: 0 (always off) to 255 (always on). the pins mode has to be set to ARD_PWM\nTODO check if the PWM bug still is there causing frequent digital port reporting...</p>\n"},{"syntax":"sendReset()","name":"sendReset","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>This will cause your Arduino to reset and boot into the program again.</p>\n","desc":"<p>This will cause your Arduino to reset and boot into the program again.</p>\n"},{"syntax":"sendSerialConfig(portID, baud, rxPin, txPin)","name":"sendSerialConfig","returns":"void","returns_description":null,"parameters":"Firmata_Serial_Ports portID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> baud<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rxPin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> txPin","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Asks the Arduino to configure a hardware or serial port.</p>\n<p><strong>Parameters:</strong></p>\n<p>portID The serial port to use (HW_SERIAL1, HW_SERIAL2, HW_SERIAL3, SW_SERIAL0, SW_SERIAL1, SW_SERIAL2, SW_SERIAL3)</p>\n<p>baud  The baud rate of the serial port</p>\n<p>rxPin [SW Serial only] The RX pin of the SoftwareSerial instance</p>\n<p>txPin [SW Serial only] The TX pin of the SoftwareSerial instance</p>\n","desc":""},{"syntax":"sendServo(pin, value, force = false)","name":"sendServo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> force<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"<p>Send a value to a servo.</p>\n<p>A servo has to be atached to the pin prior</p>\n<p><strong>Parameters:</strong></p>\n<p>pin 9 or 10</p>\n<p>value The value to send</p>\n","desc":"<p>On the Arduino Uno pin: 9, 10\nthe pin has to have a servo attached for this to work.</p>\n"},{"syntax":"sendServoAttach(pin, minPulse = 544, maxPulse = 2400)","name":"sendServoAttach","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> minPulse<span class=\"token operator\">=</span><span class=\"token number\">544</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> maxPulse<span class=\"token operator\">=</span><span class=\"token number\">2400</span>","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"<p><strong>Parameters:</strong></p>\n<p>angle parameter DEPRECATED as of Firmata 2.2</p>\n","desc":"<p>On the Arduino Uno pin: 9, 10 attaches a servo to a pin\nangle parameter DEPRECATED as of Firmata 2.2</p>\n"},{"syntax":"sendStepper2Wire(dirPin, stepPin, stepsPerRev = 200)","name":"sendStepper2Wire","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> dirPin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stepPin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stepsPerRev<span class=\"token operator\">=</span><span class=\"token number\">200</span>","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>-- stepper</p>\n","desc":""},{"syntax":"sendStepper4Wire(pin1, pin2, pin3, pin4, stepsPerRev = 200)","name":"sendStepper4Wire","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> pin1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pin2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pin3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pin4<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stepsPerRev<span class=\"token operator\">=</span><span class=\"token number\">200</span>","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>the pins has to have a stepper attached</p>\n","desc":""},{"syntax":"sendStepperMove(stepperID, direction, steps, speed = 0, acceleration, deceleration)","name":"sendStepperMove","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> stepperID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> direction<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> steps<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> speed<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> acceleration<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> deceleration","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>the pins has to have a stepper attached</p>\n","desc":""},{"syntax":"sendString(str)","name":"sendString","returns":"void","returns_description":null,"parameters":"string str","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Send a string to the Arduino\n\\note Firmata can not handle strings longer than 12 characters.</p>\n","desc":"<p>firmata can not handle strings longer than 12 characters.</p>\n"},{"syntax":"sendSysEx(command, data)","name":"sendSysEx","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> command<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> data","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"","desc":""},{"syntax":"sendSysExBegin()","name":"sendSysExBegin","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"<p>Sends the <code>FIRMATA_START_SYSEX</code> command</p>\n","desc":""},{"syntax":"sendSysExEnd()","name":"sendSysExEnd","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"<p>Sends the <code>FIRMATA_END_SYSEX</code> command</p>\n","desc":""},{"syntax":"sendValueAsTwo7bitBytes(value)","name":"sendValueAsTwo7bitBytes","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> value","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"<p>Send value as two 7 bit bytes.</p>\n<p>Sends a value as two 7-bit bytes without wrapping it in a firmata\nmessage.  Values in the range 0 - 16384 will be sent as two bytes\nwithin the 0-127 data range.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The value to send.</p>\n","desc":""},{"syntax":"serialClose(portID)","name":"serialClose","returns":"void","returns_description":null,"parameters":"Firmata_Serial_Ports portID","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Close the specified serial port.</p>\n<p><strong>Parameters:</strong></p>\n<p>portId The serial port to close.</p>\n","desc":""},{"syntax":"serialFlush(portID)","name":"serialFlush","returns":"void","returns_description":null,"parameters":"Firmata_Serial_Ports portID","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Flush the specified serial port.</p>\n<p>For hardware serial, this waits for the transmission of outgoing serial data to complete.For software serial, this removed any buffered incoming serial data.</p>\n<p><strong>Parameters:</strong></p>\n<p>portId The serial port to listen on.</p>\n","desc":""},{"syntax":"serialListen(portID)","name":"serialListen","returns":"void","returns_description":null,"parameters":"Firmata_Serial_Ports portID","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>For SoftwareSerial only. Only a single SoftwareSerial instance can read data at a time.</p>\n<p>Call this method to set this port to be the reading port in the case there are multiple SoftwareSerial instances.</p>\n<p><strong>Parameters:</strong></p>\n<p>portId The serial port to flush.</p>\n","desc":""},{"syntax":"serialRead(port, maxBytesToRead)","name":"serialRead","returns":"void","returns_description":null,"parameters":"Firmata_Serial_Ports port<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> maxBytesToRead","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Start continuous reading of the specified serial port.</p>\n<p>The port is checked for data each iteration of the main Arduino loop.</p>\n<p><strong>Parameters:</strong></p>\n<p>portId The serial port to start reading continuously.</p>\n<p>maxBytesToRead [Optional] The maximum number of bytes to read per iteration.\n\\note If there are less bytes in the buffer, the lesser number of bytes will be returned. A value of 0 indicates that all available bytes in the buffer should be read.</p>\n","desc":""},{"syntax":"serialStop(portID)","name":"serialStop","returns":"void","returns_description":null,"parameters":"Firmata_Serial_Ports portID","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Stop continuous reading of the specified serial port.</p>\n<p>This does not close the port, it stops reading it but keeps the port open.</p>\n<p><strong>Parameters:</strong></p>\n<p>portId The serial port to stop reading.</p>\n","desc":""},{"syntax":"serialWrite(port, *bytes, numOfBytes)","name":"serialWrite","returns":"void","returns_description":null,"parameters":"Firmata_Serial_Ports port<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numOfBytes","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Write an array of bytes to the specified serial port.</p>\n<p><strong>Parameters:</strong></p>\n<p>portId The serial port to write to.</p>\n<p>bytes An array of bytes to write to the serial port.</p>\n<p>numOfBytes length of the array of bytes.</p>\n","desc":""},{"syntax":"setAnalogHistoryLength(length)","name":"setAnalogHistoryLength","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> length","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"","desc":""},{"syntax":"setDigitalHistoryLength(length)","name":"setDigitalHistoryLength","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> length","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"","desc":""},{"syntax":"setStringHistoryLength(length)","name":"setStringHistoryLength","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> length","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"","desc":""},{"syntax":"setSysExHistoryLength(nSysEx)","name":"setSysExHistoryLength","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> nSysEx","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"","desc":""},{"syntax":"setUseDelay(bDelay)","name":"setUseDelay","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> bDelay","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"update()","name":"update","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Polls data from the serial port, this has to be called periodically</p>\n","desc":"<p>polls data from the serial port, this has to be called periodically</p>\n"},{"syntax":"~ofArduino()","name":"~ofArduino","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"False","advanced":"False","short":"","desc":""},{"short":"<p>Triggered when an analog pin changes value, the pin that\nchanged is passed as an argument.</p>\n","desc":"<p>triggered when an analog pin changes value, the pin that changed is passed as an argument</p>\n"},{"short":"<p>Triggered when a digital pin changes value, the pin that\nchanged is passed as an argument.</p>\n","desc":"<p>triggered when a digital pin changes value, the pin that changed is passed as an argument</p>\n"},{"name":"EEncoderDataReceived","type":"int","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>triggered when the encoder returns data after a read request</p>\n","desc":""},{"short":"<p>Triggered when a firmware version is received, the major version\nis passed as an argument.</p>\n","desc":"<p>triggered when a firmware version is received, the major version is passed as an argument</p>\n"},{"name":"EI2CDataRecieved","type":"int","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>triggered when the I2C bus returns data after a read request</p>\n","desc":""},{"short":"<p>Triggered when the firmware version is received upon connect,\nthe major firmware version is passed as an argument. From this point\nit's safe to send to the Arduino.</p>\n","desc":"<p>triggered when the firmware version is received upon connect, the major firmware version is passed as an argument\nfrom this point it's safe to send to the Arduino.</p>\n"},{"name":"EPinStateResponseReceived","type":"int","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"ESerialDataReceived","type":"int","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>triggered when a Serial message is received. Returns which\nport and its data</p>\n","desc":""},{"name":"EStepperDataReceived","type":"int","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>triggered when a stepper has finished rotating. Returns which\nstepper has complted its rotation</p>\n","desc":""},{"short":"<p>Triggered when a string is received, the string is passed as an\nargument</p>\n","desc":"<p>triggered when a string is received, the string is passed as an argument</p>\n"},{"short":"<p>Triggered when a SysEx message that isn't in the extended\ncommand set is received, the SysEx message is passed as an argument</p>\n","desc":"<p>triggered when a SysEx message that isn't in the extended command set is received, the SysEx message is passed as an argument</p>\n"},{"short":"","desc":""},{"name":"_analogHistoryLength","type":"int","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"_analogPinReporting","type":"int","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"short":"","desc":""},{"name":"_digitalHistoryLength","type":"int","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"_digitalPinMode","type":"int","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"_digitalPinReporting","type":"int","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"_digitalPinValue","type":"int","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"_digitalPortReporting","type":"int","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"_digitalPortValue","type":"int","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"_encoderID","type":"int","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"_executeMultiByteCommand","type":"int","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>&lt; Indicate Firmata command to execute.</p>\n","desc":""},{"name":"_firmwareName","type":"string","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"_firstAnalogPin","type":"int","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"_i2cConfigured","type":"bool","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"_initialized","type":"bool","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"_majorFirmwareVersion","type":"int","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"_minorFirmwareVersion","type":"int","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"_multiByteChannel","type":"int","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>&lt; Indicates which pin the data came from.</p>\n","desc":""},{"name":"_numEncoders","type":"int","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"_numSteppers","type":"int","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"_port","type":"ofSerial","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"_portStatus","type":"int","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"_servoValue","type":"int","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"_storedInputData","type":"unsigned char","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"short":"","desc":""},{"name":"_stringHistoryLength","type":"int","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"short":"","desc":""},{"short":"","desc":""},{"name":"_sysExHistoryLength","type":"int","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"_totalAnalogPins","type":"int","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>&lt; Indicate the total number of digital pins of the board in use.</p>\n","desc":""},{"name":"_totalDigitalPins","type":"int","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"_waitForData","type":"int","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"analogPinMap","type":"int","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"bUseDelay","type":"bool","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"connectTime","type":"float","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>&lt; This represents the (running) time of establishing a serial connection.</p>\n","desc":""},{"name":"connected","type":"bool","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>&lt; This yields true if a serial connection to Arduino exists.</p>\n","desc":""},{"name":"firmataAnalogSupported","type":"bool","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"firmataEncoderSupported","type":"bool","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"firmataI2cSupported","type":"bool","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"firmataInputSupported","type":"bool","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"firmataOnewireSupported","type":"bool","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"firmataOutputSupported","type":"bool","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"firmataPwmSupported","type":"bool","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"firmataSerialSupported","type":"bool","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"firmataServoSupported","type":"bool","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"firmataStepperSupported","type":"bool","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"pinCapabilities","type":"int","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofArduino</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n_extends: _\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>This is a way to control an Arduino that has had the firmata library\nloaded onto it, from OF.</p>\n<p>To load firmata onto your Arduino, run the Arduino IDE, open the Examples &gt;\nFirmata &gt; StandardFirmata sketch, and upload it to the Arduino board.</p>\n<p>Once the ofArduino instance returns true from isArduinoReady() you can set\nthe mode of the different digital pins using sendDigitalPinMode()</p>\n<p>This sets pin 9 to input so that it can read a button press</p>\n<pre><code>    <span class=\"token function\">sendDigitalPinMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> ARD_INPUT<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>This sets pin 9 to be a PWM out pin. Note that this only works on pins\nthat are PWM enabled.</p>\n<pre><code>    <span class=\"token function\">sendDigitalPinMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> ARD_PWM<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>##Description</p>\n<p>This is a way to control an Arduino that has had the firmata library loaded onto it, from OF. To load firmata onto your Arduino,  run the Arduino IDE, open the Examples &gt; Firmata &gt; StandardFirmata sketch, and upload it to the Arduino board.\nOnce the ofArduino instance returns true from isArduinoReady() you can set the mode of the different digital pins using sendDigitalPinMode()</p>\n<pre><code><span class=\"token function\">sendDigitalPinMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> ARD_INPUT<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>This sets pin 9 to input so that it can read a button press, while:</p>\n<pre><code><span class=\"token function\">sendDigitalPinMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> ARD_PWM<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>sets pin 9 to be a PWM out pin. Note that this only works on pins that are PWM enabled.</p>\n<p>##Methods</p>\n<p>###void attachEncoder(pinA, pinB)</p>\n<p>&lt;!--\n<em>syntax: attachEncoder(pinA, pinB)</em>\n<em>name: attachEncoder</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int pinA, int pinB</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>}\n\\name Encoder\n{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool connect(&amp;device, baud = 57600)</p>\n<p>&lt;!--\n<em>syntax: connect(&amp;device, baud = 57600)</em>\n<em>name: connect</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const string &amp;device, int baud=57600</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Opens a serial port connection to the arduino</p>\n<p><strong>Parameters:</strong></p>\n<p>device The name of the device.\nYou can get the name from the Arduino IDE</p>\n<p>baud The baud rate the connection uses</p>\n<p>_description: _</p>\n<p>opens a serial port connection to the arduino</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int convertAnalogPinToDigital(pin)</p>\n<p>&lt;!--\n<em>syntax: convertAnalogPinToDigital(pin)</em>\n<em>name: convertAnalogPinToDigital</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: size_t pin</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int convertDigitalPinToAnalog(pin)</p>\n<p>&lt;!--\n<em>syntax: convertDigitalPinToAnalog(pin)</em>\n<em>name: convertDigitalPinToAnalog</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: size_t pin</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void detachEncoder(encoderNum)</p>\n<p>&lt;!--\n<em>syntax: detachEncoder(encoderNum)</em>\n<em>name: detachEncoder</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int encoderNum</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void disableEncoderReporting()</p>\n<p>&lt;!--\n<em>syntax: disableEncoderReporting()</em>\n<em>name: disableEncoderReporting</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void disconnect()</p>\n<p>&lt;!--\n<em>syntax: disconnect()</em>\n<em>name: disconnect</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Closes the serial port connection.\nDoes not turn the Arduino off.</p>\n<p>_description: _</p>\n<p>closes the serial port connection. Does not turn the Arduino off.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void enableEncoderReporting()</p>\n<p>&lt;!--\n<em>syntax: enableEncoderReporting()</em>\n<em>name: enableEncoderReporting</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void getAllEncoderPositions()</p>\n<p>&lt;!--\n<em>syntax: getAllEncoderPositions()</em>\n<em>name: getAllEncoderPositions</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getAnalog(pin)</p>\n<p>&lt;!--\n<em>syntax: getAnalog(pin)</em>\n<em>name: getAnalog</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: int pin</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the analog in value that the pin is currently reading.\nbecause the Arduino has a 10 bit ADC you get between 0 and 1023 for\npossible values.</p>\n<p><strong>Parameters:</strong></p>\n<p>pin The pin number (0-5)</p>\n<p>_description: _</p>\n<p>Returns the analog in value that the pin is currently reading. because the Arduino has a 10 bit ADC you get between 0 and 1023 for possible values.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int * getAnalogHistory()</p>\n<p>&lt;!--\n<em>syntax: getAnalogHistory()</em>\n<em>name: getAnalogHistory</em>\n<em>returns: int *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a pointer to the analog data history list for the given pin.</p>\n<p><strong>Parameters:</strong></p>\n<p>pin The Arduino Uno pin: 0-5</p>\n<p>_description: _</p>\n<p>On the Arduino Uno pin: 0-5\nreturns a pointer to the analog data history list for the given pin</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getAnalogPinReporting(pin)</p>\n<p>&lt;!--\n<em>syntax: getAnalogPinReporting(pin)</em>\n<em>name: getAnalogPinReporting</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: int pin</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: <code>ARD_ON</code> or <code>ARD_OFF</code></p>\n<p>_description: _</p>\n<p>returns ARD_ON, ARD_OFF</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getDigital(pin)</p>\n<p>&lt;!--\n<em>syntax: getDigital(pin)</em>\n<em>name: getDigital</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: int pin</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the last received value (if the pin mode is ARD_INPUT)\nor the last set value (if the pin mode is ARD_OUTPUT) for the given\npin</p>\n<p>Returns whether the pin is reading high or low, 1 or 0. You can test\nagainst this with an if() statement which is handy:</p>\n<pre><code>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arduino<span class=\"token punctuation\">.</span><span class=\"token function\">getDigital</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// do something on high</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// do something on low</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>\\note Pin 16-21 can also be used if analog inputs 0-5 are used as digital pins</p>\n<p>_description: _</p>\n<p>On the Arduino Uno pin: 2-13\nreturns the last received value (if the pin mode is ARD_INPUT) or the last set value (if the pin mode is ARD_OUTPUT) for the given pin\nNote: pin 16-21 can also be used if analog inputs 0-5 are used as digital pins\nReturns whether the pin is reading high or low, 1 or 0. You can test against this with an if() statement which is handy:</p>\n<pre><code><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arduino<span class=\"token punctuation\">.</span><span class=\"token function\">getDigital</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// do something on high</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// do something on low</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int * getDigitalHistory()</p>\n<p>&lt;!--\n<em>syntax: getDigitalHistory()</em>\n<em>name: getDigitalHistory</em>\n<em>returns: int *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a pointer to the digital data history list for the\ngiven pin\n\\note Pin 16-21 can also be used if analog inputs 0-5 are used as\ndigital pins</p>\n<p><strong>Parameters:</strong></p>\n<p>pin The pin number (2-13)</p>\n<p>_description: _</p>\n<p>On the Arduino Uno pin: 2-13\nreturns a pointer to the digital data history list for the given pin\nNote: pin 16-21 can also be used if analog inputs 0-5 are used as digital pins</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getDigitalPinMode(pin)</p>\n<p>&lt;!--\n<em>syntax: getDigitalPinMode(pin)</em>\n<em>name: getDigitalPinMode</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: int pin</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the pin mode of the given pin</p>\n<p><strong>Returns</strong>: <code>ARD_INPUT</code>, <code>ARD_OUTPUT</code>, <code>ARD_PWM</code>, <code>ARD_SERVO</code>, <code>ARD_ANALOG</code></p>\n<p>_description: _</p>\n<p>returns ARD_INPUT, ARD_OUTPUT, ARD_PWM, ARD_SERVO, ARD_ANALOG</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void getEncoderPosition(encoderNum)</p>\n<p>&lt;!--\n<em>syntax: getEncoderPosition(encoderNum)</em>\n<em>name: getEncoderPosition</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int encoderNum</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string getFirmwareName()</p>\n<p>&lt;!--\n<em>syntax: getFirmwareName()</em>\n<em>name: getFirmwareName</em>\n<em>returns: string</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: the name of the firmware.</p>\n<p>_description: _</p>\n<p>returns the name of the firmware</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getInvertedValueFromTwo7bitBytes(lsb, msb)</p>\n<p>&lt;!--\n<em>syntax: getInvertedValueFromTwo7bitBytes(lsb, msb)</em>\n<em>name: getInvertedValueFromTwo7bitBytes</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: unsigned char lsb, unsigned char msb</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getMajorFirmwareVersion()</p>\n<p>&lt;!--\n<em>syntax: getMajorFirmwareVersion()</em>\n<em>name: getMajorFirmwareVersion</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: the major firmware version.</p>\n<p>_description: _</p>\n<p>returns the major firmware version</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getMinorFirmwareVersion()</p>\n<p>&lt;!--\n<em>syntax: getMinorFirmwareVersion()</em>\n<em>name: getMinorFirmwareVersion</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: the minor firmware version.</p>\n<p>_description: _</p>\n<p>returns the minor firmware version</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getNumAnalogPins()</p>\n<p>&lt;!--\n<em>syntax: getNumAnalogPins()</em>\n<em>name: getNumAnalogPins</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getPinCapabilities()</p>\n<p>&lt;!--\n<em>syntax: getPinCapabilities()</em>\n<em>name: getPinCapabilities</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getPwm(pin)</p>\n<p>&lt;!--\n<em>syntax: getPwm(pin)</em>\n<em>name: getPwm</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: int pin</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the last set PWM value (0-255) for the given pin</p>\n<p>The pins mode has to be ARD_PWM</p>\n<p>On the Arduino Uno the following pins are supported: 3, 5, 6, 9, 10 and 11\n\\note Pin 16-21 can also be used if analog inputs 0-5 are used as digital pins</p>\n<p>_description: _</p>\n<p>On the Arduino Uno pin: 3, 5, 6, 9, 10 and 11\nreturns the last set PWM value (0-255) for the given pin\nthe pins mode has to be ARD_PWM\nNote: pin 16-21 can also be used if analog inputs 0-5 are used as digital pins</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getServo(pin)</p>\n<p>&lt;!--\n<em>syntax: getServo(pin)</em>\n<em>name: getServo</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: int pin</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: the last set servo value for a pin if the pin has a servo attached.</p>\n<p>_description: _</p>\n<p>returns the last set servo value for a pin if the pin has a servo attached</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string getString()</p>\n<p>&lt;!--\n<em>syntax: getString()</em>\n<em>name: getString</em>\n<em>returns: string</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: the last received string.</p>\n<p>_description: _</p>\n<p>returns the last received string</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int * getStringHistory()</p>\n<p>&lt;!--\n<em>syntax: getStringHistory()</em>\n<em>name: getStringHistory</em>\n<em>returns: int *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: a pointer to the string history.</p>\n<p>_description: _</p>\n<p>returns a pointer to the string history</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getSysEx()</p>\n<p>&lt;!--\n<em>syntax: getSysEx()</em>\n<em>name: getSysEx</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: the last received SysEx message.</p>\n<p>_description: _</p>\n<p>returns the last received SysEx message</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int * getSysExHistory()</p>\n<p>&lt;!--\n<em>syntax: getSysExHistory()</em>\n<em>name: getSysExHistory</em>\n<em>returns: int *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: a pointer to the SysEx history.</p>\n<p>_description: _</p>\n<p>returns a pointer to the SysEx history</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getTotalPins()</p>\n<p>&lt;!--\n<em>syntax: getTotalPins()</em>\n<em>name: getTotalPins</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getValueFromTwo7bitBytes(lsb, msb)</p>\n<p>&lt;!--\n<em>syntax: getValueFromTwo7bitBytes(lsb, msb)</em>\n<em>name: getValueFromTwo7bitBytes</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: unsigned char lsb, unsigned char msb</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Useful for parsing SysEx messages</p>\n<p>_description: _</p>\n<p>useful for parsing SysEx messages</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void initPins()</p>\n<p>&lt;!--\n<em>syntax: initPins()</em>\n<em>name: initPins</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>&lt; Indicate that pins are initialized.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isAnalogPin(pin)</p>\n<p>&lt;!--\n<em>syntax: isAnalogPin(pin)</em>\n<em>name: isAnalogPin</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: int pin</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isArduinoReady()</p>\n<p>&lt;!--\n<em>syntax: isArduinoReady()</em>\n<em>name: isArduinoReady</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isAttached()</p>\n<p>&lt;!--\n<em>syntax: isAttached()</em>\n<em>name: isAttached</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isI2CConfigured()</p>\n<p>&lt;!--\n<em>syntax: isI2CConfigured()</em>\n<em>name: isI2CConfigured</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isInitialized()</p>\n<p>&lt;!--\n<em>syntax: isInitialized()</em>\n<em>name: isInitialized</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns true if a succesfull connection has been established\nand the Arduino has reported a firmware</p>\n<p>_description: _</p>\n<p>returns true if a succesfull connection has been established and the Arduino has reported a firmware</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isPin(pin)</p>\n<p>&lt;!--\n<em>syntax: isPin(pin)</em>\n<em>name: isPin</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: int pin</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofArduino()</h3>\n<p>&lt;!--\n<em>syntax: ofArduino()</em>\n<em>name: ofArduino</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Constructor and Destructor\n{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void processData(inputData)</p>\n<p>&lt;!--\n<em>syntax: processData(inputData)</em>\n<em>name: processData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: unsigned char inputData</em>\n<em>access: private</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void processDigitalPort(port, value)</p>\n<p>&lt;!--\n<em>syntax: processDigitalPort(port, value)</em>\n<em>name: processDigitalPort</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int port, unsigned char value</em>\n<em>access: private</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void processSysExData(data)</p>\n<p>&lt;!--\n<em>syntax: processSysExData(data)</em>\n<em>name: processSysExData</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int data</em>\n<em>access: private</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void purge()</p>\n<p>&lt;!--\n<em>syntax: purge()</em>\n<em>name: purge</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void resetEncoderPosition(encoderNum)</p>\n<p>&lt;!--\n<em>syntax: resetEncoderPosition(encoderNum)</em>\n<em>name: resetEncoderPosition</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int encoderNum</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendAnalogMappingRequest()</p>\n<p>&lt;!--\n<em>syntax: sendAnalogMappingRequest()</em>\n<em>name: sendAnalogMappingRequest</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendAnalogPinReporting(pin, mode)</p>\n<p>&lt;!--\n<em>syntax: sendAnalogPinReporting(pin, mode)</em>\n<em>name: sendAnalogPinReporting</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int pin, int mode</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendByte(byte)</p>\n<p>&lt;!--\n<em>syntax: sendByte(byte)</em>\n<em>name: sendByte</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: unsigned char byte</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sends a byte without wrapping it in a firmata message.</p>\n<p>Data has to be in the 0-127 range. Values &gt; 127 will be interpreted as\ncommands.</p>\n<p>_description: _</p>\n<p>sends a byte without wrapping it in a firmata message, data has to be in the 0-127 range,\nvalues &gt; 127 will be interpreted as commands.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendDigital(pin, value, force = false)</p>\n<p>&lt;!--\n<em>syntax: sendDigital(pin, value, force = false)</em>\n<em>name: sendDigital</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int pin, int value, bool force=false</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>}\n\\name Senders\n{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendDigitalPinMode(pin, mode)</p>\n<p>&lt;!--\n<em>syntax: sendDigitalPinMode(pin, mode)</em>\n<em>name: sendDigitalPinMode</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int pin, int mode</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Setting a pins mode to ARD_INPUT turns on reporting for the port the pin is on</p>\n<p><strong>Parameters:</strong></p>\n<p>pin Pin on arduino (2-13)</p>\n<p>mode <code>ARD_INPUT</code>, <code>ARD_OUTPUT</code>, <code>ARD_PWM</code>\n\\note Analog pins 0-5 can be used as digitial pins 16-21 but if the\nmode of <em>one</em> of these pins is set to <code>ARD_INPUT</code> then <em>all</em> analog pin\nreporting will be turned off</p>\n<p>_description: _</p>\n<p>On the Arduino Uno pin: 2-13 mode: ARD_INPUT, ARD_OUTPUT, ARD_PWM setting a pins mode to ARD_INPUT turns on reporting for the port the pin is on Note: analog pins 0-5 can be used as digitial pins 16-21 but if the mode of <em>one</em> of these pins is set to ARD_INPUT then <em>all</em> analog pin reporting will be turned off</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendDigitalPinReporting(pin, mode)</p>\n<p>&lt;!--\n<em>syntax: sendDigitalPinReporting(pin, mode)</em>\n<em>name: sendDigitalPinReporting</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int pin, int mode</em>\n<em>access: private</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendDigitalPortReporting(port, mode)</p>\n<p>&lt;!--\n<em>syntax: sendDigitalPortReporting(port, mode)</em>\n<em>name: sendDigitalPortReporting</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int port, int mode</em>\n<em>access: private</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendFirmwareVersionRequest()</p>\n<p>&lt;!--\n<em>syntax: sendFirmwareVersionRequest()</em>\n<em>name: sendFirmwareVersionRequest</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendI2CConfig(delay)</p>\n<p>&lt;!--\n<em>syntax: sendI2CConfig(delay)</em>\n<em>name: sendI2CConfig</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int delay</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sends a I2C config request</p>\n<p>Must be called before an I2C Read or Write</p>\n<p><strong>Parameters:</strong></p>\n<p>{number} delay in microseconds to set for I2C Read</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendI2CReadRequest(address, numBytes, reg)</p>\n<p>&lt;!--\n<em>syntax: sendI2CReadRequest(address, numBytes, reg)</em>\n<em>name: sendI2CReadRequest</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: char address, int numBytes, int reg</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Asks the arduino to request bytes from an I2C device</p>\n<p><strong>Parameters:</strong></p>\n<p>{number} slaveAddress The address of the I2C device</p>\n<p>{number} numBytes The number of bytes to receive.</p>\n<p>{function} callback A function to call when we have received the bytes.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendI2CWriteRequest(slaveAddress, *bytes, numOfBytes, reg)</p>\n<p>&lt;!--\n<em>syntax: sendI2CWriteRequest(slaveAddress, *bytes, numOfBytes, reg)</em>\n<em>name: sendI2CWriteRequest</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: char slaveAddress, unsigned char *bytes, int numOfBytes, int reg</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Asks the arduino to send an I2C request to a device</p>\n<p><strong>Parameters:</strong></p>\n<p>{number} slaveAddress The address of the I2C device</p>\n<p>{Array} bytes The bytes to send to the device</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendI2CWriteRequest(slaveAddress, *bytes, numOfBytes, reg)</p>\n<p>&lt;!--\n<em>syntax: sendI2CWriteRequest(slaveAddress, *bytes, numOfBytes, reg)</em>\n<em>name: sendI2CWriteRequest</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: char slaveAddress, const char *bytes, int numOfBytes, int reg</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendI2CWriteRequest(slaveAddress, *bytes, numOfBytes, reg)</p>\n<p>&lt;!--\n<em>syntax: sendI2CWriteRequest(slaveAddress, *bytes, numOfBytes, reg)</em>\n<em>name: sendI2CWriteRequest</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: char slaveAddress, char *bytes, int numOfBytes, int reg</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendI2CWriteRequest(slaveAddress, bytes, reg)</p>\n<p>&lt;!--\n<em>syntax: sendI2CWriteRequest(slaveAddress, bytes, reg)</em>\n<em>name: sendI2CWriteRequest</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: char slaveAddress, int bytes, int reg</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendI2ContinuousReadRequest(address, numBytes, reg)</p>\n<p>&lt;!--\n<em>syntax: sendI2ContinuousReadRequest(address, numBytes, reg)</em>\n<em>name: sendI2ContinuousReadRequest</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: char address, int numBytes, int reg</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Initialize a continuous I2C read.</p>\n<p><strong>Parameters:</strong></p>\n<p>{number} address    The address of the I2C device</p>\n<p>{number} register   Optionally set the register to read from.</p>\n<p>{number} numBytes   The number of bytes to receive.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendOneWireAlarmsSearch(pin)</p>\n<p>&lt;!--\n<em>syntax: sendOneWireAlarmsSearch(pin)</em>\n<em>name: sendOneWireAlarmsSearch</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int pin</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Searches for 1-wire devices on the bus in an alarmed state.</p>\n<p><strong>Parameters:</strong></p>\n<p>pin</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendOneWireConfig(pin, enableParasiticPower)</p>\n<p>&lt;!--\n<em>syntax: sendOneWireConfig(pin, enableParasiticPower)</em>\n<em>name: sendOneWireConfig</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int pin, bool enableParasiticPower</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Configure the passed pin as the controller in a 1-wire bus.</p>\n<p>Pass as enableParasiticPower true if you want the data pin to power the bus.</p>\n<p><strong>Parameters:</strong></p>\n<p>pin</p>\n<p>enableParasiticPower</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendOneWireDelay(pin, delay)</p>\n<p>&lt;!--\n<em>syntax: sendOneWireDelay(pin, delay)</em>\n<em>name: sendOneWireDelay</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int pin, unsigned int delay</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Tells firmata to not do anything for the passed amount of ms.</p>\n<p>For when you need to give a device attached to the bus time to do a calculation.</p>\n<p><strong>Parameters:</strong></p>\n<p>pin</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendOneWireRead(pin, devices, numBytesToRead)</p>\n<p>&lt;!--\n<em>syntax: sendOneWireRead(pin, devices, numBytesToRead)</em>\n<em>name: sendOneWireRead</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int pin, int devices, int numBytesToRead</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Reads data from a device on the bus.</p>\n<p>N.b. ConfigurableFirmata will issue the 1-wire select command internally.</p>\n<p><strong>Parameters:</strong></p>\n<p>pin</p>\n<p>device</p>\n<p>numBytesToRead</p>\n<p>callback</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendOneWireRequest(pin, subcommand, devices, numBytesToRead, correlationId, delay, dataToWrite)</p>\n<p>&lt;!--\n<em>syntax: sendOneWireRequest(pin, subcommand, devices, numBytesToRead, correlationId, delay, dataToWrite)</em>\n<em>name: sendOneWireRequest</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int pin, unsigned char subcommand, int devices, int numBytesToRead, unsigned char correlationId, unsigned int delay, int dataToWrite</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendOneWireReset(pin)</p>\n<p>&lt;!--\n<em>syntax: sendOneWireReset(pin)</em>\n<em>name: sendOneWireReset</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int pin</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Resets all devices on the bus.</p>\n<p><strong>Parameters:</strong></p>\n<p>pin</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendOneWireSearch(pin)</p>\n<p>&lt;!--\n<em>syntax: sendOneWireSearch(pin)</em>\n<em>name: sendOneWireSearch</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int pin</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Searches for 1-wire devices on the bus.</p>\n<p><strong>Parameters:</strong></p>\n<p>pin</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendOneWireSearch(type, pin)</p>\n<p>&lt;!--\n<em>syntax: sendOneWireSearch(type, pin)</em>\n<em>name: sendOneWireSearch</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: char type, int pin</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendOneWireWrite(pin, devices, data)</p>\n<p>&lt;!--\n<em>syntax: sendOneWireWrite(pin, devices, data)</em>\n<em>name: sendOneWireWrite</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int pin, int devices, int data</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Writes data to the bus to be received by the passed device.</p>\n<p>The device should be obtained from a previous call to sendOneWireSearch. ConfigurableFirmata will issue the 1-wire select command internally.</p>\n<p><strong>Parameters:</strong></p>\n<p>pin</p>\n<p>device</p>\n<p>data</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendOneWireWriteAndRead(pin, devices, data, numBytesToRead)</p>\n<p>&lt;!--\n<em>syntax: sendOneWireWriteAndRead(pin, devices, data, numBytesToRead)</em>\n<em>name: sendOneWireWriteAndRead</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int pin, int devices, int data, int numBytesToRead</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sends the passed data to the passed device on the bus, reads the specified number of bytes.</p>\n<p>ConfigurableFirmata will issue the 1-wire select command internally.</p>\n<p><strong>Parameters:</strong></p>\n<p>pin</p>\n<p>device</p>\n<p>data</p>\n<p>numBytesToRead</p>\n<p>callback</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendPinCapabilityRequest()</p>\n<p>&lt;!--\n<em>syntax: sendPinCapabilityRequest()</em>\n<em>name: sendPinCapabilityRequest</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendPinCofigurationRequest()</p>\n<p>&lt;!--\n<em>syntax: sendPinCofigurationRequest()</em>\n<em>name: sendPinCofigurationRequest</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendPinStateQuery(pin)</p>\n<p>&lt;!--\n<em>syntax: sendPinStateQuery(pin)</em>\n<em>name: sendPinStateQuery</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int pin</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendProtocolVersionRequest()</p>\n<p>&lt;!--\n<em>syntax: sendProtocolVersionRequest()</em>\n<em>name: sendProtocolVersionRequest</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendPwm(pin, value, force = false)</p>\n<p>&lt;!--\n<em>syntax: sendPwm(pin, value, force = false)</em>\n<em>name: sendPwm</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int pin, int value, bool force=false</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>On the Uno this will work on pins: 3, 5, 6, 9, 10 and 11 value: 0 (always off) to 255 (always on). the pins mode has to be set to ARD_PWM\nTODO check if the PWM bug still is there causing frequent digital port reporting...</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendReset()</p>\n<p>&lt;!--\n<em>syntax: sendReset()</em>\n<em>name: sendReset</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This will cause your Arduino to reset and boot into the program again.</p>\n<p>_description: _</p>\n<p>This will cause your Arduino to reset and boot into the program again.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendSerialConfig(portID, baud, rxPin, txPin)</p>\n<p>&lt;!--\n<em>syntax: sendSerialConfig(portID, baud, rxPin, txPin)</em>\n<em>name: sendSerialConfig</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: Firmata_Serial_Ports portID, int baud, int rxPin, int txPin</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Asks the Arduino to configure a hardware or serial port.</p>\n<p><strong>Parameters:</strong></p>\n<p>portID The serial port to use (HW_SERIAL1, HW_SERIAL2, HW_SERIAL3, SW_SERIAL0, SW_SERIAL1, SW_SERIAL2, SW_SERIAL3)</p>\n<p>baud  The baud rate of the serial port</p>\n<p>rxPin [SW Serial only] The RX pin of the SoftwareSerial instance</p>\n<p>txPin [SW Serial only] The TX pin of the SoftwareSerial instance</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendServo(pin, value, force = false)</p>\n<p>&lt;!--\n<em>syntax: sendServo(pin, value, force = false)</em>\n<em>name: sendServo</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int pin, int value, bool force=false</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Send a value to a servo.</p>\n<p>A servo has to be atached to the pin prior</p>\n<p><strong>Parameters:</strong></p>\n<p>pin 9 or 10</p>\n<p>value The value to send</p>\n<p>_description: _</p>\n<p>On the Arduino Uno pin: 9, 10\nthe pin has to have a servo attached for this to work.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendServoAttach(pin, minPulse = 544, maxPulse = 2400)</p>\n<p>&lt;!--\n<em>syntax: sendServoAttach(pin, minPulse = 544, maxPulse = 2400)</em>\n<em>name: sendServoAttach</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int pin, int minPulse=544, int maxPulse=2400</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Parameters:</strong></p>\n<p>angle parameter DEPRECATED as of Firmata 2.2</p>\n<p>_description: _</p>\n<p>On the Arduino Uno pin: 9, 10 attaches a servo to a pin\nangle parameter DEPRECATED as of Firmata 2.2</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendStepper2Wire(dirPin, stepPin, stepsPerRev = 200)</p>\n<p>&lt;!--\n<em>syntax: sendStepper2Wire(dirPin, stepPin, stepsPerRev = 200)</em>\n<em>name: sendStepper2Wire</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int dirPin, int stepPin, int stepsPerRev=200</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>-- stepper</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendStepper4Wire(pin1, pin2, pin3, pin4, stepsPerRev = 200)</p>\n<p>&lt;!--\n<em>syntax: sendStepper4Wire(pin1, pin2, pin3, pin4, stepsPerRev = 200)</em>\n<em>name: sendStepper4Wire</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int pin1, int pin2, int pin3, int pin4, int stepsPerRev=200</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>the pins has to have a stepper attached</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendStepperMove(stepperID, direction, steps, speed = 0, acceleration, deceleration)</p>\n<p>&lt;!--\n<em>syntax: sendStepperMove(stepperID, direction, steps, speed = 0, acceleration, deceleration)</em>\n<em>name: sendStepperMove</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int stepperID, int direction, int steps, int speed=0, float acceleration, float deceleration</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>the pins has to have a stepper attached</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendString(str)</p>\n<p>&lt;!--\n<em>syntax: sendString(str)</em>\n<em>name: sendString</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: string str</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Send a string to the Arduino\n\\note Firmata can not handle strings longer than 12 characters.</p>\n<p>_description: _</p>\n<p>firmata can not handle strings longer than 12 characters.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendSysEx(command, data)</p>\n<p>&lt;!--\n<em>syntax: sendSysEx(command, data)</em>\n<em>name: sendSysEx</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int command, int data</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendSysExBegin()</p>\n<p>&lt;!--\n<em>syntax: sendSysExBegin()</em>\n<em>name: sendSysExBegin</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sends the <code>FIRMATA_START_SYSEX</code> command</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendSysExEnd()</p>\n<p>&lt;!--\n<em>syntax: sendSysExEnd()</em>\n<em>name: sendSysExEnd</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sends the <code>FIRMATA_END_SYSEX</code> command</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void sendValueAsTwo7bitBytes(value)</p>\n<p>&lt;!--\n<em>syntax: sendValueAsTwo7bitBytes(value)</em>\n<em>name: sendValueAsTwo7bitBytes</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int value</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Send value as two 7 bit bytes.</p>\n<p>Sends a value as two 7-bit bytes without wrapping it in a firmata\nmessage.  Values in the range 0 - 16384 will be sent as two bytes\nwithin the 0-127 data range.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The value to send.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void serialClose(portID)</p>\n<p>&lt;!--\n<em>syntax: serialClose(portID)</em>\n<em>name: serialClose</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: Firmata_Serial_Ports portID</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Close the specified serial port.</p>\n<p><strong>Parameters:</strong></p>\n<p>portId The serial port to close.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void serialFlush(portID)</p>\n<p>&lt;!--\n<em>syntax: serialFlush(portID)</em>\n<em>name: serialFlush</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: Firmata_Serial_Ports portID</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Flush the specified serial port.</p>\n<p>For hardware serial, this waits for the transmission of outgoing serial data to complete.For software serial, this removed any buffered incoming serial data.</p>\n<p><strong>Parameters:</strong></p>\n<p>portId The serial port to listen on.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void serialListen(portID)</p>\n<p>&lt;!--\n<em>syntax: serialListen(portID)</em>\n<em>name: serialListen</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: Firmata_Serial_Ports portID</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>For SoftwareSerial only. Only a single SoftwareSerial instance can read data at a time.</p>\n<p>Call this method to set this port to be the reading port in the case there are multiple SoftwareSerial instances.</p>\n<p><strong>Parameters:</strong></p>\n<p>portId The serial port to flush.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void serialRead(port, maxBytesToRead)</p>\n<p>&lt;!--\n<em>syntax: serialRead(port, maxBytesToRead)</em>\n<em>name: serialRead</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: Firmata_Serial_Ports port, int maxBytesToRead</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Start continuous reading of the specified serial port.</p>\n<p>The port is checked for data each iteration of the main Arduino loop.</p>\n<p><strong>Parameters:</strong></p>\n<p>portId The serial port to start reading continuously.</p>\n<p>maxBytesToRead [Optional] The maximum number of bytes to read per iteration.\n\\note If there are less bytes in the buffer, the lesser number of bytes will be returned. A value of 0 indicates that all available bytes in the buffer should be read.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void serialStop(portID)</p>\n<p>&lt;!--\n<em>syntax: serialStop(portID)</em>\n<em>name: serialStop</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: Firmata_Serial_Ports portID</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Stop continuous reading of the specified serial port.</p>\n<p>This does not close the port, it stops reading it but keeps the port open.</p>\n<p><strong>Parameters:</strong></p>\n<p>portId The serial port to stop reading.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void serialWrite(port, *bytes, numOfBytes)</p>\n<p>&lt;!--\n<em>syntax: serialWrite(port, *bytes, numOfBytes)</em>\n<em>name: serialWrite</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: Firmata_Serial_Ports port, unsigned char *bytes, int numOfBytes</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Write an array of bytes to the specified serial port.</p>\n<p><strong>Parameters:</strong></p>\n<p>portId The serial port to write to.</p>\n<p>bytes An array of bytes to write to the serial port.</p>\n<p>numOfBytes length of the array of bytes.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setAnalogHistoryLength(length)</p>\n<p>&lt;!--\n<em>syntax: setAnalogHistoryLength(length)</em>\n<em>name: setAnalogHistoryLength</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int length</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setDigitalHistoryLength(length)</p>\n<p>&lt;!--\n<em>syntax: setDigitalHistoryLength(length)</em>\n<em>name: setDigitalHistoryLength</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int length</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setStringHistoryLength(length)</p>\n<p>&lt;!--\n<em>syntax: setStringHistoryLength(length)</em>\n<em>name: setStringHistoryLength</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int length</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setSysExHistoryLength(nSysEx)</p>\n<p>&lt;!--\n<em>syntax: setSysExHistoryLength(nSysEx)</em>\n<em>name: setSysExHistoryLength</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int nSysEx</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setUseDelay(bDelay)</p>\n<p>&lt;!--\n<em>syntax: setUseDelay(bDelay)</em>\n<em>name: setUseDelay</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool bDelay</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void update()</p>\n<p>&lt;!--\n<em>syntax: update()</em>\n<em>name: update</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Polls data from the serial port, this has to be called periodically</p>\n<p>_description: _</p>\n<p>polls data from the serial port, this has to be called periodically</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>~ofArduino()</h3>\n<p>&lt;!--\n<em>syntax: ~ofArduino()</em>\n<em>name: ~ofArduino</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###ofEvent&lt; const int &gt; EAnalogPinChanged</p>\n<p>&lt;!--\n<em>name: EAnalogPinChanged</em>\n<em>type: ofEvent&lt; const int &gt;</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Triggered when an analog pin changes value, the pin that\nchanged is passed as an argument.</p>\n<p>_description: _</p>\n<p>triggered when an analog pin changes value, the pin that changed is passed as an argument</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofEvent&lt; const int &gt; EDigitalPinChanged</p>\n<p>&lt;!--\n<em>name: EDigitalPinChanged</em>\n<em>type: ofEvent&lt; const int &gt;</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Triggered when a digital pin changes value, the pin that\nchanged is passed as an argument.</p>\n<p>_description: _</p>\n<p>triggered when a digital pin changes value, the pin that changed is passed as an argument</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int EEncoderDataReceived</p>\n<p>&lt;!--\n<em>name: EEncoderDataReceived</em>\n<em>type: int</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>triggered when the encoder returns data after a read request</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofEvent&lt; const int &gt; EFirmwareVersionReceived</p>\n<p>&lt;!--\n<em>name: EFirmwareVersionReceived</em>\n<em>type: ofEvent&lt; const int &gt;</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Triggered when a firmware version is received, the major version\nis passed as an argument.</p>\n<p>_description: _</p>\n<p>triggered when a firmware version is received, the major version is passed as an argument</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int EI2CDataRecieved</p>\n<p>&lt;!--\n<em>name: EI2CDataRecieved</em>\n<em>type: int</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>triggered when the I2C bus returns data after a read request</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofEvent&lt; const int &gt; EInitialized</p>\n<p>&lt;!--\n<em>name: EInitialized</em>\n<em>type: ofEvent&lt; const int &gt;</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Triggered when the firmware version is received upon connect,\nthe major firmware version is passed as an argument. From this point\nit's safe to send to the Arduino.</p>\n<p>_description: _</p>\n<p>triggered when the firmware version is received upon connect, the major firmware version is passed as an argument\nfrom this point it's safe to send to the Arduino.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int EPinStateResponseReceived</p>\n<p>&lt;!--\n<em>name: EPinStateResponseReceived</em>\n<em>type: int</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int ESerialDataReceived</p>\n<p>&lt;!--\n<em>name: ESerialDataReceived</em>\n<em>type: int</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>triggered when a Serial message is received. Returns which\nport and its data</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int EStepperDataReceived</p>\n<p>&lt;!--\n<em>name: EStepperDataReceived</em>\n<em>type: int</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>triggered when a stepper has finished rotating. Returns which\nstepper has complted its rotation</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofEvent&lt; const string &gt; EStringReceived</p>\n<p>&lt;!--\n<em>name: EStringReceived</em>\n<em>type: ofEvent&lt; const string &gt;</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Triggered when a string is received, the string is passed as an\nargument</p>\n<p>_description: _</p>\n<p>triggered when a string is received, the string is passed as an argument</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofEvent&lt; const vector&lt; unsigned char &gt; &gt; ESysExReceived</p>\n<p>&lt;!--\n<em>name: ESysExReceived</em>\n<em>type: ofEvent&lt; const vector&lt; unsigned char &gt; &gt;</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Triggered when a SysEx message that isn't in the extended\ncommand set is received, the SysEx message is passed as an argument</p>\n<p>_description: _</p>\n<p>triggered when a SysEx message that isn't in the extended command set is received, the SysEx message is passed as an argument</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###list&lt; int &gt; _analogHistory</p>\n<p>&lt;!--\n_name: <em>analogHistory</em>\n<em>type: list&lt; int &gt;</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int _analogHistoryLength</p>\n<p>&lt;!--\n_name: <em>analogHistoryLength</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int _analogPinReporting</p>\n<p>&lt;!--\n_name: <em>analogPinReporting</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###list&lt; int &gt; _digitalHistory</p>\n<p>&lt;!--\n_name: <em>digitalHistory</em>\n<em>type: list&lt; int &gt;</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int _digitalHistoryLength</p>\n<p>&lt;!--\n_name: <em>digitalHistoryLength</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int _digitalPinMode</p>\n<p>&lt;!--\n_name: <em>digitalPinMode</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int _digitalPinReporting</p>\n<p>&lt;!--\n_name: <em>digitalPinReporting</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int _digitalPinValue</p>\n<p>&lt;!--\n_name: <em>digitalPinValue</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int _digitalPortReporting</p>\n<p>&lt;!--\n_name: <em>digitalPortReporting</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int _digitalPortValue</p>\n<p>&lt;!--\n_name: <em>digitalPortValue</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int _encoderID</p>\n<p>&lt;!--\n_name: <em>encoderID</em>\n<em>type: int</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int _executeMultiByteCommand</p>\n<p>&lt;!--\n_name: <em>executeMultiByteCommand</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>&lt; Indicate Firmata command to execute.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string _firmwareName</p>\n<p>&lt;!--\n_name: <em>firmwareName</em>\n<em>type: string</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int _firstAnalogPin</p>\n<p>&lt;!--\n_name: <em>firstAnalogPin</em>\n<em>type: int</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool _i2cConfigured</p>\n<p>&lt;!--\n_name: <em>i2cConfigured</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool _initialized</p>\n<p>&lt;!--\n_name: <em>initialized</em>\n<em>type: bool</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int _majorFirmwareVersion</p>\n<p>&lt;!--\n_name: <em>majorFirmwareVersion</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int _minorFirmwareVersion</p>\n<p>&lt;!--\n_name: <em>minorFirmwareVersion</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int _multiByteChannel</p>\n<p>&lt;!--\n_name: <em>multiByteChannel</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>&lt; Indicates which pin the data came from.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int _numEncoders</p>\n<p>&lt;!--\n_name: <em>numEncoders</em>\n<em>type: int</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int _numSteppers</p>\n<p>&lt;!--\n_name: <em>numSteppers</em>\n<em>type: int</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofSerial _port</p>\n<p>&lt;!--\n_name: <em>port</em>\n<em>type: ofSerial</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int _portStatus</p>\n<p>&lt;!--\n_name: <em>portStatus</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int _servoValue</p>\n<p>&lt;!--\n_name: <em>servoValue</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###unsigned char _storedInputData</p>\n<p>&lt;!--\n_name: <em>storedInputData</em>\n<em>type: unsigned char</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###list&lt; string &gt; _stringHistory</p>\n<p>&lt;!--\n_name: <em>stringHistory</em>\n<em>type: list&lt; string &gt;</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int _stringHistoryLength</p>\n<p>&lt;!--\n_name: <em>stringHistoryLength</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vector&lt; unsigned char &gt; _sysExData</p>\n<p>&lt;!--\n_name: <em>sysExData</em>\n<em>type: vector&lt; unsigned char &gt;</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###list&lt; vector&lt; unsigned char &gt; &gt; _sysExHistory</p>\n<p>&lt;!--\n_name: <em>sysExHistory</em>\n<em>type: list&lt; vector&lt; unsigned char &gt; &gt;</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int _sysExHistoryLength</p>\n<p>&lt;!--\n_name: <em>sysExHistoryLength</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int _totalAnalogPins</p>\n<p>&lt;!--\n_name: <em>totalAnalogPins</em>\n<em>type: int</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>&lt; Indicate the total number of digital pins of the board in use.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int _totalDigitalPins</p>\n<p>&lt;!--\n_name: <em>totalDigitalPins</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int _waitForData</p>\n<p>&lt;!--\n_name: <em>waitForData</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int analogPinMap</p>\n<p>&lt;!--\n<em>name: analogPinMap</em>\n<em>type: int</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool bUseDelay</p>\n<p>&lt;!--\n<em>name: bUseDelay</em>\n<em>type: bool</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float connectTime</p>\n<p>&lt;!--\n<em>name: connectTime</em>\n<em>type: float</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>&lt; This represents the (running) time of establishing a serial connection.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool connected</p>\n<p>&lt;!--\n<em>name: connected</em>\n<em>type: bool</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>&lt; This yields true if a serial connection to Arduino exists.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool firmataAnalogSupported</p>\n<p>&lt;!--\n<em>name: firmataAnalogSupported</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool firmataEncoderSupported</p>\n<p>&lt;!--\n<em>name: firmataEncoderSupported</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool firmataI2cSupported</p>\n<p>&lt;!--\n<em>name: firmataI2cSupported</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool firmataInputSupported</p>\n<p>&lt;!--\n<em>name: firmataInputSupported</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool firmataOnewireSupported</p>\n<p>&lt;!--\n<em>name: firmataOnewireSupported</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool firmataOutputSupported</p>\n<p>&lt;!--\n<em>name: firmataOutputSupported</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool firmataPwmSupported</p>\n<p>&lt;!--\n<em>name: firmataPwmSupported</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool firmataSerialSupported</p>\n<p>&lt;!--\n<em>name: firmataSerialSupported</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool firmataServoSupported</p>\n<p>&lt;!--\n<em>name: firmataServoSupported</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool firmataStepperSupported</p>\n<p>&lt;!--\n<em>name: firmataStepperSupported</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int pinCapabilities</p>\n<p>&lt;!--\n<em>name: pinCapabilities</em>\n<em>type: int</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofArduino\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\nThis is a way to control an Arduino that has had the firmata library\nloaded onto it, from OF.\n\nTo load firmata onto your Arduino, run the Arduino IDE, open the Examples >\nFirmata > StandardFirmata sketch, and upload it to the Arduino board.\n\nOnce the ofArduino instance returns true from isArduinoReady() you can set\nthe mode of the different digital pins using sendDigitalPinMode()\n\nThis sets pin 9 to input so that it can read a button press\n~~~~{.cpp}\n    sendDigitalPinMode(9, ARD_INPUT)\n~~~~\n\nThis sets pin 9 to be a PWM out pin. Note that this only works on pins\nthat are PWM enabled.\n~~~~{.cpp}\n    sendDigitalPinMode(9, ARD_PWM)\n~~~~\n\n\n\n\n\n##Description\n\nThis is a way to control an Arduino that has had the firmata library loaded onto it, from OF. To load firmata onto your Arduino,  run the Arduino IDE, open the Examples > Firmata > StandardFirmata sketch, and upload it to the Arduino board.\nOnce the ofArduino instance returns true from isArduinoReady() you can set the mode of the different digital pins using sendDigitalPinMode()\n   \n~~~~{.cpp}\nsendDigitalPinMode(9, ARD_INPUT)\n~~~~\n\nThis sets pin 9 to input so that it can read a button press, while:\n\n~~~~{.cpp}\nsendDigitalPinMode(9, ARD_PWM)\n~~~~\n\nsets pin 9 to be a PWM out pin. Note that this only works on pins that are PWM enabled.\n\n\n\n\n\n##Methods\n\n\n\n###void attachEncoder(pinA, pinB)\n\n<!--\n_syntax: attachEncoder(pinA, pinB)_\n_name: attachEncoder_\n_returns: void_\n_returns_description: _\n_parameters: int pinA, int pinB_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\}\n\\name Encoder\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool connect(&device, baud = 57600)\n\n<!--\n_syntax: connect(&device, baud = 57600)_\n_name: connect_\n_returns: bool_\n_returns_description: _\n_parameters: const string &device, int baud=57600_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nOpens a serial port connection to the arduino\n\n**Parameters:**\n\ndevice The name of the device.\nYou can get the name from the Arduino IDE\n\nbaud The baud rate the connection uses\n\n\n\n\n\n_description: _\n\nopens a serial port connection to the arduino\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int convertAnalogPinToDigital(pin)\n\n<!--\n_syntax: convertAnalogPinToDigital(pin)_\n_name: convertAnalogPinToDigital_\n_returns: int_\n_returns_description: _\n_parameters: size_t pin_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int convertDigitalPinToAnalog(pin)\n\n<!--\n_syntax: convertDigitalPinToAnalog(pin)_\n_name: convertDigitalPinToAnalog_\n_returns: int_\n_returns_description: _\n_parameters: size_t pin_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void detachEncoder(encoderNum)\n\n<!--\n_syntax: detachEncoder(encoderNum)_\n_name: detachEncoder_\n_returns: void_\n_returns_description: _\n_parameters: int encoderNum_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void disableEncoderReporting()\n\n<!--\n_syntax: disableEncoderReporting()_\n_name: disableEncoderReporting_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void disconnect()\n\n<!--\n_syntax: disconnect()_\n_name: disconnect_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCloses the serial port connection.\nDoes not turn the Arduino off.\n\n\n\n\n\n_description: _\n\ncloses the serial port connection. Does not turn the Arduino off.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void enableEncoderReporting()\n\n<!--\n_syntax: enableEncoderReporting()_\n_name: enableEncoderReporting_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void getAllEncoderPositions()\n\n<!--\n_syntax: getAllEncoderPositions()_\n_name: getAllEncoderPositions_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getAnalog(pin)\n\n<!--\n_syntax: getAnalog(pin)_\n_name: getAnalog_\n_returns: int_\n_returns_description: _\n_parameters: int pin_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the analog in value that the pin is currently reading.\nbecause the Arduino has a 10 bit ADC you get between 0 and 1023 for\npossible values.\n\n\n**Parameters:**\n\npin The pin number (0-5)\n\n\n\n\n\n_description: _\n\nReturns the analog in value that the pin is currently reading. because the Arduino has a 10 bit ADC you get between 0 and 1023 for possible values.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int * getAnalogHistory()\n\n<!--\n_syntax: getAnalogHistory()_\n_name: getAnalogHistory_\n_returns: int *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\nReturns a pointer to the analog data history list for the given pin.\n\n**Parameters:**\n\npin The Arduino Uno pin: 0-5\n\n\n\n\n\n_description: _\n\nOn the Arduino Uno pin: 0-5\nreturns a pointer to the analog data history list for the given pin\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getAnalogPinReporting(pin)\n\n<!--\n_syntax: getAnalogPinReporting(pin)_\n_name: getAnalogPinReporting_\n_returns: int_\n_returns_description: _\n_parameters: int pin_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: `ARD_ON` or `ARD_OFF`\n\n\n\n\n\n_description: _\n\nreturns ARD_ON, ARD_OFF\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getDigital(pin)\n\n<!--\n_syntax: getDigital(pin)_\n_name: getDigital_\n_returns: int_\n_returns_description: _\n_parameters: int pin_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the last received value (if the pin mode is ARD_INPUT)\nor the last set value (if the pin mode is ARD_OUTPUT) for the given\npin\n\nReturns whether the pin is reading high or low, 1 or 0. You can test\nagainst this with an if() statement which is handy:\n~~~~{.cpp}\n    if(arduino.getDigital(pin)){\n        // do something on high\n    } else {\n        // do something on low\n    }\n~~~~\n\\note Pin 16-21 can also be used if analog inputs 0-5 are used as digital pins\n\n\n\n\n\n_description: _\n\nOn the Arduino Uno pin: 2-13\nreturns the last received value (if the pin mode is ARD_INPUT) or the last set value (if the pin mode is ARD_OUTPUT) for the given pin\nNote: pin 16-21 can also be used if analog inputs 0-5 are used as digital pins\nReturns whether the pin is reading high or low, 1 or 0. You can test against this with an if() statement which is handy:\n~~~~{.cpp}\nif(arduino.getDigital(pin)){\n    // do something on high\n}else{\n    // do something on low\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int * getDigitalHistory()\n\n<!--\n_syntax: getDigitalHistory()_\n_name: getDigitalHistory_\n_returns: int *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\nReturns a pointer to the digital data history list for the\ngiven pin\n\\note Pin 16-21 can also be used if analog inputs 0-5 are used as\ndigital pins\n\n**Parameters:**\n\npin The pin number (2-13)\n\n\n\n\n\n_description: _\n\nOn the Arduino Uno pin: 2-13\nreturns a pointer to the digital data history list for the given pin\nNote: pin 16-21 can also be used if analog inputs 0-5 are used as digital pins\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getDigitalPinMode(pin)\n\n<!--\n_syntax: getDigitalPinMode(pin)_\n_name: getDigitalPinMode_\n_returns: int_\n_returns_description: _\n_parameters: int pin_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the pin mode of the given pin\n\n\n**Returns**: `ARD_INPUT`, `ARD_OUTPUT`, `ARD_PWM`, `ARD_SERVO`, `ARD_ANALOG`\n\n\n\n\n\n_description: _\n\nreturns ARD_INPUT, ARD_OUTPUT, ARD_PWM, ARD_SERVO, ARD_ANALOG\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void getEncoderPosition(encoderNum)\n\n<!--\n_syntax: getEncoderPosition(encoderNum)_\n_name: getEncoderPosition_\n_returns: void_\n_returns_description: _\n_parameters: int encoderNum_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string getFirmwareName()\n\n<!--\n_syntax: getFirmwareName()_\n_name: getFirmwareName_\n_returns: string_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n**Returns**: the name of the firmware.\n\n\n\n\n\n_description: _\n\nreturns the name of the firmware\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getInvertedValueFromTwo7bitBytes(lsb, msb)\n\n<!--\n_syntax: getInvertedValueFromTwo7bitBytes(lsb, msb)_\n_name: getInvertedValueFromTwo7bitBytes_\n_returns: int_\n_returns_description: _\n_parameters: unsigned char lsb, unsigned char msb_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getMajorFirmwareVersion()\n\n<!--\n_syntax: getMajorFirmwareVersion()_\n_name: getMajorFirmwareVersion_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n**Returns**: the major firmware version.\n\n\n\n\n\n_description: _\n\nreturns the major firmware version\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getMinorFirmwareVersion()\n\n<!--\n_syntax: getMinorFirmwareVersion()_\n_name: getMinorFirmwareVersion_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n**Returns**: the minor firmware version.\n\n\n\n\n\n_description: _\n\nreturns the minor firmware version\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getNumAnalogPins()\n\n<!--\n_syntax: getNumAnalogPins()_\n_name: getNumAnalogPins_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getPinCapabilities()\n\n<!--\n_syntax: getPinCapabilities()_\n_name: getPinCapabilities_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getPwm(pin)\n\n<!--\n_syntax: getPwm(pin)_\n_name: getPwm_\n_returns: int_\n_returns_description: _\n_parameters: int pin_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the last set PWM value (0-255) for the given pin\n\nThe pins mode has to be ARD_PWM\n\nOn the Arduino Uno the following pins are supported: 3, 5, 6, 9, 10 and 11\n\\note Pin 16-21 can also be used if analog inputs 0-5 are used as digital pins\n\n\n\n\n\n_description: _\n\nOn the Arduino Uno pin: 3, 5, 6, 9, 10 and 11\nreturns the last set PWM value (0-255) for the given pin\nthe pins mode has to be ARD_PWM\nNote: pin 16-21 can also be used if analog inputs 0-5 are used as digital pins\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getServo(pin)\n\n<!--\n_syntax: getServo(pin)_\n_name: getServo_\n_returns: int_\n_returns_description: _\n_parameters: int pin_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n**Returns**: the last set servo value for a pin if the pin has a servo attached.\n\n\n\n\n\n_description: _\n\nreturns the last set servo value for a pin if the pin has a servo attached\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string getString()\n\n<!--\n_syntax: getString()_\n_name: getString_\n_returns: string_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: the last received string.\n\n\n\n\n\n_description: _\n\nreturns the last received string\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int * getStringHistory()\n\n<!--\n_syntax: getStringHistory()_\n_name: getStringHistory_\n_returns: int *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n**Returns**: a pointer to the string history.\n\n\n\n\n\n_description: _\n\nreturns a pointer to the string history\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getSysEx()\n\n<!--\n_syntax: getSysEx()_\n_name: getSysEx_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n**Returns**: the last received SysEx message.\n\n\n\n\n\n_description: _\n\nreturns the last received SysEx message\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int * getSysExHistory()\n\n<!--\n_syntax: getSysExHistory()_\n_name: getSysExHistory_\n_returns: int *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n**Returns**: a pointer to the SysEx history.\n\n\n\n\n\n_description: _\n\nreturns a pointer to the SysEx history\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getTotalPins()\n\n<!--\n_syntax: getTotalPins()_\n_name: getTotalPins_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getValueFromTwo7bitBytes(lsb, msb)\n\n<!--\n_syntax: getValueFromTwo7bitBytes(lsb, msb)_\n_name: getValueFromTwo7bitBytes_\n_returns: int_\n_returns_description: _\n_parameters: unsigned char lsb, unsigned char msb_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\nUseful for parsing SysEx messages\n\n\n\n\n\n_description: _\n\nuseful for parsing SysEx messages\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void initPins()\n\n<!--\n_syntax: initPins()_\n_name: initPins_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\< Indicate that pins are initialized.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isAnalogPin(pin)\n\n<!--\n_syntax: isAnalogPin(pin)_\n_name: isAnalogPin_\n_returns: bool_\n_returns_description: _\n_parameters: int pin_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isArduinoReady()\n\n<!--\n_syntax: isArduinoReady()_\n_name: isArduinoReady_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isAttached()\n\n<!--\n_syntax: isAttached()_\n_name: isAttached_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isI2CConfigured()\n\n<!--\n_syntax: isI2CConfigured()_\n_name: isI2CConfigured_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isInitialized()\n\n<!--\n_syntax: isInitialized()_\n_name: isInitialized_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns true if a succesfull connection has been established\nand the Arduino has reported a firmware\n\n\n\n\n\n_description: _\n\nreturns true if a succesfull connection has been established and the Arduino has reported a firmware\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isPin(pin)\n\n<!--\n_syntax: isPin(pin)_\n_name: isPin_\n_returns: bool_\n_returns_description: _\n_parameters: int pin_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofArduino()\n\n<!--\n_syntax: ofArduino()_\n_name: ofArduino_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Constructor and Destructor\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void processData(inputData)\n\n<!--\n_syntax: processData(inputData)_\n_name: processData_\n_returns: void_\n_returns_description: _\n_parameters: unsigned char inputData_\n_access: private_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void processDigitalPort(port, value)\n\n<!--\n_syntax: processDigitalPort(port, value)_\n_name: processDigitalPort_\n_returns: void_\n_returns_description: _\n_parameters: int port, unsigned char value_\n_access: private_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void processSysExData(data)\n\n<!--\n_syntax: processSysExData(data)_\n_name: processSysExData_\n_returns: void_\n_returns_description: _\n_parameters: int data_\n_access: private_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void purge()\n\n<!--\n_syntax: purge()_\n_name: purge_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void resetEncoderPosition(encoderNum)\n\n<!--\n_syntax: resetEncoderPosition(encoderNum)_\n_name: resetEncoderPosition_\n_returns: void_\n_returns_description: _\n_parameters: int encoderNum_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendAnalogMappingRequest()\n\n<!--\n_syntax: sendAnalogMappingRequest()_\n_name: sendAnalogMappingRequest_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendAnalogPinReporting(pin, mode)\n\n<!--\n_syntax: sendAnalogPinReporting(pin, mode)_\n_name: sendAnalogPinReporting_\n_returns: void_\n_returns_description: _\n_parameters: int pin, int mode_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendByte(byte)\n\n<!--\n_syntax: sendByte(byte)_\n_name: sendByte_\n_returns: void_\n_returns_description: _\n_parameters: unsigned char byte_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSends a byte without wrapping it in a firmata message.\n\nData has to be in the 0-127 range. Values > 127 will be interpreted as\ncommands.\n\n\n\n\n\n_description: _\n\nsends a byte without wrapping it in a firmata message, data has to be in the 0-127 range,\nvalues > 127 will be interpreted as commands.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendDigital(pin, value, force = false)\n\n<!--\n_syntax: sendDigital(pin, value, force = false)_\n_name: sendDigital_\n_returns: void_\n_returns_description: _\n_parameters: int pin, int value, bool force=false_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\}\n\\name Senders\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendDigitalPinMode(pin, mode)\n\n<!--\n_syntax: sendDigitalPinMode(pin, mode)_\n_name: sendDigitalPinMode_\n_returns: void_\n_returns_description: _\n_parameters: int pin, int mode_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSetting a pins mode to ARD_INPUT turns on reporting for the port the pin is on\n\n**Parameters:**\n\npin Pin on arduino (2-13)\n\nmode `ARD_INPUT`, `ARD_OUTPUT`, `ARD_PWM`\n\\note Analog pins 0-5 can be used as digitial pins 16-21 but if the\nmode of _one_ of these pins is set to `ARD_INPUT` then _all_ analog pin\nreporting will be turned off\n\n\n\n\n\n_description: _\n\nOn the Arduino Uno pin: 2-13 mode: ARD_INPUT, ARD_OUTPUT, ARD_PWM setting a pins mode to ARD_INPUT turns on reporting for the port the pin is on Note: analog pins 0-5 can be used as digitial pins 16-21 but if the mode of _one_ of these pins is set to ARD_INPUT then _all_ analog pin reporting will be turned off\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendDigitalPinReporting(pin, mode)\n\n<!--\n_syntax: sendDigitalPinReporting(pin, mode)_\n_name: sendDigitalPinReporting_\n_returns: void_\n_returns_description: _\n_parameters: int pin, int mode_\n_access: private_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendDigitalPortReporting(port, mode)\n\n<!--\n_syntax: sendDigitalPortReporting(port, mode)_\n_name: sendDigitalPortReporting_\n_returns: void_\n_returns_description: _\n_parameters: int port, int mode_\n_access: private_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendFirmwareVersionRequest()\n\n<!--\n_syntax: sendFirmwareVersionRequest()_\n_name: sendFirmwareVersionRequest_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendI2CConfig(delay)\n\n<!--\n_syntax: sendI2CConfig(delay)_\n_name: sendI2CConfig_\n_returns: void_\n_returns_description: _\n_parameters: int delay_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSends a I2C config request\n\n Must be called before an I2C Read or Write\n\n**Parameters:**\n\n{number} delay in microseconds to set for I2C Read\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendI2CReadRequest(address, numBytes, reg)\n\n<!--\n_syntax: sendI2CReadRequest(address, numBytes, reg)_\n_name: sendI2CReadRequest_\n_returns: void_\n_returns_description: _\n_parameters: char address, int numBytes, int reg_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAsks the arduino to request bytes from an I2C device\n\n\n**Parameters:**\n\n{number} slaveAddress The address of the I2C device\n\n{number} numBytes The number of bytes to receive.\n\n{function} callback A function to call when we have received the bytes.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendI2CWriteRequest(slaveAddress, *bytes, numOfBytes, reg)\n\n<!--\n_syntax: sendI2CWriteRequest(slaveAddress, *bytes, numOfBytes, reg)_\n_name: sendI2CWriteRequest_\n_returns: void_\n_returns_description: _\n_parameters: char slaveAddress, unsigned char *bytes, int numOfBytes, int reg_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAsks the arduino to send an I2C request to a device\n\n\n**Parameters:**\n\n{number} slaveAddress The address of the I2C device\n\n{Array} bytes The bytes to send to the device\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendI2CWriteRequest(slaveAddress, *bytes, numOfBytes, reg)\n\n<!--\n_syntax: sendI2CWriteRequest(slaveAddress, *bytes, numOfBytes, reg)_\n_name: sendI2CWriteRequest_\n_returns: void_\n_returns_description: _\n_parameters: char slaveAddress, const char *bytes, int numOfBytes, int reg_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendI2CWriteRequest(slaveAddress, *bytes, numOfBytes, reg)\n\n<!--\n_syntax: sendI2CWriteRequest(slaveAddress, *bytes, numOfBytes, reg)_\n_name: sendI2CWriteRequest_\n_returns: void_\n_returns_description: _\n_parameters: char slaveAddress, char *bytes, int numOfBytes, int reg_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendI2CWriteRequest(slaveAddress, bytes, reg)\n\n<!--\n_syntax: sendI2CWriteRequest(slaveAddress, bytes, reg)_\n_name: sendI2CWriteRequest_\n_returns: void_\n_returns_description: _\n_parameters: char slaveAddress, int bytes, int reg_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendI2ContinuousReadRequest(address, numBytes, reg)\n\n<!--\n_syntax: sendI2ContinuousReadRequest(address, numBytes, reg)_\n_name: sendI2ContinuousReadRequest_\n_returns: void_\n_returns_description: _\n_parameters: char address, int numBytes, int reg_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nInitialize a continuous I2C read.\n\n\n**Parameters:**\n\n{number} address    The address of the I2C device\n\n{number} register   Optionally set the register to read from.\n\n{number} numBytes   The number of bytes to receive.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendOneWireAlarmsSearch(pin)\n\n<!--\n_syntax: sendOneWireAlarmsSearch(pin)_\n_name: sendOneWireAlarmsSearch_\n_returns: void_\n_returns_description: _\n_parameters: int pin_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSearches for 1-wire devices on the bus in an alarmed state.\n\n\n**Parameters:**\n\npin\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendOneWireConfig(pin, enableParasiticPower)\n\n<!--\n_syntax: sendOneWireConfig(pin, enableParasiticPower)_\n_name: sendOneWireConfig_\n_returns: void_\n_returns_description: _\n_parameters: int pin, bool enableParasiticPower_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConfigure the passed pin as the controller in a 1-wire bus.\n\nPass as enableParasiticPower true if you want the data pin to power the bus.\n\n**Parameters:**\n\npin\n\nenableParasiticPower\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendOneWireDelay(pin, delay)\n\n<!--\n_syntax: sendOneWireDelay(pin, delay)_\n_name: sendOneWireDelay_\n_returns: void_\n_returns_description: _\n_parameters: int pin, unsigned int delay_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTells firmata to not do anything for the passed amount of ms.\n\nFor when you need to give a device attached to the bus time to do a calculation.\n\n**Parameters:**\n\npin\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendOneWireRead(pin, devices, numBytesToRead)\n\n<!--\n_syntax: sendOneWireRead(pin, devices, numBytesToRead)_\n_name: sendOneWireRead_\n_returns: void_\n_returns_description: _\n_parameters: int pin, int devices, int numBytesToRead_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReads data from a device on the bus.\n\nN.b. ConfigurableFirmata will issue the 1-wire select command internally.\n\n**Parameters:**\n\npin\n\ndevice\n\nnumBytesToRead\n\ncallback\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendOneWireRequest(pin, subcommand, devices, numBytesToRead, correlationId, delay, dataToWrite)\n\n<!--\n_syntax: sendOneWireRequest(pin, subcommand, devices, numBytesToRead, correlationId, delay, dataToWrite)_\n_name: sendOneWireRequest_\n_returns: void_\n_returns_description: _\n_parameters: int pin, unsigned char subcommand, int devices, int numBytesToRead, unsigned char correlationId, unsigned int delay, int dataToWrite_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendOneWireReset(pin)\n\n<!--\n_syntax: sendOneWireReset(pin)_\n_name: sendOneWireReset_\n_returns: void_\n_returns_description: _\n_parameters: int pin_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nResets all devices on the bus.\n\n**Parameters:**\n\npin\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendOneWireSearch(pin)\n\n<!--\n_syntax: sendOneWireSearch(pin)_\n_name: sendOneWireSearch_\n_returns: void_\n_returns_description: _\n_parameters: int pin_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSearches for 1-wire devices on the bus.\n\n\n**Parameters:**\n\npin\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendOneWireSearch(type, pin)\n\n<!--\n_syntax: sendOneWireSearch(type, pin)_\n_name: sendOneWireSearch_\n_returns: void_\n_returns_description: _\n_parameters: char type, int pin_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendOneWireWrite(pin, devices, data)\n\n<!--\n_syntax: sendOneWireWrite(pin, devices, data)_\n_name: sendOneWireWrite_\n_returns: void_\n_returns_description: _\n_parameters: int pin, int devices, int data_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nWrites data to the bus to be received by the passed device.\n\nThe device should be obtained from a previous call to sendOneWireSearch. ConfigurableFirmata will issue the 1-wire select command internally.\n\n**Parameters:**\n\npin\n\ndevice\n\ndata\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendOneWireWriteAndRead(pin, devices, data, numBytesToRead)\n\n<!--\n_syntax: sendOneWireWriteAndRead(pin, devices, data, numBytesToRead)_\n_name: sendOneWireWriteAndRead_\n_returns: void_\n_returns_description: _\n_parameters: int pin, int devices, int data, int numBytesToRead_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSends the passed data to the passed device on the bus, reads the specified number of bytes.\n\nConfigurableFirmata will issue the 1-wire select command internally.\n\n**Parameters:**\n\npin\n\ndevice\n\ndata\n\nnumBytesToRead\n\ncallback\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendPinCapabilityRequest()\n\n<!--\n_syntax: sendPinCapabilityRequest()_\n_name: sendPinCapabilityRequest_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendPinCofigurationRequest()\n\n<!--\n_syntax: sendPinCofigurationRequest()_\n_name: sendPinCofigurationRequest_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendPinStateQuery(pin)\n\n<!--\n_syntax: sendPinStateQuery(pin)_\n_name: sendPinStateQuery_\n_returns: void_\n_returns_description: _\n_parameters: int pin_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendProtocolVersionRequest()\n\n<!--\n_syntax: sendProtocolVersionRequest()_\n_name: sendProtocolVersionRequest_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendPwm(pin, value, force = false)\n\n<!--\n_syntax: sendPwm(pin, value, force = false)_\n_name: sendPwm_\n_returns: void_\n_returns_description: _\n_parameters: int pin, int value, bool force=false_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nOn the Uno this will work on pins: 3, 5, 6, 9, 10 and 11 value: 0 (always off) to 255 (always on). the pins mode has to be set to ARD_PWM\nTODO check if the PWM bug still is there causing frequent digital port reporting...\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendReset()\n\n<!--\n_syntax: sendReset()_\n_name: sendReset_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis will cause your Arduino to reset and boot into the program again.\n\n\n\n\n\n_description: _\n\nThis will cause your Arduino to reset and boot into the program again.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendSerialConfig(portID, baud, rxPin, txPin)\n\n<!--\n_syntax: sendSerialConfig(portID, baud, rxPin, txPin)_\n_name: sendSerialConfig_\n_returns: void_\n_returns_description: _\n_parameters: Firmata_Serial_Ports portID, int baud, int rxPin, int txPin_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAsks the Arduino to configure a hardware or serial port.\n\n\n**Parameters:**\n\nportID The serial port to use (HW_SERIAL1, HW_SERIAL2, HW_SERIAL3, SW_SERIAL0, SW_SERIAL1, SW_SERIAL2, SW_SERIAL3)\n\nbaud  The baud rate of the serial port\n\nrxPin [SW Serial only] The RX pin of the SoftwareSerial instance\n\ntxPin [SW Serial only] The TX pin of the SoftwareSerial instance\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendServo(pin, value, force = false)\n\n<!--\n_syntax: sendServo(pin, value, force = false)_\n_name: sendServo_\n_returns: void_\n_returns_description: _\n_parameters: int pin, int value, bool force=false_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\nSend a value to a servo.\n\nA servo has to be atached to the pin prior\n\n**Parameters:**\n\npin 9 or 10\n\nvalue The value to send\n\n\n\n\n\n_description: _\n\nOn the Arduino Uno pin: 9, 10\nthe pin has to have a servo attached for this to work.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendServoAttach(pin, minPulse = 544, maxPulse = 2400)\n\n<!--\n_syntax: sendServoAttach(pin, minPulse = 544, maxPulse = 2400)_\n_name: sendServoAttach_\n_returns: void_\n_returns_description: _\n_parameters: int pin, int minPulse=544, int maxPulse=2400_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n**Parameters:**\n\nangle parameter DEPRECATED as of Firmata 2.2\n\n\n\n\n\n_description: _\n\nOn the Arduino Uno pin: 9, 10 attaches a servo to a pin\nangle parameter DEPRECATED as of Firmata 2.2\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendStepper2Wire(dirPin, stepPin, stepsPerRev = 200)\n\n<!--\n_syntax: sendStepper2Wire(dirPin, stepPin, stepsPerRev = 200)_\n_name: sendStepper2Wire_\n_returns: void_\n_returns_description: _\n_parameters: int dirPin, int stepPin, int stepsPerRev=200_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n-- stepper\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendStepper4Wire(pin1, pin2, pin3, pin4, stepsPerRev = 200)\n\n<!--\n_syntax: sendStepper4Wire(pin1, pin2, pin3, pin4, stepsPerRev = 200)_\n_name: sendStepper4Wire_\n_returns: void_\n_returns_description: _\n_parameters: int pin1, int pin2, int pin3, int pin4, int stepsPerRev=200_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nthe pins has to have a stepper attached\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendStepperMove(stepperID, direction, steps, speed = 0, acceleration, deceleration)\n\n<!--\n_syntax: sendStepperMove(stepperID, direction, steps, speed = 0, acceleration, deceleration)_\n_name: sendStepperMove_\n_returns: void_\n_returns_description: _\n_parameters: int stepperID, int direction, int steps, int speed=0, float acceleration, float deceleration_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nthe pins has to have a stepper attached\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendString(str)\n\n<!--\n_syntax: sendString(str)_\n_name: sendString_\n_returns: void_\n_returns_description: _\n_parameters: string str_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSend a string to the Arduino\n\\note Firmata can not handle strings longer than 12 characters.\n\n\n\n\n\n_description: _\n\nfirmata can not handle strings longer than 12 characters.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendSysEx(command, data)\n\n<!--\n_syntax: sendSysEx(command, data)_\n_name: sendSysEx_\n_returns: void_\n_returns_description: _\n_parameters: int command, int data_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendSysExBegin()\n\n<!--\n_syntax: sendSysExBegin()_\n_name: sendSysExBegin_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\nSends the `FIRMATA_START_SYSEX` command\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendSysExEnd()\n\n<!--\n_syntax: sendSysExEnd()_\n_name: sendSysExEnd_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\nSends the `FIRMATA_END_SYSEX` command\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sendValueAsTwo7bitBytes(value)\n\n<!--\n_syntax: sendValueAsTwo7bitBytes(value)_\n_name: sendValueAsTwo7bitBytes_\n_returns: void_\n_returns_description: _\n_parameters: int value_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\nSend value as two 7 bit bytes.\n\nSends a value as two 7-bit bytes without wrapping it in a firmata\nmessage.  Values in the range 0 - 16384 will be sent as two bytes\nwithin the 0-127 data range.\n\n\n**Parameters:**\n\nvalue The value to send.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void serialClose(portID)\n\n<!--\n_syntax: serialClose(portID)_\n_name: serialClose_\n_returns: void_\n_returns_description: _\n_parameters: Firmata_Serial_Ports portID_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Close the specified serial port.\n\n\n**Parameters:**\n\nportId The serial port to close.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void serialFlush(portID)\n\n<!--\n_syntax: serialFlush(portID)_\n_name: serialFlush_\n_returns: void_\n_returns_description: _\n_parameters: Firmata_Serial_Ports portID_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFlush the specified serial port.\n\nFor hardware serial, this waits for the transmission of outgoing serial data to complete.For software serial, this removed any buffered incoming serial data.\n\n**Parameters:**\n\nportId The serial port to listen on.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void serialListen(portID)\n\n<!--\n_syntax: serialListen(portID)_\n_name: serialListen_\n_returns: void_\n_returns_description: _\n_parameters: Firmata_Serial_Ports portID_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFor SoftwareSerial only. Only a single SoftwareSerial instance can read data at a time.\n\nCall this method to set this port to be the reading port in the case there are multiple SoftwareSerial instances.\n\n**Parameters:**\n\nportId The serial port to flush.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void serialRead(port, maxBytesToRead)\n\n<!--\n_syntax: serialRead(port, maxBytesToRead)_\n_name: serialRead_\n_returns: void_\n_returns_description: _\n_parameters: Firmata_Serial_Ports port, int maxBytesToRead_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Start continuous reading of the specified serial port.\n\nThe port is checked for data each iteration of the main Arduino loop.\n\n**Parameters:**\n\nportId The serial port to start reading continuously.\n\nmaxBytesToRead [Optional] The maximum number of bytes to read per iteration.\n\\note If there are less bytes in the buffer, the lesser number of bytes will be returned. A value of 0 indicates that all available bytes in the buffer should be read.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void serialStop(portID)\n\n<!--\n_syntax: serialStop(portID)_\n_name: serialStop_\n_returns: void_\n_returns_description: _\n_parameters: Firmata_Serial_Ports portID_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nStop continuous reading of the specified serial port.\n\nThis does not close the port, it stops reading it but keeps the port open.\n\n**Parameters:**\n\nportId The serial port to stop reading.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void serialWrite(port, *bytes, numOfBytes)\n\n<!--\n_syntax: serialWrite(port, *bytes, numOfBytes)_\n_name: serialWrite_\n_returns: void_\n_returns_description: _\n_parameters: Firmata_Serial_Ports port, unsigned char *bytes, int numOfBytes_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nWrite an array of bytes to the specified serial port.\n\n\n**Parameters:**\n\nportId The serial port to write to.\n\nbytes An array of bytes to write to the serial port.\n\nnumOfBytes length of the array of bytes.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setAnalogHistoryLength(length)\n\n<!--\n_syntax: setAnalogHistoryLength(length)_\n_name: setAnalogHistoryLength_\n_returns: void_\n_returns_description: _\n_parameters: int length_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setDigitalHistoryLength(length)\n\n<!--\n_syntax: setDigitalHistoryLength(length)_\n_name: setDigitalHistoryLength_\n_returns: void_\n_returns_description: _\n_parameters: int length_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setStringHistoryLength(length)\n\n<!--\n_syntax: setStringHistoryLength(length)_\n_name: setStringHistoryLength_\n_returns: void_\n_returns_description: _\n_parameters: int length_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setSysExHistoryLength(nSysEx)\n\n<!--\n_syntax: setSysExHistoryLength(nSysEx)_\n_name: setSysExHistoryLength_\n_returns: void_\n_returns_description: _\n_parameters: int nSysEx_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setUseDelay(bDelay)\n\n<!--\n_syntax: setUseDelay(bDelay)_\n_name: setUseDelay_\n_returns: void_\n_returns_description: _\n_parameters: bool bDelay_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void update()\n\n<!--\n_syntax: update()_\n_name: update_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nPolls data from the serial port, this has to be called periodically\n\n\n\n\n\n_description: _\n\npolls data from the serial port, this has to be called periodically\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofArduino()\n\n<!--\n_syntax: ~ofArduino()_\n_name: ~ofArduino_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###ofEvent< const int > EAnalogPinChanged\n\n<!--\n_name: EAnalogPinChanged_\n_type: ofEvent< const int >_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: True_\n-->\n\n_inlined_description: _\n\nTriggered when an analog pin changes value, the pin that\nchanged is passed as an argument.\n\n\n\n\n\n_description: _\n\ntriggered when an analog pin changes value, the pin that changed is passed as an argument\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofEvent< const int > EDigitalPinChanged\n\n<!--\n_name: EDigitalPinChanged_\n_type: ofEvent< const int >_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: True_\n-->\n\n_inlined_description: _\n\nTriggered when a digital pin changes value, the pin that\nchanged is passed as an argument.\n\n\n\n\n\n_description: _\n\ntriggered when a digital pin changes value, the pin that changed is passed as an argument\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int EEncoderDataReceived\n\n<!--\n_name: EEncoderDataReceived_\n_type: int_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\ntriggered when the encoder returns data after a read request\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofEvent< const int > EFirmwareVersionReceived\n\n<!--\n_name: EFirmwareVersionReceived_\n_type: ofEvent< const int >_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: True_\n-->\n\n_inlined_description: _\n\nTriggered when a firmware version is received, the major version\nis passed as an argument.\n\n\n\n\n\n_description: _\n\ntriggered when a firmware version is received, the major version is passed as an argument\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int EI2CDataRecieved\n\n<!--\n_name: EI2CDataRecieved_\n_type: int_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\ntriggered when the I2C bus returns data after a read request\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofEvent< const int > EInitialized\n\n<!--\n_name: EInitialized_\n_type: ofEvent< const int >_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: True_\n-->\n\n_inlined_description: _\n\nTriggered when the firmware version is received upon connect,\nthe major firmware version is passed as an argument. From this point\nit's safe to send to the Arduino.\n\n\n\n\n\n_description: _\n\ntriggered when the firmware version is received upon connect, the major firmware version is passed as an argument\nfrom this point it's safe to send to the Arduino.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int EPinStateResponseReceived\n\n<!--\n_name: EPinStateResponseReceived_\n_type: int_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ESerialDataReceived\n\n<!--\n_name: ESerialDataReceived_\n_type: int_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\ntriggered when a Serial message is received. Returns which\nport and its data\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int EStepperDataReceived\n\n<!--\n_name: EStepperDataReceived_\n_type: int_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\ntriggered when a stepper has finished rotating. Returns which\nstepper has complted its rotation\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofEvent< const string > EStringReceived\n\n<!--\n_name: EStringReceived_\n_type: ofEvent< const string >_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: True_\n-->\n\n_inlined_description: _\n\nTriggered when a string is received, the string is passed as an\nargument\n\n\n\n\n\n_description: _\n\ntriggered when a string is received, the string is passed as an argument\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofEvent< const vector< unsigned char > > ESysExReceived\n\n<!--\n_name: ESysExReceived_\n_type: ofEvent< const vector< unsigned char > >_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: True_\n-->\n\n_inlined_description: _\n\nTriggered when a SysEx message that isn't in the extended\ncommand set is received, the SysEx message is passed as an argument\n\n\n\n\n\n_description: _\n\ntriggered when a SysEx message that isn't in the extended command set is received, the SysEx message is passed as an argument\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###list< int > _analogHistory\n\n<!--\n_name: _analogHistory_\n_type: list< int >_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int _analogHistoryLength\n\n<!--\n_name: _analogHistoryLength_\n_type: int_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int _analogPinReporting\n\n<!--\n_name: _analogPinReporting_\n_type: int_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###list< int > _digitalHistory\n\n<!--\n_name: _digitalHistory_\n_type: list< int >_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int _digitalHistoryLength\n\n<!--\n_name: _digitalHistoryLength_\n_type: int_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int _digitalPinMode\n\n<!--\n_name: _digitalPinMode_\n_type: int_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int _digitalPinReporting\n\n<!--\n_name: _digitalPinReporting_\n_type: int_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int _digitalPinValue\n\n<!--\n_name: _digitalPinValue_\n_type: int_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int _digitalPortReporting\n\n<!--\n_name: _digitalPortReporting_\n_type: int_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int _digitalPortValue\n\n<!--\n_name: _digitalPortValue_\n_type: int_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int _encoderID\n\n<!--\n_name: _encoderID_\n_type: int_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int _executeMultiByteCommand\n\n<!--\n_name: _executeMultiByteCommand_\n_type: int_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n< Indicate Firmata command to execute.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string _firmwareName\n\n<!--\n_name: _firmwareName_\n_type: string_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int _firstAnalogPin\n\n<!--\n_name: _firstAnalogPin_\n_type: int_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool _i2cConfigured\n\n<!--\n_name: _i2cConfigured_\n_type: bool_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool _initialized\n\n<!--\n_name: _initialized_\n_type: bool_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int _majorFirmwareVersion\n\n<!--\n_name: _majorFirmwareVersion_\n_type: int_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int _minorFirmwareVersion\n\n<!--\n_name: _minorFirmwareVersion_\n_type: int_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int _multiByteChannel\n\n<!--\n_name: _multiByteChannel_\n_type: int_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n< Indicates which pin the data came from.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int _numEncoders\n\n<!--\n_name: _numEncoders_\n_type: int_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int _numSteppers\n\n<!--\n_name: _numSteppers_\n_type: int_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofSerial _port\n\n<!--\n_name: _port_\n_type: ofSerial_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int _portStatus\n\n<!--\n_name: _portStatus_\n_type: int_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int _servoValue\n\n<!--\n_name: _servoValue_\n_type: int_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###unsigned char _storedInputData\n\n<!--\n_name: _storedInputData_\n_type: unsigned char_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###list< string > _stringHistory\n\n<!--\n_name: _stringHistory_\n_type: list< string >_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int _stringHistoryLength\n\n<!--\n_name: _stringHistoryLength_\n_type: int_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< unsigned char > _sysExData\n\n<!--\n_name: _sysExData_\n_type: vector< unsigned char >_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###list< vector< unsigned char > > _sysExHistory\n\n<!--\n_name: _sysExHistory_\n_type: list< vector< unsigned char > >_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int _sysExHistoryLength\n\n<!--\n_name: _sysExHistoryLength_\n_type: int_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int _totalAnalogPins\n\n<!--\n_name: _totalAnalogPins_\n_type: int_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\< Indicate the total number of digital pins of the board in use.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int _totalDigitalPins\n\n<!--\n_name: _totalDigitalPins_\n_type: int_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int _waitForData\n\n<!--\n_name: _waitForData_\n_type: int_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int analogPinMap\n\n<!--\n_name: analogPinMap_\n_type: int_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bUseDelay\n\n<!--\n_name: bUseDelay_\n_type: bool_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float connectTime\n\n<!--\n_name: connectTime_\n_type: float_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n< This represents the (running) time of establishing a serial connection.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool connected\n\n<!--\n_name: connected_\n_type: bool_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n< This yields true if a serial connection to Arduino exists.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool firmataAnalogSupported\n\n<!--\n_name: firmataAnalogSupported_\n_type: bool_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool firmataEncoderSupported\n\n<!--\n_name: firmataEncoderSupported_\n_type: bool_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool firmataI2cSupported\n\n<!--\n_name: firmataI2cSupported_\n_type: bool_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool firmataInputSupported\n\n<!--\n_name: firmataInputSupported_\n_type: bool_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool firmataOnewireSupported\n\n<!--\n_name: firmataOnewireSupported_\n_type: bool_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool firmataOutputSupported\n\n<!--\n_name: firmataOutputSupported_\n_type: bool_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool firmataPwmSupported\n\n<!--\n_name: firmataPwmSupported_\n_type: bool_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool firmataSerialSupported\n\n<!--\n_name: firmataSerialSupported_\n_type: bool_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool firmataServoSupported\n\n<!--\n_name: firmataServoSupported_\n_type: bool_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool firmataStepperSupported\n\n<!--\n_name: firmataStepperSupported_\n_type: bool_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int pinCapabilities\n\n<!--\n_name: pinCapabilities_\n_type: int_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}